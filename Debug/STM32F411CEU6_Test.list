
STM32F411CEU6_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007f48  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  080080e8  080080e8  000180e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800818c  0800818c  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800818c  0800818c  0001818c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008194  08008194  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008194  08008194  00018194  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008198  08008198  00018198  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800819c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001b98  200001e4  08008380  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001d7c  08008380  00021d7c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000170e9  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003440  00000000  00000000  000372fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e28  00000000  00000000  0003a740  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ce8  00000000  00000000  0003b568  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019019  00000000  00000000  0003c250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000131f3  00000000  00000000  00055269  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a70c  00000000  00000000  0006845c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f2b68  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003d4c  00000000  00000000  000f2bbc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e4 	.word	0x200001e4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080080d0 	.word	0x080080d0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e8 	.word	0x200001e8
 80001dc:	080080d0 	.word	0x080080d0

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96e 	b.w	8000584 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468c      	mov	ip, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	f040 8083 	bne.w	80003d6 <__udivmoddi4+0x116>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d947      	bls.n	8000366 <__udivmoddi4+0xa6>
 80002d6:	fab2 f282 	clz	r2, r2
 80002da:	b142      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002dc:	f1c2 0020 	rsb	r0, r2, #32
 80002e0:	fa24 f000 	lsr.w	r0, r4, r0
 80002e4:	4091      	lsls	r1, r2
 80002e6:	4097      	lsls	r7, r2
 80002e8:	ea40 0c01 	orr.w	ip, r0, r1
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbbc f6f8 	udiv	r6, ip, r8
 80002f8:	fa1f fe87 	uxth.w	lr, r7
 80002fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb06 f10e 	mul.w	r1, r6, lr
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18fb      	adds	r3, r7, r3
 800030e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000312:	f080 8119 	bcs.w	8000548 <__udivmoddi4+0x288>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8116 	bls.w	8000548 <__udivmoddi4+0x288>
 800031c:	3e02      	subs	r6, #2
 800031e:	443b      	add	r3, r7
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0f8 	udiv	r0, r3, r8
 8000328:	fb08 3310 	mls	r3, r8, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fe0e 	mul.w	lr, r0, lr
 8000334:	45a6      	cmp	lr, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	193c      	adds	r4, r7, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295
 800033e:	f080 8105 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000342:	45a6      	cmp	lr, r4
 8000344:	f240 8102 	bls.w	800054c <__udivmoddi4+0x28c>
 8000348:	3802      	subs	r0, #2
 800034a:	443c      	add	r4, r7
 800034c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000350:	eba4 040e 	sub.w	r4, r4, lr
 8000354:	2600      	movs	r6, #0
 8000356:	b11d      	cbz	r5, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c5 4300 	strd	r4, r3, [r5]
 8000360:	4631      	mov	r1, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	b902      	cbnz	r2, 800036a <__udivmoddi4+0xaa>
 8000368:	deff      	udf	#255	; 0xff
 800036a:	fab2 f282 	clz	r2, r2
 800036e:	2a00      	cmp	r2, #0
 8000370:	d150      	bne.n	8000414 <__udivmoddi4+0x154>
 8000372:	1bcb      	subs	r3, r1, r7
 8000374:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	2601      	movs	r6, #1
 800037e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000382:	0c21      	lsrs	r1, r4, #16
 8000384:	fb0e 331c 	mls	r3, lr, ip, r3
 8000388:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800038c:	fb08 f30c 	mul.w	r3, r8, ip
 8000390:	428b      	cmp	r3, r1
 8000392:	d907      	bls.n	80003a4 <__udivmoddi4+0xe4>
 8000394:	1879      	adds	r1, r7, r1
 8000396:	f10c 30ff 	add.w	r0, ip, #4294967295
 800039a:	d202      	bcs.n	80003a2 <__udivmoddi4+0xe2>
 800039c:	428b      	cmp	r3, r1
 800039e:	f200 80e9 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003a2:	4684      	mov	ip, r0
 80003a4:	1ac9      	subs	r1, r1, r3
 80003a6:	b2a3      	uxth	r3, r4
 80003a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80003b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003b4:	fb08 f800 	mul.w	r8, r8, r0
 80003b8:	45a0      	cmp	r8, r4
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x10c>
 80003bc:	193c      	adds	r4, r7, r4
 80003be:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x10a>
 80003c4:	45a0      	cmp	r8, r4
 80003c6:	f200 80d9 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003ca:	4618      	mov	r0, r3
 80003cc:	eba4 0408 	sub.w	r4, r4, r8
 80003d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003d4:	e7bf      	b.n	8000356 <__udivmoddi4+0x96>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d909      	bls.n	80003ee <__udivmoddi4+0x12e>
 80003da:	2d00      	cmp	r5, #0
 80003dc:	f000 80b1 	beq.w	8000542 <__udivmoddi4+0x282>
 80003e0:	2600      	movs	r6, #0
 80003e2:	e9c5 0100 	strd	r0, r1, [r5]
 80003e6:	4630      	mov	r0, r6
 80003e8:	4631      	mov	r1, r6
 80003ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ee:	fab3 f683 	clz	r6, r3
 80003f2:	2e00      	cmp	r6, #0
 80003f4:	d14a      	bne.n	800048c <__udivmoddi4+0x1cc>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d302      	bcc.n	8000400 <__udivmoddi4+0x140>
 80003fa:	4282      	cmp	r2, r0
 80003fc:	f200 80b8 	bhi.w	8000570 <__udivmoddi4+0x2b0>
 8000400:	1a84      	subs	r4, r0, r2
 8000402:	eb61 0103 	sbc.w	r1, r1, r3
 8000406:	2001      	movs	r0, #1
 8000408:	468c      	mov	ip, r1
 800040a:	2d00      	cmp	r5, #0
 800040c:	d0a8      	beq.n	8000360 <__udivmoddi4+0xa0>
 800040e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000412:	e7a5      	b.n	8000360 <__udivmoddi4+0xa0>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f603 	lsr.w	r6, r0, r3
 800041c:	4097      	lsls	r7, r2
 800041e:	fa01 f002 	lsl.w	r0, r1, r2
 8000422:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000426:	40d9      	lsrs	r1, r3
 8000428:	4330      	orrs	r0, r6
 800042a:	0c03      	lsrs	r3, r0, #16
 800042c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000430:	fa1f f887 	uxth.w	r8, r7
 8000434:	fb0e 1116 	mls	r1, lr, r6, r1
 8000438:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043c:	fb06 f108 	mul.w	r1, r6, r8
 8000440:	4299      	cmp	r1, r3
 8000442:	fa04 f402 	lsl.w	r4, r4, r2
 8000446:	d909      	bls.n	800045c <__udivmoddi4+0x19c>
 8000448:	18fb      	adds	r3, r7, r3
 800044a:	f106 3cff 	add.w	ip, r6, #4294967295
 800044e:	f080 808d 	bcs.w	800056c <__udivmoddi4+0x2ac>
 8000452:	4299      	cmp	r1, r3
 8000454:	f240 808a 	bls.w	800056c <__udivmoddi4+0x2ac>
 8000458:	3e02      	subs	r6, #2
 800045a:	443b      	add	r3, r7
 800045c:	1a5b      	subs	r3, r3, r1
 800045e:	b281      	uxth	r1, r0
 8000460:	fbb3 f0fe 	udiv	r0, r3, lr
 8000464:	fb0e 3310 	mls	r3, lr, r0, r3
 8000468:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046c:	fb00 f308 	mul.w	r3, r0, r8
 8000470:	428b      	cmp	r3, r1
 8000472:	d907      	bls.n	8000484 <__udivmoddi4+0x1c4>
 8000474:	1879      	adds	r1, r7, r1
 8000476:	f100 3cff 	add.w	ip, r0, #4294967295
 800047a:	d273      	bcs.n	8000564 <__udivmoddi4+0x2a4>
 800047c:	428b      	cmp	r3, r1
 800047e:	d971      	bls.n	8000564 <__udivmoddi4+0x2a4>
 8000480:	3802      	subs	r0, #2
 8000482:	4439      	add	r1, r7
 8000484:	1acb      	subs	r3, r1, r3
 8000486:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800048a:	e778      	b.n	800037e <__udivmoddi4+0xbe>
 800048c:	f1c6 0c20 	rsb	ip, r6, #32
 8000490:	fa03 f406 	lsl.w	r4, r3, r6
 8000494:	fa22 f30c 	lsr.w	r3, r2, ip
 8000498:	431c      	orrs	r4, r3
 800049a:	fa20 f70c 	lsr.w	r7, r0, ip
 800049e:	fa01 f306 	lsl.w	r3, r1, r6
 80004a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004aa:	431f      	orrs	r7, r3
 80004ac:	0c3b      	lsrs	r3, r7, #16
 80004ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80004b2:	fa1f f884 	uxth.w	r8, r4
 80004b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004be:	fb09 fa08 	mul.w	sl, r9, r8
 80004c2:	458a      	cmp	sl, r1
 80004c4:	fa02 f206 	lsl.w	r2, r2, r6
 80004c8:	fa00 f306 	lsl.w	r3, r0, r6
 80004cc:	d908      	bls.n	80004e0 <__udivmoddi4+0x220>
 80004ce:	1861      	adds	r1, r4, r1
 80004d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004d4:	d248      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 80004d6:	458a      	cmp	sl, r1
 80004d8:	d946      	bls.n	8000568 <__udivmoddi4+0x2a8>
 80004da:	f1a9 0902 	sub.w	r9, r9, #2
 80004de:	4421      	add	r1, r4
 80004e0:	eba1 010a 	sub.w	r1, r1, sl
 80004e4:	b2bf      	uxth	r7, r7
 80004e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004f2:	fb00 f808 	mul.w	r8, r0, r8
 80004f6:	45b8      	cmp	r8, r7
 80004f8:	d907      	bls.n	800050a <__udivmoddi4+0x24a>
 80004fa:	19e7      	adds	r7, r4, r7
 80004fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000500:	d22e      	bcs.n	8000560 <__udivmoddi4+0x2a0>
 8000502:	45b8      	cmp	r8, r7
 8000504:	d92c      	bls.n	8000560 <__udivmoddi4+0x2a0>
 8000506:	3802      	subs	r0, #2
 8000508:	4427      	add	r7, r4
 800050a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800050e:	eba7 0708 	sub.w	r7, r7, r8
 8000512:	fba0 8902 	umull	r8, r9, r0, r2
 8000516:	454f      	cmp	r7, r9
 8000518:	46c6      	mov	lr, r8
 800051a:	4649      	mov	r1, r9
 800051c:	d31a      	bcc.n	8000554 <__udivmoddi4+0x294>
 800051e:	d017      	beq.n	8000550 <__udivmoddi4+0x290>
 8000520:	b15d      	cbz	r5, 800053a <__udivmoddi4+0x27a>
 8000522:	ebb3 020e 	subs.w	r2, r3, lr
 8000526:	eb67 0701 	sbc.w	r7, r7, r1
 800052a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800052e:	40f2      	lsrs	r2, r6
 8000530:	ea4c 0202 	orr.w	r2, ip, r2
 8000534:	40f7      	lsrs	r7, r6
 8000536:	e9c5 2700 	strd	r2, r7, [r5]
 800053a:	2600      	movs	r6, #0
 800053c:	4631      	mov	r1, r6
 800053e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e70b      	b.n	8000360 <__udivmoddi4+0xa0>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e9      	b.n	8000320 <__udivmoddi4+0x60>
 800054c:	4618      	mov	r0, r3
 800054e:	e6fd      	b.n	800034c <__udivmoddi4+0x8c>
 8000550:	4543      	cmp	r3, r8
 8000552:	d2e5      	bcs.n	8000520 <__udivmoddi4+0x260>
 8000554:	ebb8 0e02 	subs.w	lr, r8, r2
 8000558:	eb69 0104 	sbc.w	r1, r9, r4
 800055c:	3801      	subs	r0, #1
 800055e:	e7df      	b.n	8000520 <__udivmoddi4+0x260>
 8000560:	4608      	mov	r0, r1
 8000562:	e7d2      	b.n	800050a <__udivmoddi4+0x24a>
 8000564:	4660      	mov	r0, ip
 8000566:	e78d      	b.n	8000484 <__udivmoddi4+0x1c4>
 8000568:	4681      	mov	r9, r0
 800056a:	e7b9      	b.n	80004e0 <__udivmoddi4+0x220>
 800056c:	4666      	mov	r6, ip
 800056e:	e775      	b.n	800045c <__udivmoddi4+0x19c>
 8000570:	4630      	mov	r0, r6
 8000572:	e74a      	b.n	800040a <__udivmoddi4+0x14a>
 8000574:	f1ac 0c02 	sub.w	ip, ip, #2
 8000578:	4439      	add	r1, r7
 800057a:	e713      	b.n	80003a4 <__udivmoddi4+0xe4>
 800057c:	3802      	subs	r0, #2
 800057e:	443c      	add	r4, r7
 8000580:	e724      	b.n	80003cc <__udivmoddi4+0x10c>
 8000582:	bf00      	nop

08000584 <__aeabi_idiv0>:
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop

08000588 <AHT20_Read>:
 */

#include "AHT20.h"


HAL_StatusTypeDef AHT20_Read( AHT20 *dev, uint8_t *data, uint8_t length ) {
 8000588:	b580      	push	{r7, lr}
 800058a:	b086      	sub	sp, #24
 800058c:	af02      	add	r7, sp, #8
 800058e:	60f8      	str	r0, [r7, #12]
 8000590:	60b9      	str	r1, [r7, #8]
 8000592:	4613      	mov	r3, r2
 8000594:	71fb      	strb	r3, [r7, #7]

	return HAL_I2C_Master_Receive(dev->i2cHandle, AHT20_I2C_ADD, data, length, HAL_MAX_DELAY );
 8000596:	68fb      	ldr	r3, [r7, #12]
 8000598:	6818      	ldr	r0, [r3, #0]
 800059a:	79fb      	ldrb	r3, [r7, #7]
 800059c:	b29b      	uxth	r3, r3
 800059e:	f04f 32ff 	mov.w	r2, #4294967295
 80005a2:	9200      	str	r2, [sp, #0]
 80005a4:	68ba      	ldr	r2, [r7, #8]
 80005a6:	2170      	movs	r1, #112	; 0x70
 80005a8:	f001 f90e 	bl	80017c8 <HAL_I2C_Master_Receive>
 80005ac:	4603      	mov	r3, r0

}
 80005ae:	4618      	mov	r0, r3
 80005b0:	3710      	adds	r7, #16
 80005b2:	46bd      	mov	sp, r7
 80005b4:	bd80      	pop	{r7, pc}

080005b6 <AHT20_Write>:

HAL_StatusTypeDef AHT20_Write( AHT20 *dev, uint8_t *data, uint8_t length ) {
 80005b6:	b580      	push	{r7, lr}
 80005b8:	b086      	sub	sp, #24
 80005ba:	af02      	add	r7, sp, #8
 80005bc:	60f8      	str	r0, [r7, #12]
 80005be:	60b9      	str	r1, [r7, #8]
 80005c0:	4613      	mov	r3, r2
 80005c2:	71fb      	strb	r3, [r7, #7]

	return HAL_I2C_Master_Transmit(dev->i2cHandle, AHT20_I2C_ADD, data, length, HAL_MAX_DELAY );
 80005c4:	68fb      	ldr	r3, [r7, #12]
 80005c6:	6818      	ldr	r0, [r3, #0]
 80005c8:	79fb      	ldrb	r3, [r7, #7]
 80005ca:	b29b      	uxth	r3, r3
 80005cc:	f04f 32ff 	mov.w	r2, #4294967295
 80005d0:	9200      	str	r2, [sp, #0]
 80005d2:	68ba      	ldr	r2, [r7, #8]
 80005d4:	2170      	movs	r1, #112	; 0x70
 80005d6:	f000 fff9 	bl	80015cc <HAL_I2C_Master_Transmit>
 80005da:	4603      	mov	r3, r0

}
 80005dc:	4618      	mov	r0, r3
 80005de:	3710      	adds	r7, #16
 80005e0:	46bd      	mov	sp, r7
 80005e2:	bd80      	pop	{r7, pc}

080005e4 <AHT20_Init>:

	return 0;

}

uint8_t AHT20_Init( AHT20 *dev, I2C_HandleTypeDef *i2cHandle ) {
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b084      	sub	sp, #16
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
 80005ec:	6039      	str	r1, [r7, #0]

	dev->i2cHandle		= i2cHandle;
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	683a      	ldr	r2, [r7, #0]
 80005f2:	601a      	str	r2, [r3, #0]

	dev->humPercent		= 0.0f;
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	f04f 0200 	mov.w	r2, #0
 80005fa:	605a      	str	r2, [r3, #4]
	dev->tempC			= 0.0f;
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	f04f 0200 	mov.w	r2, #0
 8000602:	609a      	str	r2, [r3, #8]

	uint8_t errNum = 0;
 8000604:	2300      	movs	r3, #0
 8000606:	73fb      	strb	r3, [r7, #15]
	/* Add errors to return */
	//errNum += ( status != HAL_OK );

	/* Initialize the sensor */
	uint8_t cmd[3];
	cmd[0] = 0xBE;
 8000608:	23be      	movs	r3, #190	; 0xbe
 800060a:	723b      	strb	r3, [r7, #8]
	cmd[1] = 0x08;
 800060c:	2308      	movs	r3, #8
 800060e:	727b      	strb	r3, [r7, #9]
	cmd[2] = 0x00;
 8000610:	2300      	movs	r3, #0
 8000612:	72bb      	strb	r3, [r7, #10]
	status = AHT20_Write( dev, cmd, 3 );
 8000614:	f107 0308 	add.w	r3, r7, #8
 8000618:	2203      	movs	r2, #3
 800061a:	4619      	mov	r1, r3
 800061c:	6878      	ldr	r0, [r7, #4]
 800061e:	f7ff ffca 	bl	80005b6 <AHT20_Write>
 8000622:	4603      	mov	r3, r0
 8000624:	73bb      	strb	r3, [r7, #14]

	/* Add errors to return */
	errNum += ( status != HAL_OK );
 8000626:	7bbb      	ldrb	r3, [r7, #14]
 8000628:	2b00      	cmp	r3, #0
 800062a:	bf14      	ite	ne
 800062c:	2301      	movne	r3, #1
 800062e:	2300      	moveq	r3, #0
 8000630:	b2db      	uxtb	r3, r3
 8000632:	461a      	mov	r2, r3
 8000634:	7bfb      	ldrb	r3, [r7, #15]
 8000636:	4413      	add	r3, r2
 8000638:	73fb      	strb	r3, [r7, #15]

	/* Return error number, 0 if successful */
	return errNum;
 800063a:	7bfb      	ldrb	r3, [r7, #15]

}
 800063c:	4618      	mov	r0, r3
 800063e:	3710      	adds	r7, #16
 8000640:	46bd      	mov	sp, r7
 8000642:	bd80      	pop	{r7, pc}

08000644 <AHT20_ReadTempHum_Data>:

HAL_StatusTypeDef AHT20_ReadTempHum_Data( AHT20 *dev ) {
 8000644:	b580      	push	{r7, lr}
 8000646:	b088      	sub	sp, #32
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
	/* Get Status (if initialized correctly) */


	/* Send Trigger Measurement Command */
	uint8_t cmd[3];
	cmd[0] = AHT20_TRIG_MEASURE;
 800064c:	23ac      	movs	r3, #172	; 0xac
 800064e:	733b      	strb	r3, [r7, #12]
	cmd[1] = 0x33;
 8000650:	2333      	movs	r3, #51	; 0x33
 8000652:	737b      	strb	r3, [r7, #13]
	cmd[2] = 0x00;
 8000654:	2300      	movs	r3, #0
 8000656:	73bb      	strb	r3, [r7, #14]
	AHT20_Write( dev, cmd, 3 );
 8000658:	f107 030c 	add.w	r3, r7, #12
 800065c:	2203      	movs	r2, #3
 800065e:	4619      	mov	r1, r3
 8000660:	6878      	ldr	r0, [r7, #4]
 8000662:	f7ff ffa8 	bl	80005b6 <AHT20_Write>

	/* Wait */
	HAL_Delay(100);
 8000666:	2064      	movs	r0, #100	; 0x64
 8000668:	f000 fb66 	bl	8000d38 <HAL_Delay>
	/* Read Sensor Data */
	AHT20_Read( dev, devData, 6 );
 800066c:	f107 0310 	add.w	r3, r7, #16
 8000670:	2206      	movs	r2, #6
 8000672:	4619      	mov	r1, r3
 8000674:	6878      	ldr	r0, [r7, #4]
 8000676:	f7ff ff87 	bl	8000588 <AHT20_Read>

	/* devData = State, Hum1, Hum2, Hum3, Temp1, Temp2 */

	/* Humidity Calculations */
	humData = devData[1];
 800067a:	7c7b      	ldrb	r3, [r7, #17]
 800067c:	61fb      	str	r3, [r7, #28]
	humData = humData << 8;
 800067e:	69fb      	ldr	r3, [r7, #28]
 8000680:	021b      	lsls	r3, r3, #8
 8000682:	61fb      	str	r3, [r7, #28]
	humData |= devData[2];
 8000684:	7cbb      	ldrb	r3, [r7, #18]
 8000686:	461a      	mov	r2, r3
 8000688:	69fb      	ldr	r3, [r7, #28]
 800068a:	4313      	orrs	r3, r2
 800068c:	61fb      	str	r3, [r7, #28]
	humData = humData << 4;
 800068e:	69fb      	ldr	r3, [r7, #28]
 8000690:	011b      	lsls	r3, r3, #4
 8000692:	61fb      	str	r3, [r7, #28]
	humData |= ( devData[3] >> 4 );
 8000694:	7cfb      	ldrb	r3, [r7, #19]
 8000696:	091b      	lsrs	r3, r3, #4
 8000698:	b2db      	uxtb	r3, r3
 800069a:	461a      	mov	r2, r3
 800069c:	69fb      	ldr	r3, [r7, #28]
 800069e:	4313      	orrs	r3, r2
 80006a0:	61fb      	str	r3, [r7, #28]
	dev->humPercent = ( (float) humData * 100 ) / 0x100000;
 80006a2:	69fb      	ldr	r3, [r7, #28]
 80006a4:	ee07 3a90 	vmov	s15, r3
 80006a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80006ac:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 800071c <AHT20_ReadTempHum_Data+0xd8>
 80006b0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80006b4:	eddf 6a1a 	vldr	s13, [pc, #104]	; 8000720 <AHT20_ReadTempHum_Data+0xdc>
 80006b8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	edc3 7a01 	vstr	s15, [r3, #4]

	/* Temperature Calculations */
	tempData = devData[3] & 0x0F;
 80006c2:	7cfb      	ldrb	r3, [r7, #19]
 80006c4:	f003 030f 	and.w	r3, r3, #15
 80006c8:	61bb      	str	r3, [r7, #24]
	tempData = tempData << 8;
 80006ca:	69bb      	ldr	r3, [r7, #24]
 80006cc:	021b      	lsls	r3, r3, #8
 80006ce:	61bb      	str	r3, [r7, #24]
	tempData |= devData[4];
 80006d0:	7d3b      	ldrb	r3, [r7, #20]
 80006d2:	461a      	mov	r2, r3
 80006d4:	69bb      	ldr	r3, [r7, #24]
 80006d6:	4313      	orrs	r3, r2
 80006d8:	61bb      	str	r3, [r7, #24]
	tempData = tempData << 8;
 80006da:	69bb      	ldr	r3, [r7, #24]
 80006dc:	021b      	lsls	r3, r3, #8
 80006de:	61bb      	str	r3, [r7, #24]
	tempData |= devData[5];
 80006e0:	7d7b      	ldrb	r3, [r7, #21]
 80006e2:	461a      	mov	r2, r3
 80006e4:	69bb      	ldr	r3, [r7, #24]
 80006e6:	4313      	orrs	r3, r2
 80006e8:	61bb      	str	r3, [r7, #24]
	dev->tempC = ( ( (float) tempData / 0x100000 ) * 200 ) - 50;
 80006ea:	69bb      	ldr	r3, [r7, #24]
 80006ec:	ee07 3a90 	vmov	s15, r3
 80006f0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80006f4:	eddf 6a0a 	vldr	s13, [pc, #40]	; 8000720 <AHT20_ReadTempHum_Data+0xdc>
 80006f8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80006fc:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8000724 <AHT20_ReadTempHum_Data+0xe0>
 8000700:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000704:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8000728 <AHT20_ReadTempHum_Data+0xe4>
 8000708:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	edc3 7a02 	vstr	s15, [r3, #8]

	return HAL_OK;
 8000712:	2300      	movs	r3, #0
}
 8000714:	4618      	mov	r0, r3
 8000716:	3720      	adds	r7, #32
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}
 800071c:	42c80000 	.word	0x42c80000
 8000720:	49800000 	.word	0x49800000
 8000724:	43480000 	.word	0x43480000
 8000728:	42480000 	.word	0x42480000

0800072c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b08a      	sub	sp, #40	; 0x28
 8000730:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000732:	f000 fa8f 	bl	8000c54 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000736:	f000 f831 	bl	800079c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800073a:	f000 f8c9 	bl	80008d0 <MX_GPIO_Init>
  MX_I2C1_Init();
 800073e:	f000 f899 	bl	8000874 <MX_I2C1_Init>
  MX_USB_DEVICE_Init();
 8000742:	f006 fb55 	bl	8006df0 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  AHT20_Init( &thSensor, &hi2c1 ); /* Initialize the AHT20 Sensor */
 8000746:	4912      	ldr	r1, [pc, #72]	; (8000790 <main+0x64>)
 8000748:	4812      	ldr	r0, [pc, #72]	; (8000794 <main+0x68>)
 800074a:	f7ff ff4b 	bl	80005e4 <AHT20_Init>
  char txBuf[32];
  AHT20_ReadTempHum_Data( &thSensor ); /* Read & Calculate Sensor Values */
 800074e:	4811      	ldr	r0, [pc, #68]	; (8000794 <main+0x68>)
 8000750:	f7ff ff78 	bl	8000644 <AHT20_ReadTempHum_Data>

    /* USER CODE BEGIN 3 */


	  //AHT20_ReadTempHum_Data( AHT20 *dev );
	  float tempC = thSensor.tempC;
 8000754:	4b0f      	ldr	r3, [pc, #60]	; (8000794 <main+0x68>)
 8000756:	689b      	ldr	r3, [r3, #8]
 8000758:	627b      	str	r3, [r7, #36]	; 0x24
	  sprintf(txBuf, "TempC = %u\r\n", (unsigned int) tempC);
 800075a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800075e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000762:	1d3b      	adds	r3, r7, #4
 8000764:	ee17 2a90 	vmov	r2, s15
 8000768:	490b      	ldr	r1, [pc, #44]	; (8000798 <main+0x6c>)
 800076a:	4618      	mov	r0, r3
 800076c:	f007 f882 	bl	8007874 <siprintf>

	  CDC_Transmit_FS((uint8_t *) txBuf, strlen(txBuf));
 8000770:	1d3b      	adds	r3, r7, #4
 8000772:	4618      	mov	r0, r3
 8000774:	f7ff fd34 	bl	80001e0 <strlen>
 8000778:	4603      	mov	r3, r0
 800077a:	b29a      	uxth	r2, r3
 800077c:	1d3b      	adds	r3, r7, #4
 800077e:	4611      	mov	r1, r2
 8000780:	4618      	mov	r0, r3
 8000782:	f006 fbf3 	bl	8006f6c <CDC_Transmit_FS>
	  HAL_Delay(2000);
 8000786:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800078a:	f000 fad5 	bl	8000d38 <HAL_Delay>
  {
 800078e:	e7e1      	b.n	8000754 <main+0x28>
 8000790:	20000430 	.word	0x20000430
 8000794:	20000484 	.word	0x20000484
 8000798:	080080e8 	.word	0x080080e8

0800079c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b094      	sub	sp, #80	; 0x50
 80007a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007a2:	f107 0320 	add.w	r3, r7, #32
 80007a6:	2230      	movs	r2, #48	; 0x30
 80007a8:	2100      	movs	r1, #0
 80007aa:	4618      	mov	r0, r3
 80007ac:	f007 f85a 	bl	8007864 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007b0:	f107 030c 	add.w	r3, r7, #12
 80007b4:	2200      	movs	r2, #0
 80007b6:	601a      	str	r2, [r3, #0]
 80007b8:	605a      	str	r2, [r3, #4]
 80007ba:	609a      	str	r2, [r3, #8]
 80007bc:	60da      	str	r2, [r3, #12]
 80007be:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007c0:	2300      	movs	r3, #0
 80007c2:	60bb      	str	r3, [r7, #8]
 80007c4:	4b29      	ldr	r3, [pc, #164]	; (800086c <SystemClock_Config+0xd0>)
 80007c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007c8:	4a28      	ldr	r2, [pc, #160]	; (800086c <SystemClock_Config+0xd0>)
 80007ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007ce:	6413      	str	r3, [r2, #64]	; 0x40
 80007d0:	4b26      	ldr	r3, [pc, #152]	; (800086c <SystemClock_Config+0xd0>)
 80007d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007d8:	60bb      	str	r3, [r7, #8]
 80007da:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007dc:	2300      	movs	r3, #0
 80007de:	607b      	str	r3, [r7, #4]
 80007e0:	4b23      	ldr	r3, [pc, #140]	; (8000870 <SystemClock_Config+0xd4>)
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	4a22      	ldr	r2, [pc, #136]	; (8000870 <SystemClock_Config+0xd4>)
 80007e6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80007ea:	6013      	str	r3, [r2, #0]
 80007ec:	4b20      	ldr	r3, [pc, #128]	; (8000870 <SystemClock_Config+0xd4>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007f4:	607b      	str	r3, [r7, #4]
 80007f6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80007f8:	2303      	movs	r3, #3
 80007fa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007fc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000800:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000802:	2301      	movs	r3, #1
 8000804:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000806:	2310      	movs	r3, #16
 8000808:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800080a:	2302      	movs	r3, #2
 800080c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800080e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000812:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 15;
 8000814:	230f      	movs	r3, #15
 8000816:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 8000818:	2390      	movs	r3, #144	; 0x90
 800081a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800081c:	2302      	movs	r3, #2
 800081e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8000820:	2305      	movs	r3, #5
 8000822:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000824:	f107 0320 	add.w	r3, r7, #32
 8000828:	4618      	mov	r0, r3
 800082a:	f002 fea3 	bl	8003574 <HAL_RCC_OscConfig>
 800082e:	4603      	mov	r3, r0
 8000830:	2b00      	cmp	r3, #0
 8000832:	d001      	beq.n	8000838 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000834:	f000 f8ea 	bl	8000a0c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000838:	230f      	movs	r3, #15
 800083a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800083c:	2300      	movs	r3, #0
 800083e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000840:	2300      	movs	r3, #0
 8000842:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000844:	2300      	movs	r3, #0
 8000846:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000848:	2300      	movs	r3, #0
 800084a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800084c:	f107 030c 	add.w	r3, r7, #12
 8000850:	2100      	movs	r1, #0
 8000852:	4618      	mov	r0, r3
 8000854:	f003 f906 	bl	8003a64 <HAL_RCC_ClockConfig>
 8000858:	4603      	mov	r3, r0
 800085a:	2b00      	cmp	r3, #0
 800085c:	d001      	beq.n	8000862 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800085e:	f000 f8d5 	bl	8000a0c <Error_Handler>
  }
}
 8000862:	bf00      	nop
 8000864:	3750      	adds	r7, #80	; 0x50
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	40023800 	.word	0x40023800
 8000870:	40007000 	.word	0x40007000

08000874 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000878:	4b12      	ldr	r3, [pc, #72]	; (80008c4 <MX_I2C1_Init+0x50>)
 800087a:	4a13      	ldr	r2, [pc, #76]	; (80008c8 <MX_I2C1_Init+0x54>)
 800087c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800087e:	4b11      	ldr	r3, [pc, #68]	; (80008c4 <MX_I2C1_Init+0x50>)
 8000880:	4a12      	ldr	r2, [pc, #72]	; (80008cc <MX_I2C1_Init+0x58>)
 8000882:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000884:	4b0f      	ldr	r3, [pc, #60]	; (80008c4 <MX_I2C1_Init+0x50>)
 8000886:	2200      	movs	r2, #0
 8000888:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800088a:	4b0e      	ldr	r3, [pc, #56]	; (80008c4 <MX_I2C1_Init+0x50>)
 800088c:	2200      	movs	r2, #0
 800088e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000890:	4b0c      	ldr	r3, [pc, #48]	; (80008c4 <MX_I2C1_Init+0x50>)
 8000892:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000896:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000898:	4b0a      	ldr	r3, [pc, #40]	; (80008c4 <MX_I2C1_Init+0x50>)
 800089a:	2200      	movs	r2, #0
 800089c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800089e:	4b09      	ldr	r3, [pc, #36]	; (80008c4 <MX_I2C1_Init+0x50>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008a4:	4b07      	ldr	r3, [pc, #28]	; (80008c4 <MX_I2C1_Init+0x50>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008aa:	4b06      	ldr	r3, [pc, #24]	; (80008c4 <MX_I2C1_Init+0x50>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80008b0:	4804      	ldr	r0, [pc, #16]	; (80008c4 <MX_I2C1_Init+0x50>)
 80008b2:	f000 fd47 	bl	8001344 <HAL_I2C_Init>
 80008b6:	4603      	mov	r3, r0
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d001      	beq.n	80008c0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80008bc:	f000 f8a6 	bl	8000a0c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80008c0:	bf00      	nop
 80008c2:	bd80      	pop	{r7, pc}
 80008c4:	20000430 	.word	0x20000430
 80008c8:	40005400 	.word	0x40005400
 80008cc:	000186a0 	.word	0x000186a0

080008d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b08a      	sub	sp, #40	; 0x28
 80008d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008d6:	f107 0314 	add.w	r3, r7, #20
 80008da:	2200      	movs	r2, #0
 80008dc:	601a      	str	r2, [r3, #0]
 80008de:	605a      	str	r2, [r3, #4]
 80008e0:	609a      	str	r2, [r3, #8]
 80008e2:	60da      	str	r2, [r3, #12]
 80008e4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008e6:	2300      	movs	r3, #0
 80008e8:	613b      	str	r3, [r7, #16]
 80008ea:	4b3c      	ldr	r3, [pc, #240]	; (80009dc <MX_GPIO_Init+0x10c>)
 80008ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ee:	4a3b      	ldr	r2, [pc, #236]	; (80009dc <MX_GPIO_Init+0x10c>)
 80008f0:	f043 0304 	orr.w	r3, r3, #4
 80008f4:	6313      	str	r3, [r2, #48]	; 0x30
 80008f6:	4b39      	ldr	r3, [pc, #228]	; (80009dc <MX_GPIO_Init+0x10c>)
 80008f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fa:	f003 0304 	and.w	r3, r3, #4
 80008fe:	613b      	str	r3, [r7, #16]
 8000900:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000902:	2300      	movs	r3, #0
 8000904:	60fb      	str	r3, [r7, #12]
 8000906:	4b35      	ldr	r3, [pc, #212]	; (80009dc <MX_GPIO_Init+0x10c>)
 8000908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090a:	4a34      	ldr	r2, [pc, #208]	; (80009dc <MX_GPIO_Init+0x10c>)
 800090c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000910:	6313      	str	r3, [r2, #48]	; 0x30
 8000912:	4b32      	ldr	r3, [pc, #200]	; (80009dc <MX_GPIO_Init+0x10c>)
 8000914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000916:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800091a:	60fb      	str	r3, [r7, #12]
 800091c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800091e:	2300      	movs	r3, #0
 8000920:	60bb      	str	r3, [r7, #8]
 8000922:	4b2e      	ldr	r3, [pc, #184]	; (80009dc <MX_GPIO_Init+0x10c>)
 8000924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000926:	4a2d      	ldr	r2, [pc, #180]	; (80009dc <MX_GPIO_Init+0x10c>)
 8000928:	f043 0301 	orr.w	r3, r3, #1
 800092c:	6313      	str	r3, [r2, #48]	; 0x30
 800092e:	4b2b      	ldr	r3, [pc, #172]	; (80009dc <MX_GPIO_Init+0x10c>)
 8000930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000932:	f003 0301 	and.w	r3, r3, #1
 8000936:	60bb      	str	r3, [r7, #8]
 8000938:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800093a:	2300      	movs	r3, #0
 800093c:	607b      	str	r3, [r7, #4]
 800093e:	4b27      	ldr	r3, [pc, #156]	; (80009dc <MX_GPIO_Init+0x10c>)
 8000940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000942:	4a26      	ldr	r2, [pc, #152]	; (80009dc <MX_GPIO_Init+0x10c>)
 8000944:	f043 0302 	orr.w	r3, r3, #2
 8000948:	6313      	str	r3, [r2, #48]	; 0x30
 800094a:	4b24      	ldr	r3, [pc, #144]	; (80009dc <MX_GPIO_Init+0x10c>)
 800094c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094e:	f003 0302 	and.w	r3, r3, #2
 8000952:	607b      	str	r3, [r7, #4]
 8000954:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_C13_GPIO_Port, LED_C13_Pin, GPIO_PIN_RESET);
 8000956:	2200      	movs	r2, #0
 8000958:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800095c:	4820      	ldr	r0, [pc, #128]	; (80009e0 <MX_GPIO_Init+0x110>)
 800095e:	f000 fca5 	bl	80012ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 8000962:	2200      	movs	r2, #0
 8000964:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000968:	481e      	ldr	r0, [pc, #120]	; (80009e4 <MX_GPIO_Init+0x114>)
 800096a:	f000 fc9f 	bl	80012ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_C13_Pin */
  GPIO_InitStruct.Pin = LED_C13_Pin;
 800096e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000972:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000974:	2301      	movs	r3, #1
 8000976:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000978:	2300      	movs	r3, #0
 800097a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800097c:	2300      	movs	r3, #0
 800097e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_C13_GPIO_Port, &GPIO_InitStruct);
 8000980:	f107 0314 	add.w	r3, r7, #20
 8000984:	4619      	mov	r1, r3
 8000986:	4816      	ldr	r0, [pc, #88]	; (80009e0 <MX_GPIO_Init+0x110>)
 8000988:	f000 fb0c 	bl	8000fa4 <HAL_GPIO_Init>

  /*Configure GPIO pin : KEY_BTN_Pin */
  GPIO_InitStruct.Pin = KEY_BTN_Pin;
 800098c:	2301      	movs	r3, #1
 800098e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000990:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000994:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000996:	2301      	movs	r3, #1
 8000998:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(KEY_BTN_GPIO_Port, &GPIO_InitStruct);
 800099a:	f107 0314 	add.w	r3, r7, #20
 800099e:	4619      	mov	r1, r3
 80009a0:	4811      	ldr	r0, [pc, #68]	; (80009e8 <MX_GPIO_Init+0x118>)
 80009a2:	f000 faff 	bl	8000fa4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80009a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80009aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ac:	2301      	movs	r3, #1
 80009ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b0:	2300      	movs	r3, #0
 80009b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b4:	2300      	movs	r3, #0
 80009b6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009b8:	f107 0314 	add.w	r3, r7, #20
 80009bc:	4619      	mov	r1, r3
 80009be:	4809      	ldr	r0, [pc, #36]	; (80009e4 <MX_GPIO_Init+0x114>)
 80009c0:	f000 faf0 	bl	8000fa4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80009c4:	2200      	movs	r2, #0
 80009c6:	2100      	movs	r1, #0
 80009c8:	2006      	movs	r0, #6
 80009ca:	f000 fab4 	bl	8000f36 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80009ce:	2006      	movs	r0, #6
 80009d0:	f000 facd 	bl	8000f6e <HAL_NVIC_EnableIRQ>

}
 80009d4:	bf00      	nop
 80009d6:	3728      	adds	r7, #40	; 0x28
 80009d8:	46bd      	mov	sp, r7
 80009da:	bd80      	pop	{r7, pc}
 80009dc:	40023800 	.word	0x40023800
 80009e0:	40020800 	.word	0x40020800
 80009e4:	40020400 	.word	0x40020400
 80009e8:	40020000 	.word	0x40020000

080009ec <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b082      	sub	sp, #8
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	4603      	mov	r3, r0
 80009f4:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_TogglePin(LED_C13_GPIO_Port, LED_C13_Pin);
 80009f6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009fa:	4803      	ldr	r0, [pc, #12]	; (8000a08 <HAL_GPIO_EXTI_Callback+0x1c>)
 80009fc:	f000 fc6f 	bl	80012de <HAL_GPIO_TogglePin>
}
 8000a00:	bf00      	nop
 8000a02:	3708      	adds	r7, #8
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bd80      	pop	{r7, pc}
 8000a08:	40020800 	.word	0x40020800

08000a0c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a10:	b672      	cpsid	i
}
 8000a12:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a14:	e7fe      	b.n	8000a14 <Error_Handler+0x8>
	...

08000a18 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	b083      	sub	sp, #12
 8000a1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a1e:	2300      	movs	r3, #0
 8000a20:	607b      	str	r3, [r7, #4]
 8000a22:	4b10      	ldr	r3, [pc, #64]	; (8000a64 <HAL_MspInit+0x4c>)
 8000a24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a26:	4a0f      	ldr	r2, [pc, #60]	; (8000a64 <HAL_MspInit+0x4c>)
 8000a28:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a2c:	6453      	str	r3, [r2, #68]	; 0x44
 8000a2e:	4b0d      	ldr	r3, [pc, #52]	; (8000a64 <HAL_MspInit+0x4c>)
 8000a30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a36:	607b      	str	r3, [r7, #4]
 8000a38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	603b      	str	r3, [r7, #0]
 8000a3e:	4b09      	ldr	r3, [pc, #36]	; (8000a64 <HAL_MspInit+0x4c>)
 8000a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a42:	4a08      	ldr	r2, [pc, #32]	; (8000a64 <HAL_MspInit+0x4c>)
 8000a44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a48:	6413      	str	r3, [r2, #64]	; 0x40
 8000a4a:	4b06      	ldr	r3, [pc, #24]	; (8000a64 <HAL_MspInit+0x4c>)
 8000a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a52:	603b      	str	r3, [r7, #0]
 8000a54:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a56:	bf00      	nop
 8000a58:	370c      	adds	r7, #12
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a60:	4770      	bx	lr
 8000a62:	bf00      	nop
 8000a64:	40023800 	.word	0x40023800

08000a68 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b08a      	sub	sp, #40	; 0x28
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a70:	f107 0314 	add.w	r3, r7, #20
 8000a74:	2200      	movs	r2, #0
 8000a76:	601a      	str	r2, [r3, #0]
 8000a78:	605a      	str	r2, [r3, #4]
 8000a7a:	609a      	str	r2, [r3, #8]
 8000a7c:	60da      	str	r2, [r3, #12]
 8000a7e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	4a19      	ldr	r2, [pc, #100]	; (8000aec <HAL_I2C_MspInit+0x84>)
 8000a86:	4293      	cmp	r3, r2
 8000a88:	d12b      	bne.n	8000ae2 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	613b      	str	r3, [r7, #16]
 8000a8e:	4b18      	ldr	r3, [pc, #96]	; (8000af0 <HAL_I2C_MspInit+0x88>)
 8000a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a92:	4a17      	ldr	r2, [pc, #92]	; (8000af0 <HAL_I2C_MspInit+0x88>)
 8000a94:	f043 0302 	orr.w	r3, r3, #2
 8000a98:	6313      	str	r3, [r2, #48]	; 0x30
 8000a9a:	4b15      	ldr	r3, [pc, #84]	; (8000af0 <HAL_I2C_MspInit+0x88>)
 8000a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9e:	f003 0302 	and.w	r3, r3, #2
 8000aa2:	613b      	str	r3, [r7, #16]
 8000aa4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000aa6:	23c0      	movs	r3, #192	; 0xc0
 8000aa8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000aaa:	2312      	movs	r3, #18
 8000aac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ab2:	2303      	movs	r3, #3
 8000ab4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000ab6:	2304      	movs	r3, #4
 8000ab8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aba:	f107 0314 	add.w	r3, r7, #20
 8000abe:	4619      	mov	r1, r3
 8000ac0:	480c      	ldr	r0, [pc, #48]	; (8000af4 <HAL_I2C_MspInit+0x8c>)
 8000ac2:	f000 fa6f 	bl	8000fa4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	60fb      	str	r3, [r7, #12]
 8000aca:	4b09      	ldr	r3, [pc, #36]	; (8000af0 <HAL_I2C_MspInit+0x88>)
 8000acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ace:	4a08      	ldr	r2, [pc, #32]	; (8000af0 <HAL_I2C_MspInit+0x88>)
 8000ad0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000ad4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ad6:	4b06      	ldr	r3, [pc, #24]	; (8000af0 <HAL_I2C_MspInit+0x88>)
 8000ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ada:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ade:	60fb      	str	r3, [r7, #12]
 8000ae0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000ae2:	bf00      	nop
 8000ae4:	3728      	adds	r7, #40	; 0x28
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	40005400 	.word	0x40005400
 8000af0:	40023800 	.word	0x40023800
 8000af4:	40020400 	.word	0x40020400

08000af8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000afc:	e7fe      	b.n	8000afc <NMI_Handler+0x4>

08000afe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000afe:	b480      	push	{r7}
 8000b00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b02:	e7fe      	b.n	8000b02 <HardFault_Handler+0x4>

08000b04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b04:	b480      	push	{r7}
 8000b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b08:	e7fe      	b.n	8000b08 <MemManage_Handler+0x4>

08000b0a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b0a:	b480      	push	{r7}
 8000b0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b0e:	e7fe      	b.n	8000b0e <BusFault_Handler+0x4>

08000b10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b14:	e7fe      	b.n	8000b14 <UsageFault_Handler+0x4>

08000b16 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b16:	b480      	push	{r7}
 8000b18:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b1a:	bf00      	nop
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b22:	4770      	bx	lr

08000b24 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b28:	bf00      	nop
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b30:	4770      	bx	lr

08000b32 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b32:	b480      	push	{r7}
 8000b34:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b36:	bf00      	nop
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3e:	4770      	bx	lr

08000b40 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b44:	f000 f8d8 	bl	8000cf8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b48:	bf00      	nop
 8000b4a:	bd80      	pop	{r7, pc}

08000b4c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000b50:	2001      	movs	r0, #1
 8000b52:	f000 fbdf 	bl	8001314 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000b56:	bf00      	nop
 8000b58:	bd80      	pop	{r7, pc}
	...

08000b5c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000b60:	4802      	ldr	r0, [pc, #8]	; (8000b6c <OTG_FS_IRQHandler+0x10>)
 8000b62:	f001 fcd4 	bl	800250e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000b66:	bf00      	nop
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	20001964 	.word	0x20001964

08000b70 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b086      	sub	sp, #24
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b78:	4a14      	ldr	r2, [pc, #80]	; (8000bcc <_sbrk+0x5c>)
 8000b7a:	4b15      	ldr	r3, [pc, #84]	; (8000bd0 <_sbrk+0x60>)
 8000b7c:	1ad3      	subs	r3, r2, r3
 8000b7e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b80:	697b      	ldr	r3, [r7, #20]
 8000b82:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b84:	4b13      	ldr	r3, [pc, #76]	; (8000bd4 <_sbrk+0x64>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d102      	bne.n	8000b92 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b8c:	4b11      	ldr	r3, [pc, #68]	; (8000bd4 <_sbrk+0x64>)
 8000b8e:	4a12      	ldr	r2, [pc, #72]	; (8000bd8 <_sbrk+0x68>)
 8000b90:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b92:	4b10      	ldr	r3, [pc, #64]	; (8000bd4 <_sbrk+0x64>)
 8000b94:	681a      	ldr	r2, [r3, #0]
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	4413      	add	r3, r2
 8000b9a:	693a      	ldr	r2, [r7, #16]
 8000b9c:	429a      	cmp	r2, r3
 8000b9e:	d207      	bcs.n	8000bb0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ba0:	f006 fe36 	bl	8007810 <__errno>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	220c      	movs	r2, #12
 8000ba8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000baa:	f04f 33ff 	mov.w	r3, #4294967295
 8000bae:	e009      	b.n	8000bc4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000bb0:	4b08      	ldr	r3, [pc, #32]	; (8000bd4 <_sbrk+0x64>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bb6:	4b07      	ldr	r3, [pc, #28]	; (8000bd4 <_sbrk+0x64>)
 8000bb8:	681a      	ldr	r2, [r3, #0]
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	4413      	add	r3, r2
 8000bbe:	4a05      	ldr	r2, [pc, #20]	; (8000bd4 <_sbrk+0x64>)
 8000bc0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000bc2:	68fb      	ldr	r3, [r7, #12]
}
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	3718      	adds	r7, #24
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bd80      	pop	{r7, pc}
 8000bcc:	20020000 	.word	0x20020000
 8000bd0:	00000400 	.word	0x00000400
 8000bd4:	20000200 	.word	0x20000200
 8000bd8:	20001d80 	.word	0x20001d80

08000bdc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000be0:	4b06      	ldr	r3, [pc, #24]	; (8000bfc <SystemInit+0x20>)
 8000be2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000be6:	4a05      	ldr	r2, [pc, #20]	; (8000bfc <SystemInit+0x20>)
 8000be8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bf0:	bf00      	nop
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf8:	4770      	bx	lr
 8000bfa:	bf00      	nop
 8000bfc:	e000ed00 	.word	0xe000ed00

08000c00 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000c00:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c38 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c04:	480d      	ldr	r0, [pc, #52]	; (8000c3c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c06:	490e      	ldr	r1, [pc, #56]	; (8000c40 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c08:	4a0e      	ldr	r2, [pc, #56]	; (8000c44 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c0c:	e002      	b.n	8000c14 <LoopCopyDataInit>

08000c0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c12:	3304      	adds	r3, #4

08000c14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c18:	d3f9      	bcc.n	8000c0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c1a:	4a0b      	ldr	r2, [pc, #44]	; (8000c48 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c1c:	4c0b      	ldr	r4, [pc, #44]	; (8000c4c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c20:	e001      	b.n	8000c26 <LoopFillZerobss>

08000c22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c24:	3204      	adds	r2, #4

08000c26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c28:	d3fb      	bcc.n	8000c22 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000c2a:	f7ff ffd7 	bl	8000bdc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c2e:	f006 fdf5 	bl	800781c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c32:	f7ff fd7b 	bl	800072c <main>
  bx  lr    
 8000c36:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000c38:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c40:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8000c44:	0800819c 	.word	0x0800819c
  ldr r2, =_sbss
 8000c48:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8000c4c:	20001d7c 	.word	0x20001d7c

08000c50 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c50:	e7fe      	b.n	8000c50 <ADC_IRQHandler>
	...

08000c54 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c58:	4b0e      	ldr	r3, [pc, #56]	; (8000c94 <HAL_Init+0x40>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	4a0d      	ldr	r2, [pc, #52]	; (8000c94 <HAL_Init+0x40>)
 8000c5e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c62:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c64:	4b0b      	ldr	r3, [pc, #44]	; (8000c94 <HAL_Init+0x40>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	4a0a      	ldr	r2, [pc, #40]	; (8000c94 <HAL_Init+0x40>)
 8000c6a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c6e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c70:	4b08      	ldr	r3, [pc, #32]	; (8000c94 <HAL_Init+0x40>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	4a07      	ldr	r2, [pc, #28]	; (8000c94 <HAL_Init+0x40>)
 8000c76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c7a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c7c:	2003      	movs	r0, #3
 8000c7e:	f000 f94f 	bl	8000f20 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c82:	200f      	movs	r0, #15
 8000c84:	f000 f808 	bl	8000c98 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c88:	f7ff fec6 	bl	8000a18 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c8c:	2300      	movs	r3, #0
}
 8000c8e:	4618      	mov	r0, r3
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	40023c00 	.word	0x40023c00

08000c98 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b082      	sub	sp, #8
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ca0:	4b12      	ldr	r3, [pc, #72]	; (8000cec <HAL_InitTick+0x54>)
 8000ca2:	681a      	ldr	r2, [r3, #0]
 8000ca4:	4b12      	ldr	r3, [pc, #72]	; (8000cf0 <HAL_InitTick+0x58>)
 8000ca6:	781b      	ldrb	r3, [r3, #0]
 8000ca8:	4619      	mov	r1, r3
 8000caa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cae:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	f000 f967 	bl	8000f8a <HAL_SYSTICK_Config>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d001      	beq.n	8000cc6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000cc2:	2301      	movs	r3, #1
 8000cc4:	e00e      	b.n	8000ce4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	2b0f      	cmp	r3, #15
 8000cca:	d80a      	bhi.n	8000ce2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ccc:	2200      	movs	r2, #0
 8000cce:	6879      	ldr	r1, [r7, #4]
 8000cd0:	f04f 30ff 	mov.w	r0, #4294967295
 8000cd4:	f000 f92f 	bl	8000f36 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000cd8:	4a06      	ldr	r2, [pc, #24]	; (8000cf4 <HAL_InitTick+0x5c>)
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	e000      	b.n	8000ce4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ce2:	2301      	movs	r3, #1
}
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	3708      	adds	r7, #8
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bd80      	pop	{r7, pc}
 8000cec:	20000000 	.word	0x20000000
 8000cf0:	20000008 	.word	0x20000008
 8000cf4:	20000004 	.word	0x20000004

08000cf8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cfc:	4b06      	ldr	r3, [pc, #24]	; (8000d18 <HAL_IncTick+0x20>)
 8000cfe:	781b      	ldrb	r3, [r3, #0]
 8000d00:	461a      	mov	r2, r3
 8000d02:	4b06      	ldr	r3, [pc, #24]	; (8000d1c <HAL_IncTick+0x24>)
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	4413      	add	r3, r2
 8000d08:	4a04      	ldr	r2, [pc, #16]	; (8000d1c <HAL_IncTick+0x24>)
 8000d0a:	6013      	str	r3, [r2, #0]
}
 8000d0c:	bf00      	nop
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d14:	4770      	bx	lr
 8000d16:	bf00      	nop
 8000d18:	20000008 	.word	0x20000008
 8000d1c:	20000490 	.word	0x20000490

08000d20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0
  return uwTick;
 8000d24:	4b03      	ldr	r3, [pc, #12]	; (8000d34 <HAL_GetTick+0x14>)
 8000d26:	681b      	ldr	r3, [r3, #0]
}
 8000d28:	4618      	mov	r0, r3
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d30:	4770      	bx	lr
 8000d32:	bf00      	nop
 8000d34:	20000490 	.word	0x20000490

08000d38 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b084      	sub	sp, #16
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d40:	f7ff ffee 	bl	8000d20 <HAL_GetTick>
 8000d44:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d4a:	68fb      	ldr	r3, [r7, #12]
 8000d4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d50:	d005      	beq.n	8000d5e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d52:	4b0a      	ldr	r3, [pc, #40]	; (8000d7c <HAL_Delay+0x44>)
 8000d54:	781b      	ldrb	r3, [r3, #0]
 8000d56:	461a      	mov	r2, r3
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	4413      	add	r3, r2
 8000d5c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000d5e:	bf00      	nop
 8000d60:	f7ff ffde 	bl	8000d20 <HAL_GetTick>
 8000d64:	4602      	mov	r2, r0
 8000d66:	68bb      	ldr	r3, [r7, #8]
 8000d68:	1ad3      	subs	r3, r2, r3
 8000d6a:	68fa      	ldr	r2, [r7, #12]
 8000d6c:	429a      	cmp	r2, r3
 8000d6e:	d8f7      	bhi.n	8000d60 <HAL_Delay+0x28>
  {
  }
}
 8000d70:	bf00      	nop
 8000d72:	bf00      	nop
 8000d74:	3710      	adds	r7, #16
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	20000008 	.word	0x20000008

08000d80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d80:	b480      	push	{r7}
 8000d82:	b085      	sub	sp, #20
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	f003 0307 	and.w	r3, r3, #7
 8000d8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d90:	4b0c      	ldr	r3, [pc, #48]	; (8000dc4 <__NVIC_SetPriorityGrouping+0x44>)
 8000d92:	68db      	ldr	r3, [r3, #12]
 8000d94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d96:	68ba      	ldr	r2, [r7, #8]
 8000d98:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d9c:	4013      	ands	r3, r2
 8000d9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000da4:	68bb      	ldr	r3, [r7, #8]
 8000da6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000da8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000dac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000db0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000db2:	4a04      	ldr	r2, [pc, #16]	; (8000dc4 <__NVIC_SetPriorityGrouping+0x44>)
 8000db4:	68bb      	ldr	r3, [r7, #8]
 8000db6:	60d3      	str	r3, [r2, #12]
}
 8000db8:	bf00      	nop
 8000dba:	3714      	adds	r7, #20
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc2:	4770      	bx	lr
 8000dc4:	e000ed00 	.word	0xe000ed00

08000dc8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000dcc:	4b04      	ldr	r3, [pc, #16]	; (8000de0 <__NVIC_GetPriorityGrouping+0x18>)
 8000dce:	68db      	ldr	r3, [r3, #12]
 8000dd0:	0a1b      	lsrs	r3, r3, #8
 8000dd2:	f003 0307 	and.w	r3, r3, #7
}
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dde:	4770      	bx	lr
 8000de0:	e000ed00 	.word	0xe000ed00

08000de4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000de4:	b480      	push	{r7}
 8000de6:	b083      	sub	sp, #12
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	4603      	mov	r3, r0
 8000dec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	db0b      	blt.n	8000e0e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000df6:	79fb      	ldrb	r3, [r7, #7]
 8000df8:	f003 021f 	and.w	r2, r3, #31
 8000dfc:	4907      	ldr	r1, [pc, #28]	; (8000e1c <__NVIC_EnableIRQ+0x38>)
 8000dfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e02:	095b      	lsrs	r3, r3, #5
 8000e04:	2001      	movs	r0, #1
 8000e06:	fa00 f202 	lsl.w	r2, r0, r2
 8000e0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e0e:	bf00      	nop
 8000e10:	370c      	adds	r7, #12
 8000e12:	46bd      	mov	sp, r7
 8000e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e18:	4770      	bx	lr
 8000e1a:	bf00      	nop
 8000e1c:	e000e100 	.word	0xe000e100

08000e20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e20:	b480      	push	{r7}
 8000e22:	b083      	sub	sp, #12
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	4603      	mov	r3, r0
 8000e28:	6039      	str	r1, [r7, #0]
 8000e2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	db0a      	blt.n	8000e4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e34:	683b      	ldr	r3, [r7, #0]
 8000e36:	b2da      	uxtb	r2, r3
 8000e38:	490c      	ldr	r1, [pc, #48]	; (8000e6c <__NVIC_SetPriority+0x4c>)
 8000e3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e3e:	0112      	lsls	r2, r2, #4
 8000e40:	b2d2      	uxtb	r2, r2
 8000e42:	440b      	add	r3, r1
 8000e44:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e48:	e00a      	b.n	8000e60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e4a:	683b      	ldr	r3, [r7, #0]
 8000e4c:	b2da      	uxtb	r2, r3
 8000e4e:	4908      	ldr	r1, [pc, #32]	; (8000e70 <__NVIC_SetPriority+0x50>)
 8000e50:	79fb      	ldrb	r3, [r7, #7]
 8000e52:	f003 030f 	and.w	r3, r3, #15
 8000e56:	3b04      	subs	r3, #4
 8000e58:	0112      	lsls	r2, r2, #4
 8000e5a:	b2d2      	uxtb	r2, r2
 8000e5c:	440b      	add	r3, r1
 8000e5e:	761a      	strb	r2, [r3, #24]
}
 8000e60:	bf00      	nop
 8000e62:	370c      	adds	r7, #12
 8000e64:	46bd      	mov	sp, r7
 8000e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6a:	4770      	bx	lr
 8000e6c:	e000e100 	.word	0xe000e100
 8000e70:	e000ed00 	.word	0xe000ed00

08000e74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e74:	b480      	push	{r7}
 8000e76:	b089      	sub	sp, #36	; 0x24
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	60f8      	str	r0, [r7, #12]
 8000e7c:	60b9      	str	r1, [r7, #8]
 8000e7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	f003 0307 	and.w	r3, r3, #7
 8000e86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e88:	69fb      	ldr	r3, [r7, #28]
 8000e8a:	f1c3 0307 	rsb	r3, r3, #7
 8000e8e:	2b04      	cmp	r3, #4
 8000e90:	bf28      	it	cs
 8000e92:	2304      	movcs	r3, #4
 8000e94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e96:	69fb      	ldr	r3, [r7, #28]
 8000e98:	3304      	adds	r3, #4
 8000e9a:	2b06      	cmp	r3, #6
 8000e9c:	d902      	bls.n	8000ea4 <NVIC_EncodePriority+0x30>
 8000e9e:	69fb      	ldr	r3, [r7, #28]
 8000ea0:	3b03      	subs	r3, #3
 8000ea2:	e000      	b.n	8000ea6 <NVIC_EncodePriority+0x32>
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ea8:	f04f 32ff 	mov.w	r2, #4294967295
 8000eac:	69bb      	ldr	r3, [r7, #24]
 8000eae:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb2:	43da      	mvns	r2, r3
 8000eb4:	68bb      	ldr	r3, [r7, #8]
 8000eb6:	401a      	ands	r2, r3
 8000eb8:	697b      	ldr	r3, [r7, #20]
 8000eba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ebc:	f04f 31ff 	mov.w	r1, #4294967295
 8000ec0:	697b      	ldr	r3, [r7, #20]
 8000ec2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ec6:	43d9      	mvns	r1, r3
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ecc:	4313      	orrs	r3, r2
         );
}
 8000ece:	4618      	mov	r0, r3
 8000ed0:	3724      	adds	r7, #36	; 0x24
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed8:	4770      	bx	lr
	...

08000edc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b082      	sub	sp, #8
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	3b01      	subs	r3, #1
 8000ee8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000eec:	d301      	bcc.n	8000ef2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000eee:	2301      	movs	r3, #1
 8000ef0:	e00f      	b.n	8000f12 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ef2:	4a0a      	ldr	r2, [pc, #40]	; (8000f1c <SysTick_Config+0x40>)
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	3b01      	subs	r3, #1
 8000ef8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000efa:	210f      	movs	r1, #15
 8000efc:	f04f 30ff 	mov.w	r0, #4294967295
 8000f00:	f7ff ff8e 	bl	8000e20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f04:	4b05      	ldr	r3, [pc, #20]	; (8000f1c <SysTick_Config+0x40>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f0a:	4b04      	ldr	r3, [pc, #16]	; (8000f1c <SysTick_Config+0x40>)
 8000f0c:	2207      	movs	r2, #7
 8000f0e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f10:	2300      	movs	r3, #0
}
 8000f12:	4618      	mov	r0, r3
 8000f14:	3708      	adds	r7, #8
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	e000e010 	.word	0xe000e010

08000f20 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b082      	sub	sp, #8
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f28:	6878      	ldr	r0, [r7, #4]
 8000f2a:	f7ff ff29 	bl	8000d80 <__NVIC_SetPriorityGrouping>
}
 8000f2e:	bf00      	nop
 8000f30:	3708      	adds	r7, #8
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}

08000f36 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f36:	b580      	push	{r7, lr}
 8000f38:	b086      	sub	sp, #24
 8000f3a:	af00      	add	r7, sp, #0
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	60b9      	str	r1, [r7, #8]
 8000f40:	607a      	str	r2, [r7, #4]
 8000f42:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f44:	2300      	movs	r3, #0
 8000f46:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f48:	f7ff ff3e 	bl	8000dc8 <__NVIC_GetPriorityGrouping>
 8000f4c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f4e:	687a      	ldr	r2, [r7, #4]
 8000f50:	68b9      	ldr	r1, [r7, #8]
 8000f52:	6978      	ldr	r0, [r7, #20]
 8000f54:	f7ff ff8e 	bl	8000e74 <NVIC_EncodePriority>
 8000f58:	4602      	mov	r2, r0
 8000f5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f5e:	4611      	mov	r1, r2
 8000f60:	4618      	mov	r0, r3
 8000f62:	f7ff ff5d 	bl	8000e20 <__NVIC_SetPriority>
}
 8000f66:	bf00      	nop
 8000f68:	3718      	adds	r7, #24
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}

08000f6e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f6e:	b580      	push	{r7, lr}
 8000f70:	b082      	sub	sp, #8
 8000f72:	af00      	add	r7, sp, #0
 8000f74:	4603      	mov	r3, r0
 8000f76:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f7ff ff31 	bl	8000de4 <__NVIC_EnableIRQ>
}
 8000f82:	bf00      	nop
 8000f84:	3708      	adds	r7, #8
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}

08000f8a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f8a:	b580      	push	{r7, lr}
 8000f8c:	b082      	sub	sp, #8
 8000f8e:	af00      	add	r7, sp, #0
 8000f90:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f92:	6878      	ldr	r0, [r7, #4]
 8000f94:	f7ff ffa2 	bl	8000edc <SysTick_Config>
 8000f98:	4603      	mov	r3, r0
}
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	3708      	adds	r7, #8
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}
	...

08000fa4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	b089      	sub	sp, #36	; 0x24
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
 8000fac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000fba:	2300      	movs	r3, #0
 8000fbc:	61fb      	str	r3, [r7, #28]
 8000fbe:	e159      	b.n	8001274 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000fc0:	2201      	movs	r2, #1
 8000fc2:	69fb      	ldr	r3, [r7, #28]
 8000fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	697a      	ldr	r2, [r7, #20]
 8000fd0:	4013      	ands	r3, r2
 8000fd2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000fd4:	693a      	ldr	r2, [r7, #16]
 8000fd6:	697b      	ldr	r3, [r7, #20]
 8000fd8:	429a      	cmp	r2, r3
 8000fda:	f040 8148 	bne.w	800126e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000fde:	683b      	ldr	r3, [r7, #0]
 8000fe0:	685b      	ldr	r3, [r3, #4]
 8000fe2:	f003 0303 	and.w	r3, r3, #3
 8000fe6:	2b01      	cmp	r3, #1
 8000fe8:	d005      	beq.n	8000ff6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	685b      	ldr	r3, [r3, #4]
 8000fee:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ff2:	2b02      	cmp	r3, #2
 8000ff4:	d130      	bne.n	8001058 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	689b      	ldr	r3, [r3, #8]
 8000ffa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000ffc:	69fb      	ldr	r3, [r7, #28]
 8000ffe:	005b      	lsls	r3, r3, #1
 8001000:	2203      	movs	r2, #3
 8001002:	fa02 f303 	lsl.w	r3, r2, r3
 8001006:	43db      	mvns	r3, r3
 8001008:	69ba      	ldr	r2, [r7, #24]
 800100a:	4013      	ands	r3, r2
 800100c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	68da      	ldr	r2, [r3, #12]
 8001012:	69fb      	ldr	r3, [r7, #28]
 8001014:	005b      	lsls	r3, r3, #1
 8001016:	fa02 f303 	lsl.w	r3, r2, r3
 800101a:	69ba      	ldr	r2, [r7, #24]
 800101c:	4313      	orrs	r3, r2
 800101e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	69ba      	ldr	r2, [r7, #24]
 8001024:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	685b      	ldr	r3, [r3, #4]
 800102a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800102c:	2201      	movs	r2, #1
 800102e:	69fb      	ldr	r3, [r7, #28]
 8001030:	fa02 f303 	lsl.w	r3, r2, r3
 8001034:	43db      	mvns	r3, r3
 8001036:	69ba      	ldr	r2, [r7, #24]
 8001038:	4013      	ands	r3, r2
 800103a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	685b      	ldr	r3, [r3, #4]
 8001040:	091b      	lsrs	r3, r3, #4
 8001042:	f003 0201 	and.w	r2, r3, #1
 8001046:	69fb      	ldr	r3, [r7, #28]
 8001048:	fa02 f303 	lsl.w	r3, r2, r3
 800104c:	69ba      	ldr	r2, [r7, #24]
 800104e:	4313      	orrs	r3, r2
 8001050:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	69ba      	ldr	r2, [r7, #24]
 8001056:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	685b      	ldr	r3, [r3, #4]
 800105c:	f003 0303 	and.w	r3, r3, #3
 8001060:	2b03      	cmp	r3, #3
 8001062:	d017      	beq.n	8001094 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	68db      	ldr	r3, [r3, #12]
 8001068:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800106a:	69fb      	ldr	r3, [r7, #28]
 800106c:	005b      	lsls	r3, r3, #1
 800106e:	2203      	movs	r2, #3
 8001070:	fa02 f303 	lsl.w	r3, r2, r3
 8001074:	43db      	mvns	r3, r3
 8001076:	69ba      	ldr	r2, [r7, #24]
 8001078:	4013      	ands	r3, r2
 800107a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	689a      	ldr	r2, [r3, #8]
 8001080:	69fb      	ldr	r3, [r7, #28]
 8001082:	005b      	lsls	r3, r3, #1
 8001084:	fa02 f303 	lsl.w	r3, r2, r3
 8001088:	69ba      	ldr	r2, [r7, #24]
 800108a:	4313      	orrs	r3, r2
 800108c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	69ba      	ldr	r2, [r7, #24]
 8001092:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	685b      	ldr	r3, [r3, #4]
 8001098:	f003 0303 	and.w	r3, r3, #3
 800109c:	2b02      	cmp	r3, #2
 800109e:	d123      	bne.n	80010e8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80010a0:	69fb      	ldr	r3, [r7, #28]
 80010a2:	08da      	lsrs	r2, r3, #3
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	3208      	adds	r2, #8
 80010a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80010ae:	69fb      	ldr	r3, [r7, #28]
 80010b0:	f003 0307 	and.w	r3, r3, #7
 80010b4:	009b      	lsls	r3, r3, #2
 80010b6:	220f      	movs	r2, #15
 80010b8:	fa02 f303 	lsl.w	r3, r2, r3
 80010bc:	43db      	mvns	r3, r3
 80010be:	69ba      	ldr	r2, [r7, #24]
 80010c0:	4013      	ands	r3, r2
 80010c2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	691a      	ldr	r2, [r3, #16]
 80010c8:	69fb      	ldr	r3, [r7, #28]
 80010ca:	f003 0307 	and.w	r3, r3, #7
 80010ce:	009b      	lsls	r3, r3, #2
 80010d0:	fa02 f303 	lsl.w	r3, r2, r3
 80010d4:	69ba      	ldr	r2, [r7, #24]
 80010d6:	4313      	orrs	r3, r2
 80010d8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80010da:	69fb      	ldr	r3, [r7, #28]
 80010dc:	08da      	lsrs	r2, r3, #3
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	3208      	adds	r2, #8
 80010e2:	69b9      	ldr	r1, [r7, #24]
 80010e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80010ee:	69fb      	ldr	r3, [r7, #28]
 80010f0:	005b      	lsls	r3, r3, #1
 80010f2:	2203      	movs	r2, #3
 80010f4:	fa02 f303 	lsl.w	r3, r2, r3
 80010f8:	43db      	mvns	r3, r3
 80010fa:	69ba      	ldr	r2, [r7, #24]
 80010fc:	4013      	ands	r3, r2
 80010fe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	685b      	ldr	r3, [r3, #4]
 8001104:	f003 0203 	and.w	r2, r3, #3
 8001108:	69fb      	ldr	r3, [r7, #28]
 800110a:	005b      	lsls	r3, r3, #1
 800110c:	fa02 f303 	lsl.w	r3, r2, r3
 8001110:	69ba      	ldr	r2, [r7, #24]
 8001112:	4313      	orrs	r3, r2
 8001114:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	69ba      	ldr	r2, [r7, #24]
 800111a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	685b      	ldr	r3, [r3, #4]
 8001120:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001124:	2b00      	cmp	r3, #0
 8001126:	f000 80a2 	beq.w	800126e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800112a:	2300      	movs	r3, #0
 800112c:	60fb      	str	r3, [r7, #12]
 800112e:	4b57      	ldr	r3, [pc, #348]	; (800128c <HAL_GPIO_Init+0x2e8>)
 8001130:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001132:	4a56      	ldr	r2, [pc, #344]	; (800128c <HAL_GPIO_Init+0x2e8>)
 8001134:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001138:	6453      	str	r3, [r2, #68]	; 0x44
 800113a:	4b54      	ldr	r3, [pc, #336]	; (800128c <HAL_GPIO_Init+0x2e8>)
 800113c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800113e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001142:	60fb      	str	r3, [r7, #12]
 8001144:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001146:	4a52      	ldr	r2, [pc, #328]	; (8001290 <HAL_GPIO_Init+0x2ec>)
 8001148:	69fb      	ldr	r3, [r7, #28]
 800114a:	089b      	lsrs	r3, r3, #2
 800114c:	3302      	adds	r3, #2
 800114e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001152:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001154:	69fb      	ldr	r3, [r7, #28]
 8001156:	f003 0303 	and.w	r3, r3, #3
 800115a:	009b      	lsls	r3, r3, #2
 800115c:	220f      	movs	r2, #15
 800115e:	fa02 f303 	lsl.w	r3, r2, r3
 8001162:	43db      	mvns	r3, r3
 8001164:	69ba      	ldr	r2, [r7, #24]
 8001166:	4013      	ands	r3, r2
 8001168:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	4a49      	ldr	r2, [pc, #292]	; (8001294 <HAL_GPIO_Init+0x2f0>)
 800116e:	4293      	cmp	r3, r2
 8001170:	d019      	beq.n	80011a6 <HAL_GPIO_Init+0x202>
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	4a48      	ldr	r2, [pc, #288]	; (8001298 <HAL_GPIO_Init+0x2f4>)
 8001176:	4293      	cmp	r3, r2
 8001178:	d013      	beq.n	80011a2 <HAL_GPIO_Init+0x1fe>
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	4a47      	ldr	r2, [pc, #284]	; (800129c <HAL_GPIO_Init+0x2f8>)
 800117e:	4293      	cmp	r3, r2
 8001180:	d00d      	beq.n	800119e <HAL_GPIO_Init+0x1fa>
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	4a46      	ldr	r2, [pc, #280]	; (80012a0 <HAL_GPIO_Init+0x2fc>)
 8001186:	4293      	cmp	r3, r2
 8001188:	d007      	beq.n	800119a <HAL_GPIO_Init+0x1f6>
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	4a45      	ldr	r2, [pc, #276]	; (80012a4 <HAL_GPIO_Init+0x300>)
 800118e:	4293      	cmp	r3, r2
 8001190:	d101      	bne.n	8001196 <HAL_GPIO_Init+0x1f2>
 8001192:	2304      	movs	r3, #4
 8001194:	e008      	b.n	80011a8 <HAL_GPIO_Init+0x204>
 8001196:	2307      	movs	r3, #7
 8001198:	e006      	b.n	80011a8 <HAL_GPIO_Init+0x204>
 800119a:	2303      	movs	r3, #3
 800119c:	e004      	b.n	80011a8 <HAL_GPIO_Init+0x204>
 800119e:	2302      	movs	r3, #2
 80011a0:	e002      	b.n	80011a8 <HAL_GPIO_Init+0x204>
 80011a2:	2301      	movs	r3, #1
 80011a4:	e000      	b.n	80011a8 <HAL_GPIO_Init+0x204>
 80011a6:	2300      	movs	r3, #0
 80011a8:	69fa      	ldr	r2, [r7, #28]
 80011aa:	f002 0203 	and.w	r2, r2, #3
 80011ae:	0092      	lsls	r2, r2, #2
 80011b0:	4093      	lsls	r3, r2
 80011b2:	69ba      	ldr	r2, [r7, #24]
 80011b4:	4313      	orrs	r3, r2
 80011b6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80011b8:	4935      	ldr	r1, [pc, #212]	; (8001290 <HAL_GPIO_Init+0x2ec>)
 80011ba:	69fb      	ldr	r3, [r7, #28]
 80011bc:	089b      	lsrs	r3, r3, #2
 80011be:	3302      	adds	r3, #2
 80011c0:	69ba      	ldr	r2, [r7, #24]
 80011c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011c6:	4b38      	ldr	r3, [pc, #224]	; (80012a8 <HAL_GPIO_Init+0x304>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011cc:	693b      	ldr	r3, [r7, #16]
 80011ce:	43db      	mvns	r3, r3
 80011d0:	69ba      	ldr	r2, [r7, #24]
 80011d2:	4013      	ands	r3, r2
 80011d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	685b      	ldr	r3, [r3, #4]
 80011da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d003      	beq.n	80011ea <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80011e2:	69ba      	ldr	r2, [r7, #24]
 80011e4:	693b      	ldr	r3, [r7, #16]
 80011e6:	4313      	orrs	r3, r2
 80011e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80011ea:	4a2f      	ldr	r2, [pc, #188]	; (80012a8 <HAL_GPIO_Init+0x304>)
 80011ec:	69bb      	ldr	r3, [r7, #24]
 80011ee:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80011f0:	4b2d      	ldr	r3, [pc, #180]	; (80012a8 <HAL_GPIO_Init+0x304>)
 80011f2:	685b      	ldr	r3, [r3, #4]
 80011f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011f6:	693b      	ldr	r3, [r7, #16]
 80011f8:	43db      	mvns	r3, r3
 80011fa:	69ba      	ldr	r2, [r7, #24]
 80011fc:	4013      	ands	r3, r2
 80011fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	685b      	ldr	r3, [r3, #4]
 8001204:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001208:	2b00      	cmp	r3, #0
 800120a:	d003      	beq.n	8001214 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800120c:	69ba      	ldr	r2, [r7, #24]
 800120e:	693b      	ldr	r3, [r7, #16]
 8001210:	4313      	orrs	r3, r2
 8001212:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001214:	4a24      	ldr	r2, [pc, #144]	; (80012a8 <HAL_GPIO_Init+0x304>)
 8001216:	69bb      	ldr	r3, [r7, #24]
 8001218:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800121a:	4b23      	ldr	r3, [pc, #140]	; (80012a8 <HAL_GPIO_Init+0x304>)
 800121c:	689b      	ldr	r3, [r3, #8]
 800121e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001220:	693b      	ldr	r3, [r7, #16]
 8001222:	43db      	mvns	r3, r3
 8001224:	69ba      	ldr	r2, [r7, #24]
 8001226:	4013      	ands	r3, r2
 8001228:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	685b      	ldr	r3, [r3, #4]
 800122e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001232:	2b00      	cmp	r3, #0
 8001234:	d003      	beq.n	800123e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001236:	69ba      	ldr	r2, [r7, #24]
 8001238:	693b      	ldr	r3, [r7, #16]
 800123a:	4313      	orrs	r3, r2
 800123c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800123e:	4a1a      	ldr	r2, [pc, #104]	; (80012a8 <HAL_GPIO_Init+0x304>)
 8001240:	69bb      	ldr	r3, [r7, #24]
 8001242:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001244:	4b18      	ldr	r3, [pc, #96]	; (80012a8 <HAL_GPIO_Init+0x304>)
 8001246:	68db      	ldr	r3, [r3, #12]
 8001248:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800124a:	693b      	ldr	r3, [r7, #16]
 800124c:	43db      	mvns	r3, r3
 800124e:	69ba      	ldr	r2, [r7, #24]
 8001250:	4013      	ands	r3, r2
 8001252:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	685b      	ldr	r3, [r3, #4]
 8001258:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800125c:	2b00      	cmp	r3, #0
 800125e:	d003      	beq.n	8001268 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001260:	69ba      	ldr	r2, [r7, #24]
 8001262:	693b      	ldr	r3, [r7, #16]
 8001264:	4313      	orrs	r3, r2
 8001266:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001268:	4a0f      	ldr	r2, [pc, #60]	; (80012a8 <HAL_GPIO_Init+0x304>)
 800126a:	69bb      	ldr	r3, [r7, #24]
 800126c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800126e:	69fb      	ldr	r3, [r7, #28]
 8001270:	3301      	adds	r3, #1
 8001272:	61fb      	str	r3, [r7, #28]
 8001274:	69fb      	ldr	r3, [r7, #28]
 8001276:	2b0f      	cmp	r3, #15
 8001278:	f67f aea2 	bls.w	8000fc0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800127c:	bf00      	nop
 800127e:	bf00      	nop
 8001280:	3724      	adds	r7, #36	; 0x24
 8001282:	46bd      	mov	sp, r7
 8001284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001288:	4770      	bx	lr
 800128a:	bf00      	nop
 800128c:	40023800 	.word	0x40023800
 8001290:	40013800 	.word	0x40013800
 8001294:	40020000 	.word	0x40020000
 8001298:	40020400 	.word	0x40020400
 800129c:	40020800 	.word	0x40020800
 80012a0:	40020c00 	.word	0x40020c00
 80012a4:	40021000 	.word	0x40021000
 80012a8:	40013c00 	.word	0x40013c00

080012ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012ac:	b480      	push	{r7}
 80012ae:	b083      	sub	sp, #12
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
 80012b4:	460b      	mov	r3, r1
 80012b6:	807b      	strh	r3, [r7, #2]
 80012b8:	4613      	mov	r3, r2
 80012ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80012bc:	787b      	ldrb	r3, [r7, #1]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d003      	beq.n	80012ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80012c2:	887a      	ldrh	r2, [r7, #2]
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80012c8:	e003      	b.n	80012d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80012ca:	887b      	ldrh	r3, [r7, #2]
 80012cc:	041a      	lsls	r2, r3, #16
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	619a      	str	r2, [r3, #24]
}
 80012d2:	bf00      	nop
 80012d4:	370c      	adds	r7, #12
 80012d6:	46bd      	mov	sp, r7
 80012d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012dc:	4770      	bx	lr

080012de <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80012de:	b480      	push	{r7}
 80012e0:	b085      	sub	sp, #20
 80012e2:	af00      	add	r7, sp, #0
 80012e4:	6078      	str	r0, [r7, #4]
 80012e6:	460b      	mov	r3, r1
 80012e8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	695b      	ldr	r3, [r3, #20]
 80012ee:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80012f0:	887a      	ldrh	r2, [r7, #2]
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	4013      	ands	r3, r2
 80012f6:	041a      	lsls	r2, r3, #16
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	43d9      	mvns	r1, r3
 80012fc:	887b      	ldrh	r3, [r7, #2]
 80012fe:	400b      	ands	r3, r1
 8001300:	431a      	orrs	r2, r3
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	619a      	str	r2, [r3, #24]
}
 8001306:	bf00      	nop
 8001308:	3714      	adds	r7, #20
 800130a:	46bd      	mov	sp, r7
 800130c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001310:	4770      	bx	lr
	...

08001314 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b082      	sub	sp, #8
 8001318:	af00      	add	r7, sp, #0
 800131a:	4603      	mov	r3, r0
 800131c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800131e:	4b08      	ldr	r3, [pc, #32]	; (8001340 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001320:	695a      	ldr	r2, [r3, #20]
 8001322:	88fb      	ldrh	r3, [r7, #6]
 8001324:	4013      	ands	r3, r2
 8001326:	2b00      	cmp	r3, #0
 8001328:	d006      	beq.n	8001338 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800132a:	4a05      	ldr	r2, [pc, #20]	; (8001340 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800132c:	88fb      	ldrh	r3, [r7, #6]
 800132e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001330:	88fb      	ldrh	r3, [r7, #6]
 8001332:	4618      	mov	r0, r3
 8001334:	f7ff fb5a 	bl	80009ec <HAL_GPIO_EXTI_Callback>
  }
}
 8001338:	bf00      	nop
 800133a:	3708      	adds	r7, #8
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}
 8001340:	40013c00 	.word	0x40013c00

08001344 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b084      	sub	sp, #16
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	2b00      	cmp	r3, #0
 8001350:	d101      	bne.n	8001356 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001352:	2301      	movs	r3, #1
 8001354:	e12b      	b.n	80015ae <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800135c:	b2db      	uxtb	r3, r3
 800135e:	2b00      	cmp	r3, #0
 8001360:	d106      	bne.n	8001370 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	2200      	movs	r2, #0
 8001366:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800136a:	6878      	ldr	r0, [r7, #4]
 800136c:	f7ff fb7c 	bl	8000a68 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	2224      	movs	r2, #36	; 0x24
 8001374:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	681a      	ldr	r2, [r3, #0]
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f022 0201 	bic.w	r2, r2, #1
 8001386:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	681a      	ldr	r2, [r3, #0]
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001396:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	681a      	ldr	r2, [r3, #0]
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80013a6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80013a8:	f002 fd04 	bl	8003db4 <HAL_RCC_GetPCLK1Freq>
 80013ac:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	685b      	ldr	r3, [r3, #4]
 80013b2:	4a81      	ldr	r2, [pc, #516]	; (80015b8 <HAL_I2C_Init+0x274>)
 80013b4:	4293      	cmp	r3, r2
 80013b6:	d807      	bhi.n	80013c8 <HAL_I2C_Init+0x84>
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	4a80      	ldr	r2, [pc, #512]	; (80015bc <HAL_I2C_Init+0x278>)
 80013bc:	4293      	cmp	r3, r2
 80013be:	bf94      	ite	ls
 80013c0:	2301      	movls	r3, #1
 80013c2:	2300      	movhi	r3, #0
 80013c4:	b2db      	uxtb	r3, r3
 80013c6:	e006      	b.n	80013d6 <HAL_I2C_Init+0x92>
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	4a7d      	ldr	r2, [pc, #500]	; (80015c0 <HAL_I2C_Init+0x27c>)
 80013cc:	4293      	cmp	r3, r2
 80013ce:	bf94      	ite	ls
 80013d0:	2301      	movls	r3, #1
 80013d2:	2300      	movhi	r3, #0
 80013d4:	b2db      	uxtb	r3, r3
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d001      	beq.n	80013de <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80013da:	2301      	movs	r3, #1
 80013dc:	e0e7      	b.n	80015ae <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	4a78      	ldr	r2, [pc, #480]	; (80015c4 <HAL_I2C_Init+0x280>)
 80013e2:	fba2 2303 	umull	r2, r3, r2, r3
 80013e6:	0c9b      	lsrs	r3, r3, #18
 80013e8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	68ba      	ldr	r2, [r7, #8]
 80013fa:	430a      	orrs	r2, r1
 80013fc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	6a1b      	ldr	r3, [r3, #32]
 8001404:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	4a6a      	ldr	r2, [pc, #424]	; (80015b8 <HAL_I2C_Init+0x274>)
 800140e:	4293      	cmp	r3, r2
 8001410:	d802      	bhi.n	8001418 <HAL_I2C_Init+0xd4>
 8001412:	68bb      	ldr	r3, [r7, #8]
 8001414:	3301      	adds	r3, #1
 8001416:	e009      	b.n	800142c <HAL_I2C_Init+0xe8>
 8001418:	68bb      	ldr	r3, [r7, #8]
 800141a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800141e:	fb02 f303 	mul.w	r3, r2, r3
 8001422:	4a69      	ldr	r2, [pc, #420]	; (80015c8 <HAL_I2C_Init+0x284>)
 8001424:	fba2 2303 	umull	r2, r3, r2, r3
 8001428:	099b      	lsrs	r3, r3, #6
 800142a:	3301      	adds	r3, #1
 800142c:	687a      	ldr	r2, [r7, #4]
 800142e:	6812      	ldr	r2, [r2, #0]
 8001430:	430b      	orrs	r3, r1
 8001432:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	69db      	ldr	r3, [r3, #28]
 800143a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800143e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	685b      	ldr	r3, [r3, #4]
 8001446:	495c      	ldr	r1, [pc, #368]	; (80015b8 <HAL_I2C_Init+0x274>)
 8001448:	428b      	cmp	r3, r1
 800144a:	d819      	bhi.n	8001480 <HAL_I2C_Init+0x13c>
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	1e59      	subs	r1, r3, #1
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	685b      	ldr	r3, [r3, #4]
 8001454:	005b      	lsls	r3, r3, #1
 8001456:	fbb1 f3f3 	udiv	r3, r1, r3
 800145a:	1c59      	adds	r1, r3, #1
 800145c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001460:	400b      	ands	r3, r1
 8001462:	2b00      	cmp	r3, #0
 8001464:	d00a      	beq.n	800147c <HAL_I2C_Init+0x138>
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	1e59      	subs	r1, r3, #1
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	685b      	ldr	r3, [r3, #4]
 800146e:	005b      	lsls	r3, r3, #1
 8001470:	fbb1 f3f3 	udiv	r3, r1, r3
 8001474:	3301      	adds	r3, #1
 8001476:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800147a:	e051      	b.n	8001520 <HAL_I2C_Init+0x1dc>
 800147c:	2304      	movs	r3, #4
 800147e:	e04f      	b.n	8001520 <HAL_I2C_Init+0x1dc>
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	689b      	ldr	r3, [r3, #8]
 8001484:	2b00      	cmp	r3, #0
 8001486:	d111      	bne.n	80014ac <HAL_I2C_Init+0x168>
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	1e58      	subs	r0, r3, #1
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	6859      	ldr	r1, [r3, #4]
 8001490:	460b      	mov	r3, r1
 8001492:	005b      	lsls	r3, r3, #1
 8001494:	440b      	add	r3, r1
 8001496:	fbb0 f3f3 	udiv	r3, r0, r3
 800149a:	3301      	adds	r3, #1
 800149c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	bf0c      	ite	eq
 80014a4:	2301      	moveq	r3, #1
 80014a6:	2300      	movne	r3, #0
 80014a8:	b2db      	uxtb	r3, r3
 80014aa:	e012      	b.n	80014d2 <HAL_I2C_Init+0x18e>
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	1e58      	subs	r0, r3, #1
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	6859      	ldr	r1, [r3, #4]
 80014b4:	460b      	mov	r3, r1
 80014b6:	009b      	lsls	r3, r3, #2
 80014b8:	440b      	add	r3, r1
 80014ba:	0099      	lsls	r1, r3, #2
 80014bc:	440b      	add	r3, r1
 80014be:	fbb0 f3f3 	udiv	r3, r0, r3
 80014c2:	3301      	adds	r3, #1
 80014c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	bf0c      	ite	eq
 80014cc:	2301      	moveq	r3, #1
 80014ce:	2300      	movne	r3, #0
 80014d0:	b2db      	uxtb	r3, r3
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d001      	beq.n	80014da <HAL_I2C_Init+0x196>
 80014d6:	2301      	movs	r3, #1
 80014d8:	e022      	b.n	8001520 <HAL_I2C_Init+0x1dc>
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	689b      	ldr	r3, [r3, #8]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d10e      	bne.n	8001500 <HAL_I2C_Init+0x1bc>
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	1e58      	subs	r0, r3, #1
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	6859      	ldr	r1, [r3, #4]
 80014ea:	460b      	mov	r3, r1
 80014ec:	005b      	lsls	r3, r3, #1
 80014ee:	440b      	add	r3, r1
 80014f0:	fbb0 f3f3 	udiv	r3, r0, r3
 80014f4:	3301      	adds	r3, #1
 80014f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80014fe:	e00f      	b.n	8001520 <HAL_I2C_Init+0x1dc>
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	1e58      	subs	r0, r3, #1
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	6859      	ldr	r1, [r3, #4]
 8001508:	460b      	mov	r3, r1
 800150a:	009b      	lsls	r3, r3, #2
 800150c:	440b      	add	r3, r1
 800150e:	0099      	lsls	r1, r3, #2
 8001510:	440b      	add	r3, r1
 8001512:	fbb0 f3f3 	udiv	r3, r0, r3
 8001516:	3301      	adds	r3, #1
 8001518:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800151c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001520:	6879      	ldr	r1, [r7, #4]
 8001522:	6809      	ldr	r1, [r1, #0]
 8001524:	4313      	orrs	r3, r2
 8001526:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	69da      	ldr	r2, [r3, #28]
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	6a1b      	ldr	r3, [r3, #32]
 800153a:	431a      	orrs	r2, r3
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	430a      	orrs	r2, r1
 8001542:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	689b      	ldr	r3, [r3, #8]
 800154a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800154e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001552:	687a      	ldr	r2, [r7, #4]
 8001554:	6911      	ldr	r1, [r2, #16]
 8001556:	687a      	ldr	r2, [r7, #4]
 8001558:	68d2      	ldr	r2, [r2, #12]
 800155a:	4311      	orrs	r1, r2
 800155c:	687a      	ldr	r2, [r7, #4]
 800155e:	6812      	ldr	r2, [r2, #0]
 8001560:	430b      	orrs	r3, r1
 8001562:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	68db      	ldr	r3, [r3, #12]
 800156a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	695a      	ldr	r2, [r3, #20]
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	699b      	ldr	r3, [r3, #24]
 8001576:	431a      	orrs	r2, r3
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	430a      	orrs	r2, r1
 800157e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	681a      	ldr	r2, [r3, #0]
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f042 0201 	orr.w	r2, r2, #1
 800158e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	2200      	movs	r2, #0
 8001594:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	2220      	movs	r2, #32
 800159a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	2200      	movs	r2, #0
 80015a2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	2200      	movs	r2, #0
 80015a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80015ac:	2300      	movs	r3, #0
}
 80015ae:	4618      	mov	r0, r3
 80015b0:	3710      	adds	r7, #16
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	bf00      	nop
 80015b8:	000186a0 	.word	0x000186a0
 80015bc:	001e847f 	.word	0x001e847f
 80015c0:	003d08ff 	.word	0x003d08ff
 80015c4:	431bde83 	.word	0x431bde83
 80015c8:	10624dd3 	.word	0x10624dd3

080015cc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b088      	sub	sp, #32
 80015d0:	af02      	add	r7, sp, #8
 80015d2:	60f8      	str	r0, [r7, #12]
 80015d4:	607a      	str	r2, [r7, #4]
 80015d6:	461a      	mov	r2, r3
 80015d8:	460b      	mov	r3, r1
 80015da:	817b      	strh	r3, [r7, #10]
 80015dc:	4613      	mov	r3, r2
 80015de:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80015e0:	f7ff fb9e 	bl	8000d20 <HAL_GetTick>
 80015e4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80015ec:	b2db      	uxtb	r3, r3
 80015ee:	2b20      	cmp	r3, #32
 80015f0:	f040 80e0 	bne.w	80017b4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80015f4:	697b      	ldr	r3, [r7, #20]
 80015f6:	9300      	str	r3, [sp, #0]
 80015f8:	2319      	movs	r3, #25
 80015fa:	2201      	movs	r2, #1
 80015fc:	4970      	ldr	r1, [pc, #448]	; (80017c0 <HAL_I2C_Master_Transmit+0x1f4>)
 80015fe:	68f8      	ldr	r0, [r7, #12]
 8001600:	f000 fc58 	bl	8001eb4 <I2C_WaitOnFlagUntilTimeout>
 8001604:	4603      	mov	r3, r0
 8001606:	2b00      	cmp	r3, #0
 8001608:	d001      	beq.n	800160e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800160a:	2302      	movs	r3, #2
 800160c:	e0d3      	b.n	80017b6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001614:	2b01      	cmp	r3, #1
 8001616:	d101      	bne.n	800161c <HAL_I2C_Master_Transmit+0x50>
 8001618:	2302      	movs	r3, #2
 800161a:	e0cc      	b.n	80017b6 <HAL_I2C_Master_Transmit+0x1ea>
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	2201      	movs	r2, #1
 8001620:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f003 0301 	and.w	r3, r3, #1
 800162e:	2b01      	cmp	r3, #1
 8001630:	d007      	beq.n	8001642 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	681a      	ldr	r2, [r3, #0]
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f042 0201 	orr.w	r2, r2, #1
 8001640:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	681a      	ldr	r2, [r3, #0]
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001650:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	2221      	movs	r2, #33	; 0x21
 8001656:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	2210      	movs	r2, #16
 800165e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	2200      	movs	r2, #0
 8001666:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	687a      	ldr	r2, [r7, #4]
 800166c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	893a      	ldrh	r2, [r7, #8]
 8001672:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001678:	b29a      	uxth	r2, r3
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	4a50      	ldr	r2, [pc, #320]	; (80017c4 <HAL_I2C_Master_Transmit+0x1f8>)
 8001682:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001684:	8979      	ldrh	r1, [r7, #10]
 8001686:	697b      	ldr	r3, [r7, #20]
 8001688:	6a3a      	ldr	r2, [r7, #32]
 800168a:	68f8      	ldr	r0, [r7, #12]
 800168c:	f000 fac2 	bl	8001c14 <I2C_MasterRequestWrite>
 8001690:	4603      	mov	r3, r0
 8001692:	2b00      	cmp	r3, #0
 8001694:	d001      	beq.n	800169a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001696:	2301      	movs	r3, #1
 8001698:	e08d      	b.n	80017b6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800169a:	2300      	movs	r3, #0
 800169c:	613b      	str	r3, [r7, #16]
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	695b      	ldr	r3, [r3, #20]
 80016a4:	613b      	str	r3, [r7, #16]
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	699b      	ldr	r3, [r3, #24]
 80016ac:	613b      	str	r3, [r7, #16]
 80016ae:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80016b0:	e066      	b.n	8001780 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80016b2:	697a      	ldr	r2, [r7, #20]
 80016b4:	6a39      	ldr	r1, [r7, #32]
 80016b6:	68f8      	ldr	r0, [r7, #12]
 80016b8:	f000 fcd2 	bl	8002060 <I2C_WaitOnTXEFlagUntilTimeout>
 80016bc:	4603      	mov	r3, r0
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d00d      	beq.n	80016de <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016c6:	2b04      	cmp	r3, #4
 80016c8:	d107      	bne.n	80016da <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	681a      	ldr	r2, [r3, #0]
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80016d8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80016da:	2301      	movs	r3, #1
 80016dc:	e06b      	b.n	80017b6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016e2:	781a      	ldrb	r2, [r3, #0]
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016ee:	1c5a      	adds	r2, r3, #1
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016f8:	b29b      	uxth	r3, r3
 80016fa:	3b01      	subs	r3, #1
 80016fc:	b29a      	uxth	r2, r3
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001706:	3b01      	subs	r3, #1
 8001708:	b29a      	uxth	r2, r3
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	695b      	ldr	r3, [r3, #20]
 8001714:	f003 0304 	and.w	r3, r3, #4
 8001718:	2b04      	cmp	r3, #4
 800171a:	d11b      	bne.n	8001754 <HAL_I2C_Master_Transmit+0x188>
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001720:	2b00      	cmp	r3, #0
 8001722:	d017      	beq.n	8001754 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001728:	781a      	ldrb	r2, [r3, #0]
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001734:	1c5a      	adds	r2, r3, #1
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800173e:	b29b      	uxth	r3, r3
 8001740:	3b01      	subs	r3, #1
 8001742:	b29a      	uxth	r2, r3
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800174c:	3b01      	subs	r3, #1
 800174e:	b29a      	uxth	r2, r3
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001754:	697a      	ldr	r2, [r7, #20]
 8001756:	6a39      	ldr	r1, [r7, #32]
 8001758:	68f8      	ldr	r0, [r7, #12]
 800175a:	f000 fcc2 	bl	80020e2 <I2C_WaitOnBTFFlagUntilTimeout>
 800175e:	4603      	mov	r3, r0
 8001760:	2b00      	cmp	r3, #0
 8001762:	d00d      	beq.n	8001780 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001768:	2b04      	cmp	r3, #4
 800176a:	d107      	bne.n	800177c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	681a      	ldr	r2, [r3, #0]
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800177a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800177c:	2301      	movs	r3, #1
 800177e:	e01a      	b.n	80017b6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001784:	2b00      	cmp	r3, #0
 8001786:	d194      	bne.n	80016b2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	681a      	ldr	r2, [r3, #0]
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001796:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	2220      	movs	r2, #32
 800179c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	2200      	movs	r2, #0
 80017a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	2200      	movs	r2, #0
 80017ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80017b0:	2300      	movs	r3, #0
 80017b2:	e000      	b.n	80017b6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80017b4:	2302      	movs	r3, #2
  }
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	3718      	adds	r7, #24
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	00100002 	.word	0x00100002
 80017c4:	ffff0000 	.word	0xffff0000

080017c8 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b08c      	sub	sp, #48	; 0x30
 80017cc:	af02      	add	r7, sp, #8
 80017ce:	60f8      	str	r0, [r7, #12]
 80017d0:	607a      	str	r2, [r7, #4]
 80017d2:	461a      	mov	r2, r3
 80017d4:	460b      	mov	r3, r1
 80017d6:	817b      	strh	r3, [r7, #10]
 80017d8:	4613      	mov	r3, r2
 80017da:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80017dc:	f7ff faa0 	bl	8000d20 <HAL_GetTick>
 80017e0:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80017e8:	b2db      	uxtb	r3, r3
 80017ea:	2b20      	cmp	r3, #32
 80017ec:	f040 820b 	bne.w	8001c06 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80017f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017f2:	9300      	str	r3, [sp, #0]
 80017f4:	2319      	movs	r3, #25
 80017f6:	2201      	movs	r2, #1
 80017f8:	497c      	ldr	r1, [pc, #496]	; (80019ec <HAL_I2C_Master_Receive+0x224>)
 80017fa:	68f8      	ldr	r0, [r7, #12]
 80017fc:	f000 fb5a 	bl	8001eb4 <I2C_WaitOnFlagUntilTimeout>
 8001800:	4603      	mov	r3, r0
 8001802:	2b00      	cmp	r3, #0
 8001804:	d001      	beq.n	800180a <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8001806:	2302      	movs	r3, #2
 8001808:	e1fe      	b.n	8001c08 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001810:	2b01      	cmp	r3, #1
 8001812:	d101      	bne.n	8001818 <HAL_I2C_Master_Receive+0x50>
 8001814:	2302      	movs	r3, #2
 8001816:	e1f7      	b.n	8001c08 <HAL_I2C_Master_Receive+0x440>
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	2201      	movs	r2, #1
 800181c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f003 0301 	and.w	r3, r3, #1
 800182a:	2b01      	cmp	r3, #1
 800182c:	d007      	beq.n	800183e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	681a      	ldr	r2, [r3, #0]
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f042 0201 	orr.w	r2, r2, #1
 800183c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	681a      	ldr	r2, [r3, #0]
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800184c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	2222      	movs	r2, #34	; 0x22
 8001852:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	2210      	movs	r2, #16
 800185a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	2200      	movs	r2, #0
 8001862:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	687a      	ldr	r2, [r7, #4]
 8001868:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	893a      	ldrh	r2, [r7, #8]
 800186e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001874:	b29a      	uxth	r2, r3
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	4a5c      	ldr	r2, [pc, #368]	; (80019f0 <HAL_I2C_Master_Receive+0x228>)
 800187e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001880:	8979      	ldrh	r1, [r7, #10]
 8001882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001884:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001886:	68f8      	ldr	r0, [r7, #12]
 8001888:	f000 fa46 	bl	8001d18 <I2C_MasterRequestRead>
 800188c:	4603      	mov	r3, r0
 800188e:	2b00      	cmp	r3, #0
 8001890:	d001      	beq.n	8001896 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8001892:	2301      	movs	r3, #1
 8001894:	e1b8      	b.n	8001c08 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800189a:	2b00      	cmp	r3, #0
 800189c:	d113      	bne.n	80018c6 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800189e:	2300      	movs	r3, #0
 80018a0:	623b      	str	r3, [r7, #32]
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	695b      	ldr	r3, [r3, #20]
 80018a8:	623b      	str	r3, [r7, #32]
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	699b      	ldr	r3, [r3, #24]
 80018b0:	623b      	str	r3, [r7, #32]
 80018b2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	681a      	ldr	r2, [r3, #0]
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80018c2:	601a      	str	r2, [r3, #0]
 80018c4:	e18c      	b.n	8001be0 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018ca:	2b01      	cmp	r3, #1
 80018cc:	d11b      	bne.n	8001906 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	681a      	ldr	r2, [r3, #0]
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80018dc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80018de:	2300      	movs	r3, #0
 80018e0:	61fb      	str	r3, [r7, #28]
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	695b      	ldr	r3, [r3, #20]
 80018e8:	61fb      	str	r3, [r7, #28]
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	699b      	ldr	r3, [r3, #24]
 80018f0:	61fb      	str	r3, [r7, #28]
 80018f2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	681a      	ldr	r2, [r3, #0]
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001902:	601a      	str	r2, [r3, #0]
 8001904:	e16c      	b.n	8001be0 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800190a:	2b02      	cmp	r3, #2
 800190c:	d11b      	bne.n	8001946 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	681a      	ldr	r2, [r3, #0]
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800191c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	681a      	ldr	r2, [r3, #0]
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800192c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800192e:	2300      	movs	r3, #0
 8001930:	61bb      	str	r3, [r7, #24]
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	695b      	ldr	r3, [r3, #20]
 8001938:	61bb      	str	r3, [r7, #24]
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	699b      	ldr	r3, [r3, #24]
 8001940:	61bb      	str	r3, [r7, #24]
 8001942:	69bb      	ldr	r3, [r7, #24]
 8001944:	e14c      	b.n	8001be0 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	681a      	ldr	r2, [r3, #0]
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001954:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001956:	2300      	movs	r3, #0
 8001958:	617b      	str	r3, [r7, #20]
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	695b      	ldr	r3, [r3, #20]
 8001960:	617b      	str	r3, [r7, #20]
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	699b      	ldr	r3, [r3, #24]
 8001968:	617b      	str	r3, [r7, #20]
 800196a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800196c:	e138      	b.n	8001be0 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001972:	2b03      	cmp	r3, #3
 8001974:	f200 80f1 	bhi.w	8001b5a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800197c:	2b01      	cmp	r3, #1
 800197e:	d123      	bne.n	80019c8 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001980:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001982:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001984:	68f8      	ldr	r0, [r7, #12]
 8001986:	f000 fbed 	bl	8002164 <I2C_WaitOnRXNEFlagUntilTimeout>
 800198a:	4603      	mov	r3, r0
 800198c:	2b00      	cmp	r3, #0
 800198e:	d001      	beq.n	8001994 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8001990:	2301      	movs	r3, #1
 8001992:	e139      	b.n	8001c08 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	691a      	ldr	r2, [r3, #16]
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800199e:	b2d2      	uxtb	r2, r2
 80019a0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019a6:	1c5a      	adds	r2, r3, #1
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019b0:	3b01      	subs	r3, #1
 80019b2:	b29a      	uxth	r2, r3
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019bc:	b29b      	uxth	r3, r3
 80019be:	3b01      	subs	r3, #1
 80019c0:	b29a      	uxth	r2, r3
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80019c6:	e10b      	b.n	8001be0 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019cc:	2b02      	cmp	r3, #2
 80019ce:	d14e      	bne.n	8001a6e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80019d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019d2:	9300      	str	r3, [sp, #0]
 80019d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019d6:	2200      	movs	r2, #0
 80019d8:	4906      	ldr	r1, [pc, #24]	; (80019f4 <HAL_I2C_Master_Receive+0x22c>)
 80019da:	68f8      	ldr	r0, [r7, #12]
 80019dc:	f000 fa6a 	bl	8001eb4 <I2C_WaitOnFlagUntilTimeout>
 80019e0:	4603      	mov	r3, r0
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d008      	beq.n	80019f8 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80019e6:	2301      	movs	r3, #1
 80019e8:	e10e      	b.n	8001c08 <HAL_I2C_Master_Receive+0x440>
 80019ea:	bf00      	nop
 80019ec:	00100002 	.word	0x00100002
 80019f0:	ffff0000 	.word	0xffff0000
 80019f4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	681a      	ldr	r2, [r3, #0]
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a06:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	691a      	ldr	r2, [r3, #16]
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a12:	b2d2      	uxtb	r2, r2
 8001a14:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a1a:	1c5a      	adds	r2, r3, #1
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a24:	3b01      	subs	r3, #1
 8001a26:	b29a      	uxth	r2, r3
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a30:	b29b      	uxth	r3, r3
 8001a32:	3b01      	subs	r3, #1
 8001a34:	b29a      	uxth	r2, r3
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	691a      	ldr	r2, [r3, #16]
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a44:	b2d2      	uxtb	r2, r2
 8001a46:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a4c:	1c5a      	adds	r2, r3, #1
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a56:	3b01      	subs	r3, #1
 8001a58:	b29a      	uxth	r2, r3
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a62:	b29b      	uxth	r3, r3
 8001a64:	3b01      	subs	r3, #1
 8001a66:	b29a      	uxth	r2, r3
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001a6c:	e0b8      	b.n	8001be0 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a70:	9300      	str	r3, [sp, #0]
 8001a72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a74:	2200      	movs	r2, #0
 8001a76:	4966      	ldr	r1, [pc, #408]	; (8001c10 <HAL_I2C_Master_Receive+0x448>)
 8001a78:	68f8      	ldr	r0, [r7, #12]
 8001a7a:	f000 fa1b 	bl	8001eb4 <I2C_WaitOnFlagUntilTimeout>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d001      	beq.n	8001a88 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8001a84:	2301      	movs	r3, #1
 8001a86:	e0bf      	b.n	8001c08 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	681a      	ldr	r2, [r3, #0]
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001a96:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	691a      	ldr	r2, [r3, #16]
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aa2:	b2d2      	uxtb	r2, r2
 8001aa4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aaa:	1c5a      	adds	r2, r3, #1
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ab4:	3b01      	subs	r3, #1
 8001ab6:	b29a      	uxth	r2, r3
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ac0:	b29b      	uxth	r3, r3
 8001ac2:	3b01      	subs	r3, #1
 8001ac4:	b29a      	uxth	r2, r3
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001acc:	9300      	str	r3, [sp, #0]
 8001ace:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	494f      	ldr	r1, [pc, #316]	; (8001c10 <HAL_I2C_Master_Receive+0x448>)
 8001ad4:	68f8      	ldr	r0, [r7, #12]
 8001ad6:	f000 f9ed 	bl	8001eb4 <I2C_WaitOnFlagUntilTimeout>
 8001ada:	4603      	mov	r3, r0
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d001      	beq.n	8001ae4 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	e091      	b.n	8001c08 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	681a      	ldr	r2, [r3, #0]
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001af2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	691a      	ldr	r2, [r3, #16]
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001afe:	b2d2      	uxtb	r2, r2
 8001b00:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b06:	1c5a      	adds	r2, r3, #1
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b10:	3b01      	subs	r3, #1
 8001b12:	b29a      	uxth	r2, r3
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b1c:	b29b      	uxth	r3, r3
 8001b1e:	3b01      	subs	r3, #1
 8001b20:	b29a      	uxth	r2, r3
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	691a      	ldr	r2, [r3, #16]
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b30:	b2d2      	uxtb	r2, r2
 8001b32:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b38:	1c5a      	adds	r2, r3, #1
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b42:	3b01      	subs	r3, #1
 8001b44:	b29a      	uxth	r2, r3
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b4e:	b29b      	uxth	r3, r3
 8001b50:	3b01      	subs	r3, #1
 8001b52:	b29a      	uxth	r2, r3
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001b58:	e042      	b.n	8001be0 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b5c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001b5e:	68f8      	ldr	r0, [r7, #12]
 8001b60:	f000 fb00 	bl	8002164 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001b64:	4603      	mov	r3, r0
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d001      	beq.n	8001b6e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	e04c      	b.n	8001c08 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	691a      	ldr	r2, [r3, #16]
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b78:	b2d2      	uxtb	r2, r2
 8001b7a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b80:	1c5a      	adds	r2, r3, #1
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b8a:	3b01      	subs	r3, #1
 8001b8c:	b29a      	uxth	r2, r3
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b96:	b29b      	uxth	r3, r3
 8001b98:	3b01      	subs	r3, #1
 8001b9a:	b29a      	uxth	r2, r3
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	695b      	ldr	r3, [r3, #20]
 8001ba6:	f003 0304 	and.w	r3, r3, #4
 8001baa:	2b04      	cmp	r3, #4
 8001bac:	d118      	bne.n	8001be0 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	691a      	ldr	r2, [r3, #16]
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bb8:	b2d2      	uxtb	r2, r2
 8001bba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bc0:	1c5a      	adds	r2, r3, #1
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bca:	3b01      	subs	r3, #1
 8001bcc:	b29a      	uxth	r2, r3
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bd6:	b29b      	uxth	r3, r3
 8001bd8:	3b01      	subs	r3, #1
 8001bda:	b29a      	uxth	r2, r3
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	f47f aec2 	bne.w	800196e <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	2220      	movs	r2, #32
 8001bee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001c02:	2300      	movs	r3, #0
 8001c04:	e000      	b.n	8001c08 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8001c06:	2302      	movs	r3, #2
  }
}
 8001c08:	4618      	mov	r0, r3
 8001c0a:	3728      	adds	r7, #40	; 0x28
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd80      	pop	{r7, pc}
 8001c10:	00010004 	.word	0x00010004

08001c14 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b088      	sub	sp, #32
 8001c18:	af02      	add	r7, sp, #8
 8001c1a:	60f8      	str	r0, [r7, #12]
 8001c1c:	607a      	str	r2, [r7, #4]
 8001c1e:	603b      	str	r3, [r7, #0]
 8001c20:	460b      	mov	r3, r1
 8001c22:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c28:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001c2a:	697b      	ldr	r3, [r7, #20]
 8001c2c:	2b08      	cmp	r3, #8
 8001c2e:	d006      	beq.n	8001c3e <I2C_MasterRequestWrite+0x2a>
 8001c30:	697b      	ldr	r3, [r7, #20]
 8001c32:	2b01      	cmp	r3, #1
 8001c34:	d003      	beq.n	8001c3e <I2C_MasterRequestWrite+0x2a>
 8001c36:	697b      	ldr	r3, [r7, #20]
 8001c38:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001c3c:	d108      	bne.n	8001c50 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	681a      	ldr	r2, [r3, #0]
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001c4c:	601a      	str	r2, [r3, #0]
 8001c4e:	e00b      	b.n	8001c68 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c54:	2b12      	cmp	r3, #18
 8001c56:	d107      	bne.n	8001c68 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	681a      	ldr	r2, [r3, #0]
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001c66:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	9300      	str	r3, [sp, #0]
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2200      	movs	r2, #0
 8001c70:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001c74:	68f8      	ldr	r0, [r7, #12]
 8001c76:	f000 f91d 	bl	8001eb4 <I2C_WaitOnFlagUntilTimeout>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d00d      	beq.n	8001c9c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001c8e:	d103      	bne.n	8001c98 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c96:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001c98:	2303      	movs	r3, #3
 8001c9a:	e035      	b.n	8001d08 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	691b      	ldr	r3, [r3, #16]
 8001ca0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001ca4:	d108      	bne.n	8001cb8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001ca6:	897b      	ldrh	r3, [r7, #10]
 8001ca8:	b2db      	uxtb	r3, r3
 8001caa:	461a      	mov	r2, r3
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001cb4:	611a      	str	r2, [r3, #16]
 8001cb6:	e01b      	b.n	8001cf0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001cb8:	897b      	ldrh	r3, [r7, #10]
 8001cba:	11db      	asrs	r3, r3, #7
 8001cbc:	b2db      	uxtb	r3, r3
 8001cbe:	f003 0306 	and.w	r3, r3, #6
 8001cc2:	b2db      	uxtb	r3, r3
 8001cc4:	f063 030f 	orn	r3, r3, #15
 8001cc8:	b2da      	uxtb	r2, r3
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	687a      	ldr	r2, [r7, #4]
 8001cd4:	490e      	ldr	r1, [pc, #56]	; (8001d10 <I2C_MasterRequestWrite+0xfc>)
 8001cd6:	68f8      	ldr	r0, [r7, #12]
 8001cd8:	f000 f943 	bl	8001f62 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d001      	beq.n	8001ce6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	e010      	b.n	8001d08 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001ce6:	897b      	ldrh	r3, [r7, #10]
 8001ce8:	b2da      	uxtb	r2, r3
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	687a      	ldr	r2, [r7, #4]
 8001cf4:	4907      	ldr	r1, [pc, #28]	; (8001d14 <I2C_MasterRequestWrite+0x100>)
 8001cf6:	68f8      	ldr	r0, [r7, #12]
 8001cf8:	f000 f933 	bl	8001f62 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d001      	beq.n	8001d06 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001d02:	2301      	movs	r3, #1
 8001d04:	e000      	b.n	8001d08 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001d06:	2300      	movs	r3, #0
}
 8001d08:	4618      	mov	r0, r3
 8001d0a:	3718      	adds	r7, #24
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bd80      	pop	{r7, pc}
 8001d10:	00010008 	.word	0x00010008
 8001d14:	00010002 	.word	0x00010002

08001d18 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b088      	sub	sp, #32
 8001d1c:	af02      	add	r7, sp, #8
 8001d1e:	60f8      	str	r0, [r7, #12]
 8001d20:	607a      	str	r2, [r7, #4]
 8001d22:	603b      	str	r3, [r7, #0]
 8001d24:	460b      	mov	r3, r1
 8001d26:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d2c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	681a      	ldr	r2, [r3, #0]
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001d3c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001d3e:	697b      	ldr	r3, [r7, #20]
 8001d40:	2b08      	cmp	r3, #8
 8001d42:	d006      	beq.n	8001d52 <I2C_MasterRequestRead+0x3a>
 8001d44:	697b      	ldr	r3, [r7, #20]
 8001d46:	2b01      	cmp	r3, #1
 8001d48:	d003      	beq.n	8001d52 <I2C_MasterRequestRead+0x3a>
 8001d4a:	697b      	ldr	r3, [r7, #20]
 8001d4c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001d50:	d108      	bne.n	8001d64 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	681a      	ldr	r2, [r3, #0]
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001d60:	601a      	str	r2, [r3, #0]
 8001d62:	e00b      	b.n	8001d7c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d68:	2b11      	cmp	r3, #17
 8001d6a:	d107      	bne.n	8001d7c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	681a      	ldr	r2, [r3, #0]
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001d7a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	9300      	str	r3, [sp, #0]
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2200      	movs	r2, #0
 8001d84:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001d88:	68f8      	ldr	r0, [r7, #12]
 8001d8a:	f000 f893 	bl	8001eb4 <I2C_WaitOnFlagUntilTimeout>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d00d      	beq.n	8001db0 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001da2:	d103      	bne.n	8001dac <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001daa:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001dac:	2303      	movs	r3, #3
 8001dae:	e079      	b.n	8001ea4 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	691b      	ldr	r3, [r3, #16]
 8001db4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001db8:	d108      	bne.n	8001dcc <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8001dba:	897b      	ldrh	r3, [r7, #10]
 8001dbc:	b2db      	uxtb	r3, r3
 8001dbe:	f043 0301 	orr.w	r3, r3, #1
 8001dc2:	b2da      	uxtb	r2, r3
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	611a      	str	r2, [r3, #16]
 8001dca:	e05f      	b.n	8001e8c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001dcc:	897b      	ldrh	r3, [r7, #10]
 8001dce:	11db      	asrs	r3, r3, #7
 8001dd0:	b2db      	uxtb	r3, r3
 8001dd2:	f003 0306 	and.w	r3, r3, #6
 8001dd6:	b2db      	uxtb	r3, r3
 8001dd8:	f063 030f 	orn	r3, r3, #15
 8001ddc:	b2da      	uxtb	r2, r3
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	687a      	ldr	r2, [r7, #4]
 8001de8:	4930      	ldr	r1, [pc, #192]	; (8001eac <I2C_MasterRequestRead+0x194>)
 8001dea:	68f8      	ldr	r0, [r7, #12]
 8001dec:	f000 f8b9 	bl	8001f62 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001df0:	4603      	mov	r3, r0
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d001      	beq.n	8001dfa <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8001df6:	2301      	movs	r3, #1
 8001df8:	e054      	b.n	8001ea4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001dfa:	897b      	ldrh	r3, [r7, #10]
 8001dfc:	b2da      	uxtb	r2, r3
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	687a      	ldr	r2, [r7, #4]
 8001e08:	4929      	ldr	r1, [pc, #164]	; (8001eb0 <I2C_MasterRequestRead+0x198>)
 8001e0a:	68f8      	ldr	r0, [r7, #12]
 8001e0c:	f000 f8a9 	bl	8001f62 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001e10:	4603      	mov	r3, r0
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d001      	beq.n	8001e1a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8001e16:	2301      	movs	r3, #1
 8001e18:	e044      	b.n	8001ea4 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	613b      	str	r3, [r7, #16]
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	695b      	ldr	r3, [r3, #20]
 8001e24:	613b      	str	r3, [r7, #16]
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	699b      	ldr	r3, [r3, #24]
 8001e2c:	613b      	str	r3, [r7, #16]
 8001e2e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	681a      	ldr	r2, [r3, #0]
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001e3e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	9300      	str	r3, [sp, #0]
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2200      	movs	r2, #0
 8001e48:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001e4c:	68f8      	ldr	r0, [r7, #12]
 8001e4e:	f000 f831 	bl	8001eb4 <I2C_WaitOnFlagUntilTimeout>
 8001e52:	4603      	mov	r3, r0
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d00d      	beq.n	8001e74 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e66:	d103      	bne.n	8001e70 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e6e:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8001e70:	2303      	movs	r3, #3
 8001e72:	e017      	b.n	8001ea4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8001e74:	897b      	ldrh	r3, [r7, #10]
 8001e76:	11db      	asrs	r3, r3, #7
 8001e78:	b2db      	uxtb	r3, r3
 8001e7a:	f003 0306 	and.w	r3, r3, #6
 8001e7e:	b2db      	uxtb	r3, r3
 8001e80:	f063 030e 	orn	r3, r3, #14
 8001e84:	b2da      	uxtb	r2, r3
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	687a      	ldr	r2, [r7, #4]
 8001e90:	4907      	ldr	r1, [pc, #28]	; (8001eb0 <I2C_MasterRequestRead+0x198>)
 8001e92:	68f8      	ldr	r0, [r7, #12]
 8001e94:	f000 f865 	bl	8001f62 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d001      	beq.n	8001ea2 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	e000      	b.n	8001ea4 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8001ea2:	2300      	movs	r3, #0
}
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	3718      	adds	r7, #24
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bd80      	pop	{r7, pc}
 8001eac:	00010008 	.word	0x00010008
 8001eb0:	00010002 	.word	0x00010002

08001eb4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b084      	sub	sp, #16
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	60f8      	str	r0, [r7, #12]
 8001ebc:	60b9      	str	r1, [r7, #8]
 8001ebe:	603b      	str	r3, [r7, #0]
 8001ec0:	4613      	mov	r3, r2
 8001ec2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001ec4:	e025      	b.n	8001f12 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ecc:	d021      	beq.n	8001f12 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ece:	f7fe ff27 	bl	8000d20 <HAL_GetTick>
 8001ed2:	4602      	mov	r2, r0
 8001ed4:	69bb      	ldr	r3, [r7, #24]
 8001ed6:	1ad3      	subs	r3, r2, r3
 8001ed8:	683a      	ldr	r2, [r7, #0]
 8001eda:	429a      	cmp	r2, r3
 8001edc:	d302      	bcc.n	8001ee4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d116      	bne.n	8001f12 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	2220      	movs	r2, #32
 8001eee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001efe:	f043 0220 	orr.w	r2, r3, #32
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	2200      	movs	r2, #0
 8001f0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001f0e:	2301      	movs	r3, #1
 8001f10:	e023      	b.n	8001f5a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001f12:	68bb      	ldr	r3, [r7, #8]
 8001f14:	0c1b      	lsrs	r3, r3, #16
 8001f16:	b2db      	uxtb	r3, r3
 8001f18:	2b01      	cmp	r3, #1
 8001f1a:	d10d      	bne.n	8001f38 <I2C_WaitOnFlagUntilTimeout+0x84>
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	695b      	ldr	r3, [r3, #20]
 8001f22:	43da      	mvns	r2, r3
 8001f24:	68bb      	ldr	r3, [r7, #8]
 8001f26:	4013      	ands	r3, r2
 8001f28:	b29b      	uxth	r3, r3
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	bf0c      	ite	eq
 8001f2e:	2301      	moveq	r3, #1
 8001f30:	2300      	movne	r3, #0
 8001f32:	b2db      	uxtb	r3, r3
 8001f34:	461a      	mov	r2, r3
 8001f36:	e00c      	b.n	8001f52 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	699b      	ldr	r3, [r3, #24]
 8001f3e:	43da      	mvns	r2, r3
 8001f40:	68bb      	ldr	r3, [r7, #8]
 8001f42:	4013      	ands	r3, r2
 8001f44:	b29b      	uxth	r3, r3
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	bf0c      	ite	eq
 8001f4a:	2301      	moveq	r3, #1
 8001f4c:	2300      	movne	r3, #0
 8001f4e:	b2db      	uxtb	r3, r3
 8001f50:	461a      	mov	r2, r3
 8001f52:	79fb      	ldrb	r3, [r7, #7]
 8001f54:	429a      	cmp	r2, r3
 8001f56:	d0b6      	beq.n	8001ec6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001f58:	2300      	movs	r3, #0
}
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	3710      	adds	r7, #16
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}

08001f62 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001f62:	b580      	push	{r7, lr}
 8001f64:	b084      	sub	sp, #16
 8001f66:	af00      	add	r7, sp, #0
 8001f68:	60f8      	str	r0, [r7, #12]
 8001f6a:	60b9      	str	r1, [r7, #8]
 8001f6c:	607a      	str	r2, [r7, #4]
 8001f6e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001f70:	e051      	b.n	8002016 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	695b      	ldr	r3, [r3, #20]
 8001f78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f80:	d123      	bne.n	8001fca <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	681a      	ldr	r2, [r3, #0]
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f90:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001f9a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	2220      	movs	r2, #32
 8001fa6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	2200      	movs	r2, #0
 8001fae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fb6:	f043 0204 	orr.w	r2, r3, #4
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	e046      	b.n	8002058 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fd0:	d021      	beq.n	8002016 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001fd2:	f7fe fea5 	bl	8000d20 <HAL_GetTick>
 8001fd6:	4602      	mov	r2, r0
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	1ad3      	subs	r3, r2, r3
 8001fdc:	687a      	ldr	r2, [r7, #4]
 8001fde:	429a      	cmp	r2, r3
 8001fe0:	d302      	bcc.n	8001fe8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d116      	bne.n	8002016 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	2200      	movs	r2, #0
 8001fec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	2220      	movs	r2, #32
 8001ff2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002002:	f043 0220 	orr.w	r2, r3, #32
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	2200      	movs	r2, #0
 800200e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002012:	2301      	movs	r3, #1
 8002014:	e020      	b.n	8002058 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002016:	68bb      	ldr	r3, [r7, #8]
 8002018:	0c1b      	lsrs	r3, r3, #16
 800201a:	b2db      	uxtb	r3, r3
 800201c:	2b01      	cmp	r3, #1
 800201e:	d10c      	bne.n	800203a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	695b      	ldr	r3, [r3, #20]
 8002026:	43da      	mvns	r2, r3
 8002028:	68bb      	ldr	r3, [r7, #8]
 800202a:	4013      	ands	r3, r2
 800202c:	b29b      	uxth	r3, r3
 800202e:	2b00      	cmp	r3, #0
 8002030:	bf14      	ite	ne
 8002032:	2301      	movne	r3, #1
 8002034:	2300      	moveq	r3, #0
 8002036:	b2db      	uxtb	r3, r3
 8002038:	e00b      	b.n	8002052 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	699b      	ldr	r3, [r3, #24]
 8002040:	43da      	mvns	r2, r3
 8002042:	68bb      	ldr	r3, [r7, #8]
 8002044:	4013      	ands	r3, r2
 8002046:	b29b      	uxth	r3, r3
 8002048:	2b00      	cmp	r3, #0
 800204a:	bf14      	ite	ne
 800204c:	2301      	movne	r3, #1
 800204e:	2300      	moveq	r3, #0
 8002050:	b2db      	uxtb	r3, r3
 8002052:	2b00      	cmp	r3, #0
 8002054:	d18d      	bne.n	8001f72 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002056:	2300      	movs	r3, #0
}
 8002058:	4618      	mov	r0, r3
 800205a:	3710      	adds	r7, #16
 800205c:	46bd      	mov	sp, r7
 800205e:	bd80      	pop	{r7, pc}

08002060 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b084      	sub	sp, #16
 8002064:	af00      	add	r7, sp, #0
 8002066:	60f8      	str	r0, [r7, #12]
 8002068:	60b9      	str	r1, [r7, #8]
 800206a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800206c:	e02d      	b.n	80020ca <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800206e:	68f8      	ldr	r0, [r7, #12]
 8002070:	f000 f8ce 	bl	8002210 <I2C_IsAcknowledgeFailed>
 8002074:	4603      	mov	r3, r0
 8002076:	2b00      	cmp	r3, #0
 8002078:	d001      	beq.n	800207e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800207a:	2301      	movs	r3, #1
 800207c:	e02d      	b.n	80020da <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800207e:	68bb      	ldr	r3, [r7, #8]
 8002080:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002084:	d021      	beq.n	80020ca <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002086:	f7fe fe4b 	bl	8000d20 <HAL_GetTick>
 800208a:	4602      	mov	r2, r0
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	1ad3      	subs	r3, r2, r3
 8002090:	68ba      	ldr	r2, [r7, #8]
 8002092:	429a      	cmp	r2, r3
 8002094:	d302      	bcc.n	800209c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002096:	68bb      	ldr	r3, [r7, #8]
 8002098:	2b00      	cmp	r3, #0
 800209a:	d116      	bne.n	80020ca <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	2200      	movs	r2, #0
 80020a0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	2220      	movs	r2, #32
 80020a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	2200      	movs	r2, #0
 80020ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020b6:	f043 0220 	orr.w	r2, r3, #32
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	2200      	movs	r2, #0
 80020c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80020c6:	2301      	movs	r3, #1
 80020c8:	e007      	b.n	80020da <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	695b      	ldr	r3, [r3, #20]
 80020d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020d4:	2b80      	cmp	r3, #128	; 0x80
 80020d6:	d1ca      	bne.n	800206e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80020d8:	2300      	movs	r3, #0
}
 80020da:	4618      	mov	r0, r3
 80020dc:	3710      	adds	r7, #16
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}

080020e2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80020e2:	b580      	push	{r7, lr}
 80020e4:	b084      	sub	sp, #16
 80020e6:	af00      	add	r7, sp, #0
 80020e8:	60f8      	str	r0, [r7, #12]
 80020ea:	60b9      	str	r1, [r7, #8]
 80020ec:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80020ee:	e02d      	b.n	800214c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80020f0:	68f8      	ldr	r0, [r7, #12]
 80020f2:	f000 f88d 	bl	8002210 <I2C_IsAcknowledgeFailed>
 80020f6:	4603      	mov	r3, r0
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d001      	beq.n	8002100 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80020fc:	2301      	movs	r3, #1
 80020fe:	e02d      	b.n	800215c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002100:	68bb      	ldr	r3, [r7, #8]
 8002102:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002106:	d021      	beq.n	800214c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002108:	f7fe fe0a 	bl	8000d20 <HAL_GetTick>
 800210c:	4602      	mov	r2, r0
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	1ad3      	subs	r3, r2, r3
 8002112:	68ba      	ldr	r2, [r7, #8]
 8002114:	429a      	cmp	r2, r3
 8002116:	d302      	bcc.n	800211e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002118:	68bb      	ldr	r3, [r7, #8]
 800211a:	2b00      	cmp	r3, #0
 800211c:	d116      	bne.n	800214c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	2200      	movs	r2, #0
 8002122:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	2220      	movs	r2, #32
 8002128:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	2200      	movs	r2, #0
 8002130:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002138:	f043 0220 	orr.w	r2, r3, #32
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	2200      	movs	r2, #0
 8002144:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002148:	2301      	movs	r3, #1
 800214a:	e007      	b.n	800215c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	695b      	ldr	r3, [r3, #20]
 8002152:	f003 0304 	and.w	r3, r3, #4
 8002156:	2b04      	cmp	r3, #4
 8002158:	d1ca      	bne.n	80020f0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800215a:	2300      	movs	r3, #0
}
 800215c:	4618      	mov	r0, r3
 800215e:	3710      	adds	r7, #16
 8002160:	46bd      	mov	sp, r7
 8002162:	bd80      	pop	{r7, pc}

08002164 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b084      	sub	sp, #16
 8002168:	af00      	add	r7, sp, #0
 800216a:	60f8      	str	r0, [r7, #12]
 800216c:	60b9      	str	r1, [r7, #8]
 800216e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002170:	e042      	b.n	80021f8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	695b      	ldr	r3, [r3, #20]
 8002178:	f003 0310 	and.w	r3, r3, #16
 800217c:	2b10      	cmp	r3, #16
 800217e:	d119      	bne.n	80021b4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f06f 0210 	mvn.w	r2, #16
 8002188:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	2200      	movs	r2, #0
 800218e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	2220      	movs	r2, #32
 8002194:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	2200      	movs	r2, #0
 800219c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	2200      	movs	r2, #0
 80021ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80021b0:	2301      	movs	r3, #1
 80021b2:	e029      	b.n	8002208 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80021b4:	f7fe fdb4 	bl	8000d20 <HAL_GetTick>
 80021b8:	4602      	mov	r2, r0
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	1ad3      	subs	r3, r2, r3
 80021be:	68ba      	ldr	r2, [r7, #8]
 80021c0:	429a      	cmp	r2, r3
 80021c2:	d302      	bcc.n	80021ca <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80021c4:	68bb      	ldr	r3, [r7, #8]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d116      	bne.n	80021f8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	2200      	movs	r2, #0
 80021ce:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	2220      	movs	r2, #32
 80021d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	2200      	movs	r2, #0
 80021dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e4:	f043 0220 	orr.w	r2, r3, #32
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	2200      	movs	r2, #0
 80021f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80021f4:	2301      	movs	r3, #1
 80021f6:	e007      	b.n	8002208 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	695b      	ldr	r3, [r3, #20]
 80021fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002202:	2b40      	cmp	r3, #64	; 0x40
 8002204:	d1b5      	bne.n	8002172 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002206:	2300      	movs	r3, #0
}
 8002208:	4618      	mov	r0, r3
 800220a:	3710      	adds	r7, #16
 800220c:	46bd      	mov	sp, r7
 800220e:	bd80      	pop	{r7, pc}

08002210 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002210:	b480      	push	{r7}
 8002212:	b083      	sub	sp, #12
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	695b      	ldr	r3, [r3, #20]
 800221e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002222:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002226:	d11b      	bne.n	8002260 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002230:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2200      	movs	r2, #0
 8002236:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2220      	movs	r2, #32
 800223c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2200      	movs	r2, #0
 8002244:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800224c:	f043 0204 	orr.w	r2, r3, #4
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2200      	movs	r2, #0
 8002258:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800225c:	2301      	movs	r3, #1
 800225e:	e000      	b.n	8002262 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002260:	2300      	movs	r3, #0
}
 8002262:	4618      	mov	r0, r3
 8002264:	370c      	adds	r7, #12
 8002266:	46bd      	mov	sp, r7
 8002268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226c:	4770      	bx	lr

0800226e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800226e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002270:	b08f      	sub	sp, #60	; 0x3c
 8002272:	af0a      	add	r7, sp, #40	; 0x28
 8002274:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2b00      	cmp	r3, #0
 800227a:	d101      	bne.n	8002280 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800227c:	2301      	movs	r3, #1
 800227e:	e10f      	b.n	80024a0 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800228c:	b2db      	uxtb	r3, r3
 800228e:	2b00      	cmp	r3, #0
 8002290:	d106      	bne.n	80022a0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	2200      	movs	r2, #0
 8002296:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800229a:	6878      	ldr	r0, [r7, #4]
 800229c:	f004 ffae 	bl	80071fc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2203      	movs	r2, #3
 80022a4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80022a8:	68bb      	ldr	r3, [r7, #8]
 80022aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d102      	bne.n	80022ba <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2200      	movs	r2, #0
 80022b8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	4618      	mov	r0, r3
 80022c0:	f001 fea1 	bl	8004006 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	603b      	str	r3, [r7, #0]
 80022ca:	687e      	ldr	r6, [r7, #4]
 80022cc:	466d      	mov	r5, sp
 80022ce:	f106 0410 	add.w	r4, r6, #16
 80022d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80022d4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80022d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80022d8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80022da:	e894 0003 	ldmia.w	r4, {r0, r1}
 80022de:	e885 0003 	stmia.w	r5, {r0, r1}
 80022e2:	1d33      	adds	r3, r6, #4
 80022e4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80022e6:	6838      	ldr	r0, [r7, #0]
 80022e8:	f001 fd78 	bl	8003ddc <USB_CoreInit>
 80022ec:	4603      	mov	r3, r0
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d005      	beq.n	80022fe <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	2202      	movs	r2, #2
 80022f6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80022fa:	2301      	movs	r3, #1
 80022fc:	e0d0      	b.n	80024a0 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	2100      	movs	r1, #0
 8002304:	4618      	mov	r0, r3
 8002306:	f001 fe8f 	bl	8004028 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800230a:	2300      	movs	r3, #0
 800230c:	73fb      	strb	r3, [r7, #15]
 800230e:	e04a      	b.n	80023a6 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002310:	7bfa      	ldrb	r2, [r7, #15]
 8002312:	6879      	ldr	r1, [r7, #4]
 8002314:	4613      	mov	r3, r2
 8002316:	00db      	lsls	r3, r3, #3
 8002318:	1a9b      	subs	r3, r3, r2
 800231a:	009b      	lsls	r3, r3, #2
 800231c:	440b      	add	r3, r1
 800231e:	333d      	adds	r3, #61	; 0x3d
 8002320:	2201      	movs	r2, #1
 8002322:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002324:	7bfa      	ldrb	r2, [r7, #15]
 8002326:	6879      	ldr	r1, [r7, #4]
 8002328:	4613      	mov	r3, r2
 800232a:	00db      	lsls	r3, r3, #3
 800232c:	1a9b      	subs	r3, r3, r2
 800232e:	009b      	lsls	r3, r3, #2
 8002330:	440b      	add	r3, r1
 8002332:	333c      	adds	r3, #60	; 0x3c
 8002334:	7bfa      	ldrb	r2, [r7, #15]
 8002336:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002338:	7bfa      	ldrb	r2, [r7, #15]
 800233a:	7bfb      	ldrb	r3, [r7, #15]
 800233c:	b298      	uxth	r0, r3
 800233e:	6879      	ldr	r1, [r7, #4]
 8002340:	4613      	mov	r3, r2
 8002342:	00db      	lsls	r3, r3, #3
 8002344:	1a9b      	subs	r3, r3, r2
 8002346:	009b      	lsls	r3, r3, #2
 8002348:	440b      	add	r3, r1
 800234a:	3342      	adds	r3, #66	; 0x42
 800234c:	4602      	mov	r2, r0
 800234e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002350:	7bfa      	ldrb	r2, [r7, #15]
 8002352:	6879      	ldr	r1, [r7, #4]
 8002354:	4613      	mov	r3, r2
 8002356:	00db      	lsls	r3, r3, #3
 8002358:	1a9b      	subs	r3, r3, r2
 800235a:	009b      	lsls	r3, r3, #2
 800235c:	440b      	add	r3, r1
 800235e:	333f      	adds	r3, #63	; 0x3f
 8002360:	2200      	movs	r2, #0
 8002362:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002364:	7bfa      	ldrb	r2, [r7, #15]
 8002366:	6879      	ldr	r1, [r7, #4]
 8002368:	4613      	mov	r3, r2
 800236a:	00db      	lsls	r3, r3, #3
 800236c:	1a9b      	subs	r3, r3, r2
 800236e:	009b      	lsls	r3, r3, #2
 8002370:	440b      	add	r3, r1
 8002372:	3344      	adds	r3, #68	; 0x44
 8002374:	2200      	movs	r2, #0
 8002376:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002378:	7bfa      	ldrb	r2, [r7, #15]
 800237a:	6879      	ldr	r1, [r7, #4]
 800237c:	4613      	mov	r3, r2
 800237e:	00db      	lsls	r3, r3, #3
 8002380:	1a9b      	subs	r3, r3, r2
 8002382:	009b      	lsls	r3, r3, #2
 8002384:	440b      	add	r3, r1
 8002386:	3348      	adds	r3, #72	; 0x48
 8002388:	2200      	movs	r2, #0
 800238a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800238c:	7bfa      	ldrb	r2, [r7, #15]
 800238e:	6879      	ldr	r1, [r7, #4]
 8002390:	4613      	mov	r3, r2
 8002392:	00db      	lsls	r3, r3, #3
 8002394:	1a9b      	subs	r3, r3, r2
 8002396:	009b      	lsls	r3, r3, #2
 8002398:	440b      	add	r3, r1
 800239a:	3350      	adds	r3, #80	; 0x50
 800239c:	2200      	movs	r2, #0
 800239e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023a0:	7bfb      	ldrb	r3, [r7, #15]
 80023a2:	3301      	adds	r3, #1
 80023a4:	73fb      	strb	r3, [r7, #15]
 80023a6:	7bfa      	ldrb	r2, [r7, #15]
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	429a      	cmp	r2, r3
 80023ae:	d3af      	bcc.n	8002310 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023b0:	2300      	movs	r3, #0
 80023b2:	73fb      	strb	r3, [r7, #15]
 80023b4:	e044      	b.n	8002440 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80023b6:	7bfa      	ldrb	r2, [r7, #15]
 80023b8:	6879      	ldr	r1, [r7, #4]
 80023ba:	4613      	mov	r3, r2
 80023bc:	00db      	lsls	r3, r3, #3
 80023be:	1a9b      	subs	r3, r3, r2
 80023c0:	009b      	lsls	r3, r3, #2
 80023c2:	440b      	add	r3, r1
 80023c4:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80023c8:	2200      	movs	r2, #0
 80023ca:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80023cc:	7bfa      	ldrb	r2, [r7, #15]
 80023ce:	6879      	ldr	r1, [r7, #4]
 80023d0:	4613      	mov	r3, r2
 80023d2:	00db      	lsls	r3, r3, #3
 80023d4:	1a9b      	subs	r3, r3, r2
 80023d6:	009b      	lsls	r3, r3, #2
 80023d8:	440b      	add	r3, r1
 80023da:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80023de:	7bfa      	ldrb	r2, [r7, #15]
 80023e0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80023e2:	7bfa      	ldrb	r2, [r7, #15]
 80023e4:	6879      	ldr	r1, [r7, #4]
 80023e6:	4613      	mov	r3, r2
 80023e8:	00db      	lsls	r3, r3, #3
 80023ea:	1a9b      	subs	r3, r3, r2
 80023ec:	009b      	lsls	r3, r3, #2
 80023ee:	440b      	add	r3, r1
 80023f0:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80023f4:	2200      	movs	r2, #0
 80023f6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80023f8:	7bfa      	ldrb	r2, [r7, #15]
 80023fa:	6879      	ldr	r1, [r7, #4]
 80023fc:	4613      	mov	r3, r2
 80023fe:	00db      	lsls	r3, r3, #3
 8002400:	1a9b      	subs	r3, r3, r2
 8002402:	009b      	lsls	r3, r3, #2
 8002404:	440b      	add	r3, r1
 8002406:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800240a:	2200      	movs	r2, #0
 800240c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800240e:	7bfa      	ldrb	r2, [r7, #15]
 8002410:	6879      	ldr	r1, [r7, #4]
 8002412:	4613      	mov	r3, r2
 8002414:	00db      	lsls	r3, r3, #3
 8002416:	1a9b      	subs	r3, r3, r2
 8002418:	009b      	lsls	r3, r3, #2
 800241a:	440b      	add	r3, r1
 800241c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002420:	2200      	movs	r2, #0
 8002422:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002424:	7bfa      	ldrb	r2, [r7, #15]
 8002426:	6879      	ldr	r1, [r7, #4]
 8002428:	4613      	mov	r3, r2
 800242a:	00db      	lsls	r3, r3, #3
 800242c:	1a9b      	subs	r3, r3, r2
 800242e:	009b      	lsls	r3, r3, #2
 8002430:	440b      	add	r3, r1
 8002432:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002436:	2200      	movs	r2, #0
 8002438:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800243a:	7bfb      	ldrb	r3, [r7, #15]
 800243c:	3301      	adds	r3, #1
 800243e:	73fb      	strb	r3, [r7, #15]
 8002440:	7bfa      	ldrb	r2, [r7, #15]
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	429a      	cmp	r2, r3
 8002448:	d3b5      	bcc.n	80023b6 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	603b      	str	r3, [r7, #0]
 8002450:	687e      	ldr	r6, [r7, #4]
 8002452:	466d      	mov	r5, sp
 8002454:	f106 0410 	add.w	r4, r6, #16
 8002458:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800245a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800245c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800245e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002460:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002464:	e885 0003 	stmia.w	r5, {r0, r1}
 8002468:	1d33      	adds	r3, r6, #4
 800246a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800246c:	6838      	ldr	r0, [r7, #0]
 800246e:	f001 fe27 	bl	80040c0 <USB_DevInit>
 8002472:	4603      	mov	r3, r0
 8002474:	2b00      	cmp	r3, #0
 8002476:	d005      	beq.n	8002484 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2202      	movs	r2, #2
 800247c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002480:	2301      	movs	r3, #1
 8002482:	e00d      	b.n	80024a0 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2200      	movs	r2, #0
 8002488:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2201      	movs	r2, #1
 8002490:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4618      	mov	r0, r3
 800249a:	f002 fea3 	bl	80051e4 <USB_DevDisconnect>

  return HAL_OK;
 800249e:	2300      	movs	r3, #0
}
 80024a0:	4618      	mov	r0, r3
 80024a2:	3714      	adds	r7, #20
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080024a8 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b084      	sub	sp, #16
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80024bc:	2b01      	cmp	r3, #1
 80024be:	d101      	bne.n	80024c4 <HAL_PCD_Start+0x1c>
 80024c0:	2302      	movs	r3, #2
 80024c2:	e020      	b.n	8002506 <HAL_PCD_Start+0x5e>
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2201      	movs	r2, #1
 80024c8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024d0:	2b01      	cmp	r3, #1
 80024d2:	d109      	bne.n	80024e8 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80024d8:	2b01      	cmp	r3, #1
 80024da:	d005      	beq.n	80024e8 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024e0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4618      	mov	r0, r3
 80024ee:	f001 fd79 	bl	8003fe4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4618      	mov	r0, r3
 80024f8:	f002 fe53 	bl	80051a2 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2200      	movs	r2, #0
 8002500:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002504:	2300      	movs	r3, #0
}
 8002506:	4618      	mov	r0, r3
 8002508:	3710      	adds	r7, #16
 800250a:	46bd      	mov	sp, r7
 800250c:	bd80      	pop	{r7, pc}

0800250e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800250e:	b590      	push	{r4, r7, lr}
 8002510:	b08d      	sub	sp, #52	; 0x34
 8002512:	af00      	add	r7, sp, #0
 8002514:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800251c:	6a3b      	ldr	r3, [r7, #32]
 800251e:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4618      	mov	r0, r3
 8002526:	f002 ff11 	bl	800534c <USB_GetMode>
 800252a:	4603      	mov	r3, r0
 800252c:	2b00      	cmp	r3, #0
 800252e:	f040 839d 	bne.w	8002c6c <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4618      	mov	r0, r3
 8002538:	f002 fe75 	bl	8005226 <USB_ReadInterrupts>
 800253c:	4603      	mov	r3, r0
 800253e:	2b00      	cmp	r3, #0
 8002540:	f000 8393 	beq.w	8002c6a <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4618      	mov	r0, r3
 800254a:	f002 fe6c 	bl	8005226 <USB_ReadInterrupts>
 800254e:	4603      	mov	r3, r0
 8002550:	f003 0302 	and.w	r3, r3, #2
 8002554:	2b02      	cmp	r3, #2
 8002556:	d107      	bne.n	8002568 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	695a      	ldr	r2, [r3, #20]
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f002 0202 	and.w	r2, r2, #2
 8002566:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	4618      	mov	r0, r3
 800256e:	f002 fe5a 	bl	8005226 <USB_ReadInterrupts>
 8002572:	4603      	mov	r3, r0
 8002574:	f003 0310 	and.w	r3, r3, #16
 8002578:	2b10      	cmp	r3, #16
 800257a:	d161      	bne.n	8002640 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	699a      	ldr	r2, [r3, #24]
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f022 0210 	bic.w	r2, r2, #16
 800258a:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 800258c:	6a3b      	ldr	r3, [r7, #32]
 800258e:	6a1b      	ldr	r3, [r3, #32]
 8002590:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8002592:	69bb      	ldr	r3, [r7, #24]
 8002594:	f003 020f 	and.w	r2, r3, #15
 8002598:	4613      	mov	r3, r2
 800259a:	00db      	lsls	r3, r3, #3
 800259c:	1a9b      	subs	r3, r3, r2
 800259e:	009b      	lsls	r3, r3, #2
 80025a0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80025a4:	687a      	ldr	r2, [r7, #4]
 80025a6:	4413      	add	r3, r2
 80025a8:	3304      	adds	r3, #4
 80025aa:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80025ac:	69bb      	ldr	r3, [r7, #24]
 80025ae:	0c5b      	lsrs	r3, r3, #17
 80025b0:	f003 030f 	and.w	r3, r3, #15
 80025b4:	2b02      	cmp	r3, #2
 80025b6:	d124      	bne.n	8002602 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80025b8:	69ba      	ldr	r2, [r7, #24]
 80025ba:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80025be:	4013      	ands	r3, r2
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d035      	beq.n	8002630 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80025c4:	697b      	ldr	r3, [r7, #20]
 80025c6:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 80025c8:	69bb      	ldr	r3, [r7, #24]
 80025ca:	091b      	lsrs	r3, r3, #4
 80025cc:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80025ce:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80025d2:	b29b      	uxth	r3, r3
 80025d4:	461a      	mov	r2, r3
 80025d6:	6a38      	ldr	r0, [r7, #32]
 80025d8:	f002 fc91 	bl	8004efe <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80025dc:	697b      	ldr	r3, [r7, #20]
 80025de:	68da      	ldr	r2, [r3, #12]
 80025e0:	69bb      	ldr	r3, [r7, #24]
 80025e2:	091b      	lsrs	r3, r3, #4
 80025e4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80025e8:	441a      	add	r2, r3
 80025ea:	697b      	ldr	r3, [r7, #20]
 80025ec:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80025ee:	697b      	ldr	r3, [r7, #20]
 80025f0:	699a      	ldr	r2, [r3, #24]
 80025f2:	69bb      	ldr	r3, [r7, #24]
 80025f4:	091b      	lsrs	r3, r3, #4
 80025f6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80025fa:	441a      	add	r2, r3
 80025fc:	697b      	ldr	r3, [r7, #20]
 80025fe:	619a      	str	r2, [r3, #24]
 8002600:	e016      	b.n	8002630 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8002602:	69bb      	ldr	r3, [r7, #24]
 8002604:	0c5b      	lsrs	r3, r3, #17
 8002606:	f003 030f 	and.w	r3, r3, #15
 800260a:	2b06      	cmp	r3, #6
 800260c:	d110      	bne.n	8002630 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002614:	2208      	movs	r2, #8
 8002616:	4619      	mov	r1, r3
 8002618:	6a38      	ldr	r0, [r7, #32]
 800261a:	f002 fc70 	bl	8004efe <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800261e:	697b      	ldr	r3, [r7, #20]
 8002620:	699a      	ldr	r2, [r3, #24]
 8002622:	69bb      	ldr	r3, [r7, #24]
 8002624:	091b      	lsrs	r3, r3, #4
 8002626:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800262a:	441a      	add	r2, r3
 800262c:	697b      	ldr	r3, [r7, #20]
 800262e:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	699a      	ldr	r2, [r3, #24]
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f042 0210 	orr.w	r2, r2, #16
 800263e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4618      	mov	r0, r3
 8002646:	f002 fdee 	bl	8005226 <USB_ReadInterrupts>
 800264a:	4603      	mov	r3, r0
 800264c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002650:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002654:	d16e      	bne.n	8002734 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8002656:	2300      	movs	r3, #0
 8002658:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4618      	mov	r0, r3
 8002660:	f002 fdf4 	bl	800524c <USB_ReadDevAllOutEpInterrupt>
 8002664:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002666:	e062      	b.n	800272e <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002668:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800266a:	f003 0301 	and.w	r3, r3, #1
 800266e:	2b00      	cmp	r3, #0
 8002670:	d057      	beq.n	8002722 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002678:	b2d2      	uxtb	r2, r2
 800267a:	4611      	mov	r1, r2
 800267c:	4618      	mov	r0, r3
 800267e:	f002 fe19 	bl	80052b4 <USB_ReadDevOutEPInterrupt>
 8002682:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002684:	693b      	ldr	r3, [r7, #16]
 8002686:	f003 0301 	and.w	r3, r3, #1
 800268a:	2b00      	cmp	r3, #0
 800268c:	d00c      	beq.n	80026a8 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800268e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002690:	015a      	lsls	r2, r3, #5
 8002692:	69fb      	ldr	r3, [r7, #28]
 8002694:	4413      	add	r3, r2
 8002696:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800269a:	461a      	mov	r2, r3
 800269c:	2301      	movs	r3, #1
 800269e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80026a0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80026a2:	6878      	ldr	r0, [r7, #4]
 80026a4:	f000 fdb0 	bl	8003208 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80026a8:	693b      	ldr	r3, [r7, #16]
 80026aa:	f003 0308 	and.w	r3, r3, #8
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d00c      	beq.n	80026cc <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80026b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026b4:	015a      	lsls	r2, r3, #5
 80026b6:	69fb      	ldr	r3, [r7, #28]
 80026b8:	4413      	add	r3, r2
 80026ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80026be:	461a      	mov	r2, r3
 80026c0:	2308      	movs	r3, #8
 80026c2:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80026c4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80026c6:	6878      	ldr	r0, [r7, #4]
 80026c8:	f000 feaa 	bl	8003420 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80026cc:	693b      	ldr	r3, [r7, #16]
 80026ce:	f003 0310 	and.w	r3, r3, #16
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d008      	beq.n	80026e8 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80026d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026d8:	015a      	lsls	r2, r3, #5
 80026da:	69fb      	ldr	r3, [r7, #28]
 80026dc:	4413      	add	r3, r2
 80026de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80026e2:	461a      	mov	r2, r3
 80026e4:	2310      	movs	r3, #16
 80026e6:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80026e8:	693b      	ldr	r3, [r7, #16]
 80026ea:	f003 0320 	and.w	r3, r3, #32
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d008      	beq.n	8002704 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80026f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026f4:	015a      	lsls	r2, r3, #5
 80026f6:	69fb      	ldr	r3, [r7, #28]
 80026f8:	4413      	add	r3, r2
 80026fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80026fe:	461a      	mov	r2, r3
 8002700:	2320      	movs	r3, #32
 8002702:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002704:	693b      	ldr	r3, [r7, #16]
 8002706:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800270a:	2b00      	cmp	r3, #0
 800270c:	d009      	beq.n	8002722 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800270e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002710:	015a      	lsls	r2, r3, #5
 8002712:	69fb      	ldr	r3, [r7, #28]
 8002714:	4413      	add	r3, r2
 8002716:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800271a:	461a      	mov	r2, r3
 800271c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002720:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002724:	3301      	adds	r3, #1
 8002726:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002728:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800272a:	085b      	lsrs	r3, r3, #1
 800272c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800272e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002730:	2b00      	cmp	r3, #0
 8002732:	d199      	bne.n	8002668 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4618      	mov	r0, r3
 800273a:	f002 fd74 	bl	8005226 <USB_ReadInterrupts>
 800273e:	4603      	mov	r3, r0
 8002740:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002744:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002748:	f040 80c0 	bne.w	80028cc <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4618      	mov	r0, r3
 8002752:	f002 fd95 	bl	8005280 <USB_ReadDevAllInEpInterrupt>
 8002756:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002758:	2300      	movs	r3, #0
 800275a:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800275c:	e0b2      	b.n	80028c4 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800275e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002760:	f003 0301 	and.w	r3, r3, #1
 8002764:	2b00      	cmp	r3, #0
 8002766:	f000 80a7 	beq.w	80028b8 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002770:	b2d2      	uxtb	r2, r2
 8002772:	4611      	mov	r1, r2
 8002774:	4618      	mov	r0, r3
 8002776:	f002 fdbb 	bl	80052f0 <USB_ReadDevInEPInterrupt>
 800277a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800277c:	693b      	ldr	r3, [r7, #16]
 800277e:	f003 0301 	and.w	r3, r3, #1
 8002782:	2b00      	cmp	r3, #0
 8002784:	d057      	beq.n	8002836 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002788:	f003 030f 	and.w	r3, r3, #15
 800278c:	2201      	movs	r2, #1
 800278e:	fa02 f303 	lsl.w	r3, r2, r3
 8002792:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002794:	69fb      	ldr	r3, [r7, #28]
 8002796:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800279a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	43db      	mvns	r3, r3
 80027a0:	69f9      	ldr	r1, [r7, #28]
 80027a2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80027a6:	4013      	ands	r3, r2
 80027a8:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80027aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ac:	015a      	lsls	r2, r3, #5
 80027ae:	69fb      	ldr	r3, [r7, #28]
 80027b0:	4413      	add	r3, r2
 80027b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80027b6:	461a      	mov	r2, r3
 80027b8:	2301      	movs	r3, #1
 80027ba:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	691b      	ldr	r3, [r3, #16]
 80027c0:	2b01      	cmp	r3, #1
 80027c2:	d132      	bne.n	800282a <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80027c4:	6879      	ldr	r1, [r7, #4]
 80027c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027c8:	4613      	mov	r3, r2
 80027ca:	00db      	lsls	r3, r3, #3
 80027cc:	1a9b      	subs	r3, r3, r2
 80027ce:	009b      	lsls	r3, r3, #2
 80027d0:	440b      	add	r3, r1
 80027d2:	3348      	adds	r3, #72	; 0x48
 80027d4:	6819      	ldr	r1, [r3, #0]
 80027d6:	6878      	ldr	r0, [r7, #4]
 80027d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027da:	4613      	mov	r3, r2
 80027dc:	00db      	lsls	r3, r3, #3
 80027de:	1a9b      	subs	r3, r3, r2
 80027e0:	009b      	lsls	r3, r3, #2
 80027e2:	4403      	add	r3, r0
 80027e4:	3344      	adds	r3, #68	; 0x44
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4419      	add	r1, r3
 80027ea:	6878      	ldr	r0, [r7, #4]
 80027ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027ee:	4613      	mov	r3, r2
 80027f0:	00db      	lsls	r3, r3, #3
 80027f2:	1a9b      	subs	r3, r3, r2
 80027f4:	009b      	lsls	r3, r3, #2
 80027f6:	4403      	add	r3, r0
 80027f8:	3348      	adds	r3, #72	; 0x48
 80027fa:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80027fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d113      	bne.n	800282a <HAL_PCD_IRQHandler+0x31c>
 8002802:	6879      	ldr	r1, [r7, #4]
 8002804:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002806:	4613      	mov	r3, r2
 8002808:	00db      	lsls	r3, r3, #3
 800280a:	1a9b      	subs	r3, r3, r2
 800280c:	009b      	lsls	r3, r3, #2
 800280e:	440b      	add	r3, r1
 8002810:	3350      	adds	r3, #80	; 0x50
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	2b00      	cmp	r3, #0
 8002816:	d108      	bne.n	800282a <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6818      	ldr	r0, [r3, #0]
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002822:	461a      	mov	r2, r3
 8002824:	2101      	movs	r1, #1
 8002826:	f002 fdc3 	bl	80053b0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800282a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800282c:	b2db      	uxtb	r3, r3
 800282e:	4619      	mov	r1, r3
 8002830:	6878      	ldr	r0, [r7, #4]
 8002832:	f004 fd64 	bl	80072fe <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002836:	693b      	ldr	r3, [r7, #16]
 8002838:	f003 0308 	and.w	r3, r3, #8
 800283c:	2b00      	cmp	r3, #0
 800283e:	d008      	beq.n	8002852 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002842:	015a      	lsls	r2, r3, #5
 8002844:	69fb      	ldr	r3, [r7, #28]
 8002846:	4413      	add	r3, r2
 8002848:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800284c:	461a      	mov	r2, r3
 800284e:	2308      	movs	r3, #8
 8002850:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002852:	693b      	ldr	r3, [r7, #16]
 8002854:	f003 0310 	and.w	r3, r3, #16
 8002858:	2b00      	cmp	r3, #0
 800285a:	d008      	beq.n	800286e <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800285c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800285e:	015a      	lsls	r2, r3, #5
 8002860:	69fb      	ldr	r3, [r7, #28]
 8002862:	4413      	add	r3, r2
 8002864:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002868:	461a      	mov	r2, r3
 800286a:	2310      	movs	r3, #16
 800286c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800286e:	693b      	ldr	r3, [r7, #16]
 8002870:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002874:	2b00      	cmp	r3, #0
 8002876:	d008      	beq.n	800288a <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800287a:	015a      	lsls	r2, r3, #5
 800287c:	69fb      	ldr	r3, [r7, #28]
 800287e:	4413      	add	r3, r2
 8002880:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002884:	461a      	mov	r2, r3
 8002886:	2340      	movs	r3, #64	; 0x40
 8002888:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800288a:	693b      	ldr	r3, [r7, #16]
 800288c:	f003 0302 	and.w	r3, r3, #2
 8002890:	2b00      	cmp	r3, #0
 8002892:	d008      	beq.n	80028a6 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002896:	015a      	lsls	r2, r3, #5
 8002898:	69fb      	ldr	r3, [r7, #28]
 800289a:	4413      	add	r3, r2
 800289c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80028a0:	461a      	mov	r2, r3
 80028a2:	2302      	movs	r3, #2
 80028a4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80028a6:	693b      	ldr	r3, [r7, #16]
 80028a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d003      	beq.n	80028b8 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80028b0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80028b2:	6878      	ldr	r0, [r7, #4]
 80028b4:	f000 fc1b 	bl	80030ee <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80028b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ba:	3301      	adds	r3, #1
 80028bc:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80028be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028c0:	085b      	lsrs	r3, r3, #1
 80028c2:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80028c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	f47f af49 	bne.w	800275e <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4618      	mov	r0, r3
 80028d2:	f002 fca8 	bl	8005226 <USB_ReadInterrupts>
 80028d6:	4603      	mov	r3, r0
 80028d8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80028dc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80028e0:	d122      	bne.n	8002928 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80028e2:	69fb      	ldr	r3, [r7, #28]
 80028e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	69fa      	ldr	r2, [r7, #28]
 80028ec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80028f0:	f023 0301 	bic.w	r3, r3, #1
 80028f4:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80028fc:	2b01      	cmp	r3, #1
 80028fe:	d108      	bne.n	8002912 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2200      	movs	r2, #0
 8002904:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002908:	2100      	movs	r1, #0
 800290a:	6878      	ldr	r0, [r7, #4]
 800290c:	f000 fe26 	bl	800355c <HAL_PCDEx_LPM_Callback>
 8002910:	e002      	b.n	8002918 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002912:	6878      	ldr	r0, [r7, #4]
 8002914:	f004 fd60 	bl	80073d8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	695a      	ldr	r2, [r3, #20]
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002926:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4618      	mov	r0, r3
 800292e:	f002 fc7a 	bl	8005226 <USB_ReadInterrupts>
 8002932:	4603      	mov	r3, r0
 8002934:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002938:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800293c:	d112      	bne.n	8002964 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800293e:	69fb      	ldr	r3, [r7, #28]
 8002940:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002944:	689b      	ldr	r3, [r3, #8]
 8002946:	f003 0301 	and.w	r3, r3, #1
 800294a:	2b01      	cmp	r3, #1
 800294c:	d102      	bne.n	8002954 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800294e:	6878      	ldr	r0, [r7, #4]
 8002950:	f004 fd1c 	bl	800738c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	695a      	ldr	r2, [r3, #20]
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002962:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4618      	mov	r0, r3
 800296a:	f002 fc5c 	bl	8005226 <USB_ReadInterrupts>
 800296e:	4603      	mov	r3, r0
 8002970:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002974:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002978:	f040 80c7 	bne.w	8002b0a <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800297c:	69fb      	ldr	r3, [r7, #28]
 800297e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	69fa      	ldr	r2, [r7, #28]
 8002986:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800298a:	f023 0301 	bic.w	r3, r3, #1
 800298e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	2110      	movs	r1, #16
 8002996:	4618      	mov	r0, r3
 8002998:	f001 fcf6 	bl	8004388 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800299c:	2300      	movs	r3, #0
 800299e:	62fb      	str	r3, [r7, #44]	; 0x2c
 80029a0:	e056      	b.n	8002a50 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80029a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029a4:	015a      	lsls	r2, r3, #5
 80029a6:	69fb      	ldr	r3, [r7, #28]
 80029a8:	4413      	add	r3, r2
 80029aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80029ae:	461a      	mov	r2, r3
 80029b0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80029b4:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80029b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029b8:	015a      	lsls	r2, r3, #5
 80029ba:	69fb      	ldr	r3, [r7, #28]
 80029bc:	4413      	add	r3, r2
 80029be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80029c6:	0151      	lsls	r1, r2, #5
 80029c8:	69fa      	ldr	r2, [r7, #28]
 80029ca:	440a      	add	r2, r1
 80029cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80029d0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80029d4:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80029d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029d8:	015a      	lsls	r2, r3, #5
 80029da:	69fb      	ldr	r3, [r7, #28]
 80029dc:	4413      	add	r3, r2
 80029de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80029e6:	0151      	lsls	r1, r2, #5
 80029e8:	69fa      	ldr	r2, [r7, #28]
 80029ea:	440a      	add	r2, r1
 80029ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80029f0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80029f4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80029f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029f8:	015a      	lsls	r2, r3, #5
 80029fa:	69fb      	ldr	r3, [r7, #28]
 80029fc:	4413      	add	r3, r2
 80029fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a02:	461a      	mov	r2, r3
 8002a04:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002a08:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002a0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a0c:	015a      	lsls	r2, r3, #5
 8002a0e:	69fb      	ldr	r3, [r7, #28]
 8002a10:	4413      	add	r3, r2
 8002a12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a1a:	0151      	lsls	r1, r2, #5
 8002a1c:	69fa      	ldr	r2, [r7, #28]
 8002a1e:	440a      	add	r2, r1
 8002a20:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002a24:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002a28:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002a2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a2c:	015a      	lsls	r2, r3, #5
 8002a2e:	69fb      	ldr	r3, [r7, #28]
 8002a30:	4413      	add	r3, r2
 8002a32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a3a:	0151      	lsls	r1, r2, #5
 8002a3c:	69fa      	ldr	r2, [r7, #28]
 8002a3e:	440a      	add	r2, r1
 8002a40:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002a44:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002a48:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a4c:	3301      	adds	r3, #1
 8002a4e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a56:	429a      	cmp	r2, r3
 8002a58:	d3a3      	bcc.n	80029a2 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002a5a:	69fb      	ldr	r3, [r7, #28]
 8002a5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a60:	69db      	ldr	r3, [r3, #28]
 8002a62:	69fa      	ldr	r2, [r7, #28]
 8002a64:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002a68:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002a6c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d016      	beq.n	8002aa4 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002a76:	69fb      	ldr	r3, [r7, #28]
 8002a78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a80:	69fa      	ldr	r2, [r7, #28]
 8002a82:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002a86:	f043 030b 	orr.w	r3, r3, #11
 8002a8a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002a8e:	69fb      	ldr	r3, [r7, #28]
 8002a90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a96:	69fa      	ldr	r2, [r7, #28]
 8002a98:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002a9c:	f043 030b 	orr.w	r3, r3, #11
 8002aa0:	6453      	str	r3, [r2, #68]	; 0x44
 8002aa2:	e015      	b.n	8002ad0 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002aa4:	69fb      	ldr	r3, [r7, #28]
 8002aa6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002aaa:	695b      	ldr	r3, [r3, #20]
 8002aac:	69fa      	ldr	r2, [r7, #28]
 8002aae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002ab2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002ab6:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002aba:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002abc:	69fb      	ldr	r3, [r7, #28]
 8002abe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ac2:	691b      	ldr	r3, [r3, #16]
 8002ac4:	69fa      	ldr	r2, [r7, #28]
 8002ac6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002aca:	f043 030b 	orr.w	r3, r3, #11
 8002ace:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002ad0:	69fb      	ldr	r3, [r7, #28]
 8002ad2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	69fa      	ldr	r2, [r7, #28]
 8002ada:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002ade:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002ae2:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6818      	ldr	r0, [r3, #0]
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	691b      	ldr	r3, [r3, #16]
 8002aec:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002af4:	461a      	mov	r2, r3
 8002af6:	f002 fc5b 	bl	80053b0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	695a      	ldr	r2, [r3, #20]
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002b08:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	4618      	mov	r0, r3
 8002b10:	f002 fb89 	bl	8005226 <USB_ReadInterrupts>
 8002b14:	4603      	mov	r3, r0
 8002b16:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b1a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b1e:	d124      	bne.n	8002b6a <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4618      	mov	r0, r3
 8002b26:	f002 fc1f 	bl	8005368 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4618      	mov	r0, r3
 8002b30:	f001 fc87 	bl	8004442 <USB_GetDevSpeed>
 8002b34:	4603      	mov	r3, r0
 8002b36:	461a      	mov	r2, r3
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681c      	ldr	r4, [r3, #0]
 8002b40:	f001 f92c 	bl	8003d9c <HAL_RCC_GetHCLKFreq>
 8002b44:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002b4a:	b2db      	uxtb	r3, r3
 8002b4c:	461a      	mov	r2, r3
 8002b4e:	4620      	mov	r0, r4
 8002b50:	f001 f9a6 	bl	8003ea0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002b54:	6878      	ldr	r0, [r7, #4]
 8002b56:	f004 fbfa 	bl	800734e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	695a      	ldr	r2, [r3, #20]
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002b68:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4618      	mov	r0, r3
 8002b70:	f002 fb59 	bl	8005226 <USB_ReadInterrupts>
 8002b74:	4603      	mov	r3, r0
 8002b76:	f003 0308 	and.w	r3, r3, #8
 8002b7a:	2b08      	cmp	r3, #8
 8002b7c:	d10a      	bne.n	8002b94 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002b7e:	6878      	ldr	r0, [r7, #4]
 8002b80:	f004 fbd7 	bl	8007332 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	695a      	ldr	r2, [r3, #20]
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f002 0208 	and.w	r2, r2, #8
 8002b92:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4618      	mov	r0, r3
 8002b9a:	f002 fb44 	bl	8005226 <USB_ReadInterrupts>
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ba4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002ba8:	d10f      	bne.n	8002bca <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002baa:	2300      	movs	r3, #0
 8002bac:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bb0:	b2db      	uxtb	r3, r3
 8002bb2:	4619      	mov	r1, r3
 8002bb4:	6878      	ldr	r0, [r7, #4]
 8002bb6:	f004 fc2f 	bl	8007418 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	695a      	ldr	r2, [r3, #20]
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002bc8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4618      	mov	r0, r3
 8002bd0:	f002 fb29 	bl	8005226 <USB_ReadInterrupts>
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002bda:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002bde:	d10f      	bne.n	8002c00 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002be0:	2300      	movs	r3, #0
 8002be2:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002be6:	b2db      	uxtb	r3, r3
 8002be8:	4619      	mov	r1, r3
 8002bea:	6878      	ldr	r0, [r7, #4]
 8002bec:	f004 fc02 	bl	80073f4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	695a      	ldr	r2, [r3, #20]
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002bfe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4618      	mov	r0, r3
 8002c06:	f002 fb0e 	bl	8005226 <USB_ReadInterrupts>
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002c10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c14:	d10a      	bne.n	8002c2c <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002c16:	6878      	ldr	r0, [r7, #4]
 8002c18:	f004 fc10 	bl	800743c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	695a      	ldr	r2, [r3, #20]
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002c2a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4618      	mov	r0, r3
 8002c32:	f002 faf8 	bl	8005226 <USB_ReadInterrupts>
 8002c36:	4603      	mov	r3, r0
 8002c38:	f003 0304 	and.w	r3, r3, #4
 8002c3c:	2b04      	cmp	r3, #4
 8002c3e:	d115      	bne.n	8002c6c <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002c48:	69bb      	ldr	r3, [r7, #24]
 8002c4a:	f003 0304 	and.w	r3, r3, #4
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d002      	beq.n	8002c58 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002c52:	6878      	ldr	r0, [r7, #4]
 8002c54:	f004 fc00 	bl	8007458 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	6859      	ldr	r1, [r3, #4]
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	69ba      	ldr	r2, [r7, #24]
 8002c64:	430a      	orrs	r2, r1
 8002c66:	605a      	str	r2, [r3, #4]
 8002c68:	e000      	b.n	8002c6c <HAL_PCD_IRQHandler+0x75e>
      return;
 8002c6a:	bf00      	nop
    }
  }
}
 8002c6c:	3734      	adds	r7, #52	; 0x34
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bd90      	pop	{r4, r7, pc}

08002c72 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002c72:	b580      	push	{r7, lr}
 8002c74:	b082      	sub	sp, #8
 8002c76:	af00      	add	r7, sp, #0
 8002c78:	6078      	str	r0, [r7, #4]
 8002c7a:	460b      	mov	r3, r1
 8002c7c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002c84:	2b01      	cmp	r3, #1
 8002c86:	d101      	bne.n	8002c8c <HAL_PCD_SetAddress+0x1a>
 8002c88:	2302      	movs	r3, #2
 8002c8a:	e013      	b.n	8002cb4 <HAL_PCD_SetAddress+0x42>
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2201      	movs	r2, #1
 8002c90:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	78fa      	ldrb	r2, [r7, #3]
 8002c98:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	78fa      	ldrb	r2, [r7, #3]
 8002ca2:	4611      	mov	r1, r2
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	f002 fa56 	bl	8005156 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2200      	movs	r2, #0
 8002cae:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002cb2:	2300      	movs	r3, #0
}
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	3708      	adds	r7, #8
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bd80      	pop	{r7, pc}

08002cbc <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b084      	sub	sp, #16
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
 8002cc4:	4608      	mov	r0, r1
 8002cc6:	4611      	mov	r1, r2
 8002cc8:	461a      	mov	r2, r3
 8002cca:	4603      	mov	r3, r0
 8002ccc:	70fb      	strb	r3, [r7, #3]
 8002cce:	460b      	mov	r3, r1
 8002cd0:	803b      	strh	r3, [r7, #0]
 8002cd2:	4613      	mov	r3, r2
 8002cd4:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002cda:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	da0f      	bge.n	8002d02 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ce2:	78fb      	ldrb	r3, [r7, #3]
 8002ce4:	f003 020f 	and.w	r2, r3, #15
 8002ce8:	4613      	mov	r3, r2
 8002cea:	00db      	lsls	r3, r3, #3
 8002cec:	1a9b      	subs	r3, r3, r2
 8002cee:	009b      	lsls	r3, r3, #2
 8002cf0:	3338      	adds	r3, #56	; 0x38
 8002cf2:	687a      	ldr	r2, [r7, #4]
 8002cf4:	4413      	add	r3, r2
 8002cf6:	3304      	adds	r3, #4
 8002cf8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	2201      	movs	r2, #1
 8002cfe:	705a      	strb	r2, [r3, #1]
 8002d00:	e00f      	b.n	8002d22 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002d02:	78fb      	ldrb	r3, [r7, #3]
 8002d04:	f003 020f 	and.w	r2, r3, #15
 8002d08:	4613      	mov	r3, r2
 8002d0a:	00db      	lsls	r3, r3, #3
 8002d0c:	1a9b      	subs	r3, r3, r2
 8002d0e:	009b      	lsls	r3, r3, #2
 8002d10:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002d14:	687a      	ldr	r2, [r7, #4]
 8002d16:	4413      	add	r3, r2
 8002d18:	3304      	adds	r3, #4
 8002d1a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	2200      	movs	r2, #0
 8002d20:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002d22:	78fb      	ldrb	r3, [r7, #3]
 8002d24:	f003 030f 	and.w	r3, r3, #15
 8002d28:	b2da      	uxtb	r2, r3
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002d2e:	883a      	ldrh	r2, [r7, #0]
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	78ba      	ldrb	r2, [r7, #2]
 8002d38:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	785b      	ldrb	r3, [r3, #1]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d004      	beq.n	8002d4c <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	781b      	ldrb	r3, [r3, #0]
 8002d46:	b29a      	uxth	r2, r3
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002d4c:	78bb      	ldrb	r3, [r7, #2]
 8002d4e:	2b02      	cmp	r3, #2
 8002d50:	d102      	bne.n	8002d58 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	2200      	movs	r2, #0
 8002d56:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002d5e:	2b01      	cmp	r3, #1
 8002d60:	d101      	bne.n	8002d66 <HAL_PCD_EP_Open+0xaa>
 8002d62:	2302      	movs	r3, #2
 8002d64:	e00e      	b.n	8002d84 <HAL_PCD_EP_Open+0xc8>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	2201      	movs	r2, #1
 8002d6a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	68f9      	ldr	r1, [r7, #12]
 8002d74:	4618      	mov	r0, r3
 8002d76:	f001 fb89 	bl	800448c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8002d82:	7afb      	ldrb	r3, [r7, #11]
}
 8002d84:	4618      	mov	r0, r3
 8002d86:	3710      	adds	r7, #16
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	bd80      	pop	{r7, pc}

08002d8c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b084      	sub	sp, #16
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
 8002d94:	460b      	mov	r3, r1
 8002d96:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002d98:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	da0f      	bge.n	8002dc0 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002da0:	78fb      	ldrb	r3, [r7, #3]
 8002da2:	f003 020f 	and.w	r2, r3, #15
 8002da6:	4613      	mov	r3, r2
 8002da8:	00db      	lsls	r3, r3, #3
 8002daa:	1a9b      	subs	r3, r3, r2
 8002dac:	009b      	lsls	r3, r3, #2
 8002dae:	3338      	adds	r3, #56	; 0x38
 8002db0:	687a      	ldr	r2, [r7, #4]
 8002db2:	4413      	add	r3, r2
 8002db4:	3304      	adds	r3, #4
 8002db6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	2201      	movs	r2, #1
 8002dbc:	705a      	strb	r2, [r3, #1]
 8002dbe:	e00f      	b.n	8002de0 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002dc0:	78fb      	ldrb	r3, [r7, #3]
 8002dc2:	f003 020f 	and.w	r2, r3, #15
 8002dc6:	4613      	mov	r3, r2
 8002dc8:	00db      	lsls	r3, r3, #3
 8002dca:	1a9b      	subs	r3, r3, r2
 8002dcc:	009b      	lsls	r3, r3, #2
 8002dce:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002dd2:	687a      	ldr	r2, [r7, #4]
 8002dd4:	4413      	add	r3, r2
 8002dd6:	3304      	adds	r3, #4
 8002dd8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	2200      	movs	r2, #0
 8002dde:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002de0:	78fb      	ldrb	r3, [r7, #3]
 8002de2:	f003 030f 	and.w	r3, r3, #15
 8002de6:	b2da      	uxtb	r2, r3
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002df2:	2b01      	cmp	r3, #1
 8002df4:	d101      	bne.n	8002dfa <HAL_PCD_EP_Close+0x6e>
 8002df6:	2302      	movs	r3, #2
 8002df8:	e00e      	b.n	8002e18 <HAL_PCD_EP_Close+0x8c>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2201      	movs	r2, #1
 8002dfe:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	68f9      	ldr	r1, [r7, #12]
 8002e08:	4618      	mov	r0, r3
 8002e0a:	f001 fbc7 	bl	800459c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2200      	movs	r2, #0
 8002e12:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8002e16:	2300      	movs	r3, #0
}
 8002e18:	4618      	mov	r0, r3
 8002e1a:	3710      	adds	r7, #16
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	bd80      	pop	{r7, pc}

08002e20 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b086      	sub	sp, #24
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	60f8      	str	r0, [r7, #12]
 8002e28:	607a      	str	r2, [r7, #4]
 8002e2a:	603b      	str	r3, [r7, #0]
 8002e2c:	460b      	mov	r3, r1
 8002e2e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002e30:	7afb      	ldrb	r3, [r7, #11]
 8002e32:	f003 020f 	and.w	r2, r3, #15
 8002e36:	4613      	mov	r3, r2
 8002e38:	00db      	lsls	r3, r3, #3
 8002e3a:	1a9b      	subs	r3, r3, r2
 8002e3c:	009b      	lsls	r3, r3, #2
 8002e3e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002e42:	68fa      	ldr	r2, [r7, #12]
 8002e44:	4413      	add	r3, r2
 8002e46:	3304      	adds	r3, #4
 8002e48:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002e4a:	697b      	ldr	r3, [r7, #20]
 8002e4c:	687a      	ldr	r2, [r7, #4]
 8002e4e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002e50:	697b      	ldr	r3, [r7, #20]
 8002e52:	683a      	ldr	r2, [r7, #0]
 8002e54:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002e56:	697b      	ldr	r3, [r7, #20]
 8002e58:	2200      	movs	r2, #0
 8002e5a:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8002e5c:	697b      	ldr	r3, [r7, #20]
 8002e5e:	2200      	movs	r2, #0
 8002e60:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002e62:	7afb      	ldrb	r3, [r7, #11]
 8002e64:	f003 030f 	and.w	r3, r3, #15
 8002e68:	b2da      	uxtb	r2, r3
 8002e6a:	697b      	ldr	r3, [r7, #20]
 8002e6c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	691b      	ldr	r3, [r3, #16]
 8002e72:	2b01      	cmp	r3, #1
 8002e74:	d102      	bne.n	8002e7c <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002e76:	687a      	ldr	r2, [r7, #4]
 8002e78:	697b      	ldr	r3, [r7, #20]
 8002e7a:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002e7c:	7afb      	ldrb	r3, [r7, #11]
 8002e7e:	f003 030f 	and.w	r3, r3, #15
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d109      	bne.n	8002e9a <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	6818      	ldr	r0, [r3, #0]
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	691b      	ldr	r3, [r3, #16]
 8002e8e:	b2db      	uxtb	r3, r3
 8002e90:	461a      	mov	r2, r3
 8002e92:	6979      	ldr	r1, [r7, #20]
 8002e94:	f001 fea2 	bl	8004bdc <USB_EP0StartXfer>
 8002e98:	e008      	b.n	8002eac <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	6818      	ldr	r0, [r3, #0]
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	691b      	ldr	r3, [r3, #16]
 8002ea2:	b2db      	uxtb	r3, r3
 8002ea4:	461a      	mov	r2, r3
 8002ea6:	6979      	ldr	r1, [r7, #20]
 8002ea8:	f001 fc54 	bl	8004754 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002eac:	2300      	movs	r3, #0
}
 8002eae:	4618      	mov	r0, r3
 8002eb0:	3718      	adds	r7, #24
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	bd80      	pop	{r7, pc}

08002eb6 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002eb6:	b480      	push	{r7}
 8002eb8:	b083      	sub	sp, #12
 8002eba:	af00      	add	r7, sp, #0
 8002ebc:	6078      	str	r0, [r7, #4]
 8002ebe:	460b      	mov	r3, r1
 8002ec0:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002ec2:	78fb      	ldrb	r3, [r7, #3]
 8002ec4:	f003 020f 	and.w	r2, r3, #15
 8002ec8:	6879      	ldr	r1, [r7, #4]
 8002eca:	4613      	mov	r3, r2
 8002ecc:	00db      	lsls	r3, r3, #3
 8002ece:	1a9b      	subs	r3, r3, r2
 8002ed0:	009b      	lsls	r3, r3, #2
 8002ed2:	440b      	add	r3, r1
 8002ed4:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8002ed8:	681b      	ldr	r3, [r3, #0]
}
 8002eda:	4618      	mov	r0, r3
 8002edc:	370c      	adds	r7, #12
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee4:	4770      	bx	lr

08002ee6 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002ee6:	b580      	push	{r7, lr}
 8002ee8:	b086      	sub	sp, #24
 8002eea:	af00      	add	r7, sp, #0
 8002eec:	60f8      	str	r0, [r7, #12]
 8002eee:	607a      	str	r2, [r7, #4]
 8002ef0:	603b      	str	r3, [r7, #0]
 8002ef2:	460b      	mov	r3, r1
 8002ef4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ef6:	7afb      	ldrb	r3, [r7, #11]
 8002ef8:	f003 020f 	and.w	r2, r3, #15
 8002efc:	4613      	mov	r3, r2
 8002efe:	00db      	lsls	r3, r3, #3
 8002f00:	1a9b      	subs	r3, r3, r2
 8002f02:	009b      	lsls	r3, r3, #2
 8002f04:	3338      	adds	r3, #56	; 0x38
 8002f06:	68fa      	ldr	r2, [r7, #12]
 8002f08:	4413      	add	r3, r2
 8002f0a:	3304      	adds	r3, #4
 8002f0c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002f0e:	697b      	ldr	r3, [r7, #20]
 8002f10:	687a      	ldr	r2, [r7, #4]
 8002f12:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002f14:	697b      	ldr	r3, [r7, #20]
 8002f16:	683a      	ldr	r2, [r7, #0]
 8002f18:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002f1a:	697b      	ldr	r3, [r7, #20]
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8002f20:	697b      	ldr	r3, [r7, #20]
 8002f22:	2201      	movs	r2, #1
 8002f24:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002f26:	7afb      	ldrb	r3, [r7, #11]
 8002f28:	f003 030f 	and.w	r3, r3, #15
 8002f2c:	b2da      	uxtb	r2, r3
 8002f2e:	697b      	ldr	r3, [r7, #20]
 8002f30:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	691b      	ldr	r3, [r3, #16]
 8002f36:	2b01      	cmp	r3, #1
 8002f38:	d102      	bne.n	8002f40 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002f3a:	687a      	ldr	r2, [r7, #4]
 8002f3c:	697b      	ldr	r3, [r7, #20]
 8002f3e:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002f40:	7afb      	ldrb	r3, [r7, #11]
 8002f42:	f003 030f 	and.w	r3, r3, #15
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d109      	bne.n	8002f5e <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	6818      	ldr	r0, [r3, #0]
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	691b      	ldr	r3, [r3, #16]
 8002f52:	b2db      	uxtb	r3, r3
 8002f54:	461a      	mov	r2, r3
 8002f56:	6979      	ldr	r1, [r7, #20]
 8002f58:	f001 fe40 	bl	8004bdc <USB_EP0StartXfer>
 8002f5c:	e008      	b.n	8002f70 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	6818      	ldr	r0, [r3, #0]
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	691b      	ldr	r3, [r3, #16]
 8002f66:	b2db      	uxtb	r3, r3
 8002f68:	461a      	mov	r2, r3
 8002f6a:	6979      	ldr	r1, [r7, #20]
 8002f6c:	f001 fbf2 	bl	8004754 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002f70:	2300      	movs	r3, #0
}
 8002f72:	4618      	mov	r0, r3
 8002f74:	3718      	adds	r7, #24
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bd80      	pop	{r7, pc}

08002f7a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002f7a:	b580      	push	{r7, lr}
 8002f7c:	b084      	sub	sp, #16
 8002f7e:	af00      	add	r7, sp, #0
 8002f80:	6078      	str	r0, [r7, #4]
 8002f82:	460b      	mov	r3, r1
 8002f84:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002f86:	78fb      	ldrb	r3, [r7, #3]
 8002f88:	f003 020f 	and.w	r2, r3, #15
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	429a      	cmp	r2, r3
 8002f92:	d901      	bls.n	8002f98 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002f94:	2301      	movs	r3, #1
 8002f96:	e050      	b.n	800303a <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002f98:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	da0f      	bge.n	8002fc0 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002fa0:	78fb      	ldrb	r3, [r7, #3]
 8002fa2:	f003 020f 	and.w	r2, r3, #15
 8002fa6:	4613      	mov	r3, r2
 8002fa8:	00db      	lsls	r3, r3, #3
 8002faa:	1a9b      	subs	r3, r3, r2
 8002fac:	009b      	lsls	r3, r3, #2
 8002fae:	3338      	adds	r3, #56	; 0x38
 8002fb0:	687a      	ldr	r2, [r7, #4]
 8002fb2:	4413      	add	r3, r2
 8002fb4:	3304      	adds	r3, #4
 8002fb6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	2201      	movs	r2, #1
 8002fbc:	705a      	strb	r2, [r3, #1]
 8002fbe:	e00d      	b.n	8002fdc <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002fc0:	78fa      	ldrb	r2, [r7, #3]
 8002fc2:	4613      	mov	r3, r2
 8002fc4:	00db      	lsls	r3, r3, #3
 8002fc6:	1a9b      	subs	r3, r3, r2
 8002fc8:	009b      	lsls	r3, r3, #2
 8002fca:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002fce:	687a      	ldr	r2, [r7, #4]
 8002fd0:	4413      	add	r3, r2
 8002fd2:	3304      	adds	r3, #4
 8002fd4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	2200      	movs	r2, #0
 8002fda:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	2201      	movs	r2, #1
 8002fe0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002fe2:	78fb      	ldrb	r3, [r7, #3]
 8002fe4:	f003 030f 	and.w	r3, r3, #15
 8002fe8:	b2da      	uxtb	r2, r3
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002ff4:	2b01      	cmp	r3, #1
 8002ff6:	d101      	bne.n	8002ffc <HAL_PCD_EP_SetStall+0x82>
 8002ff8:	2302      	movs	r3, #2
 8002ffa:	e01e      	b.n	800303a <HAL_PCD_EP_SetStall+0xc0>
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2201      	movs	r2, #1
 8003000:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	68f9      	ldr	r1, [r7, #12]
 800300a:	4618      	mov	r0, r3
 800300c:	f001 ffcf 	bl	8004fae <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003010:	78fb      	ldrb	r3, [r7, #3]
 8003012:	f003 030f 	and.w	r3, r3, #15
 8003016:	2b00      	cmp	r3, #0
 8003018:	d10a      	bne.n	8003030 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6818      	ldr	r0, [r3, #0]
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	691b      	ldr	r3, [r3, #16]
 8003022:	b2d9      	uxtb	r1, r3
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800302a:	461a      	mov	r2, r3
 800302c:	f002 f9c0 	bl	80053b0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2200      	movs	r2, #0
 8003034:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003038:	2300      	movs	r3, #0
}
 800303a:	4618      	mov	r0, r3
 800303c:	3710      	adds	r7, #16
 800303e:	46bd      	mov	sp, r7
 8003040:	bd80      	pop	{r7, pc}

08003042 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003042:	b580      	push	{r7, lr}
 8003044:	b084      	sub	sp, #16
 8003046:	af00      	add	r7, sp, #0
 8003048:	6078      	str	r0, [r7, #4]
 800304a:	460b      	mov	r3, r1
 800304c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800304e:	78fb      	ldrb	r3, [r7, #3]
 8003050:	f003 020f 	and.w	r2, r3, #15
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	429a      	cmp	r2, r3
 800305a:	d901      	bls.n	8003060 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800305c:	2301      	movs	r3, #1
 800305e:	e042      	b.n	80030e6 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003060:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003064:	2b00      	cmp	r3, #0
 8003066:	da0f      	bge.n	8003088 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003068:	78fb      	ldrb	r3, [r7, #3]
 800306a:	f003 020f 	and.w	r2, r3, #15
 800306e:	4613      	mov	r3, r2
 8003070:	00db      	lsls	r3, r3, #3
 8003072:	1a9b      	subs	r3, r3, r2
 8003074:	009b      	lsls	r3, r3, #2
 8003076:	3338      	adds	r3, #56	; 0x38
 8003078:	687a      	ldr	r2, [r7, #4]
 800307a:	4413      	add	r3, r2
 800307c:	3304      	adds	r3, #4
 800307e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	2201      	movs	r2, #1
 8003084:	705a      	strb	r2, [r3, #1]
 8003086:	e00f      	b.n	80030a8 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003088:	78fb      	ldrb	r3, [r7, #3]
 800308a:	f003 020f 	and.w	r2, r3, #15
 800308e:	4613      	mov	r3, r2
 8003090:	00db      	lsls	r3, r3, #3
 8003092:	1a9b      	subs	r3, r3, r2
 8003094:	009b      	lsls	r3, r3, #2
 8003096:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800309a:	687a      	ldr	r2, [r7, #4]
 800309c:	4413      	add	r3, r2
 800309e:	3304      	adds	r3, #4
 80030a0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	2200      	movs	r2, #0
 80030a6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	2200      	movs	r2, #0
 80030ac:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80030ae:	78fb      	ldrb	r3, [r7, #3]
 80030b0:	f003 030f 	and.w	r3, r3, #15
 80030b4:	b2da      	uxtb	r2, r3
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80030c0:	2b01      	cmp	r3, #1
 80030c2:	d101      	bne.n	80030c8 <HAL_PCD_EP_ClrStall+0x86>
 80030c4:	2302      	movs	r3, #2
 80030c6:	e00e      	b.n	80030e6 <HAL_PCD_EP_ClrStall+0xa4>
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2201      	movs	r2, #1
 80030cc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	68f9      	ldr	r1, [r7, #12]
 80030d6:	4618      	mov	r0, r3
 80030d8:	f001 ffd7 	bl	800508a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2200      	movs	r2, #0
 80030e0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80030e4:	2300      	movs	r3, #0
}
 80030e6:	4618      	mov	r0, r3
 80030e8:	3710      	adds	r7, #16
 80030ea:	46bd      	mov	sp, r7
 80030ec:	bd80      	pop	{r7, pc}

080030ee <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80030ee:	b580      	push	{r7, lr}
 80030f0:	b08a      	sub	sp, #40	; 0x28
 80030f2:	af02      	add	r7, sp, #8
 80030f4:	6078      	str	r0, [r7, #4]
 80030f6:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80030fe:	697b      	ldr	r3, [r7, #20]
 8003100:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003102:	683a      	ldr	r2, [r7, #0]
 8003104:	4613      	mov	r3, r2
 8003106:	00db      	lsls	r3, r3, #3
 8003108:	1a9b      	subs	r3, r3, r2
 800310a:	009b      	lsls	r3, r3, #2
 800310c:	3338      	adds	r3, #56	; 0x38
 800310e:	687a      	ldr	r2, [r7, #4]
 8003110:	4413      	add	r3, r2
 8003112:	3304      	adds	r3, #4
 8003114:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	699a      	ldr	r2, [r3, #24]
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	695b      	ldr	r3, [r3, #20]
 800311e:	429a      	cmp	r2, r3
 8003120:	d901      	bls.n	8003126 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003122:	2301      	movs	r3, #1
 8003124:	e06c      	b.n	8003200 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	695a      	ldr	r2, [r3, #20]
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	699b      	ldr	r3, [r3, #24]
 800312e:	1ad3      	subs	r3, r2, r3
 8003130:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	689b      	ldr	r3, [r3, #8]
 8003136:	69fa      	ldr	r2, [r7, #28]
 8003138:	429a      	cmp	r2, r3
 800313a:	d902      	bls.n	8003142 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	689b      	ldr	r3, [r3, #8]
 8003140:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003142:	69fb      	ldr	r3, [r7, #28]
 8003144:	3303      	adds	r3, #3
 8003146:	089b      	lsrs	r3, r3, #2
 8003148:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800314a:	e02b      	b.n	80031a4 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	695a      	ldr	r2, [r3, #20]
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	699b      	ldr	r3, [r3, #24]
 8003154:	1ad3      	subs	r3, r2, r3
 8003156:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	689b      	ldr	r3, [r3, #8]
 800315c:	69fa      	ldr	r2, [r7, #28]
 800315e:	429a      	cmp	r2, r3
 8003160:	d902      	bls.n	8003168 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	689b      	ldr	r3, [r3, #8]
 8003166:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003168:	69fb      	ldr	r3, [r7, #28]
 800316a:	3303      	adds	r3, #3
 800316c:	089b      	lsrs	r3, r3, #2
 800316e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	68d9      	ldr	r1, [r3, #12]
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	b2da      	uxtb	r2, r3
 8003178:	69fb      	ldr	r3, [r7, #28]
 800317a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003180:	b2db      	uxtb	r3, r3
 8003182:	9300      	str	r3, [sp, #0]
 8003184:	4603      	mov	r3, r0
 8003186:	6978      	ldr	r0, [r7, #20]
 8003188:	f001 fe7b 	bl	8004e82 <USB_WritePacket>

    ep->xfer_buff  += len;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	68da      	ldr	r2, [r3, #12]
 8003190:	69fb      	ldr	r3, [r7, #28]
 8003192:	441a      	add	r2, r3
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	699a      	ldr	r2, [r3, #24]
 800319c:	69fb      	ldr	r3, [r7, #28]
 800319e:	441a      	add	r2, r3
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	015a      	lsls	r2, r3, #5
 80031a8:	693b      	ldr	r3, [r7, #16]
 80031aa:	4413      	add	r3, r2
 80031ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80031b0:	699b      	ldr	r3, [r3, #24]
 80031b2:	b29b      	uxth	r3, r3
 80031b4:	69ba      	ldr	r2, [r7, #24]
 80031b6:	429a      	cmp	r2, r3
 80031b8:	d809      	bhi.n	80031ce <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	699a      	ldr	r2, [r3, #24]
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80031c2:	429a      	cmp	r2, r3
 80031c4:	d203      	bcs.n	80031ce <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	695b      	ldr	r3, [r3, #20]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d1be      	bne.n	800314c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	695a      	ldr	r2, [r3, #20]
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	699b      	ldr	r3, [r3, #24]
 80031d6:	429a      	cmp	r2, r3
 80031d8:	d811      	bhi.n	80031fe <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	f003 030f 	and.w	r3, r3, #15
 80031e0:	2201      	movs	r2, #1
 80031e2:	fa02 f303 	lsl.w	r3, r2, r3
 80031e6:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80031e8:	693b      	ldr	r3, [r7, #16]
 80031ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80031f0:	68bb      	ldr	r3, [r7, #8]
 80031f2:	43db      	mvns	r3, r3
 80031f4:	6939      	ldr	r1, [r7, #16]
 80031f6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80031fa:	4013      	ands	r3, r2
 80031fc:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80031fe:	2300      	movs	r3, #0
}
 8003200:	4618      	mov	r0, r3
 8003202:	3720      	adds	r7, #32
 8003204:	46bd      	mov	sp, r7
 8003206:	bd80      	pop	{r7, pc}

08003208 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b086      	sub	sp, #24
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
 8003210:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003218:	697b      	ldr	r3, [r7, #20]
 800321a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800321c:	697b      	ldr	r3, [r7, #20]
 800321e:	333c      	adds	r3, #60	; 0x3c
 8003220:	3304      	adds	r3, #4
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	015a      	lsls	r2, r3, #5
 800322a:	693b      	ldr	r3, [r7, #16]
 800322c:	4413      	add	r3, r2
 800322e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003232:	689b      	ldr	r3, [r3, #8]
 8003234:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	691b      	ldr	r3, [r3, #16]
 800323a:	2b01      	cmp	r3, #1
 800323c:	f040 80a0 	bne.w	8003380 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003240:	68bb      	ldr	r3, [r7, #8]
 8003242:	f003 0308 	and.w	r3, r3, #8
 8003246:	2b00      	cmp	r3, #0
 8003248:	d015      	beq.n	8003276 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	4a72      	ldr	r2, [pc, #456]	; (8003418 <PCD_EP_OutXfrComplete_int+0x210>)
 800324e:	4293      	cmp	r3, r2
 8003250:	f240 80dd 	bls.w	800340e <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003254:	68bb      	ldr	r3, [r7, #8]
 8003256:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800325a:	2b00      	cmp	r3, #0
 800325c:	f000 80d7 	beq.w	800340e <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	015a      	lsls	r2, r3, #5
 8003264:	693b      	ldr	r3, [r7, #16]
 8003266:	4413      	add	r3, r2
 8003268:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800326c:	461a      	mov	r2, r3
 800326e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003272:	6093      	str	r3, [r2, #8]
 8003274:	e0cb      	b.n	800340e <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003276:	68bb      	ldr	r3, [r7, #8]
 8003278:	f003 0320 	and.w	r3, r3, #32
 800327c:	2b00      	cmp	r3, #0
 800327e:	d009      	beq.n	8003294 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	015a      	lsls	r2, r3, #5
 8003284:	693b      	ldr	r3, [r7, #16]
 8003286:	4413      	add	r3, r2
 8003288:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800328c:	461a      	mov	r2, r3
 800328e:	2320      	movs	r3, #32
 8003290:	6093      	str	r3, [r2, #8]
 8003292:	e0bc      	b.n	800340e <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003294:	68bb      	ldr	r3, [r7, #8]
 8003296:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800329a:	2b00      	cmp	r3, #0
 800329c:	f040 80b7 	bne.w	800340e <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	4a5d      	ldr	r2, [pc, #372]	; (8003418 <PCD_EP_OutXfrComplete_int+0x210>)
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d90f      	bls.n	80032c8 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80032a8:	68bb      	ldr	r3, [r7, #8]
 80032aa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d00a      	beq.n	80032c8 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	015a      	lsls	r2, r3, #5
 80032b6:	693b      	ldr	r3, [r7, #16]
 80032b8:	4413      	add	r3, r2
 80032ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032be:	461a      	mov	r2, r3
 80032c0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80032c4:	6093      	str	r3, [r2, #8]
 80032c6:	e0a2      	b.n	800340e <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 80032c8:	6879      	ldr	r1, [r7, #4]
 80032ca:	683a      	ldr	r2, [r7, #0]
 80032cc:	4613      	mov	r3, r2
 80032ce:	00db      	lsls	r3, r3, #3
 80032d0:	1a9b      	subs	r3, r3, r2
 80032d2:	009b      	lsls	r3, r3, #2
 80032d4:	440b      	add	r3, r1
 80032d6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80032da:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	0159      	lsls	r1, r3, #5
 80032e0:	693b      	ldr	r3, [r7, #16]
 80032e2:	440b      	add	r3, r1
 80032e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032e8:	691b      	ldr	r3, [r3, #16]
 80032ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 80032ee:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 80032f0:	6878      	ldr	r0, [r7, #4]
 80032f2:	683a      	ldr	r2, [r7, #0]
 80032f4:	4613      	mov	r3, r2
 80032f6:	00db      	lsls	r3, r3, #3
 80032f8:	1a9b      	subs	r3, r3, r2
 80032fa:	009b      	lsls	r3, r3, #2
 80032fc:	4403      	add	r3, r0
 80032fe:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003302:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8003304:	6879      	ldr	r1, [r7, #4]
 8003306:	683a      	ldr	r2, [r7, #0]
 8003308:	4613      	mov	r3, r2
 800330a:	00db      	lsls	r3, r3, #3
 800330c:	1a9b      	subs	r3, r3, r2
 800330e:	009b      	lsls	r3, r3, #2
 8003310:	440b      	add	r3, r1
 8003312:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003316:	6819      	ldr	r1, [r3, #0]
 8003318:	6878      	ldr	r0, [r7, #4]
 800331a:	683a      	ldr	r2, [r7, #0]
 800331c:	4613      	mov	r3, r2
 800331e:	00db      	lsls	r3, r3, #3
 8003320:	1a9b      	subs	r3, r3, r2
 8003322:	009b      	lsls	r3, r3, #2
 8003324:	4403      	add	r3, r0
 8003326:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4419      	add	r1, r3
 800332e:	6878      	ldr	r0, [r7, #4]
 8003330:	683a      	ldr	r2, [r7, #0]
 8003332:	4613      	mov	r3, r2
 8003334:	00db      	lsls	r3, r3, #3
 8003336:	1a9b      	subs	r3, r3, r2
 8003338:	009b      	lsls	r3, r3, #2
 800333a:	4403      	add	r3, r0
 800333c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003340:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	2b00      	cmp	r3, #0
 8003346:	d114      	bne.n	8003372 <PCD_EP_OutXfrComplete_int+0x16a>
 8003348:	6879      	ldr	r1, [r7, #4]
 800334a:	683a      	ldr	r2, [r7, #0]
 800334c:	4613      	mov	r3, r2
 800334e:	00db      	lsls	r3, r3, #3
 8003350:	1a9b      	subs	r3, r3, r2
 8003352:	009b      	lsls	r3, r3, #2
 8003354:	440b      	add	r3, r1
 8003356:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	2b00      	cmp	r3, #0
 800335e:	d108      	bne.n	8003372 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6818      	ldr	r0, [r3, #0]
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800336a:	461a      	mov	r2, r3
 800336c:	2101      	movs	r1, #1
 800336e:	f002 f81f 	bl	80053b0 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	b2db      	uxtb	r3, r3
 8003376:	4619      	mov	r1, r3
 8003378:	6878      	ldr	r0, [r7, #4]
 800337a:	f003 ffa5 	bl	80072c8 <HAL_PCD_DataOutStageCallback>
 800337e:	e046      	b.n	800340e <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	4a26      	ldr	r2, [pc, #152]	; (800341c <PCD_EP_OutXfrComplete_int+0x214>)
 8003384:	4293      	cmp	r3, r2
 8003386:	d124      	bne.n	80033d2 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003388:	68bb      	ldr	r3, [r7, #8]
 800338a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800338e:	2b00      	cmp	r3, #0
 8003390:	d00a      	beq.n	80033a8 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	015a      	lsls	r2, r3, #5
 8003396:	693b      	ldr	r3, [r7, #16]
 8003398:	4413      	add	r3, r2
 800339a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800339e:	461a      	mov	r2, r3
 80033a0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80033a4:	6093      	str	r3, [r2, #8]
 80033a6:	e032      	b.n	800340e <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80033a8:	68bb      	ldr	r3, [r7, #8]
 80033aa:	f003 0320 	and.w	r3, r3, #32
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d008      	beq.n	80033c4 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	015a      	lsls	r2, r3, #5
 80033b6:	693b      	ldr	r3, [r7, #16]
 80033b8:	4413      	add	r3, r2
 80033ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033be:	461a      	mov	r2, r3
 80033c0:	2320      	movs	r3, #32
 80033c2:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	b2db      	uxtb	r3, r3
 80033c8:	4619      	mov	r1, r3
 80033ca:	6878      	ldr	r0, [r7, #4]
 80033cc:	f003 ff7c 	bl	80072c8 <HAL_PCD_DataOutStageCallback>
 80033d0:	e01d      	b.n	800340e <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d114      	bne.n	8003402 <PCD_EP_OutXfrComplete_int+0x1fa>
 80033d8:	6879      	ldr	r1, [r7, #4]
 80033da:	683a      	ldr	r2, [r7, #0]
 80033dc:	4613      	mov	r3, r2
 80033de:	00db      	lsls	r3, r3, #3
 80033e0:	1a9b      	subs	r3, r3, r2
 80033e2:	009b      	lsls	r3, r3, #2
 80033e4:	440b      	add	r3, r1
 80033e6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d108      	bne.n	8003402 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6818      	ldr	r0, [r3, #0]
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80033fa:	461a      	mov	r2, r3
 80033fc:	2100      	movs	r1, #0
 80033fe:	f001 ffd7 	bl	80053b0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	b2db      	uxtb	r3, r3
 8003406:	4619      	mov	r1, r3
 8003408:	6878      	ldr	r0, [r7, #4]
 800340a:	f003 ff5d 	bl	80072c8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800340e:	2300      	movs	r3, #0
}
 8003410:	4618      	mov	r0, r3
 8003412:	3718      	adds	r7, #24
 8003414:	46bd      	mov	sp, r7
 8003416:	bd80      	pop	{r7, pc}
 8003418:	4f54300a 	.word	0x4f54300a
 800341c:	4f54310a 	.word	0x4f54310a

08003420 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b086      	sub	sp, #24
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
 8003428:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003430:	697b      	ldr	r3, [r7, #20]
 8003432:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003434:	697b      	ldr	r3, [r7, #20]
 8003436:	333c      	adds	r3, #60	; 0x3c
 8003438:	3304      	adds	r3, #4
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	015a      	lsls	r2, r3, #5
 8003442:	693b      	ldr	r3, [r7, #16]
 8003444:	4413      	add	r3, r2
 8003446:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800344a:	689b      	ldr	r3, [r3, #8]
 800344c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	4a15      	ldr	r2, [pc, #84]	; (80034a8 <PCD_EP_OutSetupPacket_int+0x88>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d90e      	bls.n	8003474 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003456:	68bb      	ldr	r3, [r7, #8]
 8003458:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800345c:	2b00      	cmp	r3, #0
 800345e:	d009      	beq.n	8003474 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	015a      	lsls	r2, r3, #5
 8003464:	693b      	ldr	r3, [r7, #16]
 8003466:	4413      	add	r3, r2
 8003468:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800346c:	461a      	mov	r2, r3
 800346e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003472:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003474:	6878      	ldr	r0, [r7, #4]
 8003476:	f003 ff15 	bl	80072a4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	4a0a      	ldr	r2, [pc, #40]	; (80034a8 <PCD_EP_OutSetupPacket_int+0x88>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d90c      	bls.n	800349c <PCD_EP_OutSetupPacket_int+0x7c>
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	691b      	ldr	r3, [r3, #16]
 8003486:	2b01      	cmp	r3, #1
 8003488:	d108      	bne.n	800349c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6818      	ldr	r0, [r3, #0]
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003494:	461a      	mov	r2, r3
 8003496:	2101      	movs	r1, #1
 8003498:	f001 ff8a 	bl	80053b0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800349c:	2300      	movs	r3, #0
}
 800349e:	4618      	mov	r0, r3
 80034a0:	3718      	adds	r7, #24
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bd80      	pop	{r7, pc}
 80034a6:	bf00      	nop
 80034a8:	4f54300a 	.word	0x4f54300a

080034ac <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80034ac:	b480      	push	{r7}
 80034ae:	b085      	sub	sp, #20
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
 80034b4:	460b      	mov	r3, r1
 80034b6:	70fb      	strb	r3, [r7, #3]
 80034b8:	4613      	mov	r3, r2
 80034ba:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034c2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80034c4:	78fb      	ldrb	r3, [r7, #3]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d107      	bne.n	80034da <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80034ca:	883b      	ldrh	r3, [r7, #0]
 80034cc:	0419      	lsls	r1, r3, #16
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	68ba      	ldr	r2, [r7, #8]
 80034d4:	430a      	orrs	r2, r1
 80034d6:	629a      	str	r2, [r3, #40]	; 0x28
 80034d8:	e028      	b.n	800352c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034e0:	0c1b      	lsrs	r3, r3, #16
 80034e2:	68ba      	ldr	r2, [r7, #8]
 80034e4:	4413      	add	r3, r2
 80034e6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80034e8:	2300      	movs	r3, #0
 80034ea:	73fb      	strb	r3, [r7, #15]
 80034ec:	e00d      	b.n	800350a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681a      	ldr	r2, [r3, #0]
 80034f2:	7bfb      	ldrb	r3, [r7, #15]
 80034f4:	3340      	adds	r3, #64	; 0x40
 80034f6:	009b      	lsls	r3, r3, #2
 80034f8:	4413      	add	r3, r2
 80034fa:	685b      	ldr	r3, [r3, #4]
 80034fc:	0c1b      	lsrs	r3, r3, #16
 80034fe:	68ba      	ldr	r2, [r7, #8]
 8003500:	4413      	add	r3, r2
 8003502:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003504:	7bfb      	ldrb	r3, [r7, #15]
 8003506:	3301      	adds	r3, #1
 8003508:	73fb      	strb	r3, [r7, #15]
 800350a:	7bfa      	ldrb	r2, [r7, #15]
 800350c:	78fb      	ldrb	r3, [r7, #3]
 800350e:	3b01      	subs	r3, #1
 8003510:	429a      	cmp	r2, r3
 8003512:	d3ec      	bcc.n	80034ee <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003514:	883b      	ldrh	r3, [r7, #0]
 8003516:	0418      	lsls	r0, r3, #16
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6819      	ldr	r1, [r3, #0]
 800351c:	78fb      	ldrb	r3, [r7, #3]
 800351e:	3b01      	subs	r3, #1
 8003520:	68ba      	ldr	r2, [r7, #8]
 8003522:	4302      	orrs	r2, r0
 8003524:	3340      	adds	r3, #64	; 0x40
 8003526:	009b      	lsls	r3, r3, #2
 8003528:	440b      	add	r3, r1
 800352a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800352c:	2300      	movs	r3, #0
}
 800352e:	4618      	mov	r0, r3
 8003530:	3714      	adds	r7, #20
 8003532:	46bd      	mov	sp, r7
 8003534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003538:	4770      	bx	lr

0800353a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800353a:	b480      	push	{r7}
 800353c:	b083      	sub	sp, #12
 800353e:	af00      	add	r7, sp, #0
 8003540:	6078      	str	r0, [r7, #4]
 8003542:	460b      	mov	r3, r1
 8003544:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	887a      	ldrh	r2, [r7, #2]
 800354c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800354e:	2300      	movs	r3, #0
}
 8003550:	4618      	mov	r0, r3
 8003552:	370c      	adds	r7, #12
 8003554:	46bd      	mov	sp, r7
 8003556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355a:	4770      	bx	lr

0800355c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800355c:	b480      	push	{r7}
 800355e:	b083      	sub	sp, #12
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
 8003564:	460b      	mov	r3, r1
 8003566:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003568:	bf00      	nop
 800356a:	370c      	adds	r7, #12
 800356c:	46bd      	mov	sp, r7
 800356e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003572:	4770      	bx	lr

08003574 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b086      	sub	sp, #24
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2b00      	cmp	r3, #0
 8003580:	d101      	bne.n	8003586 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003582:	2301      	movs	r3, #1
 8003584:	e264      	b.n	8003a50 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f003 0301 	and.w	r3, r3, #1
 800358e:	2b00      	cmp	r3, #0
 8003590:	d075      	beq.n	800367e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003592:	4ba3      	ldr	r3, [pc, #652]	; (8003820 <HAL_RCC_OscConfig+0x2ac>)
 8003594:	689b      	ldr	r3, [r3, #8]
 8003596:	f003 030c 	and.w	r3, r3, #12
 800359a:	2b04      	cmp	r3, #4
 800359c:	d00c      	beq.n	80035b8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800359e:	4ba0      	ldr	r3, [pc, #640]	; (8003820 <HAL_RCC_OscConfig+0x2ac>)
 80035a0:	689b      	ldr	r3, [r3, #8]
 80035a2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80035a6:	2b08      	cmp	r3, #8
 80035a8:	d112      	bne.n	80035d0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80035aa:	4b9d      	ldr	r3, [pc, #628]	; (8003820 <HAL_RCC_OscConfig+0x2ac>)
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035b2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80035b6:	d10b      	bne.n	80035d0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035b8:	4b99      	ldr	r3, [pc, #612]	; (8003820 <HAL_RCC_OscConfig+0x2ac>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d05b      	beq.n	800367c <HAL_RCC_OscConfig+0x108>
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	685b      	ldr	r3, [r3, #4]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d157      	bne.n	800367c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80035cc:	2301      	movs	r3, #1
 80035ce:	e23f      	b.n	8003a50 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035d8:	d106      	bne.n	80035e8 <HAL_RCC_OscConfig+0x74>
 80035da:	4b91      	ldr	r3, [pc, #580]	; (8003820 <HAL_RCC_OscConfig+0x2ac>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	4a90      	ldr	r2, [pc, #576]	; (8003820 <HAL_RCC_OscConfig+0x2ac>)
 80035e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035e4:	6013      	str	r3, [r2, #0]
 80035e6:	e01d      	b.n	8003624 <HAL_RCC_OscConfig+0xb0>
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	685b      	ldr	r3, [r3, #4]
 80035ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80035f0:	d10c      	bne.n	800360c <HAL_RCC_OscConfig+0x98>
 80035f2:	4b8b      	ldr	r3, [pc, #556]	; (8003820 <HAL_RCC_OscConfig+0x2ac>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4a8a      	ldr	r2, [pc, #552]	; (8003820 <HAL_RCC_OscConfig+0x2ac>)
 80035f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80035fc:	6013      	str	r3, [r2, #0]
 80035fe:	4b88      	ldr	r3, [pc, #544]	; (8003820 <HAL_RCC_OscConfig+0x2ac>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4a87      	ldr	r2, [pc, #540]	; (8003820 <HAL_RCC_OscConfig+0x2ac>)
 8003604:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003608:	6013      	str	r3, [r2, #0]
 800360a:	e00b      	b.n	8003624 <HAL_RCC_OscConfig+0xb0>
 800360c:	4b84      	ldr	r3, [pc, #528]	; (8003820 <HAL_RCC_OscConfig+0x2ac>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	4a83      	ldr	r2, [pc, #524]	; (8003820 <HAL_RCC_OscConfig+0x2ac>)
 8003612:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003616:	6013      	str	r3, [r2, #0]
 8003618:	4b81      	ldr	r3, [pc, #516]	; (8003820 <HAL_RCC_OscConfig+0x2ac>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4a80      	ldr	r2, [pc, #512]	; (8003820 <HAL_RCC_OscConfig+0x2ac>)
 800361e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003622:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	685b      	ldr	r3, [r3, #4]
 8003628:	2b00      	cmp	r3, #0
 800362a:	d013      	beq.n	8003654 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800362c:	f7fd fb78 	bl	8000d20 <HAL_GetTick>
 8003630:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003632:	e008      	b.n	8003646 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003634:	f7fd fb74 	bl	8000d20 <HAL_GetTick>
 8003638:	4602      	mov	r2, r0
 800363a:	693b      	ldr	r3, [r7, #16]
 800363c:	1ad3      	subs	r3, r2, r3
 800363e:	2b64      	cmp	r3, #100	; 0x64
 8003640:	d901      	bls.n	8003646 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003642:	2303      	movs	r3, #3
 8003644:	e204      	b.n	8003a50 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003646:	4b76      	ldr	r3, [pc, #472]	; (8003820 <HAL_RCC_OscConfig+0x2ac>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800364e:	2b00      	cmp	r3, #0
 8003650:	d0f0      	beq.n	8003634 <HAL_RCC_OscConfig+0xc0>
 8003652:	e014      	b.n	800367e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003654:	f7fd fb64 	bl	8000d20 <HAL_GetTick>
 8003658:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800365a:	e008      	b.n	800366e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800365c:	f7fd fb60 	bl	8000d20 <HAL_GetTick>
 8003660:	4602      	mov	r2, r0
 8003662:	693b      	ldr	r3, [r7, #16]
 8003664:	1ad3      	subs	r3, r2, r3
 8003666:	2b64      	cmp	r3, #100	; 0x64
 8003668:	d901      	bls.n	800366e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800366a:	2303      	movs	r3, #3
 800366c:	e1f0      	b.n	8003a50 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800366e:	4b6c      	ldr	r3, [pc, #432]	; (8003820 <HAL_RCC_OscConfig+0x2ac>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003676:	2b00      	cmp	r3, #0
 8003678:	d1f0      	bne.n	800365c <HAL_RCC_OscConfig+0xe8>
 800367a:	e000      	b.n	800367e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800367c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f003 0302 	and.w	r3, r3, #2
 8003686:	2b00      	cmp	r3, #0
 8003688:	d063      	beq.n	8003752 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800368a:	4b65      	ldr	r3, [pc, #404]	; (8003820 <HAL_RCC_OscConfig+0x2ac>)
 800368c:	689b      	ldr	r3, [r3, #8]
 800368e:	f003 030c 	and.w	r3, r3, #12
 8003692:	2b00      	cmp	r3, #0
 8003694:	d00b      	beq.n	80036ae <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003696:	4b62      	ldr	r3, [pc, #392]	; (8003820 <HAL_RCC_OscConfig+0x2ac>)
 8003698:	689b      	ldr	r3, [r3, #8]
 800369a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800369e:	2b08      	cmp	r3, #8
 80036a0:	d11c      	bne.n	80036dc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80036a2:	4b5f      	ldr	r3, [pc, #380]	; (8003820 <HAL_RCC_OscConfig+0x2ac>)
 80036a4:	685b      	ldr	r3, [r3, #4]
 80036a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d116      	bne.n	80036dc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036ae:	4b5c      	ldr	r3, [pc, #368]	; (8003820 <HAL_RCC_OscConfig+0x2ac>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f003 0302 	and.w	r3, r3, #2
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d005      	beq.n	80036c6 <HAL_RCC_OscConfig+0x152>
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	68db      	ldr	r3, [r3, #12]
 80036be:	2b01      	cmp	r3, #1
 80036c0:	d001      	beq.n	80036c6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80036c2:	2301      	movs	r3, #1
 80036c4:	e1c4      	b.n	8003a50 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036c6:	4b56      	ldr	r3, [pc, #344]	; (8003820 <HAL_RCC_OscConfig+0x2ac>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	691b      	ldr	r3, [r3, #16]
 80036d2:	00db      	lsls	r3, r3, #3
 80036d4:	4952      	ldr	r1, [pc, #328]	; (8003820 <HAL_RCC_OscConfig+0x2ac>)
 80036d6:	4313      	orrs	r3, r2
 80036d8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036da:	e03a      	b.n	8003752 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	68db      	ldr	r3, [r3, #12]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d020      	beq.n	8003726 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80036e4:	4b4f      	ldr	r3, [pc, #316]	; (8003824 <HAL_RCC_OscConfig+0x2b0>)
 80036e6:	2201      	movs	r2, #1
 80036e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036ea:	f7fd fb19 	bl	8000d20 <HAL_GetTick>
 80036ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036f0:	e008      	b.n	8003704 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80036f2:	f7fd fb15 	bl	8000d20 <HAL_GetTick>
 80036f6:	4602      	mov	r2, r0
 80036f8:	693b      	ldr	r3, [r7, #16]
 80036fa:	1ad3      	subs	r3, r2, r3
 80036fc:	2b02      	cmp	r3, #2
 80036fe:	d901      	bls.n	8003704 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003700:	2303      	movs	r3, #3
 8003702:	e1a5      	b.n	8003a50 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003704:	4b46      	ldr	r3, [pc, #280]	; (8003820 <HAL_RCC_OscConfig+0x2ac>)
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f003 0302 	and.w	r3, r3, #2
 800370c:	2b00      	cmp	r3, #0
 800370e:	d0f0      	beq.n	80036f2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003710:	4b43      	ldr	r3, [pc, #268]	; (8003820 <HAL_RCC_OscConfig+0x2ac>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	691b      	ldr	r3, [r3, #16]
 800371c:	00db      	lsls	r3, r3, #3
 800371e:	4940      	ldr	r1, [pc, #256]	; (8003820 <HAL_RCC_OscConfig+0x2ac>)
 8003720:	4313      	orrs	r3, r2
 8003722:	600b      	str	r3, [r1, #0]
 8003724:	e015      	b.n	8003752 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003726:	4b3f      	ldr	r3, [pc, #252]	; (8003824 <HAL_RCC_OscConfig+0x2b0>)
 8003728:	2200      	movs	r2, #0
 800372a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800372c:	f7fd faf8 	bl	8000d20 <HAL_GetTick>
 8003730:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003732:	e008      	b.n	8003746 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003734:	f7fd faf4 	bl	8000d20 <HAL_GetTick>
 8003738:	4602      	mov	r2, r0
 800373a:	693b      	ldr	r3, [r7, #16]
 800373c:	1ad3      	subs	r3, r2, r3
 800373e:	2b02      	cmp	r3, #2
 8003740:	d901      	bls.n	8003746 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003742:	2303      	movs	r3, #3
 8003744:	e184      	b.n	8003a50 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003746:	4b36      	ldr	r3, [pc, #216]	; (8003820 <HAL_RCC_OscConfig+0x2ac>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f003 0302 	and.w	r3, r3, #2
 800374e:	2b00      	cmp	r3, #0
 8003750:	d1f0      	bne.n	8003734 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f003 0308 	and.w	r3, r3, #8
 800375a:	2b00      	cmp	r3, #0
 800375c:	d030      	beq.n	80037c0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	695b      	ldr	r3, [r3, #20]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d016      	beq.n	8003794 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003766:	4b30      	ldr	r3, [pc, #192]	; (8003828 <HAL_RCC_OscConfig+0x2b4>)
 8003768:	2201      	movs	r2, #1
 800376a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800376c:	f7fd fad8 	bl	8000d20 <HAL_GetTick>
 8003770:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003772:	e008      	b.n	8003786 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003774:	f7fd fad4 	bl	8000d20 <HAL_GetTick>
 8003778:	4602      	mov	r2, r0
 800377a:	693b      	ldr	r3, [r7, #16]
 800377c:	1ad3      	subs	r3, r2, r3
 800377e:	2b02      	cmp	r3, #2
 8003780:	d901      	bls.n	8003786 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003782:	2303      	movs	r3, #3
 8003784:	e164      	b.n	8003a50 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003786:	4b26      	ldr	r3, [pc, #152]	; (8003820 <HAL_RCC_OscConfig+0x2ac>)
 8003788:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800378a:	f003 0302 	and.w	r3, r3, #2
 800378e:	2b00      	cmp	r3, #0
 8003790:	d0f0      	beq.n	8003774 <HAL_RCC_OscConfig+0x200>
 8003792:	e015      	b.n	80037c0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003794:	4b24      	ldr	r3, [pc, #144]	; (8003828 <HAL_RCC_OscConfig+0x2b4>)
 8003796:	2200      	movs	r2, #0
 8003798:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800379a:	f7fd fac1 	bl	8000d20 <HAL_GetTick>
 800379e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037a0:	e008      	b.n	80037b4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80037a2:	f7fd fabd 	bl	8000d20 <HAL_GetTick>
 80037a6:	4602      	mov	r2, r0
 80037a8:	693b      	ldr	r3, [r7, #16]
 80037aa:	1ad3      	subs	r3, r2, r3
 80037ac:	2b02      	cmp	r3, #2
 80037ae:	d901      	bls.n	80037b4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80037b0:	2303      	movs	r3, #3
 80037b2:	e14d      	b.n	8003a50 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037b4:	4b1a      	ldr	r3, [pc, #104]	; (8003820 <HAL_RCC_OscConfig+0x2ac>)
 80037b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037b8:	f003 0302 	and.w	r3, r3, #2
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d1f0      	bne.n	80037a2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f003 0304 	and.w	r3, r3, #4
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	f000 80a0 	beq.w	800390e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80037ce:	2300      	movs	r3, #0
 80037d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80037d2:	4b13      	ldr	r3, [pc, #76]	; (8003820 <HAL_RCC_OscConfig+0x2ac>)
 80037d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d10f      	bne.n	80037fe <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037de:	2300      	movs	r3, #0
 80037e0:	60bb      	str	r3, [r7, #8]
 80037e2:	4b0f      	ldr	r3, [pc, #60]	; (8003820 <HAL_RCC_OscConfig+0x2ac>)
 80037e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037e6:	4a0e      	ldr	r2, [pc, #56]	; (8003820 <HAL_RCC_OscConfig+0x2ac>)
 80037e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037ec:	6413      	str	r3, [r2, #64]	; 0x40
 80037ee:	4b0c      	ldr	r3, [pc, #48]	; (8003820 <HAL_RCC_OscConfig+0x2ac>)
 80037f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037f6:	60bb      	str	r3, [r7, #8]
 80037f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80037fa:	2301      	movs	r3, #1
 80037fc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037fe:	4b0b      	ldr	r3, [pc, #44]	; (800382c <HAL_RCC_OscConfig+0x2b8>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003806:	2b00      	cmp	r3, #0
 8003808:	d121      	bne.n	800384e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800380a:	4b08      	ldr	r3, [pc, #32]	; (800382c <HAL_RCC_OscConfig+0x2b8>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	4a07      	ldr	r2, [pc, #28]	; (800382c <HAL_RCC_OscConfig+0x2b8>)
 8003810:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003814:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003816:	f7fd fa83 	bl	8000d20 <HAL_GetTick>
 800381a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800381c:	e011      	b.n	8003842 <HAL_RCC_OscConfig+0x2ce>
 800381e:	bf00      	nop
 8003820:	40023800 	.word	0x40023800
 8003824:	42470000 	.word	0x42470000
 8003828:	42470e80 	.word	0x42470e80
 800382c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003830:	f7fd fa76 	bl	8000d20 <HAL_GetTick>
 8003834:	4602      	mov	r2, r0
 8003836:	693b      	ldr	r3, [r7, #16]
 8003838:	1ad3      	subs	r3, r2, r3
 800383a:	2b02      	cmp	r3, #2
 800383c:	d901      	bls.n	8003842 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800383e:	2303      	movs	r3, #3
 8003840:	e106      	b.n	8003a50 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003842:	4b85      	ldr	r3, [pc, #532]	; (8003a58 <HAL_RCC_OscConfig+0x4e4>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800384a:	2b00      	cmp	r3, #0
 800384c:	d0f0      	beq.n	8003830 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	689b      	ldr	r3, [r3, #8]
 8003852:	2b01      	cmp	r3, #1
 8003854:	d106      	bne.n	8003864 <HAL_RCC_OscConfig+0x2f0>
 8003856:	4b81      	ldr	r3, [pc, #516]	; (8003a5c <HAL_RCC_OscConfig+0x4e8>)
 8003858:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800385a:	4a80      	ldr	r2, [pc, #512]	; (8003a5c <HAL_RCC_OscConfig+0x4e8>)
 800385c:	f043 0301 	orr.w	r3, r3, #1
 8003860:	6713      	str	r3, [r2, #112]	; 0x70
 8003862:	e01c      	b.n	800389e <HAL_RCC_OscConfig+0x32a>
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	689b      	ldr	r3, [r3, #8]
 8003868:	2b05      	cmp	r3, #5
 800386a:	d10c      	bne.n	8003886 <HAL_RCC_OscConfig+0x312>
 800386c:	4b7b      	ldr	r3, [pc, #492]	; (8003a5c <HAL_RCC_OscConfig+0x4e8>)
 800386e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003870:	4a7a      	ldr	r2, [pc, #488]	; (8003a5c <HAL_RCC_OscConfig+0x4e8>)
 8003872:	f043 0304 	orr.w	r3, r3, #4
 8003876:	6713      	str	r3, [r2, #112]	; 0x70
 8003878:	4b78      	ldr	r3, [pc, #480]	; (8003a5c <HAL_RCC_OscConfig+0x4e8>)
 800387a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800387c:	4a77      	ldr	r2, [pc, #476]	; (8003a5c <HAL_RCC_OscConfig+0x4e8>)
 800387e:	f043 0301 	orr.w	r3, r3, #1
 8003882:	6713      	str	r3, [r2, #112]	; 0x70
 8003884:	e00b      	b.n	800389e <HAL_RCC_OscConfig+0x32a>
 8003886:	4b75      	ldr	r3, [pc, #468]	; (8003a5c <HAL_RCC_OscConfig+0x4e8>)
 8003888:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800388a:	4a74      	ldr	r2, [pc, #464]	; (8003a5c <HAL_RCC_OscConfig+0x4e8>)
 800388c:	f023 0301 	bic.w	r3, r3, #1
 8003890:	6713      	str	r3, [r2, #112]	; 0x70
 8003892:	4b72      	ldr	r3, [pc, #456]	; (8003a5c <HAL_RCC_OscConfig+0x4e8>)
 8003894:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003896:	4a71      	ldr	r2, [pc, #452]	; (8003a5c <HAL_RCC_OscConfig+0x4e8>)
 8003898:	f023 0304 	bic.w	r3, r3, #4
 800389c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	689b      	ldr	r3, [r3, #8]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d015      	beq.n	80038d2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038a6:	f7fd fa3b 	bl	8000d20 <HAL_GetTick>
 80038aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038ac:	e00a      	b.n	80038c4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80038ae:	f7fd fa37 	bl	8000d20 <HAL_GetTick>
 80038b2:	4602      	mov	r2, r0
 80038b4:	693b      	ldr	r3, [r7, #16]
 80038b6:	1ad3      	subs	r3, r2, r3
 80038b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80038bc:	4293      	cmp	r3, r2
 80038be:	d901      	bls.n	80038c4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80038c0:	2303      	movs	r3, #3
 80038c2:	e0c5      	b.n	8003a50 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038c4:	4b65      	ldr	r3, [pc, #404]	; (8003a5c <HAL_RCC_OscConfig+0x4e8>)
 80038c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038c8:	f003 0302 	and.w	r3, r3, #2
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d0ee      	beq.n	80038ae <HAL_RCC_OscConfig+0x33a>
 80038d0:	e014      	b.n	80038fc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038d2:	f7fd fa25 	bl	8000d20 <HAL_GetTick>
 80038d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038d8:	e00a      	b.n	80038f0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80038da:	f7fd fa21 	bl	8000d20 <HAL_GetTick>
 80038de:	4602      	mov	r2, r0
 80038e0:	693b      	ldr	r3, [r7, #16]
 80038e2:	1ad3      	subs	r3, r2, r3
 80038e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80038e8:	4293      	cmp	r3, r2
 80038ea:	d901      	bls.n	80038f0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80038ec:	2303      	movs	r3, #3
 80038ee:	e0af      	b.n	8003a50 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038f0:	4b5a      	ldr	r3, [pc, #360]	; (8003a5c <HAL_RCC_OscConfig+0x4e8>)
 80038f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038f4:	f003 0302 	and.w	r3, r3, #2
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d1ee      	bne.n	80038da <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80038fc:	7dfb      	ldrb	r3, [r7, #23]
 80038fe:	2b01      	cmp	r3, #1
 8003900:	d105      	bne.n	800390e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003902:	4b56      	ldr	r3, [pc, #344]	; (8003a5c <HAL_RCC_OscConfig+0x4e8>)
 8003904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003906:	4a55      	ldr	r2, [pc, #340]	; (8003a5c <HAL_RCC_OscConfig+0x4e8>)
 8003908:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800390c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	699b      	ldr	r3, [r3, #24]
 8003912:	2b00      	cmp	r3, #0
 8003914:	f000 809b 	beq.w	8003a4e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003918:	4b50      	ldr	r3, [pc, #320]	; (8003a5c <HAL_RCC_OscConfig+0x4e8>)
 800391a:	689b      	ldr	r3, [r3, #8]
 800391c:	f003 030c 	and.w	r3, r3, #12
 8003920:	2b08      	cmp	r3, #8
 8003922:	d05c      	beq.n	80039de <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	699b      	ldr	r3, [r3, #24]
 8003928:	2b02      	cmp	r3, #2
 800392a:	d141      	bne.n	80039b0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800392c:	4b4c      	ldr	r3, [pc, #304]	; (8003a60 <HAL_RCC_OscConfig+0x4ec>)
 800392e:	2200      	movs	r2, #0
 8003930:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003932:	f7fd f9f5 	bl	8000d20 <HAL_GetTick>
 8003936:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003938:	e008      	b.n	800394c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800393a:	f7fd f9f1 	bl	8000d20 <HAL_GetTick>
 800393e:	4602      	mov	r2, r0
 8003940:	693b      	ldr	r3, [r7, #16]
 8003942:	1ad3      	subs	r3, r2, r3
 8003944:	2b02      	cmp	r3, #2
 8003946:	d901      	bls.n	800394c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003948:	2303      	movs	r3, #3
 800394a:	e081      	b.n	8003a50 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800394c:	4b43      	ldr	r3, [pc, #268]	; (8003a5c <HAL_RCC_OscConfig+0x4e8>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003954:	2b00      	cmp	r3, #0
 8003956:	d1f0      	bne.n	800393a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	69da      	ldr	r2, [r3, #28]
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6a1b      	ldr	r3, [r3, #32]
 8003960:	431a      	orrs	r2, r3
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003966:	019b      	lsls	r3, r3, #6
 8003968:	431a      	orrs	r2, r3
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800396e:	085b      	lsrs	r3, r3, #1
 8003970:	3b01      	subs	r3, #1
 8003972:	041b      	lsls	r3, r3, #16
 8003974:	431a      	orrs	r2, r3
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800397a:	061b      	lsls	r3, r3, #24
 800397c:	4937      	ldr	r1, [pc, #220]	; (8003a5c <HAL_RCC_OscConfig+0x4e8>)
 800397e:	4313      	orrs	r3, r2
 8003980:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003982:	4b37      	ldr	r3, [pc, #220]	; (8003a60 <HAL_RCC_OscConfig+0x4ec>)
 8003984:	2201      	movs	r2, #1
 8003986:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003988:	f7fd f9ca 	bl	8000d20 <HAL_GetTick>
 800398c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800398e:	e008      	b.n	80039a2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003990:	f7fd f9c6 	bl	8000d20 <HAL_GetTick>
 8003994:	4602      	mov	r2, r0
 8003996:	693b      	ldr	r3, [r7, #16]
 8003998:	1ad3      	subs	r3, r2, r3
 800399a:	2b02      	cmp	r3, #2
 800399c:	d901      	bls.n	80039a2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800399e:	2303      	movs	r3, #3
 80039a0:	e056      	b.n	8003a50 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039a2:	4b2e      	ldr	r3, [pc, #184]	; (8003a5c <HAL_RCC_OscConfig+0x4e8>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d0f0      	beq.n	8003990 <HAL_RCC_OscConfig+0x41c>
 80039ae:	e04e      	b.n	8003a4e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039b0:	4b2b      	ldr	r3, [pc, #172]	; (8003a60 <HAL_RCC_OscConfig+0x4ec>)
 80039b2:	2200      	movs	r2, #0
 80039b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039b6:	f7fd f9b3 	bl	8000d20 <HAL_GetTick>
 80039ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039bc:	e008      	b.n	80039d0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039be:	f7fd f9af 	bl	8000d20 <HAL_GetTick>
 80039c2:	4602      	mov	r2, r0
 80039c4:	693b      	ldr	r3, [r7, #16]
 80039c6:	1ad3      	subs	r3, r2, r3
 80039c8:	2b02      	cmp	r3, #2
 80039ca:	d901      	bls.n	80039d0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80039cc:	2303      	movs	r3, #3
 80039ce:	e03f      	b.n	8003a50 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039d0:	4b22      	ldr	r3, [pc, #136]	; (8003a5c <HAL_RCC_OscConfig+0x4e8>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d1f0      	bne.n	80039be <HAL_RCC_OscConfig+0x44a>
 80039dc:	e037      	b.n	8003a4e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	699b      	ldr	r3, [r3, #24]
 80039e2:	2b01      	cmp	r3, #1
 80039e4:	d101      	bne.n	80039ea <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80039e6:	2301      	movs	r3, #1
 80039e8:	e032      	b.n	8003a50 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80039ea:	4b1c      	ldr	r3, [pc, #112]	; (8003a5c <HAL_RCC_OscConfig+0x4e8>)
 80039ec:	685b      	ldr	r3, [r3, #4]
 80039ee:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	699b      	ldr	r3, [r3, #24]
 80039f4:	2b01      	cmp	r3, #1
 80039f6:	d028      	beq.n	8003a4a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a02:	429a      	cmp	r2, r3
 8003a04:	d121      	bne.n	8003a4a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a10:	429a      	cmp	r2, r3
 8003a12:	d11a      	bne.n	8003a4a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003a14:	68fa      	ldr	r2, [r7, #12]
 8003a16:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003a1a:	4013      	ands	r3, r2
 8003a1c:	687a      	ldr	r2, [r7, #4]
 8003a1e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003a20:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d111      	bne.n	8003a4a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a30:	085b      	lsrs	r3, r3, #1
 8003a32:	3b01      	subs	r3, #1
 8003a34:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003a36:	429a      	cmp	r2, r3
 8003a38:	d107      	bne.n	8003a4a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a44:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003a46:	429a      	cmp	r2, r3
 8003a48:	d001      	beq.n	8003a4e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	e000      	b.n	8003a50 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8003a4e:	2300      	movs	r3, #0
}
 8003a50:	4618      	mov	r0, r3
 8003a52:	3718      	adds	r7, #24
 8003a54:	46bd      	mov	sp, r7
 8003a56:	bd80      	pop	{r7, pc}
 8003a58:	40007000 	.word	0x40007000
 8003a5c:	40023800 	.word	0x40023800
 8003a60:	42470060 	.word	0x42470060

08003a64 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b084      	sub	sp, #16
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
 8003a6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d101      	bne.n	8003a78 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a74:	2301      	movs	r3, #1
 8003a76:	e0cc      	b.n	8003c12 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003a78:	4b68      	ldr	r3, [pc, #416]	; (8003c1c <HAL_RCC_ClockConfig+0x1b8>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f003 0307 	and.w	r3, r3, #7
 8003a80:	683a      	ldr	r2, [r7, #0]
 8003a82:	429a      	cmp	r2, r3
 8003a84:	d90c      	bls.n	8003aa0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a86:	4b65      	ldr	r3, [pc, #404]	; (8003c1c <HAL_RCC_ClockConfig+0x1b8>)
 8003a88:	683a      	ldr	r2, [r7, #0]
 8003a8a:	b2d2      	uxtb	r2, r2
 8003a8c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a8e:	4b63      	ldr	r3, [pc, #396]	; (8003c1c <HAL_RCC_ClockConfig+0x1b8>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f003 0307 	and.w	r3, r3, #7
 8003a96:	683a      	ldr	r2, [r7, #0]
 8003a98:	429a      	cmp	r2, r3
 8003a9a:	d001      	beq.n	8003aa0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003a9c:	2301      	movs	r3, #1
 8003a9e:	e0b8      	b.n	8003c12 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f003 0302 	and.w	r3, r3, #2
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d020      	beq.n	8003aee <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f003 0304 	and.w	r3, r3, #4
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d005      	beq.n	8003ac4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ab8:	4b59      	ldr	r3, [pc, #356]	; (8003c20 <HAL_RCC_ClockConfig+0x1bc>)
 8003aba:	689b      	ldr	r3, [r3, #8]
 8003abc:	4a58      	ldr	r2, [pc, #352]	; (8003c20 <HAL_RCC_ClockConfig+0x1bc>)
 8003abe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003ac2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f003 0308 	and.w	r3, r3, #8
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d005      	beq.n	8003adc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003ad0:	4b53      	ldr	r3, [pc, #332]	; (8003c20 <HAL_RCC_ClockConfig+0x1bc>)
 8003ad2:	689b      	ldr	r3, [r3, #8]
 8003ad4:	4a52      	ldr	r2, [pc, #328]	; (8003c20 <HAL_RCC_ClockConfig+0x1bc>)
 8003ad6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003ada:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003adc:	4b50      	ldr	r3, [pc, #320]	; (8003c20 <HAL_RCC_ClockConfig+0x1bc>)
 8003ade:	689b      	ldr	r3, [r3, #8]
 8003ae0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	689b      	ldr	r3, [r3, #8]
 8003ae8:	494d      	ldr	r1, [pc, #308]	; (8003c20 <HAL_RCC_ClockConfig+0x1bc>)
 8003aea:	4313      	orrs	r3, r2
 8003aec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f003 0301 	and.w	r3, r3, #1
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d044      	beq.n	8003b84 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	685b      	ldr	r3, [r3, #4]
 8003afe:	2b01      	cmp	r3, #1
 8003b00:	d107      	bne.n	8003b12 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b02:	4b47      	ldr	r3, [pc, #284]	; (8003c20 <HAL_RCC_ClockConfig+0x1bc>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d119      	bne.n	8003b42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b0e:	2301      	movs	r3, #1
 8003b10:	e07f      	b.n	8003c12 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	685b      	ldr	r3, [r3, #4]
 8003b16:	2b02      	cmp	r3, #2
 8003b18:	d003      	beq.n	8003b22 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003b1e:	2b03      	cmp	r3, #3
 8003b20:	d107      	bne.n	8003b32 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b22:	4b3f      	ldr	r3, [pc, #252]	; (8003c20 <HAL_RCC_ClockConfig+0x1bc>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d109      	bne.n	8003b42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b2e:	2301      	movs	r3, #1
 8003b30:	e06f      	b.n	8003c12 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b32:	4b3b      	ldr	r3, [pc, #236]	; (8003c20 <HAL_RCC_ClockConfig+0x1bc>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f003 0302 	and.w	r3, r3, #2
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d101      	bne.n	8003b42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b3e:	2301      	movs	r3, #1
 8003b40:	e067      	b.n	8003c12 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b42:	4b37      	ldr	r3, [pc, #220]	; (8003c20 <HAL_RCC_ClockConfig+0x1bc>)
 8003b44:	689b      	ldr	r3, [r3, #8]
 8003b46:	f023 0203 	bic.w	r2, r3, #3
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	685b      	ldr	r3, [r3, #4]
 8003b4e:	4934      	ldr	r1, [pc, #208]	; (8003c20 <HAL_RCC_ClockConfig+0x1bc>)
 8003b50:	4313      	orrs	r3, r2
 8003b52:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003b54:	f7fd f8e4 	bl	8000d20 <HAL_GetTick>
 8003b58:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b5a:	e00a      	b.n	8003b72 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b5c:	f7fd f8e0 	bl	8000d20 <HAL_GetTick>
 8003b60:	4602      	mov	r2, r0
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	1ad3      	subs	r3, r2, r3
 8003b66:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d901      	bls.n	8003b72 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003b6e:	2303      	movs	r3, #3
 8003b70:	e04f      	b.n	8003c12 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b72:	4b2b      	ldr	r3, [pc, #172]	; (8003c20 <HAL_RCC_ClockConfig+0x1bc>)
 8003b74:	689b      	ldr	r3, [r3, #8]
 8003b76:	f003 020c 	and.w	r2, r3, #12
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	685b      	ldr	r3, [r3, #4]
 8003b7e:	009b      	lsls	r3, r3, #2
 8003b80:	429a      	cmp	r2, r3
 8003b82:	d1eb      	bne.n	8003b5c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003b84:	4b25      	ldr	r3, [pc, #148]	; (8003c1c <HAL_RCC_ClockConfig+0x1b8>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f003 0307 	and.w	r3, r3, #7
 8003b8c:	683a      	ldr	r2, [r7, #0]
 8003b8e:	429a      	cmp	r2, r3
 8003b90:	d20c      	bcs.n	8003bac <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b92:	4b22      	ldr	r3, [pc, #136]	; (8003c1c <HAL_RCC_ClockConfig+0x1b8>)
 8003b94:	683a      	ldr	r2, [r7, #0]
 8003b96:	b2d2      	uxtb	r2, r2
 8003b98:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b9a:	4b20      	ldr	r3, [pc, #128]	; (8003c1c <HAL_RCC_ClockConfig+0x1b8>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f003 0307 	and.w	r3, r3, #7
 8003ba2:	683a      	ldr	r2, [r7, #0]
 8003ba4:	429a      	cmp	r2, r3
 8003ba6:	d001      	beq.n	8003bac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003ba8:	2301      	movs	r3, #1
 8003baa:	e032      	b.n	8003c12 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f003 0304 	and.w	r3, r3, #4
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d008      	beq.n	8003bca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003bb8:	4b19      	ldr	r3, [pc, #100]	; (8003c20 <HAL_RCC_ClockConfig+0x1bc>)
 8003bba:	689b      	ldr	r3, [r3, #8]
 8003bbc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	68db      	ldr	r3, [r3, #12]
 8003bc4:	4916      	ldr	r1, [pc, #88]	; (8003c20 <HAL_RCC_ClockConfig+0x1bc>)
 8003bc6:	4313      	orrs	r3, r2
 8003bc8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f003 0308 	and.w	r3, r3, #8
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d009      	beq.n	8003bea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003bd6:	4b12      	ldr	r3, [pc, #72]	; (8003c20 <HAL_RCC_ClockConfig+0x1bc>)
 8003bd8:	689b      	ldr	r3, [r3, #8]
 8003bda:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	691b      	ldr	r3, [r3, #16]
 8003be2:	00db      	lsls	r3, r3, #3
 8003be4:	490e      	ldr	r1, [pc, #56]	; (8003c20 <HAL_RCC_ClockConfig+0x1bc>)
 8003be6:	4313      	orrs	r3, r2
 8003be8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003bea:	f000 f821 	bl	8003c30 <HAL_RCC_GetSysClockFreq>
 8003bee:	4602      	mov	r2, r0
 8003bf0:	4b0b      	ldr	r3, [pc, #44]	; (8003c20 <HAL_RCC_ClockConfig+0x1bc>)
 8003bf2:	689b      	ldr	r3, [r3, #8]
 8003bf4:	091b      	lsrs	r3, r3, #4
 8003bf6:	f003 030f 	and.w	r3, r3, #15
 8003bfa:	490a      	ldr	r1, [pc, #40]	; (8003c24 <HAL_RCC_ClockConfig+0x1c0>)
 8003bfc:	5ccb      	ldrb	r3, [r1, r3]
 8003bfe:	fa22 f303 	lsr.w	r3, r2, r3
 8003c02:	4a09      	ldr	r2, [pc, #36]	; (8003c28 <HAL_RCC_ClockConfig+0x1c4>)
 8003c04:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003c06:	4b09      	ldr	r3, [pc, #36]	; (8003c2c <HAL_RCC_ClockConfig+0x1c8>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	f7fd f844 	bl	8000c98 <HAL_InitTick>

  return HAL_OK;
 8003c10:	2300      	movs	r3, #0
}
 8003c12:	4618      	mov	r0, r3
 8003c14:	3710      	adds	r7, #16
 8003c16:	46bd      	mov	sp, r7
 8003c18:	bd80      	pop	{r7, pc}
 8003c1a:	bf00      	nop
 8003c1c:	40023c00 	.word	0x40023c00
 8003c20:	40023800 	.word	0x40023800
 8003c24:	08008140 	.word	0x08008140
 8003c28:	20000000 	.word	0x20000000
 8003c2c:	20000004 	.word	0x20000004

08003c30 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c30:	b5b0      	push	{r4, r5, r7, lr}
 8003c32:	b084      	sub	sp, #16
 8003c34:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003c36:	2100      	movs	r1, #0
 8003c38:	6079      	str	r1, [r7, #4]
 8003c3a:	2100      	movs	r1, #0
 8003c3c:	60f9      	str	r1, [r7, #12]
 8003c3e:	2100      	movs	r1, #0
 8003c40:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003c42:	2100      	movs	r1, #0
 8003c44:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003c46:	4952      	ldr	r1, [pc, #328]	; (8003d90 <HAL_RCC_GetSysClockFreq+0x160>)
 8003c48:	6889      	ldr	r1, [r1, #8]
 8003c4a:	f001 010c 	and.w	r1, r1, #12
 8003c4e:	2908      	cmp	r1, #8
 8003c50:	d00d      	beq.n	8003c6e <HAL_RCC_GetSysClockFreq+0x3e>
 8003c52:	2908      	cmp	r1, #8
 8003c54:	f200 8094 	bhi.w	8003d80 <HAL_RCC_GetSysClockFreq+0x150>
 8003c58:	2900      	cmp	r1, #0
 8003c5a:	d002      	beq.n	8003c62 <HAL_RCC_GetSysClockFreq+0x32>
 8003c5c:	2904      	cmp	r1, #4
 8003c5e:	d003      	beq.n	8003c68 <HAL_RCC_GetSysClockFreq+0x38>
 8003c60:	e08e      	b.n	8003d80 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003c62:	4b4c      	ldr	r3, [pc, #304]	; (8003d94 <HAL_RCC_GetSysClockFreq+0x164>)
 8003c64:	60bb      	str	r3, [r7, #8]
       break;
 8003c66:	e08e      	b.n	8003d86 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003c68:	4b4b      	ldr	r3, [pc, #300]	; (8003d98 <HAL_RCC_GetSysClockFreq+0x168>)
 8003c6a:	60bb      	str	r3, [r7, #8]
      break;
 8003c6c:	e08b      	b.n	8003d86 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003c6e:	4948      	ldr	r1, [pc, #288]	; (8003d90 <HAL_RCC_GetSysClockFreq+0x160>)
 8003c70:	6849      	ldr	r1, [r1, #4]
 8003c72:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8003c76:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003c78:	4945      	ldr	r1, [pc, #276]	; (8003d90 <HAL_RCC_GetSysClockFreq+0x160>)
 8003c7a:	6849      	ldr	r1, [r1, #4]
 8003c7c:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8003c80:	2900      	cmp	r1, #0
 8003c82:	d024      	beq.n	8003cce <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c84:	4942      	ldr	r1, [pc, #264]	; (8003d90 <HAL_RCC_GetSysClockFreq+0x160>)
 8003c86:	6849      	ldr	r1, [r1, #4]
 8003c88:	0989      	lsrs	r1, r1, #6
 8003c8a:	4608      	mov	r0, r1
 8003c8c:	f04f 0100 	mov.w	r1, #0
 8003c90:	f240 14ff 	movw	r4, #511	; 0x1ff
 8003c94:	f04f 0500 	mov.w	r5, #0
 8003c98:	ea00 0204 	and.w	r2, r0, r4
 8003c9c:	ea01 0305 	and.w	r3, r1, r5
 8003ca0:	493d      	ldr	r1, [pc, #244]	; (8003d98 <HAL_RCC_GetSysClockFreq+0x168>)
 8003ca2:	fb01 f003 	mul.w	r0, r1, r3
 8003ca6:	2100      	movs	r1, #0
 8003ca8:	fb01 f102 	mul.w	r1, r1, r2
 8003cac:	1844      	adds	r4, r0, r1
 8003cae:	493a      	ldr	r1, [pc, #232]	; (8003d98 <HAL_RCC_GetSysClockFreq+0x168>)
 8003cb0:	fba2 0101 	umull	r0, r1, r2, r1
 8003cb4:	1863      	adds	r3, r4, r1
 8003cb6:	4619      	mov	r1, r3
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	461a      	mov	r2, r3
 8003cbc:	f04f 0300 	mov.w	r3, #0
 8003cc0:	f7fc fae6 	bl	8000290 <__aeabi_uldivmod>
 8003cc4:	4602      	mov	r2, r0
 8003cc6:	460b      	mov	r3, r1
 8003cc8:	4613      	mov	r3, r2
 8003cca:	60fb      	str	r3, [r7, #12]
 8003ccc:	e04a      	b.n	8003d64 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003cce:	4b30      	ldr	r3, [pc, #192]	; (8003d90 <HAL_RCC_GetSysClockFreq+0x160>)
 8003cd0:	685b      	ldr	r3, [r3, #4]
 8003cd2:	099b      	lsrs	r3, r3, #6
 8003cd4:	461a      	mov	r2, r3
 8003cd6:	f04f 0300 	mov.w	r3, #0
 8003cda:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003cde:	f04f 0100 	mov.w	r1, #0
 8003ce2:	ea02 0400 	and.w	r4, r2, r0
 8003ce6:	ea03 0501 	and.w	r5, r3, r1
 8003cea:	4620      	mov	r0, r4
 8003cec:	4629      	mov	r1, r5
 8003cee:	f04f 0200 	mov.w	r2, #0
 8003cf2:	f04f 0300 	mov.w	r3, #0
 8003cf6:	014b      	lsls	r3, r1, #5
 8003cf8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003cfc:	0142      	lsls	r2, r0, #5
 8003cfe:	4610      	mov	r0, r2
 8003d00:	4619      	mov	r1, r3
 8003d02:	1b00      	subs	r0, r0, r4
 8003d04:	eb61 0105 	sbc.w	r1, r1, r5
 8003d08:	f04f 0200 	mov.w	r2, #0
 8003d0c:	f04f 0300 	mov.w	r3, #0
 8003d10:	018b      	lsls	r3, r1, #6
 8003d12:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003d16:	0182      	lsls	r2, r0, #6
 8003d18:	1a12      	subs	r2, r2, r0
 8003d1a:	eb63 0301 	sbc.w	r3, r3, r1
 8003d1e:	f04f 0000 	mov.w	r0, #0
 8003d22:	f04f 0100 	mov.w	r1, #0
 8003d26:	00d9      	lsls	r1, r3, #3
 8003d28:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003d2c:	00d0      	lsls	r0, r2, #3
 8003d2e:	4602      	mov	r2, r0
 8003d30:	460b      	mov	r3, r1
 8003d32:	1912      	adds	r2, r2, r4
 8003d34:	eb45 0303 	adc.w	r3, r5, r3
 8003d38:	f04f 0000 	mov.w	r0, #0
 8003d3c:	f04f 0100 	mov.w	r1, #0
 8003d40:	0299      	lsls	r1, r3, #10
 8003d42:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003d46:	0290      	lsls	r0, r2, #10
 8003d48:	4602      	mov	r2, r0
 8003d4a:	460b      	mov	r3, r1
 8003d4c:	4610      	mov	r0, r2
 8003d4e:	4619      	mov	r1, r3
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	461a      	mov	r2, r3
 8003d54:	f04f 0300 	mov.w	r3, #0
 8003d58:	f7fc fa9a 	bl	8000290 <__aeabi_uldivmod>
 8003d5c:	4602      	mov	r2, r0
 8003d5e:	460b      	mov	r3, r1
 8003d60:	4613      	mov	r3, r2
 8003d62:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003d64:	4b0a      	ldr	r3, [pc, #40]	; (8003d90 <HAL_RCC_GetSysClockFreq+0x160>)
 8003d66:	685b      	ldr	r3, [r3, #4]
 8003d68:	0c1b      	lsrs	r3, r3, #16
 8003d6a:	f003 0303 	and.w	r3, r3, #3
 8003d6e:	3301      	adds	r3, #1
 8003d70:	005b      	lsls	r3, r3, #1
 8003d72:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003d74:	68fa      	ldr	r2, [r7, #12]
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d7c:	60bb      	str	r3, [r7, #8]
      break;
 8003d7e:	e002      	b.n	8003d86 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003d80:	4b04      	ldr	r3, [pc, #16]	; (8003d94 <HAL_RCC_GetSysClockFreq+0x164>)
 8003d82:	60bb      	str	r3, [r7, #8]
      break;
 8003d84:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d86:	68bb      	ldr	r3, [r7, #8]
}
 8003d88:	4618      	mov	r0, r3
 8003d8a:	3710      	adds	r7, #16
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	bdb0      	pop	{r4, r5, r7, pc}
 8003d90:	40023800 	.word	0x40023800
 8003d94:	00f42400 	.word	0x00f42400
 8003d98:	017d7840 	.word	0x017d7840

08003d9c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d9c:	b480      	push	{r7}
 8003d9e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003da0:	4b03      	ldr	r3, [pc, #12]	; (8003db0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003da2:	681b      	ldr	r3, [r3, #0]
}
 8003da4:	4618      	mov	r0, r3
 8003da6:	46bd      	mov	sp, r7
 8003da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dac:	4770      	bx	lr
 8003dae:	bf00      	nop
 8003db0:	20000000 	.word	0x20000000

08003db4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003db8:	f7ff fff0 	bl	8003d9c <HAL_RCC_GetHCLKFreq>
 8003dbc:	4602      	mov	r2, r0
 8003dbe:	4b05      	ldr	r3, [pc, #20]	; (8003dd4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003dc0:	689b      	ldr	r3, [r3, #8]
 8003dc2:	0a9b      	lsrs	r3, r3, #10
 8003dc4:	f003 0307 	and.w	r3, r3, #7
 8003dc8:	4903      	ldr	r1, [pc, #12]	; (8003dd8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003dca:	5ccb      	ldrb	r3, [r1, r3]
 8003dcc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	bd80      	pop	{r7, pc}
 8003dd4:	40023800 	.word	0x40023800
 8003dd8:	08008150 	.word	0x08008150

08003ddc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003ddc:	b084      	sub	sp, #16
 8003dde:	b580      	push	{r7, lr}
 8003de0:	b084      	sub	sp, #16
 8003de2:	af00      	add	r7, sp, #0
 8003de4:	6078      	str	r0, [r7, #4]
 8003de6:	f107 001c 	add.w	r0, r7, #28
 8003dea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003dee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003df0:	2b01      	cmp	r3, #1
 8003df2:	d122      	bne.n	8003e3a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003df8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	68db      	ldr	r3, [r3, #12]
 8003e04:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003e08:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e0c:	687a      	ldr	r2, [r7, #4]
 8003e0e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	68db      	ldr	r3, [r3, #12]
 8003e14:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003e1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e1e:	2b01      	cmp	r3, #1
 8003e20:	d105      	bne.n	8003e2e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	68db      	ldr	r3, [r3, #12]
 8003e26:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003e2e:	6878      	ldr	r0, [r7, #4]
 8003e30:	f001 fb1c 	bl	800546c <USB_CoreReset>
 8003e34:	4603      	mov	r3, r0
 8003e36:	73fb      	strb	r3, [r7, #15]
 8003e38:	e01a      	b.n	8003e70 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	68db      	ldr	r3, [r3, #12]
 8003e3e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003e46:	6878      	ldr	r0, [r7, #4]
 8003e48:	f001 fb10 	bl	800546c <USB_CoreReset>
 8003e4c:	4603      	mov	r3, r0
 8003e4e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003e50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d106      	bne.n	8003e64 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e5a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	639a      	str	r2, [r3, #56]	; 0x38
 8003e62:	e005      	b.n	8003e70 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e68:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003e70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e72:	2b01      	cmp	r3, #1
 8003e74:	d10b      	bne.n	8003e8e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	689b      	ldr	r3, [r3, #8]
 8003e7a:	f043 0206 	orr.w	r2, r3, #6
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	689b      	ldr	r3, [r3, #8]
 8003e86:	f043 0220 	orr.w	r2, r3, #32
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003e8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e90:	4618      	mov	r0, r3
 8003e92:	3710      	adds	r7, #16
 8003e94:	46bd      	mov	sp, r7
 8003e96:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003e9a:	b004      	add	sp, #16
 8003e9c:	4770      	bx	lr
	...

08003ea0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8003ea0:	b480      	push	{r7}
 8003ea2:	b087      	sub	sp, #28
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	60f8      	str	r0, [r7, #12]
 8003ea8:	60b9      	str	r1, [r7, #8]
 8003eaa:	4613      	mov	r3, r2
 8003eac:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8003eae:	79fb      	ldrb	r3, [r7, #7]
 8003eb0:	2b02      	cmp	r3, #2
 8003eb2:	d165      	bne.n	8003f80 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003eb4:	68bb      	ldr	r3, [r7, #8]
 8003eb6:	4a41      	ldr	r2, [pc, #260]	; (8003fbc <USB_SetTurnaroundTime+0x11c>)
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	d906      	bls.n	8003eca <USB_SetTurnaroundTime+0x2a>
 8003ebc:	68bb      	ldr	r3, [r7, #8]
 8003ebe:	4a40      	ldr	r2, [pc, #256]	; (8003fc0 <USB_SetTurnaroundTime+0x120>)
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d202      	bcs.n	8003eca <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8003ec4:	230f      	movs	r3, #15
 8003ec6:	617b      	str	r3, [r7, #20]
 8003ec8:	e062      	b.n	8003f90 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8003eca:	68bb      	ldr	r3, [r7, #8]
 8003ecc:	4a3c      	ldr	r2, [pc, #240]	; (8003fc0 <USB_SetTurnaroundTime+0x120>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d306      	bcc.n	8003ee0 <USB_SetTurnaroundTime+0x40>
 8003ed2:	68bb      	ldr	r3, [r7, #8]
 8003ed4:	4a3b      	ldr	r2, [pc, #236]	; (8003fc4 <USB_SetTurnaroundTime+0x124>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d202      	bcs.n	8003ee0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8003eda:	230e      	movs	r3, #14
 8003edc:	617b      	str	r3, [r7, #20]
 8003ede:	e057      	b.n	8003f90 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8003ee0:	68bb      	ldr	r3, [r7, #8]
 8003ee2:	4a38      	ldr	r2, [pc, #224]	; (8003fc4 <USB_SetTurnaroundTime+0x124>)
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d306      	bcc.n	8003ef6 <USB_SetTurnaroundTime+0x56>
 8003ee8:	68bb      	ldr	r3, [r7, #8]
 8003eea:	4a37      	ldr	r2, [pc, #220]	; (8003fc8 <USB_SetTurnaroundTime+0x128>)
 8003eec:	4293      	cmp	r3, r2
 8003eee:	d202      	bcs.n	8003ef6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8003ef0:	230d      	movs	r3, #13
 8003ef2:	617b      	str	r3, [r7, #20]
 8003ef4:	e04c      	b.n	8003f90 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8003ef6:	68bb      	ldr	r3, [r7, #8]
 8003ef8:	4a33      	ldr	r2, [pc, #204]	; (8003fc8 <USB_SetTurnaroundTime+0x128>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d306      	bcc.n	8003f0c <USB_SetTurnaroundTime+0x6c>
 8003efe:	68bb      	ldr	r3, [r7, #8]
 8003f00:	4a32      	ldr	r2, [pc, #200]	; (8003fcc <USB_SetTurnaroundTime+0x12c>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d802      	bhi.n	8003f0c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8003f06:	230c      	movs	r3, #12
 8003f08:	617b      	str	r3, [r7, #20]
 8003f0a:	e041      	b.n	8003f90 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8003f0c:	68bb      	ldr	r3, [r7, #8]
 8003f0e:	4a2f      	ldr	r2, [pc, #188]	; (8003fcc <USB_SetTurnaroundTime+0x12c>)
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d906      	bls.n	8003f22 <USB_SetTurnaroundTime+0x82>
 8003f14:	68bb      	ldr	r3, [r7, #8]
 8003f16:	4a2e      	ldr	r2, [pc, #184]	; (8003fd0 <USB_SetTurnaroundTime+0x130>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d802      	bhi.n	8003f22 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8003f1c:	230b      	movs	r3, #11
 8003f1e:	617b      	str	r3, [r7, #20]
 8003f20:	e036      	b.n	8003f90 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8003f22:	68bb      	ldr	r3, [r7, #8]
 8003f24:	4a2a      	ldr	r2, [pc, #168]	; (8003fd0 <USB_SetTurnaroundTime+0x130>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d906      	bls.n	8003f38 <USB_SetTurnaroundTime+0x98>
 8003f2a:	68bb      	ldr	r3, [r7, #8]
 8003f2c:	4a29      	ldr	r2, [pc, #164]	; (8003fd4 <USB_SetTurnaroundTime+0x134>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d802      	bhi.n	8003f38 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8003f32:	230a      	movs	r3, #10
 8003f34:	617b      	str	r3, [r7, #20]
 8003f36:	e02b      	b.n	8003f90 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8003f38:	68bb      	ldr	r3, [r7, #8]
 8003f3a:	4a26      	ldr	r2, [pc, #152]	; (8003fd4 <USB_SetTurnaroundTime+0x134>)
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d906      	bls.n	8003f4e <USB_SetTurnaroundTime+0xae>
 8003f40:	68bb      	ldr	r3, [r7, #8]
 8003f42:	4a25      	ldr	r2, [pc, #148]	; (8003fd8 <USB_SetTurnaroundTime+0x138>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d202      	bcs.n	8003f4e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8003f48:	2309      	movs	r3, #9
 8003f4a:	617b      	str	r3, [r7, #20]
 8003f4c:	e020      	b.n	8003f90 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8003f4e:	68bb      	ldr	r3, [r7, #8]
 8003f50:	4a21      	ldr	r2, [pc, #132]	; (8003fd8 <USB_SetTurnaroundTime+0x138>)
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d306      	bcc.n	8003f64 <USB_SetTurnaroundTime+0xc4>
 8003f56:	68bb      	ldr	r3, [r7, #8]
 8003f58:	4a20      	ldr	r2, [pc, #128]	; (8003fdc <USB_SetTurnaroundTime+0x13c>)
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d802      	bhi.n	8003f64 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8003f5e:	2308      	movs	r3, #8
 8003f60:	617b      	str	r3, [r7, #20]
 8003f62:	e015      	b.n	8003f90 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8003f64:	68bb      	ldr	r3, [r7, #8]
 8003f66:	4a1d      	ldr	r2, [pc, #116]	; (8003fdc <USB_SetTurnaroundTime+0x13c>)
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	d906      	bls.n	8003f7a <USB_SetTurnaroundTime+0xda>
 8003f6c:	68bb      	ldr	r3, [r7, #8]
 8003f6e:	4a1c      	ldr	r2, [pc, #112]	; (8003fe0 <USB_SetTurnaroundTime+0x140>)
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d202      	bcs.n	8003f7a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8003f74:	2307      	movs	r3, #7
 8003f76:	617b      	str	r3, [r7, #20]
 8003f78:	e00a      	b.n	8003f90 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8003f7a:	2306      	movs	r3, #6
 8003f7c:	617b      	str	r3, [r7, #20]
 8003f7e:	e007      	b.n	8003f90 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8003f80:	79fb      	ldrb	r3, [r7, #7]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d102      	bne.n	8003f8c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8003f86:	2309      	movs	r3, #9
 8003f88:	617b      	str	r3, [r7, #20]
 8003f8a:	e001      	b.n	8003f90 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8003f8c:	2309      	movs	r3, #9
 8003f8e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	68db      	ldr	r3, [r3, #12]
 8003f94:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	68da      	ldr	r2, [r3, #12]
 8003fa0:	697b      	ldr	r3, [r7, #20]
 8003fa2:	029b      	lsls	r3, r3, #10
 8003fa4:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8003fa8:	431a      	orrs	r2, r3
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003fae:	2300      	movs	r3, #0
}
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	371c      	adds	r7, #28
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fba:	4770      	bx	lr
 8003fbc:	00d8acbf 	.word	0x00d8acbf
 8003fc0:	00e4e1c0 	.word	0x00e4e1c0
 8003fc4:	00f42400 	.word	0x00f42400
 8003fc8:	01067380 	.word	0x01067380
 8003fcc:	011a499f 	.word	0x011a499f
 8003fd0:	01312cff 	.word	0x01312cff
 8003fd4:	014ca43f 	.word	0x014ca43f
 8003fd8:	016e3600 	.word	0x016e3600
 8003fdc:	01a6ab1f 	.word	0x01a6ab1f
 8003fe0:	01e84800 	.word	0x01e84800

08003fe4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003fe4:	b480      	push	{r7}
 8003fe6:	b083      	sub	sp, #12
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	689b      	ldr	r3, [r3, #8]
 8003ff0:	f043 0201 	orr.w	r2, r3, #1
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003ff8:	2300      	movs	r3, #0
}
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	370c      	adds	r7, #12
 8003ffe:	46bd      	mov	sp, r7
 8004000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004004:	4770      	bx	lr

08004006 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004006:	b480      	push	{r7}
 8004008:	b083      	sub	sp, #12
 800400a:	af00      	add	r7, sp, #0
 800400c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	689b      	ldr	r3, [r3, #8]
 8004012:	f023 0201 	bic.w	r2, r3, #1
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800401a:	2300      	movs	r3, #0
}
 800401c:	4618      	mov	r0, r3
 800401e:	370c      	adds	r7, #12
 8004020:	46bd      	mov	sp, r7
 8004022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004026:	4770      	bx	lr

08004028 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b084      	sub	sp, #16
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
 8004030:	460b      	mov	r3, r1
 8004032:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004034:	2300      	movs	r3, #0
 8004036:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	68db      	ldr	r3, [r3, #12]
 800403c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004044:	78fb      	ldrb	r3, [r7, #3]
 8004046:	2b01      	cmp	r3, #1
 8004048:	d115      	bne.n	8004076 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	68db      	ldr	r3, [r3, #12]
 800404e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004056:	2001      	movs	r0, #1
 8004058:	f7fc fe6e 	bl	8000d38 <HAL_Delay>
      ms++;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	3301      	adds	r3, #1
 8004060:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004062:	6878      	ldr	r0, [r7, #4]
 8004064:	f001 f972 	bl	800534c <USB_GetMode>
 8004068:	4603      	mov	r3, r0
 800406a:	2b01      	cmp	r3, #1
 800406c:	d01e      	beq.n	80040ac <USB_SetCurrentMode+0x84>
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	2b31      	cmp	r3, #49	; 0x31
 8004072:	d9f0      	bls.n	8004056 <USB_SetCurrentMode+0x2e>
 8004074:	e01a      	b.n	80040ac <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004076:	78fb      	ldrb	r3, [r7, #3]
 8004078:	2b00      	cmp	r3, #0
 800407a:	d115      	bne.n	80040a8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	68db      	ldr	r3, [r3, #12]
 8004080:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004088:	2001      	movs	r0, #1
 800408a:	f7fc fe55 	bl	8000d38 <HAL_Delay>
      ms++;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	3301      	adds	r3, #1
 8004092:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004094:	6878      	ldr	r0, [r7, #4]
 8004096:	f001 f959 	bl	800534c <USB_GetMode>
 800409a:	4603      	mov	r3, r0
 800409c:	2b00      	cmp	r3, #0
 800409e:	d005      	beq.n	80040ac <USB_SetCurrentMode+0x84>
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	2b31      	cmp	r3, #49	; 0x31
 80040a4:	d9f0      	bls.n	8004088 <USB_SetCurrentMode+0x60>
 80040a6:	e001      	b.n	80040ac <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80040a8:	2301      	movs	r3, #1
 80040aa:	e005      	b.n	80040b8 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	2b32      	cmp	r3, #50	; 0x32
 80040b0:	d101      	bne.n	80040b6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80040b2:	2301      	movs	r3, #1
 80040b4:	e000      	b.n	80040b8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80040b6:	2300      	movs	r3, #0
}
 80040b8:	4618      	mov	r0, r3
 80040ba:	3710      	adds	r7, #16
 80040bc:	46bd      	mov	sp, r7
 80040be:	bd80      	pop	{r7, pc}

080040c0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80040c0:	b084      	sub	sp, #16
 80040c2:	b580      	push	{r7, lr}
 80040c4:	b086      	sub	sp, #24
 80040c6:	af00      	add	r7, sp, #0
 80040c8:	6078      	str	r0, [r7, #4]
 80040ca:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80040ce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80040d2:	2300      	movs	r3, #0
 80040d4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80040da:	2300      	movs	r3, #0
 80040dc:	613b      	str	r3, [r7, #16]
 80040de:	e009      	b.n	80040f4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80040e0:	687a      	ldr	r2, [r7, #4]
 80040e2:	693b      	ldr	r3, [r7, #16]
 80040e4:	3340      	adds	r3, #64	; 0x40
 80040e6:	009b      	lsls	r3, r3, #2
 80040e8:	4413      	add	r3, r2
 80040ea:	2200      	movs	r2, #0
 80040ec:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80040ee:	693b      	ldr	r3, [r7, #16]
 80040f0:	3301      	adds	r3, #1
 80040f2:	613b      	str	r3, [r7, #16]
 80040f4:	693b      	ldr	r3, [r7, #16]
 80040f6:	2b0e      	cmp	r3, #14
 80040f8:	d9f2      	bls.n	80040e0 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80040fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d11c      	bne.n	800413a <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004106:	685b      	ldr	r3, [r3, #4]
 8004108:	68fa      	ldr	r2, [r7, #12]
 800410a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800410e:	f043 0302 	orr.w	r3, r3, #2
 8004112:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004118:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004124:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004130:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	639a      	str	r2, [r3, #56]	; 0x38
 8004138:	e00b      	b.n	8004152 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800413e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800414a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004158:	461a      	mov	r2, r3
 800415a:	2300      	movs	r3, #0
 800415c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004164:	4619      	mov	r1, r3
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800416c:	461a      	mov	r2, r3
 800416e:	680b      	ldr	r3, [r1, #0]
 8004170:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004172:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004174:	2b01      	cmp	r3, #1
 8004176:	d10c      	bne.n	8004192 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004178:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800417a:	2b00      	cmp	r3, #0
 800417c:	d104      	bne.n	8004188 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800417e:	2100      	movs	r1, #0
 8004180:	6878      	ldr	r0, [r7, #4]
 8004182:	f000 f945 	bl	8004410 <USB_SetDevSpeed>
 8004186:	e008      	b.n	800419a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004188:	2101      	movs	r1, #1
 800418a:	6878      	ldr	r0, [r7, #4]
 800418c:	f000 f940 	bl	8004410 <USB_SetDevSpeed>
 8004190:	e003      	b.n	800419a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004192:	2103      	movs	r1, #3
 8004194:	6878      	ldr	r0, [r7, #4]
 8004196:	f000 f93b 	bl	8004410 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800419a:	2110      	movs	r1, #16
 800419c:	6878      	ldr	r0, [r7, #4]
 800419e:	f000 f8f3 	bl	8004388 <USB_FlushTxFifo>
 80041a2:	4603      	mov	r3, r0
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d001      	beq.n	80041ac <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80041a8:	2301      	movs	r3, #1
 80041aa:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80041ac:	6878      	ldr	r0, [r7, #4]
 80041ae:	f000 f90f 	bl	80043d0 <USB_FlushRxFifo>
 80041b2:	4603      	mov	r3, r0
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d001      	beq.n	80041bc <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80041b8:	2301      	movs	r3, #1
 80041ba:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041c2:	461a      	mov	r2, r3
 80041c4:	2300      	movs	r3, #0
 80041c6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041ce:	461a      	mov	r2, r3
 80041d0:	2300      	movs	r3, #0
 80041d2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041da:	461a      	mov	r2, r3
 80041dc:	2300      	movs	r3, #0
 80041de:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80041e0:	2300      	movs	r3, #0
 80041e2:	613b      	str	r3, [r7, #16]
 80041e4:	e043      	b.n	800426e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80041e6:	693b      	ldr	r3, [r7, #16]
 80041e8:	015a      	lsls	r2, r3, #5
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	4413      	add	r3, r2
 80041ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80041f8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80041fc:	d118      	bne.n	8004230 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80041fe:	693b      	ldr	r3, [r7, #16]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d10a      	bne.n	800421a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004204:	693b      	ldr	r3, [r7, #16]
 8004206:	015a      	lsls	r2, r3, #5
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	4413      	add	r3, r2
 800420c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004210:	461a      	mov	r2, r3
 8004212:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004216:	6013      	str	r3, [r2, #0]
 8004218:	e013      	b.n	8004242 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800421a:	693b      	ldr	r3, [r7, #16]
 800421c:	015a      	lsls	r2, r3, #5
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	4413      	add	r3, r2
 8004222:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004226:	461a      	mov	r2, r3
 8004228:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800422c:	6013      	str	r3, [r2, #0]
 800422e:	e008      	b.n	8004242 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004230:	693b      	ldr	r3, [r7, #16]
 8004232:	015a      	lsls	r2, r3, #5
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	4413      	add	r3, r2
 8004238:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800423c:	461a      	mov	r2, r3
 800423e:	2300      	movs	r3, #0
 8004240:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004242:	693b      	ldr	r3, [r7, #16]
 8004244:	015a      	lsls	r2, r3, #5
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	4413      	add	r3, r2
 800424a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800424e:	461a      	mov	r2, r3
 8004250:	2300      	movs	r3, #0
 8004252:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004254:	693b      	ldr	r3, [r7, #16]
 8004256:	015a      	lsls	r2, r3, #5
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	4413      	add	r3, r2
 800425c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004260:	461a      	mov	r2, r3
 8004262:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004266:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004268:	693b      	ldr	r3, [r7, #16]
 800426a:	3301      	adds	r3, #1
 800426c:	613b      	str	r3, [r7, #16]
 800426e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004270:	693a      	ldr	r2, [r7, #16]
 8004272:	429a      	cmp	r2, r3
 8004274:	d3b7      	bcc.n	80041e6 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004276:	2300      	movs	r3, #0
 8004278:	613b      	str	r3, [r7, #16]
 800427a:	e043      	b.n	8004304 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800427c:	693b      	ldr	r3, [r7, #16]
 800427e:	015a      	lsls	r2, r3, #5
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	4413      	add	r3, r2
 8004284:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800428e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004292:	d118      	bne.n	80042c6 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8004294:	693b      	ldr	r3, [r7, #16]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d10a      	bne.n	80042b0 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800429a:	693b      	ldr	r3, [r7, #16]
 800429c:	015a      	lsls	r2, r3, #5
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	4413      	add	r3, r2
 80042a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042a6:	461a      	mov	r2, r3
 80042a8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80042ac:	6013      	str	r3, [r2, #0]
 80042ae:	e013      	b.n	80042d8 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80042b0:	693b      	ldr	r3, [r7, #16]
 80042b2:	015a      	lsls	r2, r3, #5
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	4413      	add	r3, r2
 80042b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042bc:	461a      	mov	r2, r3
 80042be:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80042c2:	6013      	str	r3, [r2, #0]
 80042c4:	e008      	b.n	80042d8 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80042c6:	693b      	ldr	r3, [r7, #16]
 80042c8:	015a      	lsls	r2, r3, #5
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	4413      	add	r3, r2
 80042ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042d2:	461a      	mov	r2, r3
 80042d4:	2300      	movs	r3, #0
 80042d6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80042d8:	693b      	ldr	r3, [r7, #16]
 80042da:	015a      	lsls	r2, r3, #5
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	4413      	add	r3, r2
 80042e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042e4:	461a      	mov	r2, r3
 80042e6:	2300      	movs	r3, #0
 80042e8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80042ea:	693b      	ldr	r3, [r7, #16]
 80042ec:	015a      	lsls	r2, r3, #5
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	4413      	add	r3, r2
 80042f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042f6:	461a      	mov	r2, r3
 80042f8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80042fc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80042fe:	693b      	ldr	r3, [r7, #16]
 8004300:	3301      	adds	r3, #1
 8004302:	613b      	str	r3, [r7, #16]
 8004304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004306:	693a      	ldr	r2, [r7, #16]
 8004308:	429a      	cmp	r2, r3
 800430a:	d3b7      	bcc.n	800427c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004312:	691b      	ldr	r3, [r3, #16]
 8004314:	68fa      	ldr	r2, [r7, #12]
 8004316:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800431a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800431e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2200      	movs	r2, #0
 8004324:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800432c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800432e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004330:	2b00      	cmp	r3, #0
 8004332:	d105      	bne.n	8004340 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	699b      	ldr	r3, [r3, #24]
 8004338:	f043 0210 	orr.w	r2, r3, #16
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	699a      	ldr	r2, [r3, #24]
 8004344:	4b0f      	ldr	r3, [pc, #60]	; (8004384 <USB_DevInit+0x2c4>)
 8004346:	4313      	orrs	r3, r2
 8004348:	687a      	ldr	r2, [r7, #4]
 800434a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800434c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800434e:	2b00      	cmp	r3, #0
 8004350:	d005      	beq.n	800435e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	699b      	ldr	r3, [r3, #24]
 8004356:	f043 0208 	orr.w	r2, r3, #8
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800435e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004360:	2b01      	cmp	r3, #1
 8004362:	d107      	bne.n	8004374 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	699b      	ldr	r3, [r3, #24]
 8004368:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800436c:	f043 0304 	orr.w	r3, r3, #4
 8004370:	687a      	ldr	r2, [r7, #4]
 8004372:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004374:	7dfb      	ldrb	r3, [r7, #23]
}
 8004376:	4618      	mov	r0, r3
 8004378:	3718      	adds	r7, #24
 800437a:	46bd      	mov	sp, r7
 800437c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004380:	b004      	add	sp, #16
 8004382:	4770      	bx	lr
 8004384:	803c3800 	.word	0x803c3800

08004388 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004388:	b480      	push	{r7}
 800438a:	b085      	sub	sp, #20
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
 8004390:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004392:	2300      	movs	r3, #0
 8004394:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	019b      	lsls	r3, r3, #6
 800439a:	f043 0220 	orr.w	r2, r3, #32
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	3301      	adds	r3, #1
 80043a6:	60fb      	str	r3, [r7, #12]
 80043a8:	4a08      	ldr	r2, [pc, #32]	; (80043cc <USB_FlushTxFifo+0x44>)
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d901      	bls.n	80043b2 <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 80043ae:	2303      	movs	r3, #3
 80043b0:	e006      	b.n	80043c0 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	691b      	ldr	r3, [r3, #16]
 80043b6:	f003 0320 	and.w	r3, r3, #32
 80043ba:	2b20      	cmp	r3, #32
 80043bc:	d0f1      	beq.n	80043a2 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80043be:	2300      	movs	r3, #0
}
 80043c0:	4618      	mov	r0, r3
 80043c2:	3714      	adds	r7, #20
 80043c4:	46bd      	mov	sp, r7
 80043c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ca:	4770      	bx	lr
 80043cc:	00030d40 	.word	0x00030d40

080043d0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80043d0:	b480      	push	{r7}
 80043d2:	b085      	sub	sp, #20
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80043d8:	2300      	movs	r3, #0
 80043da:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2210      	movs	r2, #16
 80043e0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	3301      	adds	r3, #1
 80043e6:	60fb      	str	r3, [r7, #12]
 80043e8:	4a08      	ldr	r2, [pc, #32]	; (800440c <USB_FlushRxFifo+0x3c>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d901      	bls.n	80043f2 <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 80043ee:	2303      	movs	r3, #3
 80043f0:	e006      	b.n	8004400 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	691b      	ldr	r3, [r3, #16]
 80043f6:	f003 0310 	and.w	r3, r3, #16
 80043fa:	2b10      	cmp	r3, #16
 80043fc:	d0f1      	beq.n	80043e2 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80043fe:	2300      	movs	r3, #0
}
 8004400:	4618      	mov	r0, r3
 8004402:	3714      	adds	r7, #20
 8004404:	46bd      	mov	sp, r7
 8004406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440a:	4770      	bx	lr
 800440c:	00030d40 	.word	0x00030d40

08004410 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004410:	b480      	push	{r7}
 8004412:	b085      	sub	sp, #20
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
 8004418:	460b      	mov	r3, r1
 800441a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004426:	681a      	ldr	r2, [r3, #0]
 8004428:	78fb      	ldrb	r3, [r7, #3]
 800442a:	68f9      	ldr	r1, [r7, #12]
 800442c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004430:	4313      	orrs	r3, r2
 8004432:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004434:	2300      	movs	r3, #0
}
 8004436:	4618      	mov	r0, r3
 8004438:	3714      	adds	r7, #20
 800443a:	46bd      	mov	sp, r7
 800443c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004440:	4770      	bx	lr

08004442 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004442:	b480      	push	{r7}
 8004444:	b087      	sub	sp, #28
 8004446:	af00      	add	r7, sp, #0
 8004448:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800444e:	693b      	ldr	r3, [r7, #16]
 8004450:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004454:	689b      	ldr	r3, [r3, #8]
 8004456:	f003 0306 	and.w	r3, r3, #6
 800445a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	2b00      	cmp	r3, #0
 8004460:	d102      	bne.n	8004468 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8004462:	2300      	movs	r3, #0
 8004464:	75fb      	strb	r3, [r7, #23]
 8004466:	e00a      	b.n	800447e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	2b02      	cmp	r3, #2
 800446c:	d002      	beq.n	8004474 <USB_GetDevSpeed+0x32>
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	2b06      	cmp	r3, #6
 8004472:	d102      	bne.n	800447a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004474:	2302      	movs	r3, #2
 8004476:	75fb      	strb	r3, [r7, #23]
 8004478:	e001      	b.n	800447e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800447a:	230f      	movs	r3, #15
 800447c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800447e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004480:	4618      	mov	r0, r3
 8004482:	371c      	adds	r7, #28
 8004484:	46bd      	mov	sp, r7
 8004486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448a:	4770      	bx	lr

0800448c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800448c:	b480      	push	{r7}
 800448e:	b085      	sub	sp, #20
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
 8004494:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	781b      	ldrb	r3, [r3, #0]
 800449e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	785b      	ldrb	r3, [r3, #1]
 80044a4:	2b01      	cmp	r3, #1
 80044a6:	d13a      	bne.n	800451e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044ae:	69da      	ldr	r2, [r3, #28]
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	781b      	ldrb	r3, [r3, #0]
 80044b4:	f003 030f 	and.w	r3, r3, #15
 80044b8:	2101      	movs	r1, #1
 80044ba:	fa01 f303 	lsl.w	r3, r1, r3
 80044be:	b29b      	uxth	r3, r3
 80044c0:	68f9      	ldr	r1, [r7, #12]
 80044c2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80044c6:	4313      	orrs	r3, r2
 80044c8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80044ca:	68bb      	ldr	r3, [r7, #8]
 80044cc:	015a      	lsls	r2, r3, #5
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	4413      	add	r3, r2
 80044d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d155      	bne.n	800458c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80044e0:	68bb      	ldr	r3, [r7, #8]
 80044e2:	015a      	lsls	r2, r3, #5
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	4413      	add	r3, r2
 80044e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044ec:	681a      	ldr	r2, [r3, #0]
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	689b      	ldr	r3, [r3, #8]
 80044f2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	78db      	ldrb	r3, [r3, #3]
 80044fa:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80044fc:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80044fe:	68bb      	ldr	r3, [r7, #8]
 8004500:	059b      	lsls	r3, r3, #22
 8004502:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004504:	4313      	orrs	r3, r2
 8004506:	68ba      	ldr	r2, [r7, #8]
 8004508:	0151      	lsls	r1, r2, #5
 800450a:	68fa      	ldr	r2, [r7, #12]
 800450c:	440a      	add	r2, r1
 800450e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004512:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004516:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800451a:	6013      	str	r3, [r2, #0]
 800451c:	e036      	b.n	800458c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004524:	69da      	ldr	r2, [r3, #28]
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	781b      	ldrb	r3, [r3, #0]
 800452a:	f003 030f 	and.w	r3, r3, #15
 800452e:	2101      	movs	r1, #1
 8004530:	fa01 f303 	lsl.w	r3, r1, r3
 8004534:	041b      	lsls	r3, r3, #16
 8004536:	68f9      	ldr	r1, [r7, #12]
 8004538:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800453c:	4313      	orrs	r3, r2
 800453e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004540:	68bb      	ldr	r3, [r7, #8]
 8004542:	015a      	lsls	r2, r3, #5
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	4413      	add	r3, r2
 8004548:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004552:	2b00      	cmp	r3, #0
 8004554:	d11a      	bne.n	800458c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004556:	68bb      	ldr	r3, [r7, #8]
 8004558:	015a      	lsls	r2, r3, #5
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	4413      	add	r3, r2
 800455e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004562:	681a      	ldr	r2, [r3, #0]
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	689b      	ldr	r3, [r3, #8]
 8004568:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	78db      	ldrb	r3, [r3, #3]
 8004570:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004572:	430b      	orrs	r3, r1
 8004574:	4313      	orrs	r3, r2
 8004576:	68ba      	ldr	r2, [r7, #8]
 8004578:	0151      	lsls	r1, r2, #5
 800457a:	68fa      	ldr	r2, [r7, #12]
 800457c:	440a      	add	r2, r1
 800457e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004582:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004586:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800458a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800458c:	2300      	movs	r3, #0
}
 800458e:	4618      	mov	r0, r3
 8004590:	3714      	adds	r7, #20
 8004592:	46bd      	mov	sp, r7
 8004594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004598:	4770      	bx	lr
	...

0800459c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800459c:	b480      	push	{r7}
 800459e:	b085      	sub	sp, #20
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
 80045a4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	781b      	ldrb	r3, [r3, #0]
 80045ae:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	785b      	ldrb	r3, [r3, #1]
 80045b4:	2b01      	cmp	r3, #1
 80045b6:	d161      	bne.n	800467c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80045b8:	68bb      	ldr	r3, [r7, #8]
 80045ba:	015a      	lsls	r2, r3, #5
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	4413      	add	r3, r2
 80045c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80045ca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80045ce:	d11f      	bne.n	8004610 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80045d0:	68bb      	ldr	r3, [r7, #8]
 80045d2:	015a      	lsls	r2, r3, #5
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	4413      	add	r3, r2
 80045d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	68ba      	ldr	r2, [r7, #8]
 80045e0:	0151      	lsls	r1, r2, #5
 80045e2:	68fa      	ldr	r2, [r7, #12]
 80045e4:	440a      	add	r2, r1
 80045e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80045ea:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80045ee:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80045f0:	68bb      	ldr	r3, [r7, #8]
 80045f2:	015a      	lsls	r2, r3, #5
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	4413      	add	r3, r2
 80045f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	68ba      	ldr	r2, [r7, #8]
 8004600:	0151      	lsls	r1, r2, #5
 8004602:	68fa      	ldr	r2, [r7, #12]
 8004604:	440a      	add	r2, r1
 8004606:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800460a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800460e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004616:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	781b      	ldrb	r3, [r3, #0]
 800461c:	f003 030f 	and.w	r3, r3, #15
 8004620:	2101      	movs	r1, #1
 8004622:	fa01 f303 	lsl.w	r3, r1, r3
 8004626:	b29b      	uxth	r3, r3
 8004628:	43db      	mvns	r3, r3
 800462a:	68f9      	ldr	r1, [r7, #12]
 800462c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004630:	4013      	ands	r3, r2
 8004632:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800463a:	69da      	ldr	r2, [r3, #28]
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	781b      	ldrb	r3, [r3, #0]
 8004640:	f003 030f 	and.w	r3, r3, #15
 8004644:	2101      	movs	r1, #1
 8004646:	fa01 f303 	lsl.w	r3, r1, r3
 800464a:	b29b      	uxth	r3, r3
 800464c:	43db      	mvns	r3, r3
 800464e:	68f9      	ldr	r1, [r7, #12]
 8004650:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004654:	4013      	ands	r3, r2
 8004656:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004658:	68bb      	ldr	r3, [r7, #8]
 800465a:	015a      	lsls	r2, r3, #5
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	4413      	add	r3, r2
 8004660:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004664:	681a      	ldr	r2, [r3, #0]
 8004666:	68bb      	ldr	r3, [r7, #8]
 8004668:	0159      	lsls	r1, r3, #5
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	440b      	add	r3, r1
 800466e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004672:	4619      	mov	r1, r3
 8004674:	4b35      	ldr	r3, [pc, #212]	; (800474c <USB_DeactivateEndpoint+0x1b0>)
 8004676:	4013      	ands	r3, r2
 8004678:	600b      	str	r3, [r1, #0]
 800467a:	e060      	b.n	800473e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800467c:	68bb      	ldr	r3, [r7, #8]
 800467e:	015a      	lsls	r2, r3, #5
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	4413      	add	r3, r2
 8004684:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800468e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004692:	d11f      	bne.n	80046d4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004694:	68bb      	ldr	r3, [r7, #8]
 8004696:	015a      	lsls	r2, r3, #5
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	4413      	add	r3, r2
 800469c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	68ba      	ldr	r2, [r7, #8]
 80046a4:	0151      	lsls	r1, r2, #5
 80046a6:	68fa      	ldr	r2, [r7, #12]
 80046a8:	440a      	add	r2, r1
 80046aa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80046ae:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80046b2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80046b4:	68bb      	ldr	r3, [r7, #8]
 80046b6:	015a      	lsls	r2, r3, #5
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	4413      	add	r3, r2
 80046bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	68ba      	ldr	r2, [r7, #8]
 80046c4:	0151      	lsls	r1, r2, #5
 80046c6:	68fa      	ldr	r2, [r7, #12]
 80046c8:	440a      	add	r2, r1
 80046ca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80046ce:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80046d2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046da:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	781b      	ldrb	r3, [r3, #0]
 80046e0:	f003 030f 	and.w	r3, r3, #15
 80046e4:	2101      	movs	r1, #1
 80046e6:	fa01 f303 	lsl.w	r3, r1, r3
 80046ea:	041b      	lsls	r3, r3, #16
 80046ec:	43db      	mvns	r3, r3
 80046ee:	68f9      	ldr	r1, [r7, #12]
 80046f0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80046f4:	4013      	ands	r3, r2
 80046f6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046fe:	69da      	ldr	r2, [r3, #28]
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	781b      	ldrb	r3, [r3, #0]
 8004704:	f003 030f 	and.w	r3, r3, #15
 8004708:	2101      	movs	r1, #1
 800470a:	fa01 f303 	lsl.w	r3, r1, r3
 800470e:	041b      	lsls	r3, r3, #16
 8004710:	43db      	mvns	r3, r3
 8004712:	68f9      	ldr	r1, [r7, #12]
 8004714:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004718:	4013      	ands	r3, r2
 800471a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800471c:	68bb      	ldr	r3, [r7, #8]
 800471e:	015a      	lsls	r2, r3, #5
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	4413      	add	r3, r2
 8004724:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004728:	681a      	ldr	r2, [r3, #0]
 800472a:	68bb      	ldr	r3, [r7, #8]
 800472c:	0159      	lsls	r1, r3, #5
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	440b      	add	r3, r1
 8004732:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004736:	4619      	mov	r1, r3
 8004738:	4b05      	ldr	r3, [pc, #20]	; (8004750 <USB_DeactivateEndpoint+0x1b4>)
 800473a:	4013      	ands	r3, r2
 800473c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800473e:	2300      	movs	r3, #0
}
 8004740:	4618      	mov	r0, r3
 8004742:	3714      	adds	r7, #20
 8004744:	46bd      	mov	sp, r7
 8004746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474a:	4770      	bx	lr
 800474c:	ec337800 	.word	0xec337800
 8004750:	eff37800 	.word	0xeff37800

08004754 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004754:	b580      	push	{r7, lr}
 8004756:	b08a      	sub	sp, #40	; 0x28
 8004758:	af02      	add	r7, sp, #8
 800475a:	60f8      	str	r0, [r7, #12]
 800475c:	60b9      	str	r1, [r7, #8]
 800475e:	4613      	mov	r3, r2
 8004760:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8004766:	68bb      	ldr	r3, [r7, #8]
 8004768:	781b      	ldrb	r3, [r3, #0]
 800476a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800476c:	68bb      	ldr	r3, [r7, #8]
 800476e:	785b      	ldrb	r3, [r3, #1]
 8004770:	2b01      	cmp	r3, #1
 8004772:	f040 815c 	bne.w	8004a2e <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004776:	68bb      	ldr	r3, [r7, #8]
 8004778:	695b      	ldr	r3, [r3, #20]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d132      	bne.n	80047e4 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800477e:	69bb      	ldr	r3, [r7, #24]
 8004780:	015a      	lsls	r2, r3, #5
 8004782:	69fb      	ldr	r3, [r7, #28]
 8004784:	4413      	add	r3, r2
 8004786:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800478a:	691b      	ldr	r3, [r3, #16]
 800478c:	69ba      	ldr	r2, [r7, #24]
 800478e:	0151      	lsls	r1, r2, #5
 8004790:	69fa      	ldr	r2, [r7, #28]
 8004792:	440a      	add	r2, r1
 8004794:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004798:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800479c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80047a0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80047a2:	69bb      	ldr	r3, [r7, #24]
 80047a4:	015a      	lsls	r2, r3, #5
 80047a6:	69fb      	ldr	r3, [r7, #28]
 80047a8:	4413      	add	r3, r2
 80047aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047ae:	691b      	ldr	r3, [r3, #16]
 80047b0:	69ba      	ldr	r2, [r7, #24]
 80047b2:	0151      	lsls	r1, r2, #5
 80047b4:	69fa      	ldr	r2, [r7, #28]
 80047b6:	440a      	add	r2, r1
 80047b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80047bc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80047c0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80047c2:	69bb      	ldr	r3, [r7, #24]
 80047c4:	015a      	lsls	r2, r3, #5
 80047c6:	69fb      	ldr	r3, [r7, #28]
 80047c8:	4413      	add	r3, r2
 80047ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047ce:	691b      	ldr	r3, [r3, #16]
 80047d0:	69ba      	ldr	r2, [r7, #24]
 80047d2:	0151      	lsls	r1, r2, #5
 80047d4:	69fa      	ldr	r2, [r7, #28]
 80047d6:	440a      	add	r2, r1
 80047d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80047dc:	0cdb      	lsrs	r3, r3, #19
 80047de:	04db      	lsls	r3, r3, #19
 80047e0:	6113      	str	r3, [r2, #16]
 80047e2:	e074      	b.n	80048ce <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80047e4:	69bb      	ldr	r3, [r7, #24]
 80047e6:	015a      	lsls	r2, r3, #5
 80047e8:	69fb      	ldr	r3, [r7, #28]
 80047ea:	4413      	add	r3, r2
 80047ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047f0:	691b      	ldr	r3, [r3, #16]
 80047f2:	69ba      	ldr	r2, [r7, #24]
 80047f4:	0151      	lsls	r1, r2, #5
 80047f6:	69fa      	ldr	r2, [r7, #28]
 80047f8:	440a      	add	r2, r1
 80047fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80047fe:	0cdb      	lsrs	r3, r3, #19
 8004800:	04db      	lsls	r3, r3, #19
 8004802:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004804:	69bb      	ldr	r3, [r7, #24]
 8004806:	015a      	lsls	r2, r3, #5
 8004808:	69fb      	ldr	r3, [r7, #28]
 800480a:	4413      	add	r3, r2
 800480c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004810:	691b      	ldr	r3, [r3, #16]
 8004812:	69ba      	ldr	r2, [r7, #24]
 8004814:	0151      	lsls	r1, r2, #5
 8004816:	69fa      	ldr	r2, [r7, #28]
 8004818:	440a      	add	r2, r1
 800481a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800481e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004822:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004826:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004828:	69bb      	ldr	r3, [r7, #24]
 800482a:	015a      	lsls	r2, r3, #5
 800482c:	69fb      	ldr	r3, [r7, #28]
 800482e:	4413      	add	r3, r2
 8004830:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004834:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8004836:	68bb      	ldr	r3, [r7, #8]
 8004838:	6959      	ldr	r1, [r3, #20]
 800483a:	68bb      	ldr	r3, [r7, #8]
 800483c:	689b      	ldr	r3, [r3, #8]
 800483e:	440b      	add	r3, r1
 8004840:	1e59      	subs	r1, r3, #1
 8004842:	68bb      	ldr	r3, [r7, #8]
 8004844:	689b      	ldr	r3, [r3, #8]
 8004846:	fbb1 f3f3 	udiv	r3, r1, r3
 800484a:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800484c:	4b9d      	ldr	r3, [pc, #628]	; (8004ac4 <USB_EPStartXfer+0x370>)
 800484e:	400b      	ands	r3, r1
 8004850:	69b9      	ldr	r1, [r7, #24]
 8004852:	0148      	lsls	r0, r1, #5
 8004854:	69f9      	ldr	r1, [r7, #28]
 8004856:	4401      	add	r1, r0
 8004858:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800485c:	4313      	orrs	r3, r2
 800485e:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004860:	69bb      	ldr	r3, [r7, #24]
 8004862:	015a      	lsls	r2, r3, #5
 8004864:	69fb      	ldr	r3, [r7, #28]
 8004866:	4413      	add	r3, r2
 8004868:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800486c:	691a      	ldr	r2, [r3, #16]
 800486e:	68bb      	ldr	r3, [r7, #8]
 8004870:	695b      	ldr	r3, [r3, #20]
 8004872:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004876:	69b9      	ldr	r1, [r7, #24]
 8004878:	0148      	lsls	r0, r1, #5
 800487a:	69f9      	ldr	r1, [r7, #28]
 800487c:	4401      	add	r1, r0
 800487e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004882:	4313      	orrs	r3, r2
 8004884:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8004886:	68bb      	ldr	r3, [r7, #8]
 8004888:	78db      	ldrb	r3, [r3, #3]
 800488a:	2b01      	cmp	r3, #1
 800488c:	d11f      	bne.n	80048ce <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800488e:	69bb      	ldr	r3, [r7, #24]
 8004890:	015a      	lsls	r2, r3, #5
 8004892:	69fb      	ldr	r3, [r7, #28]
 8004894:	4413      	add	r3, r2
 8004896:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800489a:	691b      	ldr	r3, [r3, #16]
 800489c:	69ba      	ldr	r2, [r7, #24]
 800489e:	0151      	lsls	r1, r2, #5
 80048a0:	69fa      	ldr	r2, [r7, #28]
 80048a2:	440a      	add	r2, r1
 80048a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80048a8:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80048ac:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80048ae:	69bb      	ldr	r3, [r7, #24]
 80048b0:	015a      	lsls	r2, r3, #5
 80048b2:	69fb      	ldr	r3, [r7, #28]
 80048b4:	4413      	add	r3, r2
 80048b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048ba:	691b      	ldr	r3, [r3, #16]
 80048bc:	69ba      	ldr	r2, [r7, #24]
 80048be:	0151      	lsls	r1, r2, #5
 80048c0:	69fa      	ldr	r2, [r7, #28]
 80048c2:	440a      	add	r2, r1
 80048c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80048c8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80048cc:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80048ce:	79fb      	ldrb	r3, [r7, #7]
 80048d0:	2b01      	cmp	r3, #1
 80048d2:	d14b      	bne.n	800496c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80048d4:	68bb      	ldr	r3, [r7, #8]
 80048d6:	691b      	ldr	r3, [r3, #16]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d009      	beq.n	80048f0 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80048dc:	69bb      	ldr	r3, [r7, #24]
 80048de:	015a      	lsls	r2, r3, #5
 80048e0:	69fb      	ldr	r3, [r7, #28]
 80048e2:	4413      	add	r3, r2
 80048e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048e8:	461a      	mov	r2, r3
 80048ea:	68bb      	ldr	r3, [r7, #8]
 80048ec:	691b      	ldr	r3, [r3, #16]
 80048ee:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80048f0:	68bb      	ldr	r3, [r7, #8]
 80048f2:	78db      	ldrb	r3, [r3, #3]
 80048f4:	2b01      	cmp	r3, #1
 80048f6:	d128      	bne.n	800494a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80048f8:	69fb      	ldr	r3, [r7, #28]
 80048fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048fe:	689b      	ldr	r3, [r3, #8]
 8004900:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004904:	2b00      	cmp	r3, #0
 8004906:	d110      	bne.n	800492a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004908:	69bb      	ldr	r3, [r7, #24]
 800490a:	015a      	lsls	r2, r3, #5
 800490c:	69fb      	ldr	r3, [r7, #28]
 800490e:	4413      	add	r3, r2
 8004910:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	69ba      	ldr	r2, [r7, #24]
 8004918:	0151      	lsls	r1, r2, #5
 800491a:	69fa      	ldr	r2, [r7, #28]
 800491c:	440a      	add	r2, r1
 800491e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004922:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004926:	6013      	str	r3, [r2, #0]
 8004928:	e00f      	b.n	800494a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800492a:	69bb      	ldr	r3, [r7, #24]
 800492c:	015a      	lsls	r2, r3, #5
 800492e:	69fb      	ldr	r3, [r7, #28]
 8004930:	4413      	add	r3, r2
 8004932:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	69ba      	ldr	r2, [r7, #24]
 800493a:	0151      	lsls	r1, r2, #5
 800493c:	69fa      	ldr	r2, [r7, #28]
 800493e:	440a      	add	r2, r1
 8004940:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004944:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004948:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800494a:	69bb      	ldr	r3, [r7, #24]
 800494c:	015a      	lsls	r2, r3, #5
 800494e:	69fb      	ldr	r3, [r7, #28]
 8004950:	4413      	add	r3, r2
 8004952:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	69ba      	ldr	r2, [r7, #24]
 800495a:	0151      	lsls	r1, r2, #5
 800495c:	69fa      	ldr	r2, [r7, #28]
 800495e:	440a      	add	r2, r1
 8004960:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004964:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004968:	6013      	str	r3, [r2, #0]
 800496a:	e12f      	b.n	8004bcc <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800496c:	69bb      	ldr	r3, [r7, #24]
 800496e:	015a      	lsls	r2, r3, #5
 8004970:	69fb      	ldr	r3, [r7, #28]
 8004972:	4413      	add	r3, r2
 8004974:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	69ba      	ldr	r2, [r7, #24]
 800497c:	0151      	lsls	r1, r2, #5
 800497e:	69fa      	ldr	r2, [r7, #28]
 8004980:	440a      	add	r2, r1
 8004982:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004986:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800498a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800498c:	68bb      	ldr	r3, [r7, #8]
 800498e:	78db      	ldrb	r3, [r3, #3]
 8004990:	2b01      	cmp	r3, #1
 8004992:	d015      	beq.n	80049c0 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004994:	68bb      	ldr	r3, [r7, #8]
 8004996:	695b      	ldr	r3, [r3, #20]
 8004998:	2b00      	cmp	r3, #0
 800499a:	f000 8117 	beq.w	8004bcc <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800499e:	69fb      	ldr	r3, [r7, #28]
 80049a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80049a6:	68bb      	ldr	r3, [r7, #8]
 80049a8:	781b      	ldrb	r3, [r3, #0]
 80049aa:	f003 030f 	and.w	r3, r3, #15
 80049ae:	2101      	movs	r1, #1
 80049b0:	fa01 f303 	lsl.w	r3, r1, r3
 80049b4:	69f9      	ldr	r1, [r7, #28]
 80049b6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80049ba:	4313      	orrs	r3, r2
 80049bc:	634b      	str	r3, [r1, #52]	; 0x34
 80049be:	e105      	b.n	8004bcc <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80049c0:	69fb      	ldr	r3, [r7, #28]
 80049c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049c6:	689b      	ldr	r3, [r3, #8]
 80049c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d110      	bne.n	80049f2 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80049d0:	69bb      	ldr	r3, [r7, #24]
 80049d2:	015a      	lsls	r2, r3, #5
 80049d4:	69fb      	ldr	r3, [r7, #28]
 80049d6:	4413      	add	r3, r2
 80049d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	69ba      	ldr	r2, [r7, #24]
 80049e0:	0151      	lsls	r1, r2, #5
 80049e2:	69fa      	ldr	r2, [r7, #28]
 80049e4:	440a      	add	r2, r1
 80049e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80049ea:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80049ee:	6013      	str	r3, [r2, #0]
 80049f0:	e00f      	b.n	8004a12 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80049f2:	69bb      	ldr	r3, [r7, #24]
 80049f4:	015a      	lsls	r2, r3, #5
 80049f6:	69fb      	ldr	r3, [r7, #28]
 80049f8:	4413      	add	r3, r2
 80049fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	69ba      	ldr	r2, [r7, #24]
 8004a02:	0151      	lsls	r1, r2, #5
 8004a04:	69fa      	ldr	r2, [r7, #28]
 8004a06:	440a      	add	r2, r1
 8004a08:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a10:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004a12:	68bb      	ldr	r3, [r7, #8]
 8004a14:	68d9      	ldr	r1, [r3, #12]
 8004a16:	68bb      	ldr	r3, [r7, #8]
 8004a18:	781a      	ldrb	r2, [r3, #0]
 8004a1a:	68bb      	ldr	r3, [r7, #8]
 8004a1c:	695b      	ldr	r3, [r3, #20]
 8004a1e:	b298      	uxth	r0, r3
 8004a20:	79fb      	ldrb	r3, [r7, #7]
 8004a22:	9300      	str	r3, [sp, #0]
 8004a24:	4603      	mov	r3, r0
 8004a26:	68f8      	ldr	r0, [r7, #12]
 8004a28:	f000 fa2b 	bl	8004e82 <USB_WritePacket>
 8004a2c:	e0ce      	b.n	8004bcc <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004a2e:	69bb      	ldr	r3, [r7, #24]
 8004a30:	015a      	lsls	r2, r3, #5
 8004a32:	69fb      	ldr	r3, [r7, #28]
 8004a34:	4413      	add	r3, r2
 8004a36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a3a:	691b      	ldr	r3, [r3, #16]
 8004a3c:	69ba      	ldr	r2, [r7, #24]
 8004a3e:	0151      	lsls	r1, r2, #5
 8004a40:	69fa      	ldr	r2, [r7, #28]
 8004a42:	440a      	add	r2, r1
 8004a44:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a48:	0cdb      	lsrs	r3, r3, #19
 8004a4a:	04db      	lsls	r3, r3, #19
 8004a4c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004a4e:	69bb      	ldr	r3, [r7, #24]
 8004a50:	015a      	lsls	r2, r3, #5
 8004a52:	69fb      	ldr	r3, [r7, #28]
 8004a54:	4413      	add	r3, r2
 8004a56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a5a:	691b      	ldr	r3, [r3, #16]
 8004a5c:	69ba      	ldr	r2, [r7, #24]
 8004a5e:	0151      	lsls	r1, r2, #5
 8004a60:	69fa      	ldr	r2, [r7, #28]
 8004a62:	440a      	add	r2, r1
 8004a64:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a68:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004a6c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004a70:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8004a72:	68bb      	ldr	r3, [r7, #8]
 8004a74:	695b      	ldr	r3, [r3, #20]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d126      	bne.n	8004ac8 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004a7a:	69bb      	ldr	r3, [r7, #24]
 8004a7c:	015a      	lsls	r2, r3, #5
 8004a7e:	69fb      	ldr	r3, [r7, #28]
 8004a80:	4413      	add	r3, r2
 8004a82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a86:	691a      	ldr	r2, [r3, #16]
 8004a88:	68bb      	ldr	r3, [r7, #8]
 8004a8a:	689b      	ldr	r3, [r3, #8]
 8004a8c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a90:	69b9      	ldr	r1, [r7, #24]
 8004a92:	0148      	lsls	r0, r1, #5
 8004a94:	69f9      	ldr	r1, [r7, #28]
 8004a96:	4401      	add	r1, r0
 8004a98:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004a9c:	4313      	orrs	r3, r2
 8004a9e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004aa0:	69bb      	ldr	r3, [r7, #24]
 8004aa2:	015a      	lsls	r2, r3, #5
 8004aa4:	69fb      	ldr	r3, [r7, #28]
 8004aa6:	4413      	add	r3, r2
 8004aa8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004aac:	691b      	ldr	r3, [r3, #16]
 8004aae:	69ba      	ldr	r2, [r7, #24]
 8004ab0:	0151      	lsls	r1, r2, #5
 8004ab2:	69fa      	ldr	r2, [r7, #28]
 8004ab4:	440a      	add	r2, r1
 8004ab6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004aba:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004abe:	6113      	str	r3, [r2, #16]
 8004ac0:	e036      	b.n	8004b30 <USB_EPStartXfer+0x3dc>
 8004ac2:	bf00      	nop
 8004ac4:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004ac8:	68bb      	ldr	r3, [r7, #8]
 8004aca:	695a      	ldr	r2, [r3, #20]
 8004acc:	68bb      	ldr	r3, [r7, #8]
 8004ace:	689b      	ldr	r3, [r3, #8]
 8004ad0:	4413      	add	r3, r2
 8004ad2:	1e5a      	subs	r2, r3, #1
 8004ad4:	68bb      	ldr	r3, [r7, #8]
 8004ad6:	689b      	ldr	r3, [r3, #8]
 8004ad8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004adc:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004ade:	69bb      	ldr	r3, [r7, #24]
 8004ae0:	015a      	lsls	r2, r3, #5
 8004ae2:	69fb      	ldr	r3, [r7, #28]
 8004ae4:	4413      	add	r3, r2
 8004ae6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004aea:	691a      	ldr	r2, [r3, #16]
 8004aec:	8afb      	ldrh	r3, [r7, #22]
 8004aee:	04d9      	lsls	r1, r3, #19
 8004af0:	4b39      	ldr	r3, [pc, #228]	; (8004bd8 <USB_EPStartXfer+0x484>)
 8004af2:	400b      	ands	r3, r1
 8004af4:	69b9      	ldr	r1, [r7, #24]
 8004af6:	0148      	lsls	r0, r1, #5
 8004af8:	69f9      	ldr	r1, [r7, #28]
 8004afa:	4401      	add	r1, r0
 8004afc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004b00:	4313      	orrs	r3, r2
 8004b02:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8004b04:	69bb      	ldr	r3, [r7, #24]
 8004b06:	015a      	lsls	r2, r3, #5
 8004b08:	69fb      	ldr	r3, [r7, #28]
 8004b0a:	4413      	add	r3, r2
 8004b0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b10:	691a      	ldr	r2, [r3, #16]
 8004b12:	68bb      	ldr	r3, [r7, #8]
 8004b14:	689b      	ldr	r3, [r3, #8]
 8004b16:	8af9      	ldrh	r1, [r7, #22]
 8004b18:	fb01 f303 	mul.w	r3, r1, r3
 8004b1c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b20:	69b9      	ldr	r1, [r7, #24]
 8004b22:	0148      	lsls	r0, r1, #5
 8004b24:	69f9      	ldr	r1, [r7, #28]
 8004b26:	4401      	add	r1, r0
 8004b28:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004b2c:	4313      	orrs	r3, r2
 8004b2e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004b30:	79fb      	ldrb	r3, [r7, #7]
 8004b32:	2b01      	cmp	r3, #1
 8004b34:	d10d      	bne.n	8004b52 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004b36:	68bb      	ldr	r3, [r7, #8]
 8004b38:	68db      	ldr	r3, [r3, #12]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d009      	beq.n	8004b52 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004b3e:	68bb      	ldr	r3, [r7, #8]
 8004b40:	68d9      	ldr	r1, [r3, #12]
 8004b42:	69bb      	ldr	r3, [r7, #24]
 8004b44:	015a      	lsls	r2, r3, #5
 8004b46:	69fb      	ldr	r3, [r7, #28]
 8004b48:	4413      	add	r3, r2
 8004b4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b4e:	460a      	mov	r2, r1
 8004b50:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8004b52:	68bb      	ldr	r3, [r7, #8]
 8004b54:	78db      	ldrb	r3, [r3, #3]
 8004b56:	2b01      	cmp	r3, #1
 8004b58:	d128      	bne.n	8004bac <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004b5a:	69fb      	ldr	r3, [r7, #28]
 8004b5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b60:	689b      	ldr	r3, [r3, #8]
 8004b62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d110      	bne.n	8004b8c <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004b6a:	69bb      	ldr	r3, [r7, #24]
 8004b6c:	015a      	lsls	r2, r3, #5
 8004b6e:	69fb      	ldr	r3, [r7, #28]
 8004b70:	4413      	add	r3, r2
 8004b72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	69ba      	ldr	r2, [r7, #24]
 8004b7a:	0151      	lsls	r1, r2, #5
 8004b7c:	69fa      	ldr	r2, [r7, #28]
 8004b7e:	440a      	add	r2, r1
 8004b80:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004b84:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004b88:	6013      	str	r3, [r2, #0]
 8004b8a:	e00f      	b.n	8004bac <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004b8c:	69bb      	ldr	r3, [r7, #24]
 8004b8e:	015a      	lsls	r2, r3, #5
 8004b90:	69fb      	ldr	r3, [r7, #28]
 8004b92:	4413      	add	r3, r2
 8004b94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	69ba      	ldr	r2, [r7, #24]
 8004b9c:	0151      	lsls	r1, r2, #5
 8004b9e:	69fa      	ldr	r2, [r7, #28]
 8004ba0:	440a      	add	r2, r1
 8004ba2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ba6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004baa:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004bac:	69bb      	ldr	r3, [r7, #24]
 8004bae:	015a      	lsls	r2, r3, #5
 8004bb0:	69fb      	ldr	r3, [r7, #28]
 8004bb2:	4413      	add	r3, r2
 8004bb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	69ba      	ldr	r2, [r7, #24]
 8004bbc:	0151      	lsls	r1, r2, #5
 8004bbe:	69fa      	ldr	r2, [r7, #28]
 8004bc0:	440a      	add	r2, r1
 8004bc2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004bc6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004bca:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004bcc:	2300      	movs	r3, #0
}
 8004bce:	4618      	mov	r0, r3
 8004bd0:	3720      	adds	r7, #32
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	bd80      	pop	{r7, pc}
 8004bd6:	bf00      	nop
 8004bd8:	1ff80000 	.word	0x1ff80000

08004bdc <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004bdc:	b480      	push	{r7}
 8004bde:	b087      	sub	sp, #28
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	60f8      	str	r0, [r7, #12]
 8004be4:	60b9      	str	r1, [r7, #8]
 8004be6:	4613      	mov	r3, r2
 8004be8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8004bee:	68bb      	ldr	r3, [r7, #8]
 8004bf0:	781b      	ldrb	r3, [r3, #0]
 8004bf2:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004bf4:	68bb      	ldr	r3, [r7, #8]
 8004bf6:	785b      	ldrb	r3, [r3, #1]
 8004bf8:	2b01      	cmp	r3, #1
 8004bfa:	f040 80cd 	bne.w	8004d98 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004bfe:	68bb      	ldr	r3, [r7, #8]
 8004c00:	695b      	ldr	r3, [r3, #20]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d132      	bne.n	8004c6c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004c06:	693b      	ldr	r3, [r7, #16]
 8004c08:	015a      	lsls	r2, r3, #5
 8004c0a:	697b      	ldr	r3, [r7, #20]
 8004c0c:	4413      	add	r3, r2
 8004c0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c12:	691b      	ldr	r3, [r3, #16]
 8004c14:	693a      	ldr	r2, [r7, #16]
 8004c16:	0151      	lsls	r1, r2, #5
 8004c18:	697a      	ldr	r2, [r7, #20]
 8004c1a:	440a      	add	r2, r1
 8004c1c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c20:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004c24:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004c28:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004c2a:	693b      	ldr	r3, [r7, #16]
 8004c2c:	015a      	lsls	r2, r3, #5
 8004c2e:	697b      	ldr	r3, [r7, #20]
 8004c30:	4413      	add	r3, r2
 8004c32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c36:	691b      	ldr	r3, [r3, #16]
 8004c38:	693a      	ldr	r2, [r7, #16]
 8004c3a:	0151      	lsls	r1, r2, #5
 8004c3c:	697a      	ldr	r2, [r7, #20]
 8004c3e:	440a      	add	r2, r1
 8004c40:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c44:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004c48:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004c4a:	693b      	ldr	r3, [r7, #16]
 8004c4c:	015a      	lsls	r2, r3, #5
 8004c4e:	697b      	ldr	r3, [r7, #20]
 8004c50:	4413      	add	r3, r2
 8004c52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c56:	691b      	ldr	r3, [r3, #16]
 8004c58:	693a      	ldr	r2, [r7, #16]
 8004c5a:	0151      	lsls	r1, r2, #5
 8004c5c:	697a      	ldr	r2, [r7, #20]
 8004c5e:	440a      	add	r2, r1
 8004c60:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c64:	0cdb      	lsrs	r3, r3, #19
 8004c66:	04db      	lsls	r3, r3, #19
 8004c68:	6113      	str	r3, [r2, #16]
 8004c6a:	e04e      	b.n	8004d0a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004c6c:	693b      	ldr	r3, [r7, #16]
 8004c6e:	015a      	lsls	r2, r3, #5
 8004c70:	697b      	ldr	r3, [r7, #20]
 8004c72:	4413      	add	r3, r2
 8004c74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c78:	691b      	ldr	r3, [r3, #16]
 8004c7a:	693a      	ldr	r2, [r7, #16]
 8004c7c:	0151      	lsls	r1, r2, #5
 8004c7e:	697a      	ldr	r2, [r7, #20]
 8004c80:	440a      	add	r2, r1
 8004c82:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c86:	0cdb      	lsrs	r3, r3, #19
 8004c88:	04db      	lsls	r3, r3, #19
 8004c8a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004c8c:	693b      	ldr	r3, [r7, #16]
 8004c8e:	015a      	lsls	r2, r3, #5
 8004c90:	697b      	ldr	r3, [r7, #20]
 8004c92:	4413      	add	r3, r2
 8004c94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c98:	691b      	ldr	r3, [r3, #16]
 8004c9a:	693a      	ldr	r2, [r7, #16]
 8004c9c:	0151      	lsls	r1, r2, #5
 8004c9e:	697a      	ldr	r2, [r7, #20]
 8004ca0:	440a      	add	r2, r1
 8004ca2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ca6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004caa:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004cae:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8004cb0:	68bb      	ldr	r3, [r7, #8]
 8004cb2:	695a      	ldr	r2, [r3, #20]
 8004cb4:	68bb      	ldr	r3, [r7, #8]
 8004cb6:	689b      	ldr	r3, [r3, #8]
 8004cb8:	429a      	cmp	r2, r3
 8004cba:	d903      	bls.n	8004cc4 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8004cbc:	68bb      	ldr	r3, [r7, #8]
 8004cbe:	689a      	ldr	r2, [r3, #8]
 8004cc0:	68bb      	ldr	r3, [r7, #8]
 8004cc2:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004cc4:	693b      	ldr	r3, [r7, #16]
 8004cc6:	015a      	lsls	r2, r3, #5
 8004cc8:	697b      	ldr	r3, [r7, #20]
 8004cca:	4413      	add	r3, r2
 8004ccc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cd0:	691b      	ldr	r3, [r3, #16]
 8004cd2:	693a      	ldr	r2, [r7, #16]
 8004cd4:	0151      	lsls	r1, r2, #5
 8004cd6:	697a      	ldr	r2, [r7, #20]
 8004cd8:	440a      	add	r2, r1
 8004cda:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004cde:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004ce2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004ce4:	693b      	ldr	r3, [r7, #16]
 8004ce6:	015a      	lsls	r2, r3, #5
 8004ce8:	697b      	ldr	r3, [r7, #20]
 8004cea:	4413      	add	r3, r2
 8004cec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cf0:	691a      	ldr	r2, [r3, #16]
 8004cf2:	68bb      	ldr	r3, [r7, #8]
 8004cf4:	695b      	ldr	r3, [r3, #20]
 8004cf6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004cfa:	6939      	ldr	r1, [r7, #16]
 8004cfc:	0148      	lsls	r0, r1, #5
 8004cfe:	6979      	ldr	r1, [r7, #20]
 8004d00:	4401      	add	r1, r0
 8004d02:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004d06:	4313      	orrs	r3, r2
 8004d08:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004d0a:	79fb      	ldrb	r3, [r7, #7]
 8004d0c:	2b01      	cmp	r3, #1
 8004d0e:	d11e      	bne.n	8004d4e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004d10:	68bb      	ldr	r3, [r7, #8]
 8004d12:	691b      	ldr	r3, [r3, #16]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d009      	beq.n	8004d2c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004d18:	693b      	ldr	r3, [r7, #16]
 8004d1a:	015a      	lsls	r2, r3, #5
 8004d1c:	697b      	ldr	r3, [r7, #20]
 8004d1e:	4413      	add	r3, r2
 8004d20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d24:	461a      	mov	r2, r3
 8004d26:	68bb      	ldr	r3, [r7, #8]
 8004d28:	691b      	ldr	r3, [r3, #16]
 8004d2a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004d2c:	693b      	ldr	r3, [r7, #16]
 8004d2e:	015a      	lsls	r2, r3, #5
 8004d30:	697b      	ldr	r3, [r7, #20]
 8004d32:	4413      	add	r3, r2
 8004d34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	693a      	ldr	r2, [r7, #16]
 8004d3c:	0151      	lsls	r1, r2, #5
 8004d3e:	697a      	ldr	r2, [r7, #20]
 8004d40:	440a      	add	r2, r1
 8004d42:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d46:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004d4a:	6013      	str	r3, [r2, #0]
 8004d4c:	e092      	b.n	8004e74 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004d4e:	693b      	ldr	r3, [r7, #16]
 8004d50:	015a      	lsls	r2, r3, #5
 8004d52:	697b      	ldr	r3, [r7, #20]
 8004d54:	4413      	add	r3, r2
 8004d56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	693a      	ldr	r2, [r7, #16]
 8004d5e:	0151      	lsls	r1, r2, #5
 8004d60:	697a      	ldr	r2, [r7, #20]
 8004d62:	440a      	add	r2, r1
 8004d64:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d68:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004d6c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8004d6e:	68bb      	ldr	r3, [r7, #8]
 8004d70:	695b      	ldr	r3, [r3, #20]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d07e      	beq.n	8004e74 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004d76:	697b      	ldr	r3, [r7, #20]
 8004d78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d7c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004d7e:	68bb      	ldr	r3, [r7, #8]
 8004d80:	781b      	ldrb	r3, [r3, #0]
 8004d82:	f003 030f 	and.w	r3, r3, #15
 8004d86:	2101      	movs	r1, #1
 8004d88:	fa01 f303 	lsl.w	r3, r1, r3
 8004d8c:	6979      	ldr	r1, [r7, #20]
 8004d8e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004d92:	4313      	orrs	r3, r2
 8004d94:	634b      	str	r3, [r1, #52]	; 0x34
 8004d96:	e06d      	b.n	8004e74 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004d98:	693b      	ldr	r3, [r7, #16]
 8004d9a:	015a      	lsls	r2, r3, #5
 8004d9c:	697b      	ldr	r3, [r7, #20]
 8004d9e:	4413      	add	r3, r2
 8004da0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004da4:	691b      	ldr	r3, [r3, #16]
 8004da6:	693a      	ldr	r2, [r7, #16]
 8004da8:	0151      	lsls	r1, r2, #5
 8004daa:	697a      	ldr	r2, [r7, #20]
 8004dac:	440a      	add	r2, r1
 8004dae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004db2:	0cdb      	lsrs	r3, r3, #19
 8004db4:	04db      	lsls	r3, r3, #19
 8004db6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004db8:	693b      	ldr	r3, [r7, #16]
 8004dba:	015a      	lsls	r2, r3, #5
 8004dbc:	697b      	ldr	r3, [r7, #20]
 8004dbe:	4413      	add	r3, r2
 8004dc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dc4:	691b      	ldr	r3, [r3, #16]
 8004dc6:	693a      	ldr	r2, [r7, #16]
 8004dc8:	0151      	lsls	r1, r2, #5
 8004dca:	697a      	ldr	r2, [r7, #20]
 8004dcc:	440a      	add	r2, r1
 8004dce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004dd2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004dd6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004dda:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8004ddc:	68bb      	ldr	r3, [r7, #8]
 8004dde:	695b      	ldr	r3, [r3, #20]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d003      	beq.n	8004dec <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8004de4:	68bb      	ldr	r3, [r7, #8]
 8004de6:	689a      	ldr	r2, [r3, #8]
 8004de8:	68bb      	ldr	r3, [r7, #8]
 8004dea:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004dec:	693b      	ldr	r3, [r7, #16]
 8004dee:	015a      	lsls	r2, r3, #5
 8004df0:	697b      	ldr	r3, [r7, #20]
 8004df2:	4413      	add	r3, r2
 8004df4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004df8:	691b      	ldr	r3, [r3, #16]
 8004dfa:	693a      	ldr	r2, [r7, #16]
 8004dfc:	0151      	lsls	r1, r2, #5
 8004dfe:	697a      	ldr	r2, [r7, #20]
 8004e00:	440a      	add	r2, r1
 8004e02:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e06:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004e0a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8004e0c:	693b      	ldr	r3, [r7, #16]
 8004e0e:	015a      	lsls	r2, r3, #5
 8004e10:	697b      	ldr	r3, [r7, #20]
 8004e12:	4413      	add	r3, r2
 8004e14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e18:	691a      	ldr	r2, [r3, #16]
 8004e1a:	68bb      	ldr	r3, [r7, #8]
 8004e1c:	689b      	ldr	r3, [r3, #8]
 8004e1e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e22:	6939      	ldr	r1, [r7, #16]
 8004e24:	0148      	lsls	r0, r1, #5
 8004e26:	6979      	ldr	r1, [r7, #20]
 8004e28:	4401      	add	r1, r0
 8004e2a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004e2e:	4313      	orrs	r3, r2
 8004e30:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8004e32:	79fb      	ldrb	r3, [r7, #7]
 8004e34:	2b01      	cmp	r3, #1
 8004e36:	d10d      	bne.n	8004e54 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004e38:	68bb      	ldr	r3, [r7, #8]
 8004e3a:	68db      	ldr	r3, [r3, #12]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d009      	beq.n	8004e54 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004e40:	68bb      	ldr	r3, [r7, #8]
 8004e42:	68d9      	ldr	r1, [r3, #12]
 8004e44:	693b      	ldr	r3, [r7, #16]
 8004e46:	015a      	lsls	r2, r3, #5
 8004e48:	697b      	ldr	r3, [r7, #20]
 8004e4a:	4413      	add	r3, r2
 8004e4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e50:	460a      	mov	r2, r1
 8004e52:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004e54:	693b      	ldr	r3, [r7, #16]
 8004e56:	015a      	lsls	r2, r3, #5
 8004e58:	697b      	ldr	r3, [r7, #20]
 8004e5a:	4413      	add	r3, r2
 8004e5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	693a      	ldr	r2, [r7, #16]
 8004e64:	0151      	lsls	r1, r2, #5
 8004e66:	697a      	ldr	r2, [r7, #20]
 8004e68:	440a      	add	r2, r1
 8004e6a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e6e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004e72:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004e74:	2300      	movs	r3, #0
}
 8004e76:	4618      	mov	r0, r3
 8004e78:	371c      	adds	r7, #28
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e80:	4770      	bx	lr

08004e82 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004e82:	b480      	push	{r7}
 8004e84:	b089      	sub	sp, #36	; 0x24
 8004e86:	af00      	add	r7, sp, #0
 8004e88:	60f8      	str	r0, [r7, #12]
 8004e8a:	60b9      	str	r1, [r7, #8]
 8004e8c:	4611      	mov	r1, r2
 8004e8e:	461a      	mov	r2, r3
 8004e90:	460b      	mov	r3, r1
 8004e92:	71fb      	strb	r3, [r7, #7]
 8004e94:	4613      	mov	r3, r2
 8004e96:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8004e9c:	68bb      	ldr	r3, [r7, #8]
 8004e9e:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8004ea0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d123      	bne.n	8004ef0 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004ea8:	88bb      	ldrh	r3, [r7, #4]
 8004eaa:	3303      	adds	r3, #3
 8004eac:	089b      	lsrs	r3, r3, #2
 8004eae:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004eb0:	2300      	movs	r3, #0
 8004eb2:	61bb      	str	r3, [r7, #24]
 8004eb4:	e018      	b.n	8004ee8 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004eb6:	79fb      	ldrb	r3, [r7, #7]
 8004eb8:	031a      	lsls	r2, r3, #12
 8004eba:	697b      	ldr	r3, [r7, #20]
 8004ebc:	4413      	add	r3, r2
 8004ebe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ec2:	461a      	mov	r2, r3
 8004ec4:	69fb      	ldr	r3, [r7, #28]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004eca:	69fb      	ldr	r3, [r7, #28]
 8004ecc:	3301      	adds	r3, #1
 8004ece:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004ed0:	69fb      	ldr	r3, [r7, #28]
 8004ed2:	3301      	adds	r3, #1
 8004ed4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004ed6:	69fb      	ldr	r3, [r7, #28]
 8004ed8:	3301      	adds	r3, #1
 8004eda:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004edc:	69fb      	ldr	r3, [r7, #28]
 8004ede:	3301      	adds	r3, #1
 8004ee0:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004ee2:	69bb      	ldr	r3, [r7, #24]
 8004ee4:	3301      	adds	r3, #1
 8004ee6:	61bb      	str	r3, [r7, #24]
 8004ee8:	69ba      	ldr	r2, [r7, #24]
 8004eea:	693b      	ldr	r3, [r7, #16]
 8004eec:	429a      	cmp	r2, r3
 8004eee:	d3e2      	bcc.n	8004eb6 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004ef0:	2300      	movs	r3, #0
}
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	3724      	adds	r7, #36	; 0x24
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efc:	4770      	bx	lr

08004efe <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004efe:	b480      	push	{r7}
 8004f00:	b08b      	sub	sp, #44	; 0x2c
 8004f02:	af00      	add	r7, sp, #0
 8004f04:	60f8      	str	r0, [r7, #12]
 8004f06:	60b9      	str	r1, [r7, #8]
 8004f08:	4613      	mov	r3, r2
 8004f0a:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8004f10:	68bb      	ldr	r3, [r7, #8]
 8004f12:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8004f14:	88fb      	ldrh	r3, [r7, #6]
 8004f16:	089b      	lsrs	r3, r3, #2
 8004f18:	b29b      	uxth	r3, r3
 8004f1a:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8004f1c:	88fb      	ldrh	r3, [r7, #6]
 8004f1e:	f003 0303 	and.w	r3, r3, #3
 8004f22:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8004f24:	2300      	movs	r3, #0
 8004f26:	623b      	str	r3, [r7, #32]
 8004f28:	e014      	b.n	8004f54 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004f2a:	69bb      	ldr	r3, [r7, #24]
 8004f2c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f30:	681a      	ldr	r2, [r3, #0]
 8004f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f34:	601a      	str	r2, [r3, #0]
    pDest++;
 8004f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f38:	3301      	adds	r3, #1
 8004f3a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f3e:	3301      	adds	r3, #1
 8004f40:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f44:	3301      	adds	r3, #1
 8004f46:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f4a:	3301      	adds	r3, #1
 8004f4c:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8004f4e:	6a3b      	ldr	r3, [r7, #32]
 8004f50:	3301      	adds	r3, #1
 8004f52:	623b      	str	r3, [r7, #32]
 8004f54:	6a3a      	ldr	r2, [r7, #32]
 8004f56:	697b      	ldr	r3, [r7, #20]
 8004f58:	429a      	cmp	r2, r3
 8004f5a:	d3e6      	bcc.n	8004f2a <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8004f5c:	8bfb      	ldrh	r3, [r7, #30]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d01e      	beq.n	8004fa0 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004f62:	2300      	movs	r3, #0
 8004f64:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004f66:	69bb      	ldr	r3, [r7, #24]
 8004f68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f6c:	461a      	mov	r2, r3
 8004f6e:	f107 0310 	add.w	r3, r7, #16
 8004f72:	6812      	ldr	r2, [r2, #0]
 8004f74:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004f76:	693a      	ldr	r2, [r7, #16]
 8004f78:	6a3b      	ldr	r3, [r7, #32]
 8004f7a:	b2db      	uxtb	r3, r3
 8004f7c:	00db      	lsls	r3, r3, #3
 8004f7e:	fa22 f303 	lsr.w	r3, r2, r3
 8004f82:	b2da      	uxtb	r2, r3
 8004f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f86:	701a      	strb	r2, [r3, #0]
      i++;
 8004f88:	6a3b      	ldr	r3, [r7, #32]
 8004f8a:	3301      	adds	r3, #1
 8004f8c:	623b      	str	r3, [r7, #32]
      pDest++;
 8004f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f90:	3301      	adds	r3, #1
 8004f92:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8004f94:	8bfb      	ldrh	r3, [r7, #30]
 8004f96:	3b01      	subs	r3, #1
 8004f98:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004f9a:	8bfb      	ldrh	r3, [r7, #30]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d1ea      	bne.n	8004f76 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8004fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	372c      	adds	r7, #44	; 0x2c
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fac:	4770      	bx	lr

08004fae <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004fae:	b480      	push	{r7}
 8004fb0:	b085      	sub	sp, #20
 8004fb2:	af00      	add	r7, sp, #0
 8004fb4:	6078      	str	r0, [r7, #4]
 8004fb6:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	781b      	ldrb	r3, [r3, #0]
 8004fc0:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	785b      	ldrb	r3, [r3, #1]
 8004fc6:	2b01      	cmp	r3, #1
 8004fc8:	d12c      	bne.n	8005024 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004fca:	68bb      	ldr	r3, [r7, #8]
 8004fcc:	015a      	lsls	r2, r3, #5
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	4413      	add	r3, r2
 8004fd2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	db12      	blt.n	8005002 <USB_EPSetStall+0x54>
 8004fdc:	68bb      	ldr	r3, [r7, #8]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d00f      	beq.n	8005002 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8004fe2:	68bb      	ldr	r3, [r7, #8]
 8004fe4:	015a      	lsls	r2, r3, #5
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	4413      	add	r3, r2
 8004fea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	68ba      	ldr	r2, [r7, #8]
 8004ff2:	0151      	lsls	r1, r2, #5
 8004ff4:	68fa      	ldr	r2, [r7, #12]
 8004ff6:	440a      	add	r2, r1
 8004ff8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ffc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005000:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005002:	68bb      	ldr	r3, [r7, #8]
 8005004:	015a      	lsls	r2, r3, #5
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	4413      	add	r3, r2
 800500a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	68ba      	ldr	r2, [r7, #8]
 8005012:	0151      	lsls	r1, r2, #5
 8005014:	68fa      	ldr	r2, [r7, #12]
 8005016:	440a      	add	r2, r1
 8005018:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800501c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005020:	6013      	str	r3, [r2, #0]
 8005022:	e02b      	b.n	800507c <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005024:	68bb      	ldr	r3, [r7, #8]
 8005026:	015a      	lsls	r2, r3, #5
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	4413      	add	r3, r2
 800502c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	2b00      	cmp	r3, #0
 8005034:	db12      	blt.n	800505c <USB_EPSetStall+0xae>
 8005036:	68bb      	ldr	r3, [r7, #8]
 8005038:	2b00      	cmp	r3, #0
 800503a:	d00f      	beq.n	800505c <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800503c:	68bb      	ldr	r3, [r7, #8]
 800503e:	015a      	lsls	r2, r3, #5
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	4413      	add	r3, r2
 8005044:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	68ba      	ldr	r2, [r7, #8]
 800504c:	0151      	lsls	r1, r2, #5
 800504e:	68fa      	ldr	r2, [r7, #12]
 8005050:	440a      	add	r2, r1
 8005052:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005056:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800505a:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800505c:	68bb      	ldr	r3, [r7, #8]
 800505e:	015a      	lsls	r2, r3, #5
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	4413      	add	r3, r2
 8005064:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	68ba      	ldr	r2, [r7, #8]
 800506c:	0151      	lsls	r1, r2, #5
 800506e:	68fa      	ldr	r2, [r7, #12]
 8005070:	440a      	add	r2, r1
 8005072:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005076:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800507a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800507c:	2300      	movs	r3, #0
}
 800507e:	4618      	mov	r0, r3
 8005080:	3714      	adds	r7, #20
 8005082:	46bd      	mov	sp, r7
 8005084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005088:	4770      	bx	lr

0800508a <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800508a:	b480      	push	{r7}
 800508c:	b085      	sub	sp, #20
 800508e:	af00      	add	r7, sp, #0
 8005090:	6078      	str	r0, [r7, #4]
 8005092:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	781b      	ldrb	r3, [r3, #0]
 800509c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	785b      	ldrb	r3, [r3, #1]
 80050a2:	2b01      	cmp	r3, #1
 80050a4:	d128      	bne.n	80050f8 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80050a6:	68bb      	ldr	r3, [r7, #8]
 80050a8:	015a      	lsls	r2, r3, #5
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	4413      	add	r3, r2
 80050ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	68ba      	ldr	r2, [r7, #8]
 80050b6:	0151      	lsls	r1, r2, #5
 80050b8:	68fa      	ldr	r2, [r7, #12]
 80050ba:	440a      	add	r2, r1
 80050bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80050c0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80050c4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	78db      	ldrb	r3, [r3, #3]
 80050ca:	2b03      	cmp	r3, #3
 80050cc:	d003      	beq.n	80050d6 <USB_EPClearStall+0x4c>
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	78db      	ldrb	r3, [r3, #3]
 80050d2:	2b02      	cmp	r3, #2
 80050d4:	d138      	bne.n	8005148 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80050d6:	68bb      	ldr	r3, [r7, #8]
 80050d8:	015a      	lsls	r2, r3, #5
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	4413      	add	r3, r2
 80050de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	68ba      	ldr	r2, [r7, #8]
 80050e6:	0151      	lsls	r1, r2, #5
 80050e8:	68fa      	ldr	r2, [r7, #12]
 80050ea:	440a      	add	r2, r1
 80050ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80050f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050f4:	6013      	str	r3, [r2, #0]
 80050f6:	e027      	b.n	8005148 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80050f8:	68bb      	ldr	r3, [r7, #8]
 80050fa:	015a      	lsls	r2, r3, #5
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	4413      	add	r3, r2
 8005100:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	68ba      	ldr	r2, [r7, #8]
 8005108:	0151      	lsls	r1, r2, #5
 800510a:	68fa      	ldr	r2, [r7, #12]
 800510c:	440a      	add	r2, r1
 800510e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005112:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005116:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	78db      	ldrb	r3, [r3, #3]
 800511c:	2b03      	cmp	r3, #3
 800511e:	d003      	beq.n	8005128 <USB_EPClearStall+0x9e>
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	78db      	ldrb	r3, [r3, #3]
 8005124:	2b02      	cmp	r3, #2
 8005126:	d10f      	bne.n	8005148 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005128:	68bb      	ldr	r3, [r7, #8]
 800512a:	015a      	lsls	r2, r3, #5
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	4413      	add	r3, r2
 8005130:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	68ba      	ldr	r2, [r7, #8]
 8005138:	0151      	lsls	r1, r2, #5
 800513a:	68fa      	ldr	r2, [r7, #12]
 800513c:	440a      	add	r2, r1
 800513e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005142:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005146:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005148:	2300      	movs	r3, #0
}
 800514a:	4618      	mov	r0, r3
 800514c:	3714      	adds	r7, #20
 800514e:	46bd      	mov	sp, r7
 8005150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005154:	4770      	bx	lr

08005156 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005156:	b480      	push	{r7}
 8005158:	b085      	sub	sp, #20
 800515a:	af00      	add	r7, sp, #0
 800515c:	6078      	str	r0, [r7, #4]
 800515e:	460b      	mov	r3, r1
 8005160:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	68fa      	ldr	r2, [r7, #12]
 8005170:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005174:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005178:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005180:	681a      	ldr	r2, [r3, #0]
 8005182:	78fb      	ldrb	r3, [r7, #3]
 8005184:	011b      	lsls	r3, r3, #4
 8005186:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800518a:	68f9      	ldr	r1, [r7, #12]
 800518c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005190:	4313      	orrs	r3, r2
 8005192:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005194:	2300      	movs	r3, #0
}
 8005196:	4618      	mov	r0, r3
 8005198:	3714      	adds	r7, #20
 800519a:	46bd      	mov	sp, r7
 800519c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a0:	4770      	bx	lr

080051a2 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80051a2:	b480      	push	{r7}
 80051a4:	b085      	sub	sp, #20
 80051a6:	af00      	add	r7, sp, #0
 80051a8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	68fa      	ldr	r2, [r7, #12]
 80051b8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80051bc:	f023 0303 	bic.w	r3, r3, #3
 80051c0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051c8:	685b      	ldr	r3, [r3, #4]
 80051ca:	68fa      	ldr	r2, [r7, #12]
 80051cc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80051d0:	f023 0302 	bic.w	r3, r3, #2
 80051d4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80051d6:	2300      	movs	r3, #0
}
 80051d8:	4618      	mov	r0, r3
 80051da:	3714      	adds	r7, #20
 80051dc:	46bd      	mov	sp, r7
 80051de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e2:	4770      	bx	lr

080051e4 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80051e4:	b480      	push	{r7}
 80051e6:	b085      	sub	sp, #20
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	68fa      	ldr	r2, [r7, #12]
 80051fa:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80051fe:	f023 0303 	bic.w	r3, r3, #3
 8005202:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800520a:	685b      	ldr	r3, [r3, #4]
 800520c:	68fa      	ldr	r2, [r7, #12]
 800520e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005212:	f043 0302 	orr.w	r3, r3, #2
 8005216:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005218:	2300      	movs	r3, #0
}
 800521a:	4618      	mov	r0, r3
 800521c:	3714      	adds	r7, #20
 800521e:	46bd      	mov	sp, r7
 8005220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005224:	4770      	bx	lr

08005226 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005226:	b480      	push	{r7}
 8005228:	b085      	sub	sp, #20
 800522a:	af00      	add	r7, sp, #0
 800522c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	695b      	ldr	r3, [r3, #20]
 8005232:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	699b      	ldr	r3, [r3, #24]
 8005238:	68fa      	ldr	r2, [r7, #12]
 800523a:	4013      	ands	r3, r2
 800523c:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800523e:	68fb      	ldr	r3, [r7, #12]
}
 8005240:	4618      	mov	r0, r3
 8005242:	3714      	adds	r7, #20
 8005244:	46bd      	mov	sp, r7
 8005246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524a:	4770      	bx	lr

0800524c <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800524c:	b480      	push	{r7}
 800524e:	b085      	sub	sp, #20
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800525e:	699b      	ldr	r3, [r3, #24]
 8005260:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005268:	69db      	ldr	r3, [r3, #28]
 800526a:	68ba      	ldr	r2, [r7, #8]
 800526c:	4013      	ands	r3, r2
 800526e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005270:	68bb      	ldr	r3, [r7, #8]
 8005272:	0c1b      	lsrs	r3, r3, #16
}
 8005274:	4618      	mov	r0, r3
 8005276:	3714      	adds	r7, #20
 8005278:	46bd      	mov	sp, r7
 800527a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527e:	4770      	bx	lr

08005280 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005280:	b480      	push	{r7}
 8005282:	b085      	sub	sp, #20
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005292:	699b      	ldr	r3, [r3, #24]
 8005294:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800529c:	69db      	ldr	r3, [r3, #28]
 800529e:	68ba      	ldr	r2, [r7, #8]
 80052a0:	4013      	ands	r3, r2
 80052a2:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80052a4:	68bb      	ldr	r3, [r7, #8]
 80052a6:	b29b      	uxth	r3, r3
}
 80052a8:	4618      	mov	r0, r3
 80052aa:	3714      	adds	r7, #20
 80052ac:	46bd      	mov	sp, r7
 80052ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b2:	4770      	bx	lr

080052b4 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80052b4:	b480      	push	{r7}
 80052b6:	b085      	sub	sp, #20
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
 80052bc:	460b      	mov	r3, r1
 80052be:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80052c4:	78fb      	ldrb	r3, [r7, #3]
 80052c6:	015a      	lsls	r2, r3, #5
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	4413      	add	r3, r2
 80052cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052d0:	689b      	ldr	r3, [r3, #8]
 80052d2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052da:	695b      	ldr	r3, [r3, #20]
 80052dc:	68ba      	ldr	r2, [r7, #8]
 80052de:	4013      	ands	r3, r2
 80052e0:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80052e2:	68bb      	ldr	r3, [r7, #8]
}
 80052e4:	4618      	mov	r0, r3
 80052e6:	3714      	adds	r7, #20
 80052e8:	46bd      	mov	sp, r7
 80052ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ee:	4770      	bx	lr

080052f0 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80052f0:	b480      	push	{r7}
 80052f2:	b087      	sub	sp, #28
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]
 80052f8:	460b      	mov	r3, r1
 80052fa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005300:	697b      	ldr	r3, [r7, #20]
 8005302:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005306:	691b      	ldr	r3, [r3, #16]
 8005308:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800530a:	697b      	ldr	r3, [r7, #20]
 800530c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005310:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005312:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005314:	78fb      	ldrb	r3, [r7, #3]
 8005316:	f003 030f 	and.w	r3, r3, #15
 800531a:	68fa      	ldr	r2, [r7, #12]
 800531c:	fa22 f303 	lsr.w	r3, r2, r3
 8005320:	01db      	lsls	r3, r3, #7
 8005322:	b2db      	uxtb	r3, r3
 8005324:	693a      	ldr	r2, [r7, #16]
 8005326:	4313      	orrs	r3, r2
 8005328:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800532a:	78fb      	ldrb	r3, [r7, #3]
 800532c:	015a      	lsls	r2, r3, #5
 800532e:	697b      	ldr	r3, [r7, #20]
 8005330:	4413      	add	r3, r2
 8005332:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005336:	689b      	ldr	r3, [r3, #8]
 8005338:	693a      	ldr	r2, [r7, #16]
 800533a:	4013      	ands	r3, r2
 800533c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800533e:	68bb      	ldr	r3, [r7, #8]
}
 8005340:	4618      	mov	r0, r3
 8005342:	371c      	adds	r7, #28
 8005344:	46bd      	mov	sp, r7
 8005346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534a:	4770      	bx	lr

0800534c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800534c:	b480      	push	{r7}
 800534e:	b083      	sub	sp, #12
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	695b      	ldr	r3, [r3, #20]
 8005358:	f003 0301 	and.w	r3, r3, #1
}
 800535c:	4618      	mov	r0, r3
 800535e:	370c      	adds	r7, #12
 8005360:	46bd      	mov	sp, r7
 8005362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005366:	4770      	bx	lr

08005368 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8005368:	b480      	push	{r7}
 800536a:	b085      	sub	sp, #20
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	68fa      	ldr	r2, [r7, #12]
 800537e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005382:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005386:	f023 0307 	bic.w	r3, r3, #7
 800538a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005392:	685b      	ldr	r3, [r3, #4]
 8005394:	68fa      	ldr	r2, [r7, #12]
 8005396:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800539a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800539e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80053a0:	2300      	movs	r3, #0
}
 80053a2:	4618      	mov	r0, r3
 80053a4:	3714      	adds	r7, #20
 80053a6:	46bd      	mov	sp, r7
 80053a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ac:	4770      	bx	lr
	...

080053b0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80053b0:	b480      	push	{r7}
 80053b2:	b087      	sub	sp, #28
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	60f8      	str	r0, [r7, #12]
 80053b8:	460b      	mov	r3, r1
 80053ba:	607a      	str	r2, [r7, #4]
 80053bc:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	333c      	adds	r3, #60	; 0x3c
 80053c6:	3304      	adds	r3, #4
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80053cc:	693b      	ldr	r3, [r7, #16]
 80053ce:	4a26      	ldr	r2, [pc, #152]	; (8005468 <USB_EP0_OutStart+0xb8>)
 80053d0:	4293      	cmp	r3, r2
 80053d2:	d90a      	bls.n	80053ea <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80053d4:	697b      	ldr	r3, [r7, #20]
 80053d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80053e0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80053e4:	d101      	bne.n	80053ea <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80053e6:	2300      	movs	r3, #0
 80053e8:	e037      	b.n	800545a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80053ea:	697b      	ldr	r3, [r7, #20]
 80053ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053f0:	461a      	mov	r2, r3
 80053f2:	2300      	movs	r3, #0
 80053f4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80053f6:	697b      	ldr	r3, [r7, #20]
 80053f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053fc:	691b      	ldr	r3, [r3, #16]
 80053fe:	697a      	ldr	r2, [r7, #20]
 8005400:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005404:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005408:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800540a:	697b      	ldr	r3, [r7, #20]
 800540c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005410:	691b      	ldr	r3, [r3, #16]
 8005412:	697a      	ldr	r2, [r7, #20]
 8005414:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005418:	f043 0318 	orr.w	r3, r3, #24
 800541c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800541e:	697b      	ldr	r3, [r7, #20]
 8005420:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005424:	691b      	ldr	r3, [r3, #16]
 8005426:	697a      	ldr	r2, [r7, #20]
 8005428:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800542c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8005430:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8005432:	7afb      	ldrb	r3, [r7, #11]
 8005434:	2b01      	cmp	r3, #1
 8005436:	d10f      	bne.n	8005458 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005438:	697b      	ldr	r3, [r7, #20]
 800543a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800543e:	461a      	mov	r2, r3
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005444:	697b      	ldr	r3, [r7, #20]
 8005446:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	697a      	ldr	r2, [r7, #20]
 800544e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005452:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8005456:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005458:	2300      	movs	r3, #0
}
 800545a:	4618      	mov	r0, r3
 800545c:	371c      	adds	r7, #28
 800545e:	46bd      	mov	sp, r7
 8005460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005464:	4770      	bx	lr
 8005466:	bf00      	nop
 8005468:	4f54300a 	.word	0x4f54300a

0800546c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800546c:	b480      	push	{r7}
 800546e:	b085      	sub	sp, #20
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005474:	2300      	movs	r3, #0
 8005476:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	3301      	adds	r3, #1
 800547c:	60fb      	str	r3, [r7, #12]
 800547e:	4a13      	ldr	r2, [pc, #76]	; (80054cc <USB_CoreReset+0x60>)
 8005480:	4293      	cmp	r3, r2
 8005482:	d901      	bls.n	8005488 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8005484:	2303      	movs	r3, #3
 8005486:	e01a      	b.n	80054be <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	691b      	ldr	r3, [r3, #16]
 800548c:	2b00      	cmp	r3, #0
 800548e:	daf3      	bge.n	8005478 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005490:	2300      	movs	r3, #0
 8005492:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	691b      	ldr	r3, [r3, #16]
 8005498:	f043 0201 	orr.w	r2, r3, #1
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	3301      	adds	r3, #1
 80054a4:	60fb      	str	r3, [r7, #12]
 80054a6:	4a09      	ldr	r2, [pc, #36]	; (80054cc <USB_CoreReset+0x60>)
 80054a8:	4293      	cmp	r3, r2
 80054aa:	d901      	bls.n	80054b0 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 80054ac:	2303      	movs	r3, #3
 80054ae:	e006      	b.n	80054be <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	691b      	ldr	r3, [r3, #16]
 80054b4:	f003 0301 	and.w	r3, r3, #1
 80054b8:	2b01      	cmp	r3, #1
 80054ba:	d0f1      	beq.n	80054a0 <USB_CoreReset+0x34>

  return HAL_OK;
 80054bc:	2300      	movs	r3, #0
}
 80054be:	4618      	mov	r0, r3
 80054c0:	3714      	adds	r7, #20
 80054c2:	46bd      	mov	sp, r7
 80054c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c8:	4770      	bx	lr
 80054ca:	bf00      	nop
 80054cc:	00030d40 	.word	0x00030d40

080054d0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80054d0:	b580      	push	{r7, lr}
 80054d2:	b084      	sub	sp, #16
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
 80054d8:	460b      	mov	r3, r1
 80054da:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80054dc:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80054e0:	f002 f952 	bl	8007788 <USBD_static_malloc>
 80054e4:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d105      	bne.n	80054f8 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2200      	movs	r2, #0
 80054f0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 80054f4:	2302      	movs	r3, #2
 80054f6:	e066      	b.n	80055c6 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	68fa      	ldr	r2, [r7, #12]
 80054fc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	7c1b      	ldrb	r3, [r3, #16]
 8005504:	2b00      	cmp	r3, #0
 8005506:	d119      	bne.n	800553c <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005508:	f44f 7300 	mov.w	r3, #512	; 0x200
 800550c:	2202      	movs	r2, #2
 800550e:	2181      	movs	r1, #129	; 0x81
 8005510:	6878      	ldr	r0, [r7, #4]
 8005512:	f002 f816 	bl	8007542 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	2201      	movs	r2, #1
 800551a:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800551c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005520:	2202      	movs	r2, #2
 8005522:	2101      	movs	r1, #1
 8005524:	6878      	ldr	r0, [r7, #4]
 8005526:	f002 f80c 	bl	8007542 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	2201      	movs	r2, #1
 800552e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	2210      	movs	r2, #16
 8005536:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800553a:	e016      	b.n	800556a <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800553c:	2340      	movs	r3, #64	; 0x40
 800553e:	2202      	movs	r2, #2
 8005540:	2181      	movs	r1, #129	; 0x81
 8005542:	6878      	ldr	r0, [r7, #4]
 8005544:	f001 fffd 	bl	8007542 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2201      	movs	r2, #1
 800554c:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800554e:	2340      	movs	r3, #64	; 0x40
 8005550:	2202      	movs	r2, #2
 8005552:	2101      	movs	r1, #1
 8005554:	6878      	ldr	r0, [r7, #4]
 8005556:	f001 fff4 	bl	8007542 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	2201      	movs	r2, #1
 800555e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	2210      	movs	r2, #16
 8005566:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800556a:	2308      	movs	r3, #8
 800556c:	2203      	movs	r2, #3
 800556e:	2182      	movs	r1, #130	; 0x82
 8005570:	6878      	ldr	r0, [r7, #4]
 8005572:	f001 ffe6 	bl	8007542 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	2201      	movs	r2, #1
 800557a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	2200      	movs	r2, #0
 800558c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	2200      	movs	r2, #0
 8005594:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	7c1b      	ldrb	r3, [r3, #16]
 800559c:	2b00      	cmp	r3, #0
 800559e:	d109      	bne.n	80055b4 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80055a6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80055aa:	2101      	movs	r1, #1
 80055ac:	6878      	ldr	r0, [r7, #4]
 80055ae:	f002 f8b7 	bl	8007720 <USBD_LL_PrepareReceive>
 80055b2:	e007      	b.n	80055c4 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80055ba:	2340      	movs	r3, #64	; 0x40
 80055bc:	2101      	movs	r1, #1
 80055be:	6878      	ldr	r0, [r7, #4]
 80055c0:	f002 f8ae 	bl	8007720 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80055c4:	2300      	movs	r3, #0
}
 80055c6:	4618      	mov	r0, r3
 80055c8:	3710      	adds	r7, #16
 80055ca:	46bd      	mov	sp, r7
 80055cc:	bd80      	pop	{r7, pc}

080055ce <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80055ce:	b580      	push	{r7, lr}
 80055d0:	b082      	sub	sp, #8
 80055d2:	af00      	add	r7, sp, #0
 80055d4:	6078      	str	r0, [r7, #4]
 80055d6:	460b      	mov	r3, r1
 80055d8:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80055da:	2181      	movs	r1, #129	; 0x81
 80055dc:	6878      	ldr	r0, [r7, #4]
 80055de:	f001 ffd6 	bl	800758e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	2200      	movs	r2, #0
 80055e6:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80055e8:	2101      	movs	r1, #1
 80055ea:	6878      	ldr	r0, [r7, #4]
 80055ec:	f001 ffcf 	bl	800758e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2200      	movs	r2, #0
 80055f4:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80055f8:	2182      	movs	r1, #130	; 0x82
 80055fa:	6878      	ldr	r0, [r7, #4]
 80055fc:	f001 ffc7 	bl	800758e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2200      	movs	r2, #0
 8005604:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2200      	movs	r2, #0
 800560c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005616:	2b00      	cmp	r3, #0
 8005618:	d00e      	beq.n	8005638 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005620:	685b      	ldr	r3, [r3, #4]
 8005622:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800562a:	4618      	mov	r0, r3
 800562c:	f002 f8ba 	bl	80077a4 <USBD_static_free>
    pdev->pClassData = NULL;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2200      	movs	r2, #0
 8005634:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8005638:	2300      	movs	r3, #0
}
 800563a:	4618      	mov	r0, r3
 800563c:	3708      	adds	r7, #8
 800563e:	46bd      	mov	sp, r7
 8005640:	bd80      	pop	{r7, pc}
	...

08005644 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8005644:	b580      	push	{r7, lr}
 8005646:	b086      	sub	sp, #24
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
 800564c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005654:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8005656:	2300      	movs	r3, #0
 8005658:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800565a:	2300      	movs	r3, #0
 800565c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800565e:	2300      	movs	r3, #0
 8005660:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8005662:	693b      	ldr	r3, [r7, #16]
 8005664:	2b00      	cmp	r3, #0
 8005666:	d101      	bne.n	800566c <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8005668:	2303      	movs	r3, #3
 800566a:	e0af      	b.n	80057cc <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	781b      	ldrb	r3, [r3, #0]
 8005670:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005674:	2b00      	cmp	r3, #0
 8005676:	d03f      	beq.n	80056f8 <USBD_CDC_Setup+0xb4>
 8005678:	2b20      	cmp	r3, #32
 800567a:	f040 809f 	bne.w	80057bc <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800567e:	683b      	ldr	r3, [r7, #0]
 8005680:	88db      	ldrh	r3, [r3, #6]
 8005682:	2b00      	cmp	r3, #0
 8005684:	d02e      	beq.n	80056e4 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8005686:	683b      	ldr	r3, [r7, #0]
 8005688:	781b      	ldrb	r3, [r3, #0]
 800568a:	b25b      	sxtb	r3, r3
 800568c:	2b00      	cmp	r3, #0
 800568e:	da16      	bge.n	80056be <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005696:	689b      	ldr	r3, [r3, #8]
 8005698:	683a      	ldr	r2, [r7, #0]
 800569a:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800569c:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800569e:	683a      	ldr	r2, [r7, #0]
 80056a0:	88d2      	ldrh	r2, [r2, #6]
 80056a2:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	88db      	ldrh	r3, [r3, #6]
 80056a8:	2b07      	cmp	r3, #7
 80056aa:	bf28      	it	cs
 80056ac:	2307      	movcs	r3, #7
 80056ae:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80056b0:	693b      	ldr	r3, [r7, #16]
 80056b2:	89fa      	ldrh	r2, [r7, #14]
 80056b4:	4619      	mov	r1, r3
 80056b6:	6878      	ldr	r0, [r7, #4]
 80056b8:	f001 fb19 	bl	8006cee <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 80056bc:	e085      	b.n	80057ca <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 80056be:	683b      	ldr	r3, [r7, #0]
 80056c0:	785a      	ldrb	r2, [r3, #1]
 80056c2:	693b      	ldr	r3, [r7, #16]
 80056c4:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	88db      	ldrh	r3, [r3, #6]
 80056cc:	b2da      	uxtb	r2, r3
 80056ce:	693b      	ldr	r3, [r7, #16]
 80056d0:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 80056d4:	6939      	ldr	r1, [r7, #16]
 80056d6:	683b      	ldr	r3, [r7, #0]
 80056d8:	88db      	ldrh	r3, [r3, #6]
 80056da:	461a      	mov	r2, r3
 80056dc:	6878      	ldr	r0, [r7, #4]
 80056de:	f001 fb32 	bl	8006d46 <USBD_CtlPrepareRx>
      break;
 80056e2:	e072      	b.n	80057ca <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80056ea:	689b      	ldr	r3, [r3, #8]
 80056ec:	683a      	ldr	r2, [r7, #0]
 80056ee:	7850      	ldrb	r0, [r2, #1]
 80056f0:	2200      	movs	r2, #0
 80056f2:	6839      	ldr	r1, [r7, #0]
 80056f4:	4798      	blx	r3
      break;
 80056f6:	e068      	b.n	80057ca <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	785b      	ldrb	r3, [r3, #1]
 80056fc:	2b0b      	cmp	r3, #11
 80056fe:	d852      	bhi.n	80057a6 <USBD_CDC_Setup+0x162>
 8005700:	a201      	add	r2, pc, #4	; (adr r2, 8005708 <USBD_CDC_Setup+0xc4>)
 8005702:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005706:	bf00      	nop
 8005708:	08005739 	.word	0x08005739
 800570c:	080057b5 	.word	0x080057b5
 8005710:	080057a7 	.word	0x080057a7
 8005714:	080057a7 	.word	0x080057a7
 8005718:	080057a7 	.word	0x080057a7
 800571c:	080057a7 	.word	0x080057a7
 8005720:	080057a7 	.word	0x080057a7
 8005724:	080057a7 	.word	0x080057a7
 8005728:	080057a7 	.word	0x080057a7
 800572c:	080057a7 	.word	0x080057a7
 8005730:	08005763 	.word	0x08005763
 8005734:	0800578d 	.word	0x0800578d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800573e:	b2db      	uxtb	r3, r3
 8005740:	2b03      	cmp	r3, #3
 8005742:	d107      	bne.n	8005754 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005744:	f107 030a 	add.w	r3, r7, #10
 8005748:	2202      	movs	r2, #2
 800574a:	4619      	mov	r1, r3
 800574c:	6878      	ldr	r0, [r7, #4]
 800574e:	f001 face 	bl	8006cee <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005752:	e032      	b.n	80057ba <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8005754:	6839      	ldr	r1, [r7, #0]
 8005756:	6878      	ldr	r0, [r7, #4]
 8005758:	f001 fa58 	bl	8006c0c <USBD_CtlError>
            ret = USBD_FAIL;
 800575c:	2303      	movs	r3, #3
 800575e:	75fb      	strb	r3, [r7, #23]
          break;
 8005760:	e02b      	b.n	80057ba <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005768:	b2db      	uxtb	r3, r3
 800576a:	2b03      	cmp	r3, #3
 800576c:	d107      	bne.n	800577e <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800576e:	f107 030d 	add.w	r3, r7, #13
 8005772:	2201      	movs	r2, #1
 8005774:	4619      	mov	r1, r3
 8005776:	6878      	ldr	r0, [r7, #4]
 8005778:	f001 fab9 	bl	8006cee <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800577c:	e01d      	b.n	80057ba <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800577e:	6839      	ldr	r1, [r7, #0]
 8005780:	6878      	ldr	r0, [r7, #4]
 8005782:	f001 fa43 	bl	8006c0c <USBD_CtlError>
            ret = USBD_FAIL;
 8005786:	2303      	movs	r3, #3
 8005788:	75fb      	strb	r3, [r7, #23]
          break;
 800578a:	e016      	b.n	80057ba <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005792:	b2db      	uxtb	r3, r3
 8005794:	2b03      	cmp	r3, #3
 8005796:	d00f      	beq.n	80057b8 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8005798:	6839      	ldr	r1, [r7, #0]
 800579a:	6878      	ldr	r0, [r7, #4]
 800579c:	f001 fa36 	bl	8006c0c <USBD_CtlError>
            ret = USBD_FAIL;
 80057a0:	2303      	movs	r3, #3
 80057a2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80057a4:	e008      	b.n	80057b8 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80057a6:	6839      	ldr	r1, [r7, #0]
 80057a8:	6878      	ldr	r0, [r7, #4]
 80057aa:	f001 fa2f 	bl	8006c0c <USBD_CtlError>
          ret = USBD_FAIL;
 80057ae:	2303      	movs	r3, #3
 80057b0:	75fb      	strb	r3, [r7, #23]
          break;
 80057b2:	e002      	b.n	80057ba <USBD_CDC_Setup+0x176>
          break;
 80057b4:	bf00      	nop
 80057b6:	e008      	b.n	80057ca <USBD_CDC_Setup+0x186>
          break;
 80057b8:	bf00      	nop
      }
      break;
 80057ba:	e006      	b.n	80057ca <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 80057bc:	6839      	ldr	r1, [r7, #0]
 80057be:	6878      	ldr	r0, [r7, #4]
 80057c0:	f001 fa24 	bl	8006c0c <USBD_CtlError>
      ret = USBD_FAIL;
 80057c4:	2303      	movs	r3, #3
 80057c6:	75fb      	strb	r3, [r7, #23]
      break;
 80057c8:	bf00      	nop
  }

  return (uint8_t)ret;
 80057ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80057cc:	4618      	mov	r0, r3
 80057ce:	3718      	adds	r7, #24
 80057d0:	46bd      	mov	sp, r7
 80057d2:	bd80      	pop	{r7, pc}

080057d4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80057d4:	b580      	push	{r7, lr}
 80057d6:	b084      	sub	sp, #16
 80057d8:	af00      	add	r7, sp, #0
 80057da:	6078      	str	r0, [r7, #4]
 80057dc:	460b      	mov	r3, r1
 80057de:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80057e6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d101      	bne.n	80057f6 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80057f2:	2303      	movs	r3, #3
 80057f4:	e04f      	b.n	8005896 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80057fc:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80057fe:	78fa      	ldrb	r2, [r7, #3]
 8005800:	6879      	ldr	r1, [r7, #4]
 8005802:	4613      	mov	r3, r2
 8005804:	009b      	lsls	r3, r3, #2
 8005806:	4413      	add	r3, r2
 8005808:	009b      	lsls	r3, r3, #2
 800580a:	440b      	add	r3, r1
 800580c:	3318      	adds	r3, #24
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	2b00      	cmp	r3, #0
 8005812:	d029      	beq.n	8005868 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8005814:	78fa      	ldrb	r2, [r7, #3]
 8005816:	6879      	ldr	r1, [r7, #4]
 8005818:	4613      	mov	r3, r2
 800581a:	009b      	lsls	r3, r3, #2
 800581c:	4413      	add	r3, r2
 800581e:	009b      	lsls	r3, r3, #2
 8005820:	440b      	add	r3, r1
 8005822:	3318      	adds	r3, #24
 8005824:	681a      	ldr	r2, [r3, #0]
 8005826:	78f9      	ldrb	r1, [r7, #3]
 8005828:	68f8      	ldr	r0, [r7, #12]
 800582a:	460b      	mov	r3, r1
 800582c:	00db      	lsls	r3, r3, #3
 800582e:	1a5b      	subs	r3, r3, r1
 8005830:	009b      	lsls	r3, r3, #2
 8005832:	4403      	add	r3, r0
 8005834:	3344      	adds	r3, #68	; 0x44
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	fbb2 f1f3 	udiv	r1, r2, r3
 800583c:	fb03 f301 	mul.w	r3, r3, r1
 8005840:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8005842:	2b00      	cmp	r3, #0
 8005844:	d110      	bne.n	8005868 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8005846:	78fa      	ldrb	r2, [r7, #3]
 8005848:	6879      	ldr	r1, [r7, #4]
 800584a:	4613      	mov	r3, r2
 800584c:	009b      	lsls	r3, r3, #2
 800584e:	4413      	add	r3, r2
 8005850:	009b      	lsls	r3, r3, #2
 8005852:	440b      	add	r3, r1
 8005854:	3318      	adds	r3, #24
 8005856:	2200      	movs	r2, #0
 8005858:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800585a:	78f9      	ldrb	r1, [r7, #3]
 800585c:	2300      	movs	r3, #0
 800585e:	2200      	movs	r2, #0
 8005860:	6878      	ldr	r0, [r7, #4]
 8005862:	f001 ff3c 	bl	80076de <USBD_LL_Transmit>
 8005866:	e015      	b.n	8005894 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8005868:	68bb      	ldr	r3, [r7, #8]
 800586a:	2200      	movs	r2, #0
 800586c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005876:	691b      	ldr	r3, [r3, #16]
 8005878:	2b00      	cmp	r3, #0
 800587a:	d00b      	beq.n	8005894 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005882:	691b      	ldr	r3, [r3, #16]
 8005884:	68ba      	ldr	r2, [r7, #8]
 8005886:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800588a:	68ba      	ldr	r2, [r7, #8]
 800588c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8005890:	78fa      	ldrb	r2, [r7, #3]
 8005892:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8005894:	2300      	movs	r3, #0
}
 8005896:	4618      	mov	r0, r3
 8005898:	3710      	adds	r7, #16
 800589a:	46bd      	mov	sp, r7
 800589c:	bd80      	pop	{r7, pc}

0800589e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800589e:	b580      	push	{r7, lr}
 80058a0:	b084      	sub	sp, #16
 80058a2:	af00      	add	r7, sp, #0
 80058a4:	6078      	str	r0, [r7, #4]
 80058a6:	460b      	mov	r3, r1
 80058a8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80058b0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d101      	bne.n	80058c0 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80058bc:	2303      	movs	r3, #3
 80058be:	e015      	b.n	80058ec <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80058c0:	78fb      	ldrb	r3, [r7, #3]
 80058c2:	4619      	mov	r1, r3
 80058c4:	6878      	ldr	r0, [r7, #4]
 80058c6:	f001 ff4c 	bl	8007762 <USBD_LL_GetRxDataSize>
 80058ca:	4602      	mov	r2, r0
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80058d8:	68db      	ldr	r3, [r3, #12]
 80058da:	68fa      	ldr	r2, [r7, #12]
 80058dc:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80058e0:	68fa      	ldr	r2, [r7, #12]
 80058e2:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80058e6:	4611      	mov	r1, r2
 80058e8:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80058ea:	2300      	movs	r3, #0
}
 80058ec:	4618      	mov	r0, r3
 80058ee:	3710      	adds	r7, #16
 80058f0:	46bd      	mov	sp, r7
 80058f2:	bd80      	pop	{r7, pc}

080058f4 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80058f4:	b580      	push	{r7, lr}
 80058f6:	b084      	sub	sp, #16
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005902:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	2b00      	cmp	r3, #0
 8005908:	d101      	bne.n	800590e <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800590a:	2303      	movs	r3, #3
 800590c:	e01b      	b.n	8005946 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005914:	2b00      	cmp	r3, #0
 8005916:	d015      	beq.n	8005944 <USBD_CDC_EP0_RxReady+0x50>
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800591e:	2bff      	cmp	r3, #255	; 0xff
 8005920:	d010      	beq.n	8005944 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005928:	689b      	ldr	r3, [r3, #8]
 800592a:	68fa      	ldr	r2, [r7, #12]
 800592c:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8005930:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8005932:	68fa      	ldr	r2, [r7, #12]
 8005934:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005938:	b292      	uxth	r2, r2
 800593a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	22ff      	movs	r2, #255	; 0xff
 8005940:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8005944:	2300      	movs	r3, #0
}
 8005946:	4618      	mov	r0, r3
 8005948:	3710      	adds	r7, #16
 800594a:	46bd      	mov	sp, r7
 800594c:	bd80      	pop	{r7, pc}
	...

08005950 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005950:	b480      	push	{r7}
 8005952:	b083      	sub	sp, #12
 8005954:	af00      	add	r7, sp, #0
 8005956:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2243      	movs	r2, #67	; 0x43
 800595c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800595e:	4b03      	ldr	r3, [pc, #12]	; (800596c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8005960:	4618      	mov	r0, r3
 8005962:	370c      	adds	r7, #12
 8005964:	46bd      	mov	sp, r7
 8005966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596a:	4770      	bx	lr
 800596c:	20000094 	.word	0x20000094

08005970 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005970:	b480      	push	{r7}
 8005972:	b083      	sub	sp, #12
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2243      	movs	r2, #67	; 0x43
 800597c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800597e:	4b03      	ldr	r3, [pc, #12]	; (800598c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8005980:	4618      	mov	r0, r3
 8005982:	370c      	adds	r7, #12
 8005984:	46bd      	mov	sp, r7
 8005986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598a:	4770      	bx	lr
 800598c:	20000050 	.word	0x20000050

08005990 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005990:	b480      	push	{r7}
 8005992:	b083      	sub	sp, #12
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2243      	movs	r2, #67	; 0x43
 800599c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800599e:	4b03      	ldr	r3, [pc, #12]	; (80059ac <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80059a0:	4618      	mov	r0, r3
 80059a2:	370c      	adds	r7, #12
 80059a4:	46bd      	mov	sp, r7
 80059a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059aa:	4770      	bx	lr
 80059ac:	200000d8 	.word	0x200000d8

080059b0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80059b0:	b480      	push	{r7}
 80059b2:	b083      	sub	sp, #12
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	220a      	movs	r2, #10
 80059bc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80059be:	4b03      	ldr	r3, [pc, #12]	; (80059cc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80059c0:	4618      	mov	r0, r3
 80059c2:	370c      	adds	r7, #12
 80059c4:	46bd      	mov	sp, r7
 80059c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ca:	4770      	bx	lr
 80059cc:	2000000c 	.word	0x2000000c

080059d0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80059d0:	b480      	push	{r7}
 80059d2:	b083      	sub	sp, #12
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
 80059d8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80059da:	683b      	ldr	r3, [r7, #0]
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d101      	bne.n	80059e4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80059e0:	2303      	movs	r3, #3
 80059e2:	e004      	b.n	80059ee <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	683a      	ldr	r2, [r7, #0]
 80059e8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 80059ec:	2300      	movs	r3, #0
}
 80059ee:	4618      	mov	r0, r3
 80059f0:	370c      	adds	r7, #12
 80059f2:	46bd      	mov	sp, r7
 80059f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f8:	4770      	bx	lr

080059fa <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80059fa:	b480      	push	{r7}
 80059fc:	b087      	sub	sp, #28
 80059fe:	af00      	add	r7, sp, #0
 8005a00:	60f8      	str	r0, [r7, #12]
 8005a02:	60b9      	str	r1, [r7, #8]
 8005a04:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005a0c:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8005a0e:	697b      	ldr	r3, [r7, #20]
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d101      	bne.n	8005a18 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8005a14:	2303      	movs	r3, #3
 8005a16:	e008      	b.n	8005a2a <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8005a18:	697b      	ldr	r3, [r7, #20]
 8005a1a:	68ba      	ldr	r2, [r7, #8]
 8005a1c:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8005a20:	697b      	ldr	r3, [r7, #20]
 8005a22:	687a      	ldr	r2, [r7, #4]
 8005a24:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8005a28:	2300      	movs	r3, #0
}
 8005a2a:	4618      	mov	r0, r3
 8005a2c:	371c      	adds	r7, #28
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a34:	4770      	bx	lr

08005a36 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8005a36:	b480      	push	{r7}
 8005a38:	b085      	sub	sp, #20
 8005a3a:	af00      	add	r7, sp, #0
 8005a3c:	6078      	str	r0, [r7, #4]
 8005a3e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005a46:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d101      	bne.n	8005a52 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8005a4e:	2303      	movs	r3, #3
 8005a50:	e004      	b.n	8005a5c <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	683a      	ldr	r2, [r7, #0]
 8005a56:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8005a5a:	2300      	movs	r3, #0
}
 8005a5c:	4618      	mov	r0, r3
 8005a5e:	3714      	adds	r7, #20
 8005a60:	46bd      	mov	sp, r7
 8005a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a66:	4770      	bx	lr

08005a68 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	b084      	sub	sp, #16
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005a76:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8005a78:	2301      	movs	r3, #1
 8005a7a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d101      	bne.n	8005a8a <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005a86:	2303      	movs	r3, #3
 8005a88:	e01a      	b.n	8005ac0 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8005a8a:	68bb      	ldr	r3, [r7, #8]
 8005a8c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d114      	bne.n	8005abe <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8005a94:	68bb      	ldr	r3, [r7, #8]
 8005a96:	2201      	movs	r2, #1
 8005a98:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8005a9c:	68bb      	ldr	r3, [r7, #8]
 8005a9e:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8005aa6:	68bb      	ldr	r3, [r7, #8]
 8005aa8:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8005aac:	68bb      	ldr	r3, [r7, #8]
 8005aae:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8005ab2:	2181      	movs	r1, #129	; 0x81
 8005ab4:	6878      	ldr	r0, [r7, #4]
 8005ab6:	f001 fe12 	bl	80076de <USBD_LL_Transmit>

    ret = USBD_OK;
 8005aba:	2300      	movs	r3, #0
 8005abc:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8005abe:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	3710      	adds	r7, #16
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	bd80      	pop	{r7, pc}

08005ac8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005ac8:	b580      	push	{r7, lr}
 8005aca:	b084      	sub	sp, #16
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005ad6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d101      	bne.n	8005ae6 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8005ae2:	2303      	movs	r3, #3
 8005ae4:	e016      	b.n	8005b14 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	7c1b      	ldrb	r3, [r3, #16]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d109      	bne.n	8005b02 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005af4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005af8:	2101      	movs	r1, #1
 8005afa:	6878      	ldr	r0, [r7, #4]
 8005afc:	f001 fe10 	bl	8007720 <USBD_LL_PrepareReceive>
 8005b00:	e007      	b.n	8005b12 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005b08:	2340      	movs	r3, #64	; 0x40
 8005b0a:	2101      	movs	r1, #1
 8005b0c:	6878      	ldr	r0, [r7, #4]
 8005b0e:	f001 fe07 	bl	8007720 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005b12:	2300      	movs	r3, #0
}
 8005b14:	4618      	mov	r0, r3
 8005b16:	3710      	adds	r7, #16
 8005b18:	46bd      	mov	sp, r7
 8005b1a:	bd80      	pop	{r7, pc}

08005b1c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	b086      	sub	sp, #24
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	60f8      	str	r0, [r7, #12]
 8005b24:	60b9      	str	r1, [r7, #8]
 8005b26:	4613      	mov	r3, r2
 8005b28:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d101      	bne.n	8005b34 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8005b30:	2303      	movs	r3, #3
 8005b32:	e01f      	b.n	8005b74 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	2200      	movs	r2, #0
 8005b38:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	2200      	movs	r2, #0
 8005b40:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	2200      	movs	r2, #0
 8005b48:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005b4c:	68bb      	ldr	r3, [r7, #8]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d003      	beq.n	8005b5a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	68ba      	ldr	r2, [r7, #8]
 8005b56:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	2201      	movs	r2, #1
 8005b5e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	79fa      	ldrb	r2, [r7, #7]
 8005b66:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005b68:	68f8      	ldr	r0, [r7, #12]
 8005b6a:	f001 fc83 	bl	8007474 <USBD_LL_Init>
 8005b6e:	4603      	mov	r3, r0
 8005b70:	75fb      	strb	r3, [r7, #23]

  return ret;
 8005b72:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b74:	4618      	mov	r0, r3
 8005b76:	3718      	adds	r7, #24
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	bd80      	pop	{r7, pc}

08005b7c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005b7c:	b580      	push	{r7, lr}
 8005b7e:	b084      	sub	sp, #16
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]
 8005b84:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005b86:	2300      	movs	r3, #0
 8005b88:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8005b8a:	683b      	ldr	r3, [r7, #0]
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d101      	bne.n	8005b94 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8005b90:	2303      	movs	r3, #3
 8005b92:	e016      	b.n	8005bc2 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	683a      	ldr	r2, [r7, #0]
 8005b98:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ba2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d00b      	beq.n	8005bc0 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005bae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bb0:	f107 020e 	add.w	r2, r7, #14
 8005bb4:	4610      	mov	r0, r2
 8005bb6:	4798      	blx	r3
 8005bb8:	4602      	mov	r2, r0
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8005bc0:	2300      	movs	r3, #0
}
 8005bc2:	4618      	mov	r0, r3
 8005bc4:	3710      	adds	r7, #16
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	bd80      	pop	{r7, pc}

08005bca <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005bca:	b580      	push	{r7, lr}
 8005bcc:	b082      	sub	sp, #8
 8005bce:	af00      	add	r7, sp, #0
 8005bd0:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8005bd2:	6878      	ldr	r0, [r7, #4]
 8005bd4:	f001 fc9a 	bl	800750c <USBD_LL_Start>
 8005bd8:	4603      	mov	r3, r0
}
 8005bda:	4618      	mov	r0, r3
 8005bdc:	3708      	adds	r7, #8
 8005bde:	46bd      	mov	sp, r7
 8005be0:	bd80      	pop	{r7, pc}

08005be2 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8005be2:	b480      	push	{r7}
 8005be4:	b083      	sub	sp, #12
 8005be6:	af00      	add	r7, sp, #0
 8005be8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005bea:	2300      	movs	r3, #0
}
 8005bec:	4618      	mov	r0, r3
 8005bee:	370c      	adds	r7, #12
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf6:	4770      	bx	lr

08005bf8 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005bf8:	b580      	push	{r7, lr}
 8005bfa:	b084      	sub	sp, #16
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	6078      	str	r0, [r7, #4]
 8005c00:	460b      	mov	r3, r1
 8005c02:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8005c04:	2303      	movs	r3, #3
 8005c06:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d009      	beq.n	8005c26 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	78fa      	ldrb	r2, [r7, #3]
 8005c1c:	4611      	mov	r1, r2
 8005c1e:	6878      	ldr	r0, [r7, #4]
 8005c20:	4798      	blx	r3
 8005c22:	4603      	mov	r3, r0
 8005c24:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8005c26:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c28:	4618      	mov	r0, r3
 8005c2a:	3710      	adds	r7, #16
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	bd80      	pop	{r7, pc}

08005c30 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005c30:	b580      	push	{r7, lr}
 8005c32:	b082      	sub	sp, #8
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]
 8005c38:	460b      	mov	r3, r1
 8005c3a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d007      	beq.n	8005c56 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c4c:	685b      	ldr	r3, [r3, #4]
 8005c4e:	78fa      	ldrb	r2, [r7, #3]
 8005c50:	4611      	mov	r1, r2
 8005c52:	6878      	ldr	r0, [r7, #4]
 8005c54:	4798      	blx	r3
  }

  return USBD_OK;
 8005c56:	2300      	movs	r3, #0
}
 8005c58:	4618      	mov	r0, r3
 8005c5a:	3708      	adds	r7, #8
 8005c5c:	46bd      	mov	sp, r7
 8005c5e:	bd80      	pop	{r7, pc}

08005c60 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005c60:	b580      	push	{r7, lr}
 8005c62:	b084      	sub	sp, #16
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	6078      	str	r0, [r7, #4]
 8005c68:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005c70:	6839      	ldr	r1, [r7, #0]
 8005c72:	4618      	mov	r0, r3
 8005c74:	f000 ff90 	bl	8006b98 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2201      	movs	r2, #1
 8005c7c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8005c86:	461a      	mov	r2, r3
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005c94:	f003 031f 	and.w	r3, r3, #31
 8005c98:	2b02      	cmp	r3, #2
 8005c9a:	d01a      	beq.n	8005cd2 <USBD_LL_SetupStage+0x72>
 8005c9c:	2b02      	cmp	r3, #2
 8005c9e:	d822      	bhi.n	8005ce6 <USBD_LL_SetupStage+0x86>
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d002      	beq.n	8005caa <USBD_LL_SetupStage+0x4a>
 8005ca4:	2b01      	cmp	r3, #1
 8005ca6:	d00a      	beq.n	8005cbe <USBD_LL_SetupStage+0x5e>
 8005ca8:	e01d      	b.n	8005ce6 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005cb0:	4619      	mov	r1, r3
 8005cb2:	6878      	ldr	r0, [r7, #4]
 8005cb4:	f000 fa62 	bl	800617c <USBD_StdDevReq>
 8005cb8:	4603      	mov	r3, r0
 8005cba:	73fb      	strb	r3, [r7, #15]
      break;
 8005cbc:	e020      	b.n	8005d00 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005cc4:	4619      	mov	r1, r3
 8005cc6:	6878      	ldr	r0, [r7, #4]
 8005cc8:	f000 fac6 	bl	8006258 <USBD_StdItfReq>
 8005ccc:	4603      	mov	r3, r0
 8005cce:	73fb      	strb	r3, [r7, #15]
      break;
 8005cd0:	e016      	b.n	8005d00 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005cd8:	4619      	mov	r1, r3
 8005cda:	6878      	ldr	r0, [r7, #4]
 8005cdc:	f000 fb05 	bl	80062ea <USBD_StdEPReq>
 8005ce0:	4603      	mov	r3, r0
 8005ce2:	73fb      	strb	r3, [r7, #15]
      break;
 8005ce4:	e00c      	b.n	8005d00 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005cec:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005cf0:	b2db      	uxtb	r3, r3
 8005cf2:	4619      	mov	r1, r3
 8005cf4:	6878      	ldr	r0, [r7, #4]
 8005cf6:	f001 fc69 	bl	80075cc <USBD_LL_StallEP>
 8005cfa:	4603      	mov	r3, r0
 8005cfc:	73fb      	strb	r3, [r7, #15]
      break;
 8005cfe:	bf00      	nop
  }

  return ret;
 8005d00:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d02:	4618      	mov	r0, r3
 8005d04:	3710      	adds	r7, #16
 8005d06:	46bd      	mov	sp, r7
 8005d08:	bd80      	pop	{r7, pc}

08005d0a <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005d0a:	b580      	push	{r7, lr}
 8005d0c:	b086      	sub	sp, #24
 8005d0e:	af00      	add	r7, sp, #0
 8005d10:	60f8      	str	r0, [r7, #12]
 8005d12:	460b      	mov	r3, r1
 8005d14:	607a      	str	r2, [r7, #4]
 8005d16:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8005d18:	7afb      	ldrb	r3, [r7, #11]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d138      	bne.n	8005d90 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8005d24:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005d2c:	2b03      	cmp	r3, #3
 8005d2e:	d14a      	bne.n	8005dc6 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8005d30:	693b      	ldr	r3, [r7, #16]
 8005d32:	689a      	ldr	r2, [r3, #8]
 8005d34:	693b      	ldr	r3, [r7, #16]
 8005d36:	68db      	ldr	r3, [r3, #12]
 8005d38:	429a      	cmp	r2, r3
 8005d3a:	d913      	bls.n	8005d64 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005d3c:	693b      	ldr	r3, [r7, #16]
 8005d3e:	689a      	ldr	r2, [r3, #8]
 8005d40:	693b      	ldr	r3, [r7, #16]
 8005d42:	68db      	ldr	r3, [r3, #12]
 8005d44:	1ad2      	subs	r2, r2, r3
 8005d46:	693b      	ldr	r3, [r7, #16]
 8005d48:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8005d4a:	693b      	ldr	r3, [r7, #16]
 8005d4c:	68da      	ldr	r2, [r3, #12]
 8005d4e:	693b      	ldr	r3, [r7, #16]
 8005d50:	689b      	ldr	r3, [r3, #8]
 8005d52:	4293      	cmp	r3, r2
 8005d54:	bf28      	it	cs
 8005d56:	4613      	movcs	r3, r2
 8005d58:	461a      	mov	r2, r3
 8005d5a:	6879      	ldr	r1, [r7, #4]
 8005d5c:	68f8      	ldr	r0, [r7, #12]
 8005d5e:	f001 f80f 	bl	8006d80 <USBD_CtlContinueRx>
 8005d62:	e030      	b.n	8005dc6 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005d6a:	b2db      	uxtb	r3, r3
 8005d6c:	2b03      	cmp	r3, #3
 8005d6e:	d10b      	bne.n	8005d88 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d76:	691b      	ldr	r3, [r3, #16]
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d005      	beq.n	8005d88 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d82:	691b      	ldr	r3, [r3, #16]
 8005d84:	68f8      	ldr	r0, [r7, #12]
 8005d86:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8005d88:	68f8      	ldr	r0, [r7, #12]
 8005d8a:	f001 f80a 	bl	8006da2 <USBD_CtlSendStatus>
 8005d8e:	e01a      	b.n	8005dc6 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005d96:	b2db      	uxtb	r3, r3
 8005d98:	2b03      	cmp	r3, #3
 8005d9a:	d114      	bne.n	8005dc6 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005da2:	699b      	ldr	r3, [r3, #24]
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d00e      	beq.n	8005dc6 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005dae:	699b      	ldr	r3, [r3, #24]
 8005db0:	7afa      	ldrb	r2, [r7, #11]
 8005db2:	4611      	mov	r1, r2
 8005db4:	68f8      	ldr	r0, [r7, #12]
 8005db6:	4798      	blx	r3
 8005db8:	4603      	mov	r3, r0
 8005dba:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8005dbc:	7dfb      	ldrb	r3, [r7, #23]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d001      	beq.n	8005dc6 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8005dc2:	7dfb      	ldrb	r3, [r7, #23]
 8005dc4:	e000      	b.n	8005dc8 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8005dc6:	2300      	movs	r3, #0
}
 8005dc8:	4618      	mov	r0, r3
 8005dca:	3718      	adds	r7, #24
 8005dcc:	46bd      	mov	sp, r7
 8005dce:	bd80      	pop	{r7, pc}

08005dd0 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	b086      	sub	sp, #24
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	60f8      	str	r0, [r7, #12]
 8005dd8:	460b      	mov	r3, r1
 8005dda:	607a      	str	r2, [r7, #4]
 8005ddc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8005dde:	7afb      	ldrb	r3, [r7, #11]
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d16b      	bne.n	8005ebc <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	3314      	adds	r3, #20
 8005de8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005df0:	2b02      	cmp	r3, #2
 8005df2:	d156      	bne.n	8005ea2 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8005df4:	693b      	ldr	r3, [r7, #16]
 8005df6:	689a      	ldr	r2, [r3, #8]
 8005df8:	693b      	ldr	r3, [r7, #16]
 8005dfa:	68db      	ldr	r3, [r3, #12]
 8005dfc:	429a      	cmp	r2, r3
 8005dfe:	d914      	bls.n	8005e2a <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005e00:	693b      	ldr	r3, [r7, #16]
 8005e02:	689a      	ldr	r2, [r3, #8]
 8005e04:	693b      	ldr	r3, [r7, #16]
 8005e06:	68db      	ldr	r3, [r3, #12]
 8005e08:	1ad2      	subs	r2, r2, r3
 8005e0a:	693b      	ldr	r3, [r7, #16]
 8005e0c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8005e0e:	693b      	ldr	r3, [r7, #16]
 8005e10:	689b      	ldr	r3, [r3, #8]
 8005e12:	461a      	mov	r2, r3
 8005e14:	6879      	ldr	r1, [r7, #4]
 8005e16:	68f8      	ldr	r0, [r7, #12]
 8005e18:	f000 ff84 	bl	8006d24 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005e1c:	2300      	movs	r3, #0
 8005e1e:	2200      	movs	r2, #0
 8005e20:	2100      	movs	r1, #0
 8005e22:	68f8      	ldr	r0, [r7, #12]
 8005e24:	f001 fc7c 	bl	8007720 <USBD_LL_PrepareReceive>
 8005e28:	e03b      	b.n	8005ea2 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8005e2a:	693b      	ldr	r3, [r7, #16]
 8005e2c:	68da      	ldr	r2, [r3, #12]
 8005e2e:	693b      	ldr	r3, [r7, #16]
 8005e30:	689b      	ldr	r3, [r3, #8]
 8005e32:	429a      	cmp	r2, r3
 8005e34:	d11c      	bne.n	8005e70 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8005e36:	693b      	ldr	r3, [r7, #16]
 8005e38:	685a      	ldr	r2, [r3, #4]
 8005e3a:	693b      	ldr	r3, [r7, #16]
 8005e3c:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8005e3e:	429a      	cmp	r2, r3
 8005e40:	d316      	bcc.n	8005e70 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8005e42:	693b      	ldr	r3, [r7, #16]
 8005e44:	685a      	ldr	r2, [r3, #4]
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005e4c:	429a      	cmp	r2, r3
 8005e4e:	d20f      	bcs.n	8005e70 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005e50:	2200      	movs	r2, #0
 8005e52:	2100      	movs	r1, #0
 8005e54:	68f8      	ldr	r0, [r7, #12]
 8005e56:	f000 ff65 	bl	8006d24 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	2200      	movs	r2, #0
 8005e5e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005e62:	2300      	movs	r3, #0
 8005e64:	2200      	movs	r2, #0
 8005e66:	2100      	movs	r1, #0
 8005e68:	68f8      	ldr	r0, [r7, #12]
 8005e6a:	f001 fc59 	bl	8007720 <USBD_LL_PrepareReceive>
 8005e6e:	e018      	b.n	8005ea2 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e76:	b2db      	uxtb	r3, r3
 8005e78:	2b03      	cmp	r3, #3
 8005e7a:	d10b      	bne.n	8005e94 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e82:	68db      	ldr	r3, [r3, #12]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d005      	beq.n	8005e94 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e8e:	68db      	ldr	r3, [r3, #12]
 8005e90:	68f8      	ldr	r0, [r7, #12]
 8005e92:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005e94:	2180      	movs	r1, #128	; 0x80
 8005e96:	68f8      	ldr	r0, [r7, #12]
 8005e98:	f001 fb98 	bl	80075cc <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8005e9c:	68f8      	ldr	r0, [r7, #12]
 8005e9e:	f000 ff93 	bl	8006dc8 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8005ea8:	2b01      	cmp	r3, #1
 8005eaa:	d122      	bne.n	8005ef2 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8005eac:	68f8      	ldr	r0, [r7, #12]
 8005eae:	f7ff fe98 	bl	8005be2 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	2200      	movs	r2, #0
 8005eb6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8005eba:	e01a      	b.n	8005ef2 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005ec2:	b2db      	uxtb	r3, r3
 8005ec4:	2b03      	cmp	r3, #3
 8005ec6:	d114      	bne.n	8005ef2 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ece:	695b      	ldr	r3, [r3, #20]
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d00e      	beq.n	8005ef2 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005eda:	695b      	ldr	r3, [r3, #20]
 8005edc:	7afa      	ldrb	r2, [r7, #11]
 8005ede:	4611      	mov	r1, r2
 8005ee0:	68f8      	ldr	r0, [r7, #12]
 8005ee2:	4798      	blx	r3
 8005ee4:	4603      	mov	r3, r0
 8005ee6:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8005ee8:	7dfb      	ldrb	r3, [r7, #23]
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d001      	beq.n	8005ef2 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8005eee:	7dfb      	ldrb	r3, [r7, #23]
 8005ef0:	e000      	b.n	8005ef4 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8005ef2:	2300      	movs	r3, #0
}
 8005ef4:	4618      	mov	r0, r3
 8005ef6:	3718      	adds	r7, #24
 8005ef8:	46bd      	mov	sp, r7
 8005efa:	bd80      	pop	{r7, pc}

08005efc <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005efc:	b580      	push	{r7, lr}
 8005efe:	b082      	sub	sp, #8
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2201      	movs	r2, #1
 8005f08:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	2200      	movs	r2, #0
 8005f10:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	2200      	movs	r2, #0
 8005f18:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	2200      	movs	r2, #0
 8005f1e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d101      	bne.n	8005f30 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8005f2c:	2303      	movs	r3, #3
 8005f2e:	e02f      	b.n	8005f90 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d00f      	beq.n	8005f5a <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f40:	685b      	ldr	r3, [r3, #4]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d009      	beq.n	8005f5a <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f4c:	685b      	ldr	r3, [r3, #4]
 8005f4e:	687a      	ldr	r2, [r7, #4]
 8005f50:	6852      	ldr	r2, [r2, #4]
 8005f52:	b2d2      	uxtb	r2, r2
 8005f54:	4611      	mov	r1, r2
 8005f56:	6878      	ldr	r0, [r7, #4]
 8005f58:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005f5a:	2340      	movs	r3, #64	; 0x40
 8005f5c:	2200      	movs	r2, #0
 8005f5e:	2100      	movs	r1, #0
 8005f60:	6878      	ldr	r0, [r7, #4]
 8005f62:	f001 faee 	bl	8007542 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	2201      	movs	r2, #1
 8005f6a:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	2240      	movs	r2, #64	; 0x40
 8005f72:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005f76:	2340      	movs	r3, #64	; 0x40
 8005f78:	2200      	movs	r2, #0
 8005f7a:	2180      	movs	r1, #128	; 0x80
 8005f7c:	6878      	ldr	r0, [r7, #4]
 8005f7e:	f001 fae0 	bl	8007542 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	2201      	movs	r2, #1
 8005f86:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	2240      	movs	r2, #64	; 0x40
 8005f8c:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8005f8e:	2300      	movs	r3, #0
}
 8005f90:	4618      	mov	r0, r3
 8005f92:	3708      	adds	r7, #8
 8005f94:	46bd      	mov	sp, r7
 8005f96:	bd80      	pop	{r7, pc}

08005f98 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8005f98:	b480      	push	{r7}
 8005f9a:	b083      	sub	sp, #12
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	6078      	str	r0, [r7, #4]
 8005fa0:	460b      	mov	r3, r1
 8005fa2:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	78fa      	ldrb	r2, [r7, #3]
 8005fa8:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005faa:	2300      	movs	r3, #0
}
 8005fac:	4618      	mov	r0, r3
 8005fae:	370c      	adds	r7, #12
 8005fb0:	46bd      	mov	sp, r7
 8005fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb6:	4770      	bx	lr

08005fb8 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8005fb8:	b480      	push	{r7}
 8005fba:	b083      	sub	sp, #12
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005fc6:	b2da      	uxtb	r2, r3
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	2204      	movs	r2, #4
 8005fd2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8005fd6:	2300      	movs	r3, #0
}
 8005fd8:	4618      	mov	r0, r3
 8005fda:	370c      	adds	r7, #12
 8005fdc:	46bd      	mov	sp, r7
 8005fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe2:	4770      	bx	lr

08005fe4 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005fe4:	b480      	push	{r7}
 8005fe6:	b083      	sub	sp, #12
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005ff2:	b2db      	uxtb	r3, r3
 8005ff4:	2b04      	cmp	r3, #4
 8005ff6:	d106      	bne.n	8006006 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8005ffe:	b2da      	uxtb	r2, r3
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006006:	2300      	movs	r3, #0
}
 8006008:	4618      	mov	r0, r3
 800600a:	370c      	adds	r7, #12
 800600c:	46bd      	mov	sp, r7
 800600e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006012:	4770      	bx	lr

08006014 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006014:	b580      	push	{r7, lr}
 8006016:	b082      	sub	sp, #8
 8006018:	af00      	add	r7, sp, #0
 800601a:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006022:	2b00      	cmp	r3, #0
 8006024:	d101      	bne.n	800602a <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8006026:	2303      	movs	r3, #3
 8006028:	e012      	b.n	8006050 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006030:	b2db      	uxtb	r3, r3
 8006032:	2b03      	cmp	r3, #3
 8006034:	d10b      	bne.n	800604e <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800603c:	69db      	ldr	r3, [r3, #28]
 800603e:	2b00      	cmp	r3, #0
 8006040:	d005      	beq.n	800604e <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006048:	69db      	ldr	r3, [r3, #28]
 800604a:	6878      	ldr	r0, [r7, #4]
 800604c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800604e:	2300      	movs	r3, #0
}
 8006050:	4618      	mov	r0, r3
 8006052:	3708      	adds	r7, #8
 8006054:	46bd      	mov	sp, r7
 8006056:	bd80      	pop	{r7, pc}

08006058 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006058:	b580      	push	{r7, lr}
 800605a:	b082      	sub	sp, #8
 800605c:	af00      	add	r7, sp, #0
 800605e:	6078      	str	r0, [r7, #4]
 8006060:	460b      	mov	r3, r1
 8006062:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800606a:	2b00      	cmp	r3, #0
 800606c:	d101      	bne.n	8006072 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 800606e:	2303      	movs	r3, #3
 8006070:	e014      	b.n	800609c <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006078:	b2db      	uxtb	r3, r3
 800607a:	2b03      	cmp	r3, #3
 800607c:	d10d      	bne.n	800609a <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006084:	6a1b      	ldr	r3, [r3, #32]
 8006086:	2b00      	cmp	r3, #0
 8006088:	d007      	beq.n	800609a <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006090:	6a1b      	ldr	r3, [r3, #32]
 8006092:	78fa      	ldrb	r2, [r7, #3]
 8006094:	4611      	mov	r1, r2
 8006096:	6878      	ldr	r0, [r7, #4]
 8006098:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800609a:	2300      	movs	r3, #0
}
 800609c:	4618      	mov	r0, r3
 800609e:	3708      	adds	r7, #8
 80060a0:	46bd      	mov	sp, r7
 80060a2:	bd80      	pop	{r7, pc}

080060a4 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80060a4:	b580      	push	{r7, lr}
 80060a6:	b082      	sub	sp, #8
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	6078      	str	r0, [r7, #4]
 80060ac:	460b      	mov	r3, r1
 80060ae:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d101      	bne.n	80060be <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 80060ba:	2303      	movs	r3, #3
 80060bc:	e014      	b.n	80060e8 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80060c4:	b2db      	uxtb	r3, r3
 80060c6:	2b03      	cmp	r3, #3
 80060c8:	d10d      	bne.n	80060e6 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80060d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d007      	beq.n	80060e6 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80060dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060de:	78fa      	ldrb	r2, [r7, #3]
 80060e0:	4611      	mov	r1, r2
 80060e2:	6878      	ldr	r0, [r7, #4]
 80060e4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80060e6:	2300      	movs	r3, #0
}
 80060e8:	4618      	mov	r0, r3
 80060ea:	3708      	adds	r7, #8
 80060ec:	46bd      	mov	sp, r7
 80060ee:	bd80      	pop	{r7, pc}

080060f0 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80060f0:	b480      	push	{r7}
 80060f2:	b083      	sub	sp, #12
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80060f8:	2300      	movs	r3, #0
}
 80060fa:	4618      	mov	r0, r3
 80060fc:	370c      	adds	r7, #12
 80060fe:	46bd      	mov	sp, r7
 8006100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006104:	4770      	bx	lr

08006106 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006106:	b580      	push	{r7, lr}
 8006108:	b082      	sub	sp, #8
 800610a:	af00      	add	r7, sp, #0
 800610c:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	2201      	movs	r2, #1
 8006112:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800611c:	2b00      	cmp	r3, #0
 800611e:	d009      	beq.n	8006134 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006126:	685b      	ldr	r3, [r3, #4]
 8006128:	687a      	ldr	r2, [r7, #4]
 800612a:	6852      	ldr	r2, [r2, #4]
 800612c:	b2d2      	uxtb	r2, r2
 800612e:	4611      	mov	r1, r2
 8006130:	6878      	ldr	r0, [r7, #4]
 8006132:	4798      	blx	r3
  }

  return USBD_OK;
 8006134:	2300      	movs	r3, #0
}
 8006136:	4618      	mov	r0, r3
 8006138:	3708      	adds	r7, #8
 800613a:	46bd      	mov	sp, r7
 800613c:	bd80      	pop	{r7, pc}

0800613e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800613e:	b480      	push	{r7}
 8006140:	b087      	sub	sp, #28
 8006142:	af00      	add	r7, sp, #0
 8006144:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800614a:	697b      	ldr	r3, [r7, #20]
 800614c:	781b      	ldrb	r3, [r3, #0]
 800614e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006150:	697b      	ldr	r3, [r7, #20]
 8006152:	3301      	adds	r3, #1
 8006154:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006156:	697b      	ldr	r3, [r7, #20]
 8006158:	781b      	ldrb	r3, [r3, #0]
 800615a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800615c:	8a3b      	ldrh	r3, [r7, #16]
 800615e:	021b      	lsls	r3, r3, #8
 8006160:	b21a      	sxth	r2, r3
 8006162:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006166:	4313      	orrs	r3, r2
 8006168:	b21b      	sxth	r3, r3
 800616a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800616c:	89fb      	ldrh	r3, [r7, #14]
}
 800616e:	4618      	mov	r0, r3
 8006170:	371c      	adds	r7, #28
 8006172:	46bd      	mov	sp, r7
 8006174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006178:	4770      	bx	lr
	...

0800617c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800617c:	b580      	push	{r7, lr}
 800617e:	b084      	sub	sp, #16
 8006180:	af00      	add	r7, sp, #0
 8006182:	6078      	str	r0, [r7, #4]
 8006184:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006186:	2300      	movs	r3, #0
 8006188:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800618a:	683b      	ldr	r3, [r7, #0]
 800618c:	781b      	ldrb	r3, [r3, #0]
 800618e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006192:	2b40      	cmp	r3, #64	; 0x40
 8006194:	d005      	beq.n	80061a2 <USBD_StdDevReq+0x26>
 8006196:	2b40      	cmp	r3, #64	; 0x40
 8006198:	d853      	bhi.n	8006242 <USBD_StdDevReq+0xc6>
 800619a:	2b00      	cmp	r3, #0
 800619c:	d00b      	beq.n	80061b6 <USBD_StdDevReq+0x3a>
 800619e:	2b20      	cmp	r3, #32
 80061a0:	d14f      	bne.n	8006242 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80061a8:	689b      	ldr	r3, [r3, #8]
 80061aa:	6839      	ldr	r1, [r7, #0]
 80061ac:	6878      	ldr	r0, [r7, #4]
 80061ae:	4798      	blx	r3
 80061b0:	4603      	mov	r3, r0
 80061b2:	73fb      	strb	r3, [r7, #15]
      break;
 80061b4:	e04a      	b.n	800624c <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80061b6:	683b      	ldr	r3, [r7, #0]
 80061b8:	785b      	ldrb	r3, [r3, #1]
 80061ba:	2b09      	cmp	r3, #9
 80061bc:	d83b      	bhi.n	8006236 <USBD_StdDevReq+0xba>
 80061be:	a201      	add	r2, pc, #4	; (adr r2, 80061c4 <USBD_StdDevReq+0x48>)
 80061c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061c4:	08006219 	.word	0x08006219
 80061c8:	0800622d 	.word	0x0800622d
 80061cc:	08006237 	.word	0x08006237
 80061d0:	08006223 	.word	0x08006223
 80061d4:	08006237 	.word	0x08006237
 80061d8:	080061f7 	.word	0x080061f7
 80061dc:	080061ed 	.word	0x080061ed
 80061e0:	08006237 	.word	0x08006237
 80061e4:	0800620f 	.word	0x0800620f
 80061e8:	08006201 	.word	0x08006201
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80061ec:	6839      	ldr	r1, [r7, #0]
 80061ee:	6878      	ldr	r0, [r7, #4]
 80061f0:	f000 f9de 	bl	80065b0 <USBD_GetDescriptor>
          break;
 80061f4:	e024      	b.n	8006240 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80061f6:	6839      	ldr	r1, [r7, #0]
 80061f8:	6878      	ldr	r0, [r7, #4]
 80061fa:	f000 fb43 	bl	8006884 <USBD_SetAddress>
          break;
 80061fe:	e01f      	b.n	8006240 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8006200:	6839      	ldr	r1, [r7, #0]
 8006202:	6878      	ldr	r0, [r7, #4]
 8006204:	f000 fb82 	bl	800690c <USBD_SetConfig>
 8006208:	4603      	mov	r3, r0
 800620a:	73fb      	strb	r3, [r7, #15]
          break;
 800620c:	e018      	b.n	8006240 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800620e:	6839      	ldr	r1, [r7, #0]
 8006210:	6878      	ldr	r0, [r7, #4]
 8006212:	f000 fc21 	bl	8006a58 <USBD_GetConfig>
          break;
 8006216:	e013      	b.n	8006240 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006218:	6839      	ldr	r1, [r7, #0]
 800621a:	6878      	ldr	r0, [r7, #4]
 800621c:	f000 fc52 	bl	8006ac4 <USBD_GetStatus>
          break;
 8006220:	e00e      	b.n	8006240 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006222:	6839      	ldr	r1, [r7, #0]
 8006224:	6878      	ldr	r0, [r7, #4]
 8006226:	f000 fc81 	bl	8006b2c <USBD_SetFeature>
          break;
 800622a:	e009      	b.n	8006240 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800622c:	6839      	ldr	r1, [r7, #0]
 800622e:	6878      	ldr	r0, [r7, #4]
 8006230:	f000 fc90 	bl	8006b54 <USBD_ClrFeature>
          break;
 8006234:	e004      	b.n	8006240 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8006236:	6839      	ldr	r1, [r7, #0]
 8006238:	6878      	ldr	r0, [r7, #4]
 800623a:	f000 fce7 	bl	8006c0c <USBD_CtlError>
          break;
 800623e:	bf00      	nop
      }
      break;
 8006240:	e004      	b.n	800624c <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8006242:	6839      	ldr	r1, [r7, #0]
 8006244:	6878      	ldr	r0, [r7, #4]
 8006246:	f000 fce1 	bl	8006c0c <USBD_CtlError>
      break;
 800624a:	bf00      	nop
  }

  return ret;
 800624c:	7bfb      	ldrb	r3, [r7, #15]
}
 800624e:	4618      	mov	r0, r3
 8006250:	3710      	adds	r7, #16
 8006252:	46bd      	mov	sp, r7
 8006254:	bd80      	pop	{r7, pc}
 8006256:	bf00      	nop

08006258 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006258:	b580      	push	{r7, lr}
 800625a:	b084      	sub	sp, #16
 800625c:	af00      	add	r7, sp, #0
 800625e:	6078      	str	r0, [r7, #4]
 8006260:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006262:	2300      	movs	r3, #0
 8006264:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006266:	683b      	ldr	r3, [r7, #0]
 8006268:	781b      	ldrb	r3, [r3, #0]
 800626a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800626e:	2b40      	cmp	r3, #64	; 0x40
 8006270:	d005      	beq.n	800627e <USBD_StdItfReq+0x26>
 8006272:	2b40      	cmp	r3, #64	; 0x40
 8006274:	d82f      	bhi.n	80062d6 <USBD_StdItfReq+0x7e>
 8006276:	2b00      	cmp	r3, #0
 8006278:	d001      	beq.n	800627e <USBD_StdItfReq+0x26>
 800627a:	2b20      	cmp	r3, #32
 800627c:	d12b      	bne.n	80062d6 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006284:	b2db      	uxtb	r3, r3
 8006286:	3b01      	subs	r3, #1
 8006288:	2b02      	cmp	r3, #2
 800628a:	d81d      	bhi.n	80062c8 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800628c:	683b      	ldr	r3, [r7, #0]
 800628e:	889b      	ldrh	r3, [r3, #4]
 8006290:	b2db      	uxtb	r3, r3
 8006292:	2b01      	cmp	r3, #1
 8006294:	d813      	bhi.n	80062be <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800629c:	689b      	ldr	r3, [r3, #8]
 800629e:	6839      	ldr	r1, [r7, #0]
 80062a0:	6878      	ldr	r0, [r7, #4]
 80062a2:	4798      	blx	r3
 80062a4:	4603      	mov	r3, r0
 80062a6:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80062a8:	683b      	ldr	r3, [r7, #0]
 80062aa:	88db      	ldrh	r3, [r3, #6]
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d110      	bne.n	80062d2 <USBD_StdItfReq+0x7a>
 80062b0:	7bfb      	ldrb	r3, [r7, #15]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d10d      	bne.n	80062d2 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 80062b6:	6878      	ldr	r0, [r7, #4]
 80062b8:	f000 fd73 	bl	8006da2 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80062bc:	e009      	b.n	80062d2 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 80062be:	6839      	ldr	r1, [r7, #0]
 80062c0:	6878      	ldr	r0, [r7, #4]
 80062c2:	f000 fca3 	bl	8006c0c <USBD_CtlError>
          break;
 80062c6:	e004      	b.n	80062d2 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 80062c8:	6839      	ldr	r1, [r7, #0]
 80062ca:	6878      	ldr	r0, [r7, #4]
 80062cc:	f000 fc9e 	bl	8006c0c <USBD_CtlError>
          break;
 80062d0:	e000      	b.n	80062d4 <USBD_StdItfReq+0x7c>
          break;
 80062d2:	bf00      	nop
      }
      break;
 80062d4:	e004      	b.n	80062e0 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 80062d6:	6839      	ldr	r1, [r7, #0]
 80062d8:	6878      	ldr	r0, [r7, #4]
 80062da:	f000 fc97 	bl	8006c0c <USBD_CtlError>
      break;
 80062de:	bf00      	nop
  }

  return ret;
 80062e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80062e2:	4618      	mov	r0, r3
 80062e4:	3710      	adds	r7, #16
 80062e6:	46bd      	mov	sp, r7
 80062e8:	bd80      	pop	{r7, pc}

080062ea <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80062ea:	b580      	push	{r7, lr}
 80062ec:	b084      	sub	sp, #16
 80062ee:	af00      	add	r7, sp, #0
 80062f0:	6078      	str	r0, [r7, #4]
 80062f2:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80062f4:	2300      	movs	r3, #0
 80062f6:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 80062f8:	683b      	ldr	r3, [r7, #0]
 80062fa:	889b      	ldrh	r3, [r3, #4]
 80062fc:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80062fe:	683b      	ldr	r3, [r7, #0]
 8006300:	781b      	ldrb	r3, [r3, #0]
 8006302:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006306:	2b40      	cmp	r3, #64	; 0x40
 8006308:	d007      	beq.n	800631a <USBD_StdEPReq+0x30>
 800630a:	2b40      	cmp	r3, #64	; 0x40
 800630c:	f200 8145 	bhi.w	800659a <USBD_StdEPReq+0x2b0>
 8006310:	2b00      	cmp	r3, #0
 8006312:	d00c      	beq.n	800632e <USBD_StdEPReq+0x44>
 8006314:	2b20      	cmp	r3, #32
 8006316:	f040 8140 	bne.w	800659a <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006320:	689b      	ldr	r3, [r3, #8]
 8006322:	6839      	ldr	r1, [r7, #0]
 8006324:	6878      	ldr	r0, [r7, #4]
 8006326:	4798      	blx	r3
 8006328:	4603      	mov	r3, r0
 800632a:	73fb      	strb	r3, [r7, #15]
      break;
 800632c:	e13a      	b.n	80065a4 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800632e:	683b      	ldr	r3, [r7, #0]
 8006330:	785b      	ldrb	r3, [r3, #1]
 8006332:	2b03      	cmp	r3, #3
 8006334:	d007      	beq.n	8006346 <USBD_StdEPReq+0x5c>
 8006336:	2b03      	cmp	r3, #3
 8006338:	f300 8129 	bgt.w	800658e <USBD_StdEPReq+0x2a4>
 800633c:	2b00      	cmp	r3, #0
 800633e:	d07f      	beq.n	8006440 <USBD_StdEPReq+0x156>
 8006340:	2b01      	cmp	r3, #1
 8006342:	d03c      	beq.n	80063be <USBD_StdEPReq+0xd4>
 8006344:	e123      	b.n	800658e <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800634c:	b2db      	uxtb	r3, r3
 800634e:	2b02      	cmp	r3, #2
 8006350:	d002      	beq.n	8006358 <USBD_StdEPReq+0x6e>
 8006352:	2b03      	cmp	r3, #3
 8006354:	d016      	beq.n	8006384 <USBD_StdEPReq+0x9a>
 8006356:	e02c      	b.n	80063b2 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006358:	7bbb      	ldrb	r3, [r7, #14]
 800635a:	2b00      	cmp	r3, #0
 800635c:	d00d      	beq.n	800637a <USBD_StdEPReq+0x90>
 800635e:	7bbb      	ldrb	r3, [r7, #14]
 8006360:	2b80      	cmp	r3, #128	; 0x80
 8006362:	d00a      	beq.n	800637a <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006364:	7bbb      	ldrb	r3, [r7, #14]
 8006366:	4619      	mov	r1, r3
 8006368:	6878      	ldr	r0, [r7, #4]
 800636a:	f001 f92f 	bl	80075cc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800636e:	2180      	movs	r1, #128	; 0x80
 8006370:	6878      	ldr	r0, [r7, #4]
 8006372:	f001 f92b 	bl	80075cc <USBD_LL_StallEP>
 8006376:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006378:	e020      	b.n	80063bc <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800637a:	6839      	ldr	r1, [r7, #0]
 800637c:	6878      	ldr	r0, [r7, #4]
 800637e:	f000 fc45 	bl	8006c0c <USBD_CtlError>
              break;
 8006382:	e01b      	b.n	80063bc <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006384:	683b      	ldr	r3, [r7, #0]
 8006386:	885b      	ldrh	r3, [r3, #2]
 8006388:	2b00      	cmp	r3, #0
 800638a:	d10e      	bne.n	80063aa <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800638c:	7bbb      	ldrb	r3, [r7, #14]
 800638e:	2b00      	cmp	r3, #0
 8006390:	d00b      	beq.n	80063aa <USBD_StdEPReq+0xc0>
 8006392:	7bbb      	ldrb	r3, [r7, #14]
 8006394:	2b80      	cmp	r3, #128	; 0x80
 8006396:	d008      	beq.n	80063aa <USBD_StdEPReq+0xc0>
 8006398:	683b      	ldr	r3, [r7, #0]
 800639a:	88db      	ldrh	r3, [r3, #6]
 800639c:	2b00      	cmp	r3, #0
 800639e:	d104      	bne.n	80063aa <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80063a0:	7bbb      	ldrb	r3, [r7, #14]
 80063a2:	4619      	mov	r1, r3
 80063a4:	6878      	ldr	r0, [r7, #4]
 80063a6:	f001 f911 	bl	80075cc <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80063aa:	6878      	ldr	r0, [r7, #4]
 80063ac:	f000 fcf9 	bl	8006da2 <USBD_CtlSendStatus>

              break;
 80063b0:	e004      	b.n	80063bc <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 80063b2:	6839      	ldr	r1, [r7, #0]
 80063b4:	6878      	ldr	r0, [r7, #4]
 80063b6:	f000 fc29 	bl	8006c0c <USBD_CtlError>
              break;
 80063ba:	bf00      	nop
          }
          break;
 80063bc:	e0ec      	b.n	8006598 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80063c4:	b2db      	uxtb	r3, r3
 80063c6:	2b02      	cmp	r3, #2
 80063c8:	d002      	beq.n	80063d0 <USBD_StdEPReq+0xe6>
 80063ca:	2b03      	cmp	r3, #3
 80063cc:	d016      	beq.n	80063fc <USBD_StdEPReq+0x112>
 80063ce:	e030      	b.n	8006432 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80063d0:	7bbb      	ldrb	r3, [r7, #14]
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d00d      	beq.n	80063f2 <USBD_StdEPReq+0x108>
 80063d6:	7bbb      	ldrb	r3, [r7, #14]
 80063d8:	2b80      	cmp	r3, #128	; 0x80
 80063da:	d00a      	beq.n	80063f2 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80063dc:	7bbb      	ldrb	r3, [r7, #14]
 80063de:	4619      	mov	r1, r3
 80063e0:	6878      	ldr	r0, [r7, #4]
 80063e2:	f001 f8f3 	bl	80075cc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80063e6:	2180      	movs	r1, #128	; 0x80
 80063e8:	6878      	ldr	r0, [r7, #4]
 80063ea:	f001 f8ef 	bl	80075cc <USBD_LL_StallEP>
 80063ee:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80063f0:	e025      	b.n	800643e <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 80063f2:	6839      	ldr	r1, [r7, #0]
 80063f4:	6878      	ldr	r0, [r7, #4]
 80063f6:	f000 fc09 	bl	8006c0c <USBD_CtlError>
              break;
 80063fa:	e020      	b.n	800643e <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80063fc:	683b      	ldr	r3, [r7, #0]
 80063fe:	885b      	ldrh	r3, [r3, #2]
 8006400:	2b00      	cmp	r3, #0
 8006402:	d11b      	bne.n	800643c <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006404:	7bbb      	ldrb	r3, [r7, #14]
 8006406:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800640a:	2b00      	cmp	r3, #0
 800640c:	d004      	beq.n	8006418 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800640e:	7bbb      	ldrb	r3, [r7, #14]
 8006410:	4619      	mov	r1, r3
 8006412:	6878      	ldr	r0, [r7, #4]
 8006414:	f001 f8f9 	bl	800760a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8006418:	6878      	ldr	r0, [r7, #4]
 800641a:	f000 fcc2 	bl	8006da2 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006424:	689b      	ldr	r3, [r3, #8]
 8006426:	6839      	ldr	r1, [r7, #0]
 8006428:	6878      	ldr	r0, [r7, #4]
 800642a:	4798      	blx	r3
 800642c:	4603      	mov	r3, r0
 800642e:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8006430:	e004      	b.n	800643c <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8006432:	6839      	ldr	r1, [r7, #0]
 8006434:	6878      	ldr	r0, [r7, #4]
 8006436:	f000 fbe9 	bl	8006c0c <USBD_CtlError>
              break;
 800643a:	e000      	b.n	800643e <USBD_StdEPReq+0x154>
              break;
 800643c:	bf00      	nop
          }
          break;
 800643e:	e0ab      	b.n	8006598 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006446:	b2db      	uxtb	r3, r3
 8006448:	2b02      	cmp	r3, #2
 800644a:	d002      	beq.n	8006452 <USBD_StdEPReq+0x168>
 800644c:	2b03      	cmp	r3, #3
 800644e:	d032      	beq.n	80064b6 <USBD_StdEPReq+0x1cc>
 8006450:	e097      	b.n	8006582 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006452:	7bbb      	ldrb	r3, [r7, #14]
 8006454:	2b00      	cmp	r3, #0
 8006456:	d007      	beq.n	8006468 <USBD_StdEPReq+0x17e>
 8006458:	7bbb      	ldrb	r3, [r7, #14]
 800645a:	2b80      	cmp	r3, #128	; 0x80
 800645c:	d004      	beq.n	8006468 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800645e:	6839      	ldr	r1, [r7, #0]
 8006460:	6878      	ldr	r0, [r7, #4]
 8006462:	f000 fbd3 	bl	8006c0c <USBD_CtlError>
                break;
 8006466:	e091      	b.n	800658c <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006468:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800646c:	2b00      	cmp	r3, #0
 800646e:	da0b      	bge.n	8006488 <USBD_StdEPReq+0x19e>
 8006470:	7bbb      	ldrb	r3, [r7, #14]
 8006472:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006476:	4613      	mov	r3, r2
 8006478:	009b      	lsls	r3, r3, #2
 800647a:	4413      	add	r3, r2
 800647c:	009b      	lsls	r3, r3, #2
 800647e:	3310      	adds	r3, #16
 8006480:	687a      	ldr	r2, [r7, #4]
 8006482:	4413      	add	r3, r2
 8006484:	3304      	adds	r3, #4
 8006486:	e00b      	b.n	80064a0 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006488:	7bbb      	ldrb	r3, [r7, #14]
 800648a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800648e:	4613      	mov	r3, r2
 8006490:	009b      	lsls	r3, r3, #2
 8006492:	4413      	add	r3, r2
 8006494:	009b      	lsls	r3, r3, #2
 8006496:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800649a:	687a      	ldr	r2, [r7, #4]
 800649c:	4413      	add	r3, r2
 800649e:	3304      	adds	r3, #4
 80064a0:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80064a2:	68bb      	ldr	r3, [r7, #8]
 80064a4:	2200      	movs	r2, #0
 80064a6:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80064a8:	68bb      	ldr	r3, [r7, #8]
 80064aa:	2202      	movs	r2, #2
 80064ac:	4619      	mov	r1, r3
 80064ae:	6878      	ldr	r0, [r7, #4]
 80064b0:	f000 fc1d 	bl	8006cee <USBD_CtlSendData>
              break;
 80064b4:	e06a      	b.n	800658c <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80064b6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	da11      	bge.n	80064e2 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80064be:	7bbb      	ldrb	r3, [r7, #14]
 80064c0:	f003 020f 	and.w	r2, r3, #15
 80064c4:	6879      	ldr	r1, [r7, #4]
 80064c6:	4613      	mov	r3, r2
 80064c8:	009b      	lsls	r3, r3, #2
 80064ca:	4413      	add	r3, r2
 80064cc:	009b      	lsls	r3, r3, #2
 80064ce:	440b      	add	r3, r1
 80064d0:	3324      	adds	r3, #36	; 0x24
 80064d2:	881b      	ldrh	r3, [r3, #0]
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d117      	bne.n	8006508 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80064d8:	6839      	ldr	r1, [r7, #0]
 80064da:	6878      	ldr	r0, [r7, #4]
 80064dc:	f000 fb96 	bl	8006c0c <USBD_CtlError>
                  break;
 80064e0:	e054      	b.n	800658c <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80064e2:	7bbb      	ldrb	r3, [r7, #14]
 80064e4:	f003 020f 	and.w	r2, r3, #15
 80064e8:	6879      	ldr	r1, [r7, #4]
 80064ea:	4613      	mov	r3, r2
 80064ec:	009b      	lsls	r3, r3, #2
 80064ee:	4413      	add	r3, r2
 80064f0:	009b      	lsls	r3, r3, #2
 80064f2:	440b      	add	r3, r1
 80064f4:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80064f8:	881b      	ldrh	r3, [r3, #0]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d104      	bne.n	8006508 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80064fe:	6839      	ldr	r1, [r7, #0]
 8006500:	6878      	ldr	r0, [r7, #4]
 8006502:	f000 fb83 	bl	8006c0c <USBD_CtlError>
                  break;
 8006506:	e041      	b.n	800658c <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006508:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800650c:	2b00      	cmp	r3, #0
 800650e:	da0b      	bge.n	8006528 <USBD_StdEPReq+0x23e>
 8006510:	7bbb      	ldrb	r3, [r7, #14]
 8006512:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006516:	4613      	mov	r3, r2
 8006518:	009b      	lsls	r3, r3, #2
 800651a:	4413      	add	r3, r2
 800651c:	009b      	lsls	r3, r3, #2
 800651e:	3310      	adds	r3, #16
 8006520:	687a      	ldr	r2, [r7, #4]
 8006522:	4413      	add	r3, r2
 8006524:	3304      	adds	r3, #4
 8006526:	e00b      	b.n	8006540 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006528:	7bbb      	ldrb	r3, [r7, #14]
 800652a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800652e:	4613      	mov	r3, r2
 8006530:	009b      	lsls	r3, r3, #2
 8006532:	4413      	add	r3, r2
 8006534:	009b      	lsls	r3, r3, #2
 8006536:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800653a:	687a      	ldr	r2, [r7, #4]
 800653c:	4413      	add	r3, r2
 800653e:	3304      	adds	r3, #4
 8006540:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006542:	7bbb      	ldrb	r3, [r7, #14]
 8006544:	2b00      	cmp	r3, #0
 8006546:	d002      	beq.n	800654e <USBD_StdEPReq+0x264>
 8006548:	7bbb      	ldrb	r3, [r7, #14]
 800654a:	2b80      	cmp	r3, #128	; 0x80
 800654c:	d103      	bne.n	8006556 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800654e:	68bb      	ldr	r3, [r7, #8]
 8006550:	2200      	movs	r2, #0
 8006552:	601a      	str	r2, [r3, #0]
 8006554:	e00e      	b.n	8006574 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006556:	7bbb      	ldrb	r3, [r7, #14]
 8006558:	4619      	mov	r1, r3
 800655a:	6878      	ldr	r0, [r7, #4]
 800655c:	f001 f874 	bl	8007648 <USBD_LL_IsStallEP>
 8006560:	4603      	mov	r3, r0
 8006562:	2b00      	cmp	r3, #0
 8006564:	d003      	beq.n	800656e <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8006566:	68bb      	ldr	r3, [r7, #8]
 8006568:	2201      	movs	r2, #1
 800656a:	601a      	str	r2, [r3, #0]
 800656c:	e002      	b.n	8006574 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800656e:	68bb      	ldr	r3, [r7, #8]
 8006570:	2200      	movs	r2, #0
 8006572:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006574:	68bb      	ldr	r3, [r7, #8]
 8006576:	2202      	movs	r2, #2
 8006578:	4619      	mov	r1, r3
 800657a:	6878      	ldr	r0, [r7, #4]
 800657c:	f000 fbb7 	bl	8006cee <USBD_CtlSendData>
              break;
 8006580:	e004      	b.n	800658c <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8006582:	6839      	ldr	r1, [r7, #0]
 8006584:	6878      	ldr	r0, [r7, #4]
 8006586:	f000 fb41 	bl	8006c0c <USBD_CtlError>
              break;
 800658a:	bf00      	nop
          }
          break;
 800658c:	e004      	b.n	8006598 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800658e:	6839      	ldr	r1, [r7, #0]
 8006590:	6878      	ldr	r0, [r7, #4]
 8006592:	f000 fb3b 	bl	8006c0c <USBD_CtlError>
          break;
 8006596:	bf00      	nop
      }
      break;
 8006598:	e004      	b.n	80065a4 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800659a:	6839      	ldr	r1, [r7, #0]
 800659c:	6878      	ldr	r0, [r7, #4]
 800659e:	f000 fb35 	bl	8006c0c <USBD_CtlError>
      break;
 80065a2:	bf00      	nop
  }

  return ret;
 80065a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80065a6:	4618      	mov	r0, r3
 80065a8:	3710      	adds	r7, #16
 80065aa:	46bd      	mov	sp, r7
 80065ac:	bd80      	pop	{r7, pc}
	...

080065b0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80065b0:	b580      	push	{r7, lr}
 80065b2:	b084      	sub	sp, #16
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	6078      	str	r0, [r7, #4]
 80065b8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80065ba:	2300      	movs	r3, #0
 80065bc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80065be:	2300      	movs	r3, #0
 80065c0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80065c2:	2300      	movs	r3, #0
 80065c4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80065c6:	683b      	ldr	r3, [r7, #0]
 80065c8:	885b      	ldrh	r3, [r3, #2]
 80065ca:	0a1b      	lsrs	r3, r3, #8
 80065cc:	b29b      	uxth	r3, r3
 80065ce:	3b01      	subs	r3, #1
 80065d0:	2b06      	cmp	r3, #6
 80065d2:	f200 8128 	bhi.w	8006826 <USBD_GetDescriptor+0x276>
 80065d6:	a201      	add	r2, pc, #4	; (adr r2, 80065dc <USBD_GetDescriptor+0x2c>)
 80065d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065dc:	080065f9 	.word	0x080065f9
 80065e0:	08006611 	.word	0x08006611
 80065e4:	08006651 	.word	0x08006651
 80065e8:	08006827 	.word	0x08006827
 80065ec:	08006827 	.word	0x08006827
 80065f0:	080067c7 	.word	0x080067c7
 80065f4:	080067f3 	.word	0x080067f3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	687a      	ldr	r2, [r7, #4]
 8006602:	7c12      	ldrb	r2, [r2, #16]
 8006604:	f107 0108 	add.w	r1, r7, #8
 8006608:	4610      	mov	r0, r2
 800660a:	4798      	blx	r3
 800660c:	60f8      	str	r0, [r7, #12]
      break;
 800660e:	e112      	b.n	8006836 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	7c1b      	ldrb	r3, [r3, #16]
 8006614:	2b00      	cmp	r3, #0
 8006616:	d10d      	bne.n	8006634 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800661e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006620:	f107 0208 	add.w	r2, r7, #8
 8006624:	4610      	mov	r0, r2
 8006626:	4798      	blx	r3
 8006628:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	3301      	adds	r3, #1
 800662e:	2202      	movs	r2, #2
 8006630:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006632:	e100      	b.n	8006836 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800663a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800663c:	f107 0208 	add.w	r2, r7, #8
 8006640:	4610      	mov	r0, r2
 8006642:	4798      	blx	r3
 8006644:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	3301      	adds	r3, #1
 800664a:	2202      	movs	r2, #2
 800664c:	701a      	strb	r2, [r3, #0]
      break;
 800664e:	e0f2      	b.n	8006836 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006650:	683b      	ldr	r3, [r7, #0]
 8006652:	885b      	ldrh	r3, [r3, #2]
 8006654:	b2db      	uxtb	r3, r3
 8006656:	2b05      	cmp	r3, #5
 8006658:	f200 80ac 	bhi.w	80067b4 <USBD_GetDescriptor+0x204>
 800665c:	a201      	add	r2, pc, #4	; (adr r2, 8006664 <USBD_GetDescriptor+0xb4>)
 800665e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006662:	bf00      	nop
 8006664:	0800667d 	.word	0x0800667d
 8006668:	080066b1 	.word	0x080066b1
 800666c:	080066e5 	.word	0x080066e5
 8006670:	08006719 	.word	0x08006719
 8006674:	0800674d 	.word	0x0800674d
 8006678:	08006781 	.word	0x08006781
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006682:	685b      	ldr	r3, [r3, #4]
 8006684:	2b00      	cmp	r3, #0
 8006686:	d00b      	beq.n	80066a0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800668e:	685b      	ldr	r3, [r3, #4]
 8006690:	687a      	ldr	r2, [r7, #4]
 8006692:	7c12      	ldrb	r2, [r2, #16]
 8006694:	f107 0108 	add.w	r1, r7, #8
 8006698:	4610      	mov	r0, r2
 800669a:	4798      	blx	r3
 800669c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800669e:	e091      	b.n	80067c4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80066a0:	6839      	ldr	r1, [r7, #0]
 80066a2:	6878      	ldr	r0, [r7, #4]
 80066a4:	f000 fab2 	bl	8006c0c <USBD_CtlError>
            err++;
 80066a8:	7afb      	ldrb	r3, [r7, #11]
 80066aa:	3301      	adds	r3, #1
 80066ac:	72fb      	strb	r3, [r7, #11]
          break;
 80066ae:	e089      	b.n	80067c4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80066b6:	689b      	ldr	r3, [r3, #8]
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d00b      	beq.n	80066d4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80066c2:	689b      	ldr	r3, [r3, #8]
 80066c4:	687a      	ldr	r2, [r7, #4]
 80066c6:	7c12      	ldrb	r2, [r2, #16]
 80066c8:	f107 0108 	add.w	r1, r7, #8
 80066cc:	4610      	mov	r0, r2
 80066ce:	4798      	blx	r3
 80066d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80066d2:	e077      	b.n	80067c4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80066d4:	6839      	ldr	r1, [r7, #0]
 80066d6:	6878      	ldr	r0, [r7, #4]
 80066d8:	f000 fa98 	bl	8006c0c <USBD_CtlError>
            err++;
 80066dc:	7afb      	ldrb	r3, [r7, #11]
 80066de:	3301      	adds	r3, #1
 80066e0:	72fb      	strb	r3, [r7, #11]
          break;
 80066e2:	e06f      	b.n	80067c4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80066ea:	68db      	ldr	r3, [r3, #12]
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d00b      	beq.n	8006708 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80066f6:	68db      	ldr	r3, [r3, #12]
 80066f8:	687a      	ldr	r2, [r7, #4]
 80066fa:	7c12      	ldrb	r2, [r2, #16]
 80066fc:	f107 0108 	add.w	r1, r7, #8
 8006700:	4610      	mov	r0, r2
 8006702:	4798      	blx	r3
 8006704:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006706:	e05d      	b.n	80067c4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006708:	6839      	ldr	r1, [r7, #0]
 800670a:	6878      	ldr	r0, [r7, #4]
 800670c:	f000 fa7e 	bl	8006c0c <USBD_CtlError>
            err++;
 8006710:	7afb      	ldrb	r3, [r7, #11]
 8006712:	3301      	adds	r3, #1
 8006714:	72fb      	strb	r3, [r7, #11]
          break;
 8006716:	e055      	b.n	80067c4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800671e:	691b      	ldr	r3, [r3, #16]
 8006720:	2b00      	cmp	r3, #0
 8006722:	d00b      	beq.n	800673c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800672a:	691b      	ldr	r3, [r3, #16]
 800672c:	687a      	ldr	r2, [r7, #4]
 800672e:	7c12      	ldrb	r2, [r2, #16]
 8006730:	f107 0108 	add.w	r1, r7, #8
 8006734:	4610      	mov	r0, r2
 8006736:	4798      	blx	r3
 8006738:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800673a:	e043      	b.n	80067c4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800673c:	6839      	ldr	r1, [r7, #0]
 800673e:	6878      	ldr	r0, [r7, #4]
 8006740:	f000 fa64 	bl	8006c0c <USBD_CtlError>
            err++;
 8006744:	7afb      	ldrb	r3, [r7, #11]
 8006746:	3301      	adds	r3, #1
 8006748:	72fb      	strb	r3, [r7, #11]
          break;
 800674a:	e03b      	b.n	80067c4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006752:	695b      	ldr	r3, [r3, #20]
 8006754:	2b00      	cmp	r3, #0
 8006756:	d00b      	beq.n	8006770 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800675e:	695b      	ldr	r3, [r3, #20]
 8006760:	687a      	ldr	r2, [r7, #4]
 8006762:	7c12      	ldrb	r2, [r2, #16]
 8006764:	f107 0108 	add.w	r1, r7, #8
 8006768:	4610      	mov	r0, r2
 800676a:	4798      	blx	r3
 800676c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800676e:	e029      	b.n	80067c4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006770:	6839      	ldr	r1, [r7, #0]
 8006772:	6878      	ldr	r0, [r7, #4]
 8006774:	f000 fa4a 	bl	8006c0c <USBD_CtlError>
            err++;
 8006778:	7afb      	ldrb	r3, [r7, #11]
 800677a:	3301      	adds	r3, #1
 800677c:	72fb      	strb	r3, [r7, #11]
          break;
 800677e:	e021      	b.n	80067c4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006786:	699b      	ldr	r3, [r3, #24]
 8006788:	2b00      	cmp	r3, #0
 800678a:	d00b      	beq.n	80067a4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006792:	699b      	ldr	r3, [r3, #24]
 8006794:	687a      	ldr	r2, [r7, #4]
 8006796:	7c12      	ldrb	r2, [r2, #16]
 8006798:	f107 0108 	add.w	r1, r7, #8
 800679c:	4610      	mov	r0, r2
 800679e:	4798      	blx	r3
 80067a0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80067a2:	e00f      	b.n	80067c4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80067a4:	6839      	ldr	r1, [r7, #0]
 80067a6:	6878      	ldr	r0, [r7, #4]
 80067a8:	f000 fa30 	bl	8006c0c <USBD_CtlError>
            err++;
 80067ac:	7afb      	ldrb	r3, [r7, #11]
 80067ae:	3301      	adds	r3, #1
 80067b0:	72fb      	strb	r3, [r7, #11]
          break;
 80067b2:	e007      	b.n	80067c4 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80067b4:	6839      	ldr	r1, [r7, #0]
 80067b6:	6878      	ldr	r0, [r7, #4]
 80067b8:	f000 fa28 	bl	8006c0c <USBD_CtlError>
          err++;
 80067bc:	7afb      	ldrb	r3, [r7, #11]
 80067be:	3301      	adds	r3, #1
 80067c0:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 80067c2:	bf00      	nop
      }
      break;
 80067c4:	e037      	b.n	8006836 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	7c1b      	ldrb	r3, [r3, #16]
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d109      	bne.n	80067e2 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067d6:	f107 0208 	add.w	r2, r7, #8
 80067da:	4610      	mov	r0, r2
 80067dc:	4798      	blx	r3
 80067de:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80067e0:	e029      	b.n	8006836 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80067e2:	6839      	ldr	r1, [r7, #0]
 80067e4:	6878      	ldr	r0, [r7, #4]
 80067e6:	f000 fa11 	bl	8006c0c <USBD_CtlError>
        err++;
 80067ea:	7afb      	ldrb	r3, [r7, #11]
 80067ec:	3301      	adds	r3, #1
 80067ee:	72fb      	strb	r3, [r7, #11]
      break;
 80067f0:	e021      	b.n	8006836 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	7c1b      	ldrb	r3, [r3, #16]
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d10d      	bne.n	8006816 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006802:	f107 0208 	add.w	r2, r7, #8
 8006806:	4610      	mov	r0, r2
 8006808:	4798      	blx	r3
 800680a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	3301      	adds	r3, #1
 8006810:	2207      	movs	r2, #7
 8006812:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006814:	e00f      	b.n	8006836 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006816:	6839      	ldr	r1, [r7, #0]
 8006818:	6878      	ldr	r0, [r7, #4]
 800681a:	f000 f9f7 	bl	8006c0c <USBD_CtlError>
        err++;
 800681e:	7afb      	ldrb	r3, [r7, #11]
 8006820:	3301      	adds	r3, #1
 8006822:	72fb      	strb	r3, [r7, #11]
      break;
 8006824:	e007      	b.n	8006836 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8006826:	6839      	ldr	r1, [r7, #0]
 8006828:	6878      	ldr	r0, [r7, #4]
 800682a:	f000 f9ef 	bl	8006c0c <USBD_CtlError>
      err++;
 800682e:	7afb      	ldrb	r3, [r7, #11]
 8006830:	3301      	adds	r3, #1
 8006832:	72fb      	strb	r3, [r7, #11]
      break;
 8006834:	bf00      	nop
  }

  if (err != 0U)
 8006836:	7afb      	ldrb	r3, [r7, #11]
 8006838:	2b00      	cmp	r3, #0
 800683a:	d11e      	bne.n	800687a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800683c:	683b      	ldr	r3, [r7, #0]
 800683e:	88db      	ldrh	r3, [r3, #6]
 8006840:	2b00      	cmp	r3, #0
 8006842:	d016      	beq.n	8006872 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8006844:	893b      	ldrh	r3, [r7, #8]
 8006846:	2b00      	cmp	r3, #0
 8006848:	d00e      	beq.n	8006868 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800684a:	683b      	ldr	r3, [r7, #0]
 800684c:	88da      	ldrh	r2, [r3, #6]
 800684e:	893b      	ldrh	r3, [r7, #8]
 8006850:	4293      	cmp	r3, r2
 8006852:	bf28      	it	cs
 8006854:	4613      	movcs	r3, r2
 8006856:	b29b      	uxth	r3, r3
 8006858:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800685a:	893b      	ldrh	r3, [r7, #8]
 800685c:	461a      	mov	r2, r3
 800685e:	68f9      	ldr	r1, [r7, #12]
 8006860:	6878      	ldr	r0, [r7, #4]
 8006862:	f000 fa44 	bl	8006cee <USBD_CtlSendData>
 8006866:	e009      	b.n	800687c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8006868:	6839      	ldr	r1, [r7, #0]
 800686a:	6878      	ldr	r0, [r7, #4]
 800686c:	f000 f9ce 	bl	8006c0c <USBD_CtlError>
 8006870:	e004      	b.n	800687c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8006872:	6878      	ldr	r0, [r7, #4]
 8006874:	f000 fa95 	bl	8006da2 <USBD_CtlSendStatus>
 8006878:	e000      	b.n	800687c <USBD_GetDescriptor+0x2cc>
    return;
 800687a:	bf00      	nop
  }
}
 800687c:	3710      	adds	r7, #16
 800687e:	46bd      	mov	sp, r7
 8006880:	bd80      	pop	{r7, pc}
 8006882:	bf00      	nop

08006884 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006884:	b580      	push	{r7, lr}
 8006886:	b084      	sub	sp, #16
 8006888:	af00      	add	r7, sp, #0
 800688a:	6078      	str	r0, [r7, #4]
 800688c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800688e:	683b      	ldr	r3, [r7, #0]
 8006890:	889b      	ldrh	r3, [r3, #4]
 8006892:	2b00      	cmp	r3, #0
 8006894:	d131      	bne.n	80068fa <USBD_SetAddress+0x76>
 8006896:	683b      	ldr	r3, [r7, #0]
 8006898:	88db      	ldrh	r3, [r3, #6]
 800689a:	2b00      	cmp	r3, #0
 800689c:	d12d      	bne.n	80068fa <USBD_SetAddress+0x76>
 800689e:	683b      	ldr	r3, [r7, #0]
 80068a0:	885b      	ldrh	r3, [r3, #2]
 80068a2:	2b7f      	cmp	r3, #127	; 0x7f
 80068a4:	d829      	bhi.n	80068fa <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80068a6:	683b      	ldr	r3, [r7, #0]
 80068a8:	885b      	ldrh	r3, [r3, #2]
 80068aa:	b2db      	uxtb	r3, r3
 80068ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80068b0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80068b8:	b2db      	uxtb	r3, r3
 80068ba:	2b03      	cmp	r3, #3
 80068bc:	d104      	bne.n	80068c8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80068be:	6839      	ldr	r1, [r7, #0]
 80068c0:	6878      	ldr	r0, [r7, #4]
 80068c2:	f000 f9a3 	bl	8006c0c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80068c6:	e01d      	b.n	8006904 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	7bfa      	ldrb	r2, [r7, #15]
 80068cc:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80068d0:	7bfb      	ldrb	r3, [r7, #15]
 80068d2:	4619      	mov	r1, r3
 80068d4:	6878      	ldr	r0, [r7, #4]
 80068d6:	f000 fee3 	bl	80076a0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80068da:	6878      	ldr	r0, [r7, #4]
 80068dc:	f000 fa61 	bl	8006da2 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80068e0:	7bfb      	ldrb	r3, [r7, #15]
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d004      	beq.n	80068f0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	2202      	movs	r2, #2
 80068ea:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80068ee:	e009      	b.n	8006904 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	2201      	movs	r2, #1
 80068f4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80068f8:	e004      	b.n	8006904 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80068fa:	6839      	ldr	r1, [r7, #0]
 80068fc:	6878      	ldr	r0, [r7, #4]
 80068fe:	f000 f985 	bl	8006c0c <USBD_CtlError>
  }
}
 8006902:	bf00      	nop
 8006904:	bf00      	nop
 8006906:	3710      	adds	r7, #16
 8006908:	46bd      	mov	sp, r7
 800690a:	bd80      	pop	{r7, pc}

0800690c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800690c:	b580      	push	{r7, lr}
 800690e:	b084      	sub	sp, #16
 8006910:	af00      	add	r7, sp, #0
 8006912:	6078      	str	r0, [r7, #4]
 8006914:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006916:	2300      	movs	r3, #0
 8006918:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800691a:	683b      	ldr	r3, [r7, #0]
 800691c:	885b      	ldrh	r3, [r3, #2]
 800691e:	b2da      	uxtb	r2, r3
 8006920:	4b4c      	ldr	r3, [pc, #304]	; (8006a54 <USBD_SetConfig+0x148>)
 8006922:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006924:	4b4b      	ldr	r3, [pc, #300]	; (8006a54 <USBD_SetConfig+0x148>)
 8006926:	781b      	ldrb	r3, [r3, #0]
 8006928:	2b01      	cmp	r3, #1
 800692a:	d905      	bls.n	8006938 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800692c:	6839      	ldr	r1, [r7, #0]
 800692e:	6878      	ldr	r0, [r7, #4]
 8006930:	f000 f96c 	bl	8006c0c <USBD_CtlError>
    return USBD_FAIL;
 8006934:	2303      	movs	r3, #3
 8006936:	e088      	b.n	8006a4a <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800693e:	b2db      	uxtb	r3, r3
 8006940:	2b02      	cmp	r3, #2
 8006942:	d002      	beq.n	800694a <USBD_SetConfig+0x3e>
 8006944:	2b03      	cmp	r3, #3
 8006946:	d025      	beq.n	8006994 <USBD_SetConfig+0x88>
 8006948:	e071      	b.n	8006a2e <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800694a:	4b42      	ldr	r3, [pc, #264]	; (8006a54 <USBD_SetConfig+0x148>)
 800694c:	781b      	ldrb	r3, [r3, #0]
 800694e:	2b00      	cmp	r3, #0
 8006950:	d01c      	beq.n	800698c <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8006952:	4b40      	ldr	r3, [pc, #256]	; (8006a54 <USBD_SetConfig+0x148>)
 8006954:	781b      	ldrb	r3, [r3, #0]
 8006956:	461a      	mov	r2, r3
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800695c:	4b3d      	ldr	r3, [pc, #244]	; (8006a54 <USBD_SetConfig+0x148>)
 800695e:	781b      	ldrb	r3, [r3, #0]
 8006960:	4619      	mov	r1, r3
 8006962:	6878      	ldr	r0, [r7, #4]
 8006964:	f7ff f948 	bl	8005bf8 <USBD_SetClassConfig>
 8006968:	4603      	mov	r3, r0
 800696a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800696c:	7bfb      	ldrb	r3, [r7, #15]
 800696e:	2b00      	cmp	r3, #0
 8006970:	d004      	beq.n	800697c <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8006972:	6839      	ldr	r1, [r7, #0]
 8006974:	6878      	ldr	r0, [r7, #4]
 8006976:	f000 f949 	bl	8006c0c <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800697a:	e065      	b.n	8006a48 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800697c:	6878      	ldr	r0, [r7, #4]
 800697e:	f000 fa10 	bl	8006da2 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	2203      	movs	r2, #3
 8006986:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800698a:	e05d      	b.n	8006a48 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800698c:	6878      	ldr	r0, [r7, #4]
 800698e:	f000 fa08 	bl	8006da2 <USBD_CtlSendStatus>
      break;
 8006992:	e059      	b.n	8006a48 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8006994:	4b2f      	ldr	r3, [pc, #188]	; (8006a54 <USBD_SetConfig+0x148>)
 8006996:	781b      	ldrb	r3, [r3, #0]
 8006998:	2b00      	cmp	r3, #0
 800699a:	d112      	bne.n	80069c2 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	2202      	movs	r2, #2
 80069a0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80069a4:	4b2b      	ldr	r3, [pc, #172]	; (8006a54 <USBD_SetConfig+0x148>)
 80069a6:	781b      	ldrb	r3, [r3, #0]
 80069a8:	461a      	mov	r2, r3
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80069ae:	4b29      	ldr	r3, [pc, #164]	; (8006a54 <USBD_SetConfig+0x148>)
 80069b0:	781b      	ldrb	r3, [r3, #0]
 80069b2:	4619      	mov	r1, r3
 80069b4:	6878      	ldr	r0, [r7, #4]
 80069b6:	f7ff f93b 	bl	8005c30 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80069ba:	6878      	ldr	r0, [r7, #4]
 80069bc:	f000 f9f1 	bl	8006da2 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80069c0:	e042      	b.n	8006a48 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 80069c2:	4b24      	ldr	r3, [pc, #144]	; (8006a54 <USBD_SetConfig+0x148>)
 80069c4:	781b      	ldrb	r3, [r3, #0]
 80069c6:	461a      	mov	r2, r3
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	685b      	ldr	r3, [r3, #4]
 80069cc:	429a      	cmp	r2, r3
 80069ce:	d02a      	beq.n	8006a26 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	685b      	ldr	r3, [r3, #4]
 80069d4:	b2db      	uxtb	r3, r3
 80069d6:	4619      	mov	r1, r3
 80069d8:	6878      	ldr	r0, [r7, #4]
 80069da:	f7ff f929 	bl	8005c30 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80069de:	4b1d      	ldr	r3, [pc, #116]	; (8006a54 <USBD_SetConfig+0x148>)
 80069e0:	781b      	ldrb	r3, [r3, #0]
 80069e2:	461a      	mov	r2, r3
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80069e8:	4b1a      	ldr	r3, [pc, #104]	; (8006a54 <USBD_SetConfig+0x148>)
 80069ea:	781b      	ldrb	r3, [r3, #0]
 80069ec:	4619      	mov	r1, r3
 80069ee:	6878      	ldr	r0, [r7, #4]
 80069f0:	f7ff f902 	bl	8005bf8 <USBD_SetClassConfig>
 80069f4:	4603      	mov	r3, r0
 80069f6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80069f8:	7bfb      	ldrb	r3, [r7, #15]
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d00f      	beq.n	8006a1e <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 80069fe:	6839      	ldr	r1, [r7, #0]
 8006a00:	6878      	ldr	r0, [r7, #4]
 8006a02:	f000 f903 	bl	8006c0c <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	685b      	ldr	r3, [r3, #4]
 8006a0a:	b2db      	uxtb	r3, r3
 8006a0c:	4619      	mov	r1, r3
 8006a0e:	6878      	ldr	r0, [r7, #4]
 8006a10:	f7ff f90e 	bl	8005c30 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	2202      	movs	r2, #2
 8006a18:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006a1c:	e014      	b.n	8006a48 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8006a1e:	6878      	ldr	r0, [r7, #4]
 8006a20:	f000 f9bf 	bl	8006da2 <USBD_CtlSendStatus>
      break;
 8006a24:	e010      	b.n	8006a48 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8006a26:	6878      	ldr	r0, [r7, #4]
 8006a28:	f000 f9bb 	bl	8006da2 <USBD_CtlSendStatus>
      break;
 8006a2c:	e00c      	b.n	8006a48 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8006a2e:	6839      	ldr	r1, [r7, #0]
 8006a30:	6878      	ldr	r0, [r7, #4]
 8006a32:	f000 f8eb 	bl	8006c0c <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006a36:	4b07      	ldr	r3, [pc, #28]	; (8006a54 <USBD_SetConfig+0x148>)
 8006a38:	781b      	ldrb	r3, [r3, #0]
 8006a3a:	4619      	mov	r1, r3
 8006a3c:	6878      	ldr	r0, [r7, #4]
 8006a3e:	f7ff f8f7 	bl	8005c30 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8006a42:	2303      	movs	r3, #3
 8006a44:	73fb      	strb	r3, [r7, #15]
      break;
 8006a46:	bf00      	nop
  }

  return ret;
 8006a48:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a4a:	4618      	mov	r0, r3
 8006a4c:	3710      	adds	r7, #16
 8006a4e:	46bd      	mov	sp, r7
 8006a50:	bd80      	pop	{r7, pc}
 8006a52:	bf00      	nop
 8006a54:	20000204 	.word	0x20000204

08006a58 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006a58:	b580      	push	{r7, lr}
 8006a5a:	b082      	sub	sp, #8
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	6078      	str	r0, [r7, #4]
 8006a60:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006a62:	683b      	ldr	r3, [r7, #0]
 8006a64:	88db      	ldrh	r3, [r3, #6]
 8006a66:	2b01      	cmp	r3, #1
 8006a68:	d004      	beq.n	8006a74 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006a6a:	6839      	ldr	r1, [r7, #0]
 8006a6c:	6878      	ldr	r0, [r7, #4]
 8006a6e:	f000 f8cd 	bl	8006c0c <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006a72:	e023      	b.n	8006abc <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a7a:	b2db      	uxtb	r3, r3
 8006a7c:	2b02      	cmp	r3, #2
 8006a7e:	dc02      	bgt.n	8006a86 <USBD_GetConfig+0x2e>
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	dc03      	bgt.n	8006a8c <USBD_GetConfig+0x34>
 8006a84:	e015      	b.n	8006ab2 <USBD_GetConfig+0x5a>
 8006a86:	2b03      	cmp	r3, #3
 8006a88:	d00b      	beq.n	8006aa2 <USBD_GetConfig+0x4a>
 8006a8a:	e012      	b.n	8006ab2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	2200      	movs	r2, #0
 8006a90:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	3308      	adds	r3, #8
 8006a96:	2201      	movs	r2, #1
 8006a98:	4619      	mov	r1, r3
 8006a9a:	6878      	ldr	r0, [r7, #4]
 8006a9c:	f000 f927 	bl	8006cee <USBD_CtlSendData>
        break;
 8006aa0:	e00c      	b.n	8006abc <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	3304      	adds	r3, #4
 8006aa6:	2201      	movs	r2, #1
 8006aa8:	4619      	mov	r1, r3
 8006aaa:	6878      	ldr	r0, [r7, #4]
 8006aac:	f000 f91f 	bl	8006cee <USBD_CtlSendData>
        break;
 8006ab0:	e004      	b.n	8006abc <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8006ab2:	6839      	ldr	r1, [r7, #0]
 8006ab4:	6878      	ldr	r0, [r7, #4]
 8006ab6:	f000 f8a9 	bl	8006c0c <USBD_CtlError>
        break;
 8006aba:	bf00      	nop
}
 8006abc:	bf00      	nop
 8006abe:	3708      	adds	r7, #8
 8006ac0:	46bd      	mov	sp, r7
 8006ac2:	bd80      	pop	{r7, pc}

08006ac4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006ac4:	b580      	push	{r7, lr}
 8006ac6:	b082      	sub	sp, #8
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	6078      	str	r0, [r7, #4]
 8006acc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ad4:	b2db      	uxtb	r3, r3
 8006ad6:	3b01      	subs	r3, #1
 8006ad8:	2b02      	cmp	r3, #2
 8006ada:	d81e      	bhi.n	8006b1a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006adc:	683b      	ldr	r3, [r7, #0]
 8006ade:	88db      	ldrh	r3, [r3, #6]
 8006ae0:	2b02      	cmp	r3, #2
 8006ae2:	d004      	beq.n	8006aee <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8006ae4:	6839      	ldr	r1, [r7, #0]
 8006ae6:	6878      	ldr	r0, [r7, #4]
 8006ae8:	f000 f890 	bl	8006c0c <USBD_CtlError>
        break;
 8006aec:	e01a      	b.n	8006b24 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	2201      	movs	r2, #1
 8006af2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d005      	beq.n	8006b0a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	68db      	ldr	r3, [r3, #12]
 8006b02:	f043 0202 	orr.w	r2, r3, #2
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	330c      	adds	r3, #12
 8006b0e:	2202      	movs	r2, #2
 8006b10:	4619      	mov	r1, r3
 8006b12:	6878      	ldr	r0, [r7, #4]
 8006b14:	f000 f8eb 	bl	8006cee <USBD_CtlSendData>
      break;
 8006b18:	e004      	b.n	8006b24 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8006b1a:	6839      	ldr	r1, [r7, #0]
 8006b1c:	6878      	ldr	r0, [r7, #4]
 8006b1e:	f000 f875 	bl	8006c0c <USBD_CtlError>
      break;
 8006b22:	bf00      	nop
  }
}
 8006b24:	bf00      	nop
 8006b26:	3708      	adds	r7, #8
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	bd80      	pop	{r7, pc}

08006b2c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006b2c:	b580      	push	{r7, lr}
 8006b2e:	b082      	sub	sp, #8
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	6078      	str	r0, [r7, #4]
 8006b34:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006b36:	683b      	ldr	r3, [r7, #0]
 8006b38:	885b      	ldrh	r3, [r3, #2]
 8006b3a:	2b01      	cmp	r3, #1
 8006b3c:	d106      	bne.n	8006b4c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	2201      	movs	r2, #1
 8006b42:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8006b46:	6878      	ldr	r0, [r7, #4]
 8006b48:	f000 f92b 	bl	8006da2 <USBD_CtlSendStatus>
  }
}
 8006b4c:	bf00      	nop
 8006b4e:	3708      	adds	r7, #8
 8006b50:	46bd      	mov	sp, r7
 8006b52:	bd80      	pop	{r7, pc}

08006b54 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006b54:	b580      	push	{r7, lr}
 8006b56:	b082      	sub	sp, #8
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	6078      	str	r0, [r7, #4]
 8006b5c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b64:	b2db      	uxtb	r3, r3
 8006b66:	3b01      	subs	r3, #1
 8006b68:	2b02      	cmp	r3, #2
 8006b6a:	d80b      	bhi.n	8006b84 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006b6c:	683b      	ldr	r3, [r7, #0]
 8006b6e:	885b      	ldrh	r3, [r3, #2]
 8006b70:	2b01      	cmp	r3, #1
 8006b72:	d10c      	bne.n	8006b8e <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	2200      	movs	r2, #0
 8006b78:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8006b7c:	6878      	ldr	r0, [r7, #4]
 8006b7e:	f000 f910 	bl	8006da2 <USBD_CtlSendStatus>
      }
      break;
 8006b82:	e004      	b.n	8006b8e <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8006b84:	6839      	ldr	r1, [r7, #0]
 8006b86:	6878      	ldr	r0, [r7, #4]
 8006b88:	f000 f840 	bl	8006c0c <USBD_CtlError>
      break;
 8006b8c:	e000      	b.n	8006b90 <USBD_ClrFeature+0x3c>
      break;
 8006b8e:	bf00      	nop
  }
}
 8006b90:	bf00      	nop
 8006b92:	3708      	adds	r7, #8
 8006b94:	46bd      	mov	sp, r7
 8006b96:	bd80      	pop	{r7, pc}

08006b98 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006b98:	b580      	push	{r7, lr}
 8006b9a:	b084      	sub	sp, #16
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	6078      	str	r0, [r7, #4]
 8006ba0:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8006ba2:	683b      	ldr	r3, [r7, #0]
 8006ba4:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	781a      	ldrb	r2, [r3, #0]
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	3301      	adds	r3, #1
 8006bb2:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	781a      	ldrb	r2, [r3, #0]
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	3301      	adds	r3, #1
 8006bc0:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8006bc2:	68f8      	ldr	r0, [r7, #12]
 8006bc4:	f7ff fabb 	bl	800613e <SWAPBYTE>
 8006bc8:	4603      	mov	r3, r0
 8006bca:	461a      	mov	r2, r3
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	3301      	adds	r3, #1
 8006bd4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	3301      	adds	r3, #1
 8006bda:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8006bdc:	68f8      	ldr	r0, [r7, #12]
 8006bde:	f7ff faae 	bl	800613e <SWAPBYTE>
 8006be2:	4603      	mov	r3, r0
 8006be4:	461a      	mov	r2, r3
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	3301      	adds	r3, #1
 8006bee:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	3301      	adds	r3, #1
 8006bf4:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8006bf6:	68f8      	ldr	r0, [r7, #12]
 8006bf8:	f7ff faa1 	bl	800613e <SWAPBYTE>
 8006bfc:	4603      	mov	r3, r0
 8006bfe:	461a      	mov	r2, r3
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	80da      	strh	r2, [r3, #6]
}
 8006c04:	bf00      	nop
 8006c06:	3710      	adds	r7, #16
 8006c08:	46bd      	mov	sp, r7
 8006c0a:	bd80      	pop	{r7, pc}

08006c0c <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006c0c:	b580      	push	{r7, lr}
 8006c0e:	b082      	sub	sp, #8
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	6078      	str	r0, [r7, #4]
 8006c14:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006c16:	2180      	movs	r1, #128	; 0x80
 8006c18:	6878      	ldr	r0, [r7, #4]
 8006c1a:	f000 fcd7 	bl	80075cc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006c1e:	2100      	movs	r1, #0
 8006c20:	6878      	ldr	r0, [r7, #4]
 8006c22:	f000 fcd3 	bl	80075cc <USBD_LL_StallEP>
}
 8006c26:	bf00      	nop
 8006c28:	3708      	adds	r7, #8
 8006c2a:	46bd      	mov	sp, r7
 8006c2c:	bd80      	pop	{r7, pc}

08006c2e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006c2e:	b580      	push	{r7, lr}
 8006c30:	b086      	sub	sp, #24
 8006c32:	af00      	add	r7, sp, #0
 8006c34:	60f8      	str	r0, [r7, #12]
 8006c36:	60b9      	str	r1, [r7, #8]
 8006c38:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006c3a:	2300      	movs	r3, #0
 8006c3c:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d036      	beq.n	8006cb2 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8006c48:	6938      	ldr	r0, [r7, #16]
 8006c4a:	f000 f836 	bl	8006cba <USBD_GetLen>
 8006c4e:	4603      	mov	r3, r0
 8006c50:	3301      	adds	r3, #1
 8006c52:	b29b      	uxth	r3, r3
 8006c54:	005b      	lsls	r3, r3, #1
 8006c56:	b29a      	uxth	r2, r3
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8006c5c:	7dfb      	ldrb	r3, [r7, #23]
 8006c5e:	68ba      	ldr	r2, [r7, #8]
 8006c60:	4413      	add	r3, r2
 8006c62:	687a      	ldr	r2, [r7, #4]
 8006c64:	7812      	ldrb	r2, [r2, #0]
 8006c66:	701a      	strb	r2, [r3, #0]
  idx++;
 8006c68:	7dfb      	ldrb	r3, [r7, #23]
 8006c6a:	3301      	adds	r3, #1
 8006c6c:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8006c6e:	7dfb      	ldrb	r3, [r7, #23]
 8006c70:	68ba      	ldr	r2, [r7, #8]
 8006c72:	4413      	add	r3, r2
 8006c74:	2203      	movs	r2, #3
 8006c76:	701a      	strb	r2, [r3, #0]
  idx++;
 8006c78:	7dfb      	ldrb	r3, [r7, #23]
 8006c7a:	3301      	adds	r3, #1
 8006c7c:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8006c7e:	e013      	b.n	8006ca8 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8006c80:	7dfb      	ldrb	r3, [r7, #23]
 8006c82:	68ba      	ldr	r2, [r7, #8]
 8006c84:	4413      	add	r3, r2
 8006c86:	693a      	ldr	r2, [r7, #16]
 8006c88:	7812      	ldrb	r2, [r2, #0]
 8006c8a:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8006c8c:	693b      	ldr	r3, [r7, #16]
 8006c8e:	3301      	adds	r3, #1
 8006c90:	613b      	str	r3, [r7, #16]
    idx++;
 8006c92:	7dfb      	ldrb	r3, [r7, #23]
 8006c94:	3301      	adds	r3, #1
 8006c96:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8006c98:	7dfb      	ldrb	r3, [r7, #23]
 8006c9a:	68ba      	ldr	r2, [r7, #8]
 8006c9c:	4413      	add	r3, r2
 8006c9e:	2200      	movs	r2, #0
 8006ca0:	701a      	strb	r2, [r3, #0]
    idx++;
 8006ca2:	7dfb      	ldrb	r3, [r7, #23]
 8006ca4:	3301      	adds	r3, #1
 8006ca6:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8006ca8:	693b      	ldr	r3, [r7, #16]
 8006caa:	781b      	ldrb	r3, [r3, #0]
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d1e7      	bne.n	8006c80 <USBD_GetString+0x52>
 8006cb0:	e000      	b.n	8006cb4 <USBD_GetString+0x86>
    return;
 8006cb2:	bf00      	nop
  }
}
 8006cb4:	3718      	adds	r7, #24
 8006cb6:	46bd      	mov	sp, r7
 8006cb8:	bd80      	pop	{r7, pc}

08006cba <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006cba:	b480      	push	{r7}
 8006cbc:	b085      	sub	sp, #20
 8006cbe:	af00      	add	r7, sp, #0
 8006cc0:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006cc2:	2300      	movs	r3, #0
 8006cc4:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8006cca:	e005      	b.n	8006cd8 <USBD_GetLen+0x1e>
  {
    len++;
 8006ccc:	7bfb      	ldrb	r3, [r7, #15]
 8006cce:	3301      	adds	r3, #1
 8006cd0:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8006cd2:	68bb      	ldr	r3, [r7, #8]
 8006cd4:	3301      	adds	r3, #1
 8006cd6:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8006cd8:	68bb      	ldr	r3, [r7, #8]
 8006cda:	781b      	ldrb	r3, [r3, #0]
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d1f5      	bne.n	8006ccc <USBD_GetLen+0x12>
  }

  return len;
 8006ce0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ce2:	4618      	mov	r0, r3
 8006ce4:	3714      	adds	r7, #20
 8006ce6:	46bd      	mov	sp, r7
 8006ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cec:	4770      	bx	lr

08006cee <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8006cee:	b580      	push	{r7, lr}
 8006cf0:	b084      	sub	sp, #16
 8006cf2:	af00      	add	r7, sp, #0
 8006cf4:	60f8      	str	r0, [r7, #12]
 8006cf6:	60b9      	str	r1, [r7, #8]
 8006cf8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	2202      	movs	r2, #2
 8006cfe:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	687a      	ldr	r2, [r7, #4]
 8006d06:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	687a      	ldr	r2, [r7, #4]
 8006d0c:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	68ba      	ldr	r2, [r7, #8]
 8006d12:	2100      	movs	r1, #0
 8006d14:	68f8      	ldr	r0, [r7, #12]
 8006d16:	f000 fce2 	bl	80076de <USBD_LL_Transmit>

  return USBD_OK;
 8006d1a:	2300      	movs	r3, #0
}
 8006d1c:	4618      	mov	r0, r3
 8006d1e:	3710      	adds	r7, #16
 8006d20:	46bd      	mov	sp, r7
 8006d22:	bd80      	pop	{r7, pc}

08006d24 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8006d24:	b580      	push	{r7, lr}
 8006d26:	b084      	sub	sp, #16
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	60f8      	str	r0, [r7, #12]
 8006d2c:	60b9      	str	r1, [r7, #8]
 8006d2e:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	68ba      	ldr	r2, [r7, #8]
 8006d34:	2100      	movs	r1, #0
 8006d36:	68f8      	ldr	r0, [r7, #12]
 8006d38:	f000 fcd1 	bl	80076de <USBD_LL_Transmit>

  return USBD_OK;
 8006d3c:	2300      	movs	r3, #0
}
 8006d3e:	4618      	mov	r0, r3
 8006d40:	3710      	adds	r7, #16
 8006d42:	46bd      	mov	sp, r7
 8006d44:	bd80      	pop	{r7, pc}

08006d46 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8006d46:	b580      	push	{r7, lr}
 8006d48:	b084      	sub	sp, #16
 8006d4a:	af00      	add	r7, sp, #0
 8006d4c:	60f8      	str	r0, [r7, #12]
 8006d4e:	60b9      	str	r1, [r7, #8]
 8006d50:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	2203      	movs	r2, #3
 8006d56:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	687a      	ldr	r2, [r7, #4]
 8006d5e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	687a      	ldr	r2, [r7, #4]
 8006d66:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	68ba      	ldr	r2, [r7, #8]
 8006d6e:	2100      	movs	r1, #0
 8006d70:	68f8      	ldr	r0, [r7, #12]
 8006d72:	f000 fcd5 	bl	8007720 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006d76:	2300      	movs	r3, #0
}
 8006d78:	4618      	mov	r0, r3
 8006d7a:	3710      	adds	r7, #16
 8006d7c:	46bd      	mov	sp, r7
 8006d7e:	bd80      	pop	{r7, pc}

08006d80 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8006d80:	b580      	push	{r7, lr}
 8006d82:	b084      	sub	sp, #16
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	60f8      	str	r0, [r7, #12]
 8006d88:	60b9      	str	r1, [r7, #8]
 8006d8a:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	68ba      	ldr	r2, [r7, #8]
 8006d90:	2100      	movs	r1, #0
 8006d92:	68f8      	ldr	r0, [r7, #12]
 8006d94:	f000 fcc4 	bl	8007720 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006d98:	2300      	movs	r3, #0
}
 8006d9a:	4618      	mov	r0, r3
 8006d9c:	3710      	adds	r7, #16
 8006d9e:	46bd      	mov	sp, r7
 8006da0:	bd80      	pop	{r7, pc}

08006da2 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006da2:	b580      	push	{r7, lr}
 8006da4:	b082      	sub	sp, #8
 8006da6:	af00      	add	r7, sp, #0
 8006da8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	2204      	movs	r2, #4
 8006dae:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006db2:	2300      	movs	r3, #0
 8006db4:	2200      	movs	r2, #0
 8006db6:	2100      	movs	r1, #0
 8006db8:	6878      	ldr	r0, [r7, #4]
 8006dba:	f000 fc90 	bl	80076de <USBD_LL_Transmit>

  return USBD_OK;
 8006dbe:	2300      	movs	r3, #0
}
 8006dc0:	4618      	mov	r0, r3
 8006dc2:	3708      	adds	r7, #8
 8006dc4:	46bd      	mov	sp, r7
 8006dc6:	bd80      	pop	{r7, pc}

08006dc8 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006dc8:	b580      	push	{r7, lr}
 8006dca:	b082      	sub	sp, #8
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	2205      	movs	r2, #5
 8006dd4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006dd8:	2300      	movs	r3, #0
 8006dda:	2200      	movs	r2, #0
 8006ddc:	2100      	movs	r1, #0
 8006dde:	6878      	ldr	r0, [r7, #4]
 8006de0:	f000 fc9e 	bl	8007720 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006de4:	2300      	movs	r3, #0
}
 8006de6:	4618      	mov	r0, r3
 8006de8:	3708      	adds	r7, #8
 8006dea:	46bd      	mov	sp, r7
 8006dec:	bd80      	pop	{r7, pc}
	...

08006df0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006df0:	b580      	push	{r7, lr}
 8006df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006df4:	2200      	movs	r2, #0
 8006df6:	4912      	ldr	r1, [pc, #72]	; (8006e40 <MX_USB_DEVICE_Init+0x50>)
 8006df8:	4812      	ldr	r0, [pc, #72]	; (8006e44 <MX_USB_DEVICE_Init+0x54>)
 8006dfa:	f7fe fe8f 	bl	8005b1c <USBD_Init>
 8006dfe:	4603      	mov	r3, r0
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d001      	beq.n	8006e08 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8006e04:	f7f9 fe02 	bl	8000a0c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8006e08:	490f      	ldr	r1, [pc, #60]	; (8006e48 <MX_USB_DEVICE_Init+0x58>)
 8006e0a:	480e      	ldr	r0, [pc, #56]	; (8006e44 <MX_USB_DEVICE_Init+0x54>)
 8006e0c:	f7fe feb6 	bl	8005b7c <USBD_RegisterClass>
 8006e10:	4603      	mov	r3, r0
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d001      	beq.n	8006e1a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8006e16:	f7f9 fdf9 	bl	8000a0c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8006e1a:	490c      	ldr	r1, [pc, #48]	; (8006e4c <MX_USB_DEVICE_Init+0x5c>)
 8006e1c:	4809      	ldr	r0, [pc, #36]	; (8006e44 <MX_USB_DEVICE_Init+0x54>)
 8006e1e:	f7fe fdd7 	bl	80059d0 <USBD_CDC_RegisterInterface>
 8006e22:	4603      	mov	r3, r0
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d001      	beq.n	8006e2c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8006e28:	f7f9 fdf0 	bl	8000a0c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006e2c:	4805      	ldr	r0, [pc, #20]	; (8006e44 <MX_USB_DEVICE_Init+0x54>)
 8006e2e:	f7fe fecc 	bl	8005bca <USBD_Start>
 8006e32:	4603      	mov	r3, r0
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d001      	beq.n	8006e3c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8006e38:	f7f9 fde8 	bl	8000a0c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006e3c:	bf00      	nop
 8006e3e:	bd80      	pop	{r7, pc}
 8006e40:	20000130 	.word	0x20000130
 8006e44:	20000494 	.word	0x20000494
 8006e48:	20000018 	.word	0x20000018
 8006e4c:	2000011c 	.word	0x2000011c

08006e50 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8006e50:	b580      	push	{r7, lr}
 8006e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8006e54:	2200      	movs	r2, #0
 8006e56:	4905      	ldr	r1, [pc, #20]	; (8006e6c <CDC_Init_FS+0x1c>)
 8006e58:	4805      	ldr	r0, [pc, #20]	; (8006e70 <CDC_Init_FS+0x20>)
 8006e5a:	f7fe fdce 	bl	80059fa <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8006e5e:	4905      	ldr	r1, [pc, #20]	; (8006e74 <CDC_Init_FS+0x24>)
 8006e60:	4803      	ldr	r0, [pc, #12]	; (8006e70 <CDC_Init_FS+0x20>)
 8006e62:	f7fe fde8 	bl	8005a36 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8006e66:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8006e68:	4618      	mov	r0, r3
 8006e6a:	bd80      	pop	{r7, pc}
 8006e6c:	20000f64 	.word	0x20000f64
 8006e70:	20000494 	.word	0x20000494
 8006e74:	20000764 	.word	0x20000764

08006e78 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8006e78:	b480      	push	{r7}
 8006e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8006e7c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8006e7e:	4618      	mov	r0, r3
 8006e80:	46bd      	mov	sp, r7
 8006e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e86:	4770      	bx	lr

08006e88 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8006e88:	b480      	push	{r7}
 8006e8a:	b083      	sub	sp, #12
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	4603      	mov	r3, r0
 8006e90:	6039      	str	r1, [r7, #0]
 8006e92:	71fb      	strb	r3, [r7, #7]
 8006e94:	4613      	mov	r3, r2
 8006e96:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8006e98:	79fb      	ldrb	r3, [r7, #7]
 8006e9a:	2b23      	cmp	r3, #35	; 0x23
 8006e9c:	d84a      	bhi.n	8006f34 <CDC_Control_FS+0xac>
 8006e9e:	a201      	add	r2, pc, #4	; (adr r2, 8006ea4 <CDC_Control_FS+0x1c>)
 8006ea0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ea4:	08006f35 	.word	0x08006f35
 8006ea8:	08006f35 	.word	0x08006f35
 8006eac:	08006f35 	.word	0x08006f35
 8006eb0:	08006f35 	.word	0x08006f35
 8006eb4:	08006f35 	.word	0x08006f35
 8006eb8:	08006f35 	.word	0x08006f35
 8006ebc:	08006f35 	.word	0x08006f35
 8006ec0:	08006f35 	.word	0x08006f35
 8006ec4:	08006f35 	.word	0x08006f35
 8006ec8:	08006f35 	.word	0x08006f35
 8006ecc:	08006f35 	.word	0x08006f35
 8006ed0:	08006f35 	.word	0x08006f35
 8006ed4:	08006f35 	.word	0x08006f35
 8006ed8:	08006f35 	.word	0x08006f35
 8006edc:	08006f35 	.word	0x08006f35
 8006ee0:	08006f35 	.word	0x08006f35
 8006ee4:	08006f35 	.word	0x08006f35
 8006ee8:	08006f35 	.word	0x08006f35
 8006eec:	08006f35 	.word	0x08006f35
 8006ef0:	08006f35 	.word	0x08006f35
 8006ef4:	08006f35 	.word	0x08006f35
 8006ef8:	08006f35 	.word	0x08006f35
 8006efc:	08006f35 	.word	0x08006f35
 8006f00:	08006f35 	.word	0x08006f35
 8006f04:	08006f35 	.word	0x08006f35
 8006f08:	08006f35 	.word	0x08006f35
 8006f0c:	08006f35 	.word	0x08006f35
 8006f10:	08006f35 	.word	0x08006f35
 8006f14:	08006f35 	.word	0x08006f35
 8006f18:	08006f35 	.word	0x08006f35
 8006f1c:	08006f35 	.word	0x08006f35
 8006f20:	08006f35 	.word	0x08006f35
 8006f24:	08006f35 	.word	0x08006f35
 8006f28:	08006f35 	.word	0x08006f35
 8006f2c:	08006f35 	.word	0x08006f35
 8006f30:	08006f35 	.word	0x08006f35
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8006f34:	bf00      	nop
  }

  return (USBD_OK);
 8006f36:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8006f38:	4618      	mov	r0, r3
 8006f3a:	370c      	adds	r7, #12
 8006f3c:	46bd      	mov	sp, r7
 8006f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f42:	4770      	bx	lr

08006f44 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8006f44:	b580      	push	{r7, lr}
 8006f46:	b082      	sub	sp, #8
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	6078      	str	r0, [r7, #4]
 8006f4c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8006f4e:	6879      	ldr	r1, [r7, #4]
 8006f50:	4805      	ldr	r0, [pc, #20]	; (8006f68 <CDC_Receive_FS+0x24>)
 8006f52:	f7fe fd70 	bl	8005a36 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8006f56:	4804      	ldr	r0, [pc, #16]	; (8006f68 <CDC_Receive_FS+0x24>)
 8006f58:	f7fe fdb6 	bl	8005ac8 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8006f5c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8006f5e:	4618      	mov	r0, r3
 8006f60:	3708      	adds	r7, #8
 8006f62:	46bd      	mov	sp, r7
 8006f64:	bd80      	pop	{r7, pc}
 8006f66:	bf00      	nop
 8006f68:	20000494 	.word	0x20000494

08006f6c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8006f6c:	b580      	push	{r7, lr}
 8006f6e:	b084      	sub	sp, #16
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	6078      	str	r0, [r7, #4]
 8006f74:	460b      	mov	r3, r1
 8006f76:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8006f78:	2300      	movs	r3, #0
 8006f7a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8006f7c:	4b0d      	ldr	r3, [pc, #52]	; (8006fb4 <CDC_Transmit_FS+0x48>)
 8006f7e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006f82:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8006f84:	68bb      	ldr	r3, [r7, #8]
 8006f86:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d001      	beq.n	8006f92 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8006f8e:	2301      	movs	r3, #1
 8006f90:	e00b      	b.n	8006faa <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8006f92:	887b      	ldrh	r3, [r7, #2]
 8006f94:	461a      	mov	r2, r3
 8006f96:	6879      	ldr	r1, [r7, #4]
 8006f98:	4806      	ldr	r0, [pc, #24]	; (8006fb4 <CDC_Transmit_FS+0x48>)
 8006f9a:	f7fe fd2e 	bl	80059fa <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8006f9e:	4805      	ldr	r0, [pc, #20]	; (8006fb4 <CDC_Transmit_FS+0x48>)
 8006fa0:	f7fe fd62 	bl	8005a68 <USBD_CDC_TransmitPacket>
 8006fa4:	4603      	mov	r3, r0
 8006fa6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8006fa8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006faa:	4618      	mov	r0, r3
 8006fac:	3710      	adds	r7, #16
 8006fae:	46bd      	mov	sp, r7
 8006fb0:	bd80      	pop	{r7, pc}
 8006fb2:	bf00      	nop
 8006fb4:	20000494 	.word	0x20000494

08006fb8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8006fb8:	b480      	push	{r7}
 8006fba:	b087      	sub	sp, #28
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	60f8      	str	r0, [r7, #12]
 8006fc0:	60b9      	str	r1, [r7, #8]
 8006fc2:	4613      	mov	r3, r2
 8006fc4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8006fc6:	2300      	movs	r3, #0
 8006fc8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8006fca:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006fce:	4618      	mov	r0, r3
 8006fd0:	371c      	adds	r7, #28
 8006fd2:	46bd      	mov	sp, r7
 8006fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd8:	4770      	bx	lr
	...

08006fdc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006fdc:	b480      	push	{r7}
 8006fde:	b083      	sub	sp, #12
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	4603      	mov	r3, r0
 8006fe4:	6039      	str	r1, [r7, #0]
 8006fe6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006fe8:	683b      	ldr	r3, [r7, #0]
 8006fea:	2212      	movs	r2, #18
 8006fec:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8006fee:	4b03      	ldr	r3, [pc, #12]	; (8006ffc <USBD_FS_DeviceDescriptor+0x20>)
}
 8006ff0:	4618      	mov	r0, r3
 8006ff2:	370c      	adds	r7, #12
 8006ff4:	46bd      	mov	sp, r7
 8006ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ffa:	4770      	bx	lr
 8006ffc:	2000014c 	.word	0x2000014c

08007000 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007000:	b480      	push	{r7}
 8007002:	b083      	sub	sp, #12
 8007004:	af00      	add	r7, sp, #0
 8007006:	4603      	mov	r3, r0
 8007008:	6039      	str	r1, [r7, #0]
 800700a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800700c:	683b      	ldr	r3, [r7, #0]
 800700e:	2204      	movs	r2, #4
 8007010:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007012:	4b03      	ldr	r3, [pc, #12]	; (8007020 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007014:	4618      	mov	r0, r3
 8007016:	370c      	adds	r7, #12
 8007018:	46bd      	mov	sp, r7
 800701a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800701e:	4770      	bx	lr
 8007020:	20000160 	.word	0x20000160

08007024 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007024:	b580      	push	{r7, lr}
 8007026:	b082      	sub	sp, #8
 8007028:	af00      	add	r7, sp, #0
 800702a:	4603      	mov	r3, r0
 800702c:	6039      	str	r1, [r7, #0]
 800702e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007030:	79fb      	ldrb	r3, [r7, #7]
 8007032:	2b00      	cmp	r3, #0
 8007034:	d105      	bne.n	8007042 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007036:	683a      	ldr	r2, [r7, #0]
 8007038:	4907      	ldr	r1, [pc, #28]	; (8007058 <USBD_FS_ProductStrDescriptor+0x34>)
 800703a:	4808      	ldr	r0, [pc, #32]	; (800705c <USBD_FS_ProductStrDescriptor+0x38>)
 800703c:	f7ff fdf7 	bl	8006c2e <USBD_GetString>
 8007040:	e004      	b.n	800704c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007042:	683a      	ldr	r2, [r7, #0]
 8007044:	4904      	ldr	r1, [pc, #16]	; (8007058 <USBD_FS_ProductStrDescriptor+0x34>)
 8007046:	4805      	ldr	r0, [pc, #20]	; (800705c <USBD_FS_ProductStrDescriptor+0x38>)
 8007048:	f7ff fdf1 	bl	8006c2e <USBD_GetString>
  }
  return USBD_StrDesc;
 800704c:	4b02      	ldr	r3, [pc, #8]	; (8007058 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800704e:	4618      	mov	r0, r3
 8007050:	3708      	adds	r7, #8
 8007052:	46bd      	mov	sp, r7
 8007054:	bd80      	pop	{r7, pc}
 8007056:	bf00      	nop
 8007058:	20001764 	.word	0x20001764
 800705c:	080080f8 	.word	0x080080f8

08007060 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007060:	b580      	push	{r7, lr}
 8007062:	b082      	sub	sp, #8
 8007064:	af00      	add	r7, sp, #0
 8007066:	4603      	mov	r3, r0
 8007068:	6039      	str	r1, [r7, #0]
 800706a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800706c:	683a      	ldr	r2, [r7, #0]
 800706e:	4904      	ldr	r1, [pc, #16]	; (8007080 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007070:	4804      	ldr	r0, [pc, #16]	; (8007084 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007072:	f7ff fddc 	bl	8006c2e <USBD_GetString>
  return USBD_StrDesc;
 8007076:	4b02      	ldr	r3, [pc, #8]	; (8007080 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007078:	4618      	mov	r0, r3
 800707a:	3708      	adds	r7, #8
 800707c:	46bd      	mov	sp, r7
 800707e:	bd80      	pop	{r7, pc}
 8007080:	20001764 	.word	0x20001764
 8007084:	08008110 	.word	0x08008110

08007088 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007088:	b580      	push	{r7, lr}
 800708a:	b082      	sub	sp, #8
 800708c:	af00      	add	r7, sp, #0
 800708e:	4603      	mov	r3, r0
 8007090:	6039      	str	r1, [r7, #0]
 8007092:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007094:	683b      	ldr	r3, [r7, #0]
 8007096:	221a      	movs	r2, #26
 8007098:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800709a:	f000 f843 	bl	8007124 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800709e:	4b02      	ldr	r3, [pc, #8]	; (80070a8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80070a0:	4618      	mov	r0, r3
 80070a2:	3708      	adds	r7, #8
 80070a4:	46bd      	mov	sp, r7
 80070a6:	bd80      	pop	{r7, pc}
 80070a8:	20000164 	.word	0x20000164

080070ac <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80070ac:	b580      	push	{r7, lr}
 80070ae:	b082      	sub	sp, #8
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	4603      	mov	r3, r0
 80070b4:	6039      	str	r1, [r7, #0]
 80070b6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80070b8:	79fb      	ldrb	r3, [r7, #7]
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d105      	bne.n	80070ca <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80070be:	683a      	ldr	r2, [r7, #0]
 80070c0:	4907      	ldr	r1, [pc, #28]	; (80070e0 <USBD_FS_ConfigStrDescriptor+0x34>)
 80070c2:	4808      	ldr	r0, [pc, #32]	; (80070e4 <USBD_FS_ConfigStrDescriptor+0x38>)
 80070c4:	f7ff fdb3 	bl	8006c2e <USBD_GetString>
 80070c8:	e004      	b.n	80070d4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80070ca:	683a      	ldr	r2, [r7, #0]
 80070cc:	4904      	ldr	r1, [pc, #16]	; (80070e0 <USBD_FS_ConfigStrDescriptor+0x34>)
 80070ce:	4805      	ldr	r0, [pc, #20]	; (80070e4 <USBD_FS_ConfigStrDescriptor+0x38>)
 80070d0:	f7ff fdad 	bl	8006c2e <USBD_GetString>
  }
  return USBD_StrDesc;
 80070d4:	4b02      	ldr	r3, [pc, #8]	; (80070e0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80070d6:	4618      	mov	r0, r3
 80070d8:	3708      	adds	r7, #8
 80070da:	46bd      	mov	sp, r7
 80070dc:	bd80      	pop	{r7, pc}
 80070de:	bf00      	nop
 80070e0:	20001764 	.word	0x20001764
 80070e4:	08008124 	.word	0x08008124

080070e8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80070e8:	b580      	push	{r7, lr}
 80070ea:	b082      	sub	sp, #8
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	4603      	mov	r3, r0
 80070f0:	6039      	str	r1, [r7, #0]
 80070f2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80070f4:	79fb      	ldrb	r3, [r7, #7]
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d105      	bne.n	8007106 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80070fa:	683a      	ldr	r2, [r7, #0]
 80070fc:	4907      	ldr	r1, [pc, #28]	; (800711c <USBD_FS_InterfaceStrDescriptor+0x34>)
 80070fe:	4808      	ldr	r0, [pc, #32]	; (8007120 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007100:	f7ff fd95 	bl	8006c2e <USBD_GetString>
 8007104:	e004      	b.n	8007110 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007106:	683a      	ldr	r2, [r7, #0]
 8007108:	4904      	ldr	r1, [pc, #16]	; (800711c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800710a:	4805      	ldr	r0, [pc, #20]	; (8007120 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800710c:	f7ff fd8f 	bl	8006c2e <USBD_GetString>
  }
  return USBD_StrDesc;
 8007110:	4b02      	ldr	r3, [pc, #8]	; (800711c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007112:	4618      	mov	r0, r3
 8007114:	3708      	adds	r7, #8
 8007116:	46bd      	mov	sp, r7
 8007118:	bd80      	pop	{r7, pc}
 800711a:	bf00      	nop
 800711c:	20001764 	.word	0x20001764
 8007120:	08008130 	.word	0x08008130

08007124 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007124:	b580      	push	{r7, lr}
 8007126:	b084      	sub	sp, #16
 8007128:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800712a:	4b0f      	ldr	r3, [pc, #60]	; (8007168 <Get_SerialNum+0x44>)
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007130:	4b0e      	ldr	r3, [pc, #56]	; (800716c <Get_SerialNum+0x48>)
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007136:	4b0e      	ldr	r3, [pc, #56]	; (8007170 <Get_SerialNum+0x4c>)
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800713c:	68fa      	ldr	r2, [r7, #12]
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	4413      	add	r3, r2
 8007142:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	2b00      	cmp	r3, #0
 8007148:	d009      	beq.n	800715e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800714a:	2208      	movs	r2, #8
 800714c:	4909      	ldr	r1, [pc, #36]	; (8007174 <Get_SerialNum+0x50>)
 800714e:	68f8      	ldr	r0, [r7, #12]
 8007150:	f000 f814 	bl	800717c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007154:	2204      	movs	r2, #4
 8007156:	4908      	ldr	r1, [pc, #32]	; (8007178 <Get_SerialNum+0x54>)
 8007158:	68b8      	ldr	r0, [r7, #8]
 800715a:	f000 f80f 	bl	800717c <IntToUnicode>
  }
}
 800715e:	bf00      	nop
 8007160:	3710      	adds	r7, #16
 8007162:	46bd      	mov	sp, r7
 8007164:	bd80      	pop	{r7, pc}
 8007166:	bf00      	nop
 8007168:	1fff7a10 	.word	0x1fff7a10
 800716c:	1fff7a14 	.word	0x1fff7a14
 8007170:	1fff7a18 	.word	0x1fff7a18
 8007174:	20000166 	.word	0x20000166
 8007178:	20000176 	.word	0x20000176

0800717c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800717c:	b480      	push	{r7}
 800717e:	b087      	sub	sp, #28
 8007180:	af00      	add	r7, sp, #0
 8007182:	60f8      	str	r0, [r7, #12]
 8007184:	60b9      	str	r1, [r7, #8]
 8007186:	4613      	mov	r3, r2
 8007188:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800718a:	2300      	movs	r3, #0
 800718c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800718e:	2300      	movs	r3, #0
 8007190:	75fb      	strb	r3, [r7, #23]
 8007192:	e027      	b.n	80071e4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	0f1b      	lsrs	r3, r3, #28
 8007198:	2b09      	cmp	r3, #9
 800719a:	d80b      	bhi.n	80071b4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	0f1b      	lsrs	r3, r3, #28
 80071a0:	b2da      	uxtb	r2, r3
 80071a2:	7dfb      	ldrb	r3, [r7, #23]
 80071a4:	005b      	lsls	r3, r3, #1
 80071a6:	4619      	mov	r1, r3
 80071a8:	68bb      	ldr	r3, [r7, #8]
 80071aa:	440b      	add	r3, r1
 80071ac:	3230      	adds	r2, #48	; 0x30
 80071ae:	b2d2      	uxtb	r2, r2
 80071b0:	701a      	strb	r2, [r3, #0]
 80071b2:	e00a      	b.n	80071ca <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	0f1b      	lsrs	r3, r3, #28
 80071b8:	b2da      	uxtb	r2, r3
 80071ba:	7dfb      	ldrb	r3, [r7, #23]
 80071bc:	005b      	lsls	r3, r3, #1
 80071be:	4619      	mov	r1, r3
 80071c0:	68bb      	ldr	r3, [r7, #8]
 80071c2:	440b      	add	r3, r1
 80071c4:	3237      	adds	r2, #55	; 0x37
 80071c6:	b2d2      	uxtb	r2, r2
 80071c8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	011b      	lsls	r3, r3, #4
 80071ce:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80071d0:	7dfb      	ldrb	r3, [r7, #23]
 80071d2:	005b      	lsls	r3, r3, #1
 80071d4:	3301      	adds	r3, #1
 80071d6:	68ba      	ldr	r2, [r7, #8]
 80071d8:	4413      	add	r3, r2
 80071da:	2200      	movs	r2, #0
 80071dc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80071de:	7dfb      	ldrb	r3, [r7, #23]
 80071e0:	3301      	adds	r3, #1
 80071e2:	75fb      	strb	r3, [r7, #23]
 80071e4:	7dfa      	ldrb	r2, [r7, #23]
 80071e6:	79fb      	ldrb	r3, [r7, #7]
 80071e8:	429a      	cmp	r2, r3
 80071ea:	d3d3      	bcc.n	8007194 <IntToUnicode+0x18>
  }
}
 80071ec:	bf00      	nop
 80071ee:	bf00      	nop
 80071f0:	371c      	adds	r7, #28
 80071f2:	46bd      	mov	sp, r7
 80071f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f8:	4770      	bx	lr
	...

080071fc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80071fc:	b580      	push	{r7, lr}
 80071fe:	b08a      	sub	sp, #40	; 0x28
 8007200:	af00      	add	r7, sp, #0
 8007202:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007204:	f107 0314 	add.w	r3, r7, #20
 8007208:	2200      	movs	r2, #0
 800720a:	601a      	str	r2, [r3, #0]
 800720c:	605a      	str	r2, [r3, #4]
 800720e:	609a      	str	r2, [r3, #8]
 8007210:	60da      	str	r2, [r3, #12]
 8007212:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800721c:	d13a      	bne.n	8007294 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800721e:	2300      	movs	r3, #0
 8007220:	613b      	str	r3, [r7, #16]
 8007222:	4b1e      	ldr	r3, [pc, #120]	; (800729c <HAL_PCD_MspInit+0xa0>)
 8007224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007226:	4a1d      	ldr	r2, [pc, #116]	; (800729c <HAL_PCD_MspInit+0xa0>)
 8007228:	f043 0301 	orr.w	r3, r3, #1
 800722c:	6313      	str	r3, [r2, #48]	; 0x30
 800722e:	4b1b      	ldr	r3, [pc, #108]	; (800729c <HAL_PCD_MspInit+0xa0>)
 8007230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007232:	f003 0301 	and.w	r3, r3, #1
 8007236:	613b      	str	r3, [r7, #16]
 8007238:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800723a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800723e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007240:	2302      	movs	r3, #2
 8007242:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007244:	2300      	movs	r3, #0
 8007246:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007248:	2303      	movs	r3, #3
 800724a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800724c:	230a      	movs	r3, #10
 800724e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007250:	f107 0314 	add.w	r3, r7, #20
 8007254:	4619      	mov	r1, r3
 8007256:	4812      	ldr	r0, [pc, #72]	; (80072a0 <HAL_PCD_MspInit+0xa4>)
 8007258:	f7f9 fea4 	bl	8000fa4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800725c:	4b0f      	ldr	r3, [pc, #60]	; (800729c <HAL_PCD_MspInit+0xa0>)
 800725e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007260:	4a0e      	ldr	r2, [pc, #56]	; (800729c <HAL_PCD_MspInit+0xa0>)
 8007262:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007266:	6353      	str	r3, [r2, #52]	; 0x34
 8007268:	2300      	movs	r3, #0
 800726a:	60fb      	str	r3, [r7, #12]
 800726c:	4b0b      	ldr	r3, [pc, #44]	; (800729c <HAL_PCD_MspInit+0xa0>)
 800726e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007270:	4a0a      	ldr	r2, [pc, #40]	; (800729c <HAL_PCD_MspInit+0xa0>)
 8007272:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007276:	6453      	str	r3, [r2, #68]	; 0x44
 8007278:	4b08      	ldr	r3, [pc, #32]	; (800729c <HAL_PCD_MspInit+0xa0>)
 800727a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800727c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007280:	60fb      	str	r3, [r7, #12]
 8007282:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007284:	2200      	movs	r2, #0
 8007286:	2100      	movs	r1, #0
 8007288:	2043      	movs	r0, #67	; 0x43
 800728a:	f7f9 fe54 	bl	8000f36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800728e:	2043      	movs	r0, #67	; 0x43
 8007290:	f7f9 fe6d 	bl	8000f6e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007294:	bf00      	nop
 8007296:	3728      	adds	r7, #40	; 0x28
 8007298:	46bd      	mov	sp, r7
 800729a:	bd80      	pop	{r7, pc}
 800729c:	40023800 	.word	0x40023800
 80072a0:	40020000 	.word	0x40020000

080072a4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80072a4:	b580      	push	{r7, lr}
 80072a6:	b082      	sub	sp, #8
 80072a8:	af00      	add	r7, sp, #0
 80072aa:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80072b8:	4619      	mov	r1, r3
 80072ba:	4610      	mov	r0, r2
 80072bc:	f7fe fcd0 	bl	8005c60 <USBD_LL_SetupStage>
}
 80072c0:	bf00      	nop
 80072c2:	3708      	adds	r7, #8
 80072c4:	46bd      	mov	sp, r7
 80072c6:	bd80      	pop	{r7, pc}

080072c8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80072c8:	b580      	push	{r7, lr}
 80072ca:	b082      	sub	sp, #8
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	6078      	str	r0, [r7, #4]
 80072d0:	460b      	mov	r3, r1
 80072d2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80072da:	78fa      	ldrb	r2, [r7, #3]
 80072dc:	6879      	ldr	r1, [r7, #4]
 80072de:	4613      	mov	r3, r2
 80072e0:	00db      	lsls	r3, r3, #3
 80072e2:	1a9b      	subs	r3, r3, r2
 80072e4:	009b      	lsls	r3, r3, #2
 80072e6:	440b      	add	r3, r1
 80072e8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80072ec:	681a      	ldr	r2, [r3, #0]
 80072ee:	78fb      	ldrb	r3, [r7, #3]
 80072f0:	4619      	mov	r1, r3
 80072f2:	f7fe fd0a 	bl	8005d0a <USBD_LL_DataOutStage>
}
 80072f6:	bf00      	nop
 80072f8:	3708      	adds	r7, #8
 80072fa:	46bd      	mov	sp, r7
 80072fc:	bd80      	pop	{r7, pc}

080072fe <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80072fe:	b580      	push	{r7, lr}
 8007300:	b082      	sub	sp, #8
 8007302:	af00      	add	r7, sp, #0
 8007304:	6078      	str	r0, [r7, #4]
 8007306:	460b      	mov	r3, r1
 8007308:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8007310:	78fa      	ldrb	r2, [r7, #3]
 8007312:	6879      	ldr	r1, [r7, #4]
 8007314:	4613      	mov	r3, r2
 8007316:	00db      	lsls	r3, r3, #3
 8007318:	1a9b      	subs	r3, r3, r2
 800731a:	009b      	lsls	r3, r3, #2
 800731c:	440b      	add	r3, r1
 800731e:	3348      	adds	r3, #72	; 0x48
 8007320:	681a      	ldr	r2, [r3, #0]
 8007322:	78fb      	ldrb	r3, [r7, #3]
 8007324:	4619      	mov	r1, r3
 8007326:	f7fe fd53 	bl	8005dd0 <USBD_LL_DataInStage>
}
 800732a:	bf00      	nop
 800732c:	3708      	adds	r7, #8
 800732e:	46bd      	mov	sp, r7
 8007330:	bd80      	pop	{r7, pc}

08007332 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007332:	b580      	push	{r7, lr}
 8007334:	b082      	sub	sp, #8
 8007336:	af00      	add	r7, sp, #0
 8007338:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007340:	4618      	mov	r0, r3
 8007342:	f7fe fe67 	bl	8006014 <USBD_LL_SOF>
}
 8007346:	bf00      	nop
 8007348:	3708      	adds	r7, #8
 800734a:	46bd      	mov	sp, r7
 800734c:	bd80      	pop	{r7, pc}

0800734e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800734e:	b580      	push	{r7, lr}
 8007350:	b084      	sub	sp, #16
 8007352:	af00      	add	r7, sp, #0
 8007354:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007356:	2301      	movs	r3, #1
 8007358:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	68db      	ldr	r3, [r3, #12]
 800735e:	2b02      	cmp	r3, #2
 8007360:	d001      	beq.n	8007366 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8007362:	f7f9 fb53 	bl	8000a0c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800736c:	7bfa      	ldrb	r2, [r7, #15]
 800736e:	4611      	mov	r1, r2
 8007370:	4618      	mov	r0, r3
 8007372:	f7fe fe11 	bl	8005f98 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800737c:	4618      	mov	r0, r3
 800737e:	f7fe fdbd 	bl	8005efc <USBD_LL_Reset>
}
 8007382:	bf00      	nop
 8007384:	3710      	adds	r7, #16
 8007386:	46bd      	mov	sp, r7
 8007388:	bd80      	pop	{r7, pc}
	...

0800738c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800738c:	b580      	push	{r7, lr}
 800738e:	b082      	sub	sp, #8
 8007390:	af00      	add	r7, sp, #0
 8007392:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800739a:	4618      	mov	r0, r3
 800739c:	f7fe fe0c 	bl	8005fb8 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	687a      	ldr	r2, [r7, #4]
 80073ac:	6812      	ldr	r2, [r2, #0]
 80073ae:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80073b2:	f043 0301 	orr.w	r3, r3, #1
 80073b6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	6a1b      	ldr	r3, [r3, #32]
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d005      	beq.n	80073cc <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80073c0:	4b04      	ldr	r3, [pc, #16]	; (80073d4 <HAL_PCD_SuspendCallback+0x48>)
 80073c2:	691b      	ldr	r3, [r3, #16]
 80073c4:	4a03      	ldr	r2, [pc, #12]	; (80073d4 <HAL_PCD_SuspendCallback+0x48>)
 80073c6:	f043 0306 	orr.w	r3, r3, #6
 80073ca:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80073cc:	bf00      	nop
 80073ce:	3708      	adds	r7, #8
 80073d0:	46bd      	mov	sp, r7
 80073d2:	bd80      	pop	{r7, pc}
 80073d4:	e000ed00 	.word	0xe000ed00

080073d8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80073d8:	b580      	push	{r7, lr}
 80073da:	b082      	sub	sp, #8
 80073dc:	af00      	add	r7, sp, #0
 80073de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80073e6:	4618      	mov	r0, r3
 80073e8:	f7fe fdfc 	bl	8005fe4 <USBD_LL_Resume>
}
 80073ec:	bf00      	nop
 80073ee:	3708      	adds	r7, #8
 80073f0:	46bd      	mov	sp, r7
 80073f2:	bd80      	pop	{r7, pc}

080073f4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80073f4:	b580      	push	{r7, lr}
 80073f6:	b082      	sub	sp, #8
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	6078      	str	r0, [r7, #4]
 80073fc:	460b      	mov	r3, r1
 80073fe:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007406:	78fa      	ldrb	r2, [r7, #3]
 8007408:	4611      	mov	r1, r2
 800740a:	4618      	mov	r0, r3
 800740c:	f7fe fe4a 	bl	80060a4 <USBD_LL_IsoOUTIncomplete>
}
 8007410:	bf00      	nop
 8007412:	3708      	adds	r7, #8
 8007414:	46bd      	mov	sp, r7
 8007416:	bd80      	pop	{r7, pc}

08007418 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007418:	b580      	push	{r7, lr}
 800741a:	b082      	sub	sp, #8
 800741c:	af00      	add	r7, sp, #0
 800741e:	6078      	str	r0, [r7, #4]
 8007420:	460b      	mov	r3, r1
 8007422:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800742a:	78fa      	ldrb	r2, [r7, #3]
 800742c:	4611      	mov	r1, r2
 800742e:	4618      	mov	r0, r3
 8007430:	f7fe fe12 	bl	8006058 <USBD_LL_IsoINIncomplete>
}
 8007434:	bf00      	nop
 8007436:	3708      	adds	r7, #8
 8007438:	46bd      	mov	sp, r7
 800743a:	bd80      	pop	{r7, pc}

0800743c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800743c:	b580      	push	{r7, lr}
 800743e:	b082      	sub	sp, #8
 8007440:	af00      	add	r7, sp, #0
 8007442:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800744a:	4618      	mov	r0, r3
 800744c:	f7fe fe50 	bl	80060f0 <USBD_LL_DevConnected>
}
 8007450:	bf00      	nop
 8007452:	3708      	adds	r7, #8
 8007454:	46bd      	mov	sp, r7
 8007456:	bd80      	pop	{r7, pc}

08007458 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007458:	b580      	push	{r7, lr}
 800745a:	b082      	sub	sp, #8
 800745c:	af00      	add	r7, sp, #0
 800745e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007466:	4618      	mov	r0, r3
 8007468:	f7fe fe4d 	bl	8006106 <USBD_LL_DevDisconnected>
}
 800746c:	bf00      	nop
 800746e:	3708      	adds	r7, #8
 8007470:	46bd      	mov	sp, r7
 8007472:	bd80      	pop	{r7, pc}

08007474 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007474:	b580      	push	{r7, lr}
 8007476:	b082      	sub	sp, #8
 8007478:	af00      	add	r7, sp, #0
 800747a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	781b      	ldrb	r3, [r3, #0]
 8007480:	2b00      	cmp	r3, #0
 8007482:	d13c      	bne.n	80074fe <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8007484:	4a20      	ldr	r2, [pc, #128]	; (8007508 <USBD_LL_Init+0x94>)
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	4a1e      	ldr	r2, [pc, #120]	; (8007508 <USBD_LL_Init+0x94>)
 8007490:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007494:	4b1c      	ldr	r3, [pc, #112]	; (8007508 <USBD_LL_Init+0x94>)
 8007496:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800749a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800749c:	4b1a      	ldr	r3, [pc, #104]	; (8007508 <USBD_LL_Init+0x94>)
 800749e:	2204      	movs	r2, #4
 80074a0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80074a2:	4b19      	ldr	r3, [pc, #100]	; (8007508 <USBD_LL_Init+0x94>)
 80074a4:	2202      	movs	r2, #2
 80074a6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80074a8:	4b17      	ldr	r3, [pc, #92]	; (8007508 <USBD_LL_Init+0x94>)
 80074aa:	2200      	movs	r2, #0
 80074ac:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80074ae:	4b16      	ldr	r3, [pc, #88]	; (8007508 <USBD_LL_Init+0x94>)
 80074b0:	2202      	movs	r2, #2
 80074b2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80074b4:	4b14      	ldr	r3, [pc, #80]	; (8007508 <USBD_LL_Init+0x94>)
 80074b6:	2200      	movs	r2, #0
 80074b8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80074ba:	4b13      	ldr	r3, [pc, #76]	; (8007508 <USBD_LL_Init+0x94>)
 80074bc:	2200      	movs	r2, #0
 80074be:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80074c0:	4b11      	ldr	r3, [pc, #68]	; (8007508 <USBD_LL_Init+0x94>)
 80074c2:	2200      	movs	r2, #0
 80074c4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80074c6:	4b10      	ldr	r3, [pc, #64]	; (8007508 <USBD_LL_Init+0x94>)
 80074c8:	2200      	movs	r2, #0
 80074ca:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80074cc:	4b0e      	ldr	r3, [pc, #56]	; (8007508 <USBD_LL_Init+0x94>)
 80074ce:	2200      	movs	r2, #0
 80074d0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80074d2:	480d      	ldr	r0, [pc, #52]	; (8007508 <USBD_LL_Init+0x94>)
 80074d4:	f7fa fecb 	bl	800226e <HAL_PCD_Init>
 80074d8:	4603      	mov	r3, r0
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d001      	beq.n	80074e2 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80074de:	f7f9 fa95 	bl	8000a0c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80074e2:	2180      	movs	r1, #128	; 0x80
 80074e4:	4808      	ldr	r0, [pc, #32]	; (8007508 <USBD_LL_Init+0x94>)
 80074e6:	f7fc f828 	bl	800353a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80074ea:	2240      	movs	r2, #64	; 0x40
 80074ec:	2100      	movs	r1, #0
 80074ee:	4806      	ldr	r0, [pc, #24]	; (8007508 <USBD_LL_Init+0x94>)
 80074f0:	f7fb ffdc 	bl	80034ac <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80074f4:	2280      	movs	r2, #128	; 0x80
 80074f6:	2101      	movs	r1, #1
 80074f8:	4803      	ldr	r0, [pc, #12]	; (8007508 <USBD_LL_Init+0x94>)
 80074fa:	f7fb ffd7 	bl	80034ac <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80074fe:	2300      	movs	r3, #0
}
 8007500:	4618      	mov	r0, r3
 8007502:	3708      	adds	r7, #8
 8007504:	46bd      	mov	sp, r7
 8007506:	bd80      	pop	{r7, pc}
 8007508:	20001964 	.word	0x20001964

0800750c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800750c:	b580      	push	{r7, lr}
 800750e:	b084      	sub	sp, #16
 8007510:	af00      	add	r7, sp, #0
 8007512:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007514:	2300      	movs	r3, #0
 8007516:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007518:	2300      	movs	r3, #0
 800751a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007522:	4618      	mov	r0, r3
 8007524:	f7fa ffc0 	bl	80024a8 <HAL_PCD_Start>
 8007528:	4603      	mov	r3, r0
 800752a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800752c:	7bfb      	ldrb	r3, [r7, #15]
 800752e:	4618      	mov	r0, r3
 8007530:	f000 f942 	bl	80077b8 <USBD_Get_USB_Status>
 8007534:	4603      	mov	r3, r0
 8007536:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007538:	7bbb      	ldrb	r3, [r7, #14]
}
 800753a:	4618      	mov	r0, r3
 800753c:	3710      	adds	r7, #16
 800753e:	46bd      	mov	sp, r7
 8007540:	bd80      	pop	{r7, pc}

08007542 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007542:	b580      	push	{r7, lr}
 8007544:	b084      	sub	sp, #16
 8007546:	af00      	add	r7, sp, #0
 8007548:	6078      	str	r0, [r7, #4]
 800754a:	4608      	mov	r0, r1
 800754c:	4611      	mov	r1, r2
 800754e:	461a      	mov	r2, r3
 8007550:	4603      	mov	r3, r0
 8007552:	70fb      	strb	r3, [r7, #3]
 8007554:	460b      	mov	r3, r1
 8007556:	70bb      	strb	r3, [r7, #2]
 8007558:	4613      	mov	r3, r2
 800755a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800755c:	2300      	movs	r3, #0
 800755e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007560:	2300      	movs	r3, #0
 8007562:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800756a:	78bb      	ldrb	r3, [r7, #2]
 800756c:	883a      	ldrh	r2, [r7, #0]
 800756e:	78f9      	ldrb	r1, [r7, #3]
 8007570:	f7fb fba4 	bl	8002cbc <HAL_PCD_EP_Open>
 8007574:	4603      	mov	r3, r0
 8007576:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007578:	7bfb      	ldrb	r3, [r7, #15]
 800757a:	4618      	mov	r0, r3
 800757c:	f000 f91c 	bl	80077b8 <USBD_Get_USB_Status>
 8007580:	4603      	mov	r3, r0
 8007582:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007584:	7bbb      	ldrb	r3, [r7, #14]
}
 8007586:	4618      	mov	r0, r3
 8007588:	3710      	adds	r7, #16
 800758a:	46bd      	mov	sp, r7
 800758c:	bd80      	pop	{r7, pc}

0800758e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800758e:	b580      	push	{r7, lr}
 8007590:	b084      	sub	sp, #16
 8007592:	af00      	add	r7, sp, #0
 8007594:	6078      	str	r0, [r7, #4]
 8007596:	460b      	mov	r3, r1
 8007598:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800759a:	2300      	movs	r3, #0
 800759c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800759e:	2300      	movs	r3, #0
 80075a0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80075a8:	78fa      	ldrb	r2, [r7, #3]
 80075aa:	4611      	mov	r1, r2
 80075ac:	4618      	mov	r0, r3
 80075ae:	f7fb fbed 	bl	8002d8c <HAL_PCD_EP_Close>
 80075b2:	4603      	mov	r3, r0
 80075b4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80075b6:	7bfb      	ldrb	r3, [r7, #15]
 80075b8:	4618      	mov	r0, r3
 80075ba:	f000 f8fd 	bl	80077b8 <USBD_Get_USB_Status>
 80075be:	4603      	mov	r3, r0
 80075c0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80075c2:	7bbb      	ldrb	r3, [r7, #14]
}
 80075c4:	4618      	mov	r0, r3
 80075c6:	3710      	adds	r7, #16
 80075c8:	46bd      	mov	sp, r7
 80075ca:	bd80      	pop	{r7, pc}

080075cc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80075cc:	b580      	push	{r7, lr}
 80075ce:	b084      	sub	sp, #16
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	6078      	str	r0, [r7, #4]
 80075d4:	460b      	mov	r3, r1
 80075d6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80075d8:	2300      	movs	r3, #0
 80075da:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80075dc:	2300      	movs	r3, #0
 80075de:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80075e6:	78fa      	ldrb	r2, [r7, #3]
 80075e8:	4611      	mov	r1, r2
 80075ea:	4618      	mov	r0, r3
 80075ec:	f7fb fcc5 	bl	8002f7a <HAL_PCD_EP_SetStall>
 80075f0:	4603      	mov	r3, r0
 80075f2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80075f4:	7bfb      	ldrb	r3, [r7, #15]
 80075f6:	4618      	mov	r0, r3
 80075f8:	f000 f8de 	bl	80077b8 <USBD_Get_USB_Status>
 80075fc:	4603      	mov	r3, r0
 80075fe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007600:	7bbb      	ldrb	r3, [r7, #14]
}
 8007602:	4618      	mov	r0, r3
 8007604:	3710      	adds	r7, #16
 8007606:	46bd      	mov	sp, r7
 8007608:	bd80      	pop	{r7, pc}

0800760a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800760a:	b580      	push	{r7, lr}
 800760c:	b084      	sub	sp, #16
 800760e:	af00      	add	r7, sp, #0
 8007610:	6078      	str	r0, [r7, #4]
 8007612:	460b      	mov	r3, r1
 8007614:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007616:	2300      	movs	r3, #0
 8007618:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800761a:	2300      	movs	r3, #0
 800761c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007624:	78fa      	ldrb	r2, [r7, #3]
 8007626:	4611      	mov	r1, r2
 8007628:	4618      	mov	r0, r3
 800762a:	f7fb fd0a 	bl	8003042 <HAL_PCD_EP_ClrStall>
 800762e:	4603      	mov	r3, r0
 8007630:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007632:	7bfb      	ldrb	r3, [r7, #15]
 8007634:	4618      	mov	r0, r3
 8007636:	f000 f8bf 	bl	80077b8 <USBD_Get_USB_Status>
 800763a:	4603      	mov	r3, r0
 800763c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800763e:	7bbb      	ldrb	r3, [r7, #14]
}
 8007640:	4618      	mov	r0, r3
 8007642:	3710      	adds	r7, #16
 8007644:	46bd      	mov	sp, r7
 8007646:	bd80      	pop	{r7, pc}

08007648 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007648:	b480      	push	{r7}
 800764a:	b085      	sub	sp, #20
 800764c:	af00      	add	r7, sp, #0
 800764e:	6078      	str	r0, [r7, #4]
 8007650:	460b      	mov	r3, r1
 8007652:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800765a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800765c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007660:	2b00      	cmp	r3, #0
 8007662:	da0b      	bge.n	800767c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007664:	78fb      	ldrb	r3, [r7, #3]
 8007666:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800766a:	68f9      	ldr	r1, [r7, #12]
 800766c:	4613      	mov	r3, r2
 800766e:	00db      	lsls	r3, r3, #3
 8007670:	1a9b      	subs	r3, r3, r2
 8007672:	009b      	lsls	r3, r3, #2
 8007674:	440b      	add	r3, r1
 8007676:	333e      	adds	r3, #62	; 0x3e
 8007678:	781b      	ldrb	r3, [r3, #0]
 800767a:	e00b      	b.n	8007694 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800767c:	78fb      	ldrb	r3, [r7, #3]
 800767e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007682:	68f9      	ldr	r1, [r7, #12]
 8007684:	4613      	mov	r3, r2
 8007686:	00db      	lsls	r3, r3, #3
 8007688:	1a9b      	subs	r3, r3, r2
 800768a:	009b      	lsls	r3, r3, #2
 800768c:	440b      	add	r3, r1
 800768e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007692:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007694:	4618      	mov	r0, r3
 8007696:	3714      	adds	r7, #20
 8007698:	46bd      	mov	sp, r7
 800769a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800769e:	4770      	bx	lr

080076a0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80076a0:	b580      	push	{r7, lr}
 80076a2:	b084      	sub	sp, #16
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	6078      	str	r0, [r7, #4]
 80076a8:	460b      	mov	r3, r1
 80076aa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80076ac:	2300      	movs	r3, #0
 80076ae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80076b0:	2300      	movs	r3, #0
 80076b2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80076ba:	78fa      	ldrb	r2, [r7, #3]
 80076bc:	4611      	mov	r1, r2
 80076be:	4618      	mov	r0, r3
 80076c0:	f7fb fad7 	bl	8002c72 <HAL_PCD_SetAddress>
 80076c4:	4603      	mov	r3, r0
 80076c6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80076c8:	7bfb      	ldrb	r3, [r7, #15]
 80076ca:	4618      	mov	r0, r3
 80076cc:	f000 f874 	bl	80077b8 <USBD_Get_USB_Status>
 80076d0:	4603      	mov	r3, r0
 80076d2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80076d4:	7bbb      	ldrb	r3, [r7, #14]
}
 80076d6:	4618      	mov	r0, r3
 80076d8:	3710      	adds	r7, #16
 80076da:	46bd      	mov	sp, r7
 80076dc:	bd80      	pop	{r7, pc}

080076de <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80076de:	b580      	push	{r7, lr}
 80076e0:	b086      	sub	sp, #24
 80076e2:	af00      	add	r7, sp, #0
 80076e4:	60f8      	str	r0, [r7, #12]
 80076e6:	607a      	str	r2, [r7, #4]
 80076e8:	603b      	str	r3, [r7, #0]
 80076ea:	460b      	mov	r3, r1
 80076ec:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80076ee:	2300      	movs	r3, #0
 80076f0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80076f2:	2300      	movs	r3, #0
 80076f4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80076fc:	7af9      	ldrb	r1, [r7, #11]
 80076fe:	683b      	ldr	r3, [r7, #0]
 8007700:	687a      	ldr	r2, [r7, #4]
 8007702:	f7fb fbf0 	bl	8002ee6 <HAL_PCD_EP_Transmit>
 8007706:	4603      	mov	r3, r0
 8007708:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800770a:	7dfb      	ldrb	r3, [r7, #23]
 800770c:	4618      	mov	r0, r3
 800770e:	f000 f853 	bl	80077b8 <USBD_Get_USB_Status>
 8007712:	4603      	mov	r3, r0
 8007714:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007716:	7dbb      	ldrb	r3, [r7, #22]
}
 8007718:	4618      	mov	r0, r3
 800771a:	3718      	adds	r7, #24
 800771c:	46bd      	mov	sp, r7
 800771e:	bd80      	pop	{r7, pc}

08007720 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007720:	b580      	push	{r7, lr}
 8007722:	b086      	sub	sp, #24
 8007724:	af00      	add	r7, sp, #0
 8007726:	60f8      	str	r0, [r7, #12]
 8007728:	607a      	str	r2, [r7, #4]
 800772a:	603b      	str	r3, [r7, #0]
 800772c:	460b      	mov	r3, r1
 800772e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007730:	2300      	movs	r3, #0
 8007732:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007734:	2300      	movs	r3, #0
 8007736:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800773e:	7af9      	ldrb	r1, [r7, #11]
 8007740:	683b      	ldr	r3, [r7, #0]
 8007742:	687a      	ldr	r2, [r7, #4]
 8007744:	f7fb fb6c 	bl	8002e20 <HAL_PCD_EP_Receive>
 8007748:	4603      	mov	r3, r0
 800774a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800774c:	7dfb      	ldrb	r3, [r7, #23]
 800774e:	4618      	mov	r0, r3
 8007750:	f000 f832 	bl	80077b8 <USBD_Get_USB_Status>
 8007754:	4603      	mov	r3, r0
 8007756:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007758:	7dbb      	ldrb	r3, [r7, #22]
}
 800775a:	4618      	mov	r0, r3
 800775c:	3718      	adds	r7, #24
 800775e:	46bd      	mov	sp, r7
 8007760:	bd80      	pop	{r7, pc}

08007762 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007762:	b580      	push	{r7, lr}
 8007764:	b082      	sub	sp, #8
 8007766:	af00      	add	r7, sp, #0
 8007768:	6078      	str	r0, [r7, #4]
 800776a:	460b      	mov	r3, r1
 800776c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007774:	78fa      	ldrb	r2, [r7, #3]
 8007776:	4611      	mov	r1, r2
 8007778:	4618      	mov	r0, r3
 800777a:	f7fb fb9c 	bl	8002eb6 <HAL_PCD_EP_GetRxCount>
 800777e:	4603      	mov	r3, r0
}
 8007780:	4618      	mov	r0, r3
 8007782:	3708      	adds	r7, #8
 8007784:	46bd      	mov	sp, r7
 8007786:	bd80      	pop	{r7, pc}

08007788 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007788:	b480      	push	{r7}
 800778a:	b083      	sub	sp, #12
 800778c:	af00      	add	r7, sp, #0
 800778e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007790:	4b03      	ldr	r3, [pc, #12]	; (80077a0 <USBD_static_malloc+0x18>)
}
 8007792:	4618      	mov	r0, r3
 8007794:	370c      	adds	r7, #12
 8007796:	46bd      	mov	sp, r7
 8007798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800779c:	4770      	bx	lr
 800779e:	bf00      	nop
 80077a0:	20000208 	.word	0x20000208

080077a4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80077a4:	b480      	push	{r7}
 80077a6:	b083      	sub	sp, #12
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	6078      	str	r0, [r7, #4]

}
 80077ac:	bf00      	nop
 80077ae:	370c      	adds	r7, #12
 80077b0:	46bd      	mov	sp, r7
 80077b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b6:	4770      	bx	lr

080077b8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80077b8:	b480      	push	{r7}
 80077ba:	b085      	sub	sp, #20
 80077bc:	af00      	add	r7, sp, #0
 80077be:	4603      	mov	r3, r0
 80077c0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80077c2:	2300      	movs	r3, #0
 80077c4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80077c6:	79fb      	ldrb	r3, [r7, #7]
 80077c8:	2b03      	cmp	r3, #3
 80077ca:	d817      	bhi.n	80077fc <USBD_Get_USB_Status+0x44>
 80077cc:	a201      	add	r2, pc, #4	; (adr r2, 80077d4 <USBD_Get_USB_Status+0x1c>)
 80077ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077d2:	bf00      	nop
 80077d4:	080077e5 	.word	0x080077e5
 80077d8:	080077eb 	.word	0x080077eb
 80077dc:	080077f1 	.word	0x080077f1
 80077e0:	080077f7 	.word	0x080077f7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80077e4:	2300      	movs	r3, #0
 80077e6:	73fb      	strb	r3, [r7, #15]
    break;
 80077e8:	e00b      	b.n	8007802 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80077ea:	2303      	movs	r3, #3
 80077ec:	73fb      	strb	r3, [r7, #15]
    break;
 80077ee:	e008      	b.n	8007802 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80077f0:	2301      	movs	r3, #1
 80077f2:	73fb      	strb	r3, [r7, #15]
    break;
 80077f4:	e005      	b.n	8007802 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80077f6:	2303      	movs	r3, #3
 80077f8:	73fb      	strb	r3, [r7, #15]
    break;
 80077fa:	e002      	b.n	8007802 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80077fc:	2303      	movs	r3, #3
 80077fe:	73fb      	strb	r3, [r7, #15]
    break;
 8007800:	bf00      	nop
  }
  return usb_status;
 8007802:	7bfb      	ldrb	r3, [r7, #15]
}
 8007804:	4618      	mov	r0, r3
 8007806:	3714      	adds	r7, #20
 8007808:	46bd      	mov	sp, r7
 800780a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800780e:	4770      	bx	lr

08007810 <__errno>:
 8007810:	4b01      	ldr	r3, [pc, #4]	; (8007818 <__errno+0x8>)
 8007812:	6818      	ldr	r0, [r3, #0]
 8007814:	4770      	bx	lr
 8007816:	bf00      	nop
 8007818:	20000180 	.word	0x20000180

0800781c <__libc_init_array>:
 800781c:	b570      	push	{r4, r5, r6, lr}
 800781e:	4d0d      	ldr	r5, [pc, #52]	; (8007854 <__libc_init_array+0x38>)
 8007820:	4c0d      	ldr	r4, [pc, #52]	; (8007858 <__libc_init_array+0x3c>)
 8007822:	1b64      	subs	r4, r4, r5
 8007824:	10a4      	asrs	r4, r4, #2
 8007826:	2600      	movs	r6, #0
 8007828:	42a6      	cmp	r6, r4
 800782a:	d109      	bne.n	8007840 <__libc_init_array+0x24>
 800782c:	4d0b      	ldr	r5, [pc, #44]	; (800785c <__libc_init_array+0x40>)
 800782e:	4c0c      	ldr	r4, [pc, #48]	; (8007860 <__libc_init_array+0x44>)
 8007830:	f000 fc4e 	bl	80080d0 <_init>
 8007834:	1b64      	subs	r4, r4, r5
 8007836:	10a4      	asrs	r4, r4, #2
 8007838:	2600      	movs	r6, #0
 800783a:	42a6      	cmp	r6, r4
 800783c:	d105      	bne.n	800784a <__libc_init_array+0x2e>
 800783e:	bd70      	pop	{r4, r5, r6, pc}
 8007840:	f855 3b04 	ldr.w	r3, [r5], #4
 8007844:	4798      	blx	r3
 8007846:	3601      	adds	r6, #1
 8007848:	e7ee      	b.n	8007828 <__libc_init_array+0xc>
 800784a:	f855 3b04 	ldr.w	r3, [r5], #4
 800784e:	4798      	blx	r3
 8007850:	3601      	adds	r6, #1
 8007852:	e7f2      	b.n	800783a <__libc_init_array+0x1e>
 8007854:	08008194 	.word	0x08008194
 8007858:	08008194 	.word	0x08008194
 800785c:	08008194 	.word	0x08008194
 8007860:	08008198 	.word	0x08008198

08007864 <memset>:
 8007864:	4402      	add	r2, r0
 8007866:	4603      	mov	r3, r0
 8007868:	4293      	cmp	r3, r2
 800786a:	d100      	bne.n	800786e <memset+0xa>
 800786c:	4770      	bx	lr
 800786e:	f803 1b01 	strb.w	r1, [r3], #1
 8007872:	e7f9      	b.n	8007868 <memset+0x4>

08007874 <siprintf>:
 8007874:	b40e      	push	{r1, r2, r3}
 8007876:	b500      	push	{lr}
 8007878:	b09c      	sub	sp, #112	; 0x70
 800787a:	ab1d      	add	r3, sp, #116	; 0x74
 800787c:	9002      	str	r0, [sp, #8]
 800787e:	9006      	str	r0, [sp, #24]
 8007880:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007884:	4809      	ldr	r0, [pc, #36]	; (80078ac <siprintf+0x38>)
 8007886:	9107      	str	r1, [sp, #28]
 8007888:	9104      	str	r1, [sp, #16]
 800788a:	4909      	ldr	r1, [pc, #36]	; (80078b0 <siprintf+0x3c>)
 800788c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007890:	9105      	str	r1, [sp, #20]
 8007892:	6800      	ldr	r0, [r0, #0]
 8007894:	9301      	str	r3, [sp, #4]
 8007896:	a902      	add	r1, sp, #8
 8007898:	f000 f868 	bl	800796c <_svfiprintf_r>
 800789c:	9b02      	ldr	r3, [sp, #8]
 800789e:	2200      	movs	r2, #0
 80078a0:	701a      	strb	r2, [r3, #0]
 80078a2:	b01c      	add	sp, #112	; 0x70
 80078a4:	f85d eb04 	ldr.w	lr, [sp], #4
 80078a8:	b003      	add	sp, #12
 80078aa:	4770      	bx	lr
 80078ac:	20000180 	.word	0x20000180
 80078b0:	ffff0208 	.word	0xffff0208

080078b4 <__ssputs_r>:
 80078b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80078b8:	688e      	ldr	r6, [r1, #8]
 80078ba:	429e      	cmp	r6, r3
 80078bc:	4682      	mov	sl, r0
 80078be:	460c      	mov	r4, r1
 80078c0:	4690      	mov	r8, r2
 80078c2:	461f      	mov	r7, r3
 80078c4:	d838      	bhi.n	8007938 <__ssputs_r+0x84>
 80078c6:	898a      	ldrh	r2, [r1, #12]
 80078c8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80078cc:	d032      	beq.n	8007934 <__ssputs_r+0x80>
 80078ce:	6825      	ldr	r5, [r4, #0]
 80078d0:	6909      	ldr	r1, [r1, #16]
 80078d2:	eba5 0901 	sub.w	r9, r5, r1
 80078d6:	6965      	ldr	r5, [r4, #20]
 80078d8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80078dc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80078e0:	3301      	adds	r3, #1
 80078e2:	444b      	add	r3, r9
 80078e4:	106d      	asrs	r5, r5, #1
 80078e6:	429d      	cmp	r5, r3
 80078e8:	bf38      	it	cc
 80078ea:	461d      	movcc	r5, r3
 80078ec:	0553      	lsls	r3, r2, #21
 80078ee:	d531      	bpl.n	8007954 <__ssputs_r+0xa0>
 80078f0:	4629      	mov	r1, r5
 80078f2:	f000 fb47 	bl	8007f84 <_malloc_r>
 80078f6:	4606      	mov	r6, r0
 80078f8:	b950      	cbnz	r0, 8007910 <__ssputs_r+0x5c>
 80078fa:	230c      	movs	r3, #12
 80078fc:	f8ca 3000 	str.w	r3, [sl]
 8007900:	89a3      	ldrh	r3, [r4, #12]
 8007902:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007906:	81a3      	strh	r3, [r4, #12]
 8007908:	f04f 30ff 	mov.w	r0, #4294967295
 800790c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007910:	6921      	ldr	r1, [r4, #16]
 8007912:	464a      	mov	r2, r9
 8007914:	f000 fabe 	bl	8007e94 <memcpy>
 8007918:	89a3      	ldrh	r3, [r4, #12]
 800791a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800791e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007922:	81a3      	strh	r3, [r4, #12]
 8007924:	6126      	str	r6, [r4, #16]
 8007926:	6165      	str	r5, [r4, #20]
 8007928:	444e      	add	r6, r9
 800792a:	eba5 0509 	sub.w	r5, r5, r9
 800792e:	6026      	str	r6, [r4, #0]
 8007930:	60a5      	str	r5, [r4, #8]
 8007932:	463e      	mov	r6, r7
 8007934:	42be      	cmp	r6, r7
 8007936:	d900      	bls.n	800793a <__ssputs_r+0x86>
 8007938:	463e      	mov	r6, r7
 800793a:	4632      	mov	r2, r6
 800793c:	6820      	ldr	r0, [r4, #0]
 800793e:	4641      	mov	r1, r8
 8007940:	f000 fab6 	bl	8007eb0 <memmove>
 8007944:	68a3      	ldr	r3, [r4, #8]
 8007946:	6822      	ldr	r2, [r4, #0]
 8007948:	1b9b      	subs	r3, r3, r6
 800794a:	4432      	add	r2, r6
 800794c:	60a3      	str	r3, [r4, #8]
 800794e:	6022      	str	r2, [r4, #0]
 8007950:	2000      	movs	r0, #0
 8007952:	e7db      	b.n	800790c <__ssputs_r+0x58>
 8007954:	462a      	mov	r2, r5
 8007956:	f000 fb6f 	bl	8008038 <_realloc_r>
 800795a:	4606      	mov	r6, r0
 800795c:	2800      	cmp	r0, #0
 800795e:	d1e1      	bne.n	8007924 <__ssputs_r+0x70>
 8007960:	6921      	ldr	r1, [r4, #16]
 8007962:	4650      	mov	r0, sl
 8007964:	f000 fabe 	bl	8007ee4 <_free_r>
 8007968:	e7c7      	b.n	80078fa <__ssputs_r+0x46>
	...

0800796c <_svfiprintf_r>:
 800796c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007970:	4698      	mov	r8, r3
 8007972:	898b      	ldrh	r3, [r1, #12]
 8007974:	061b      	lsls	r3, r3, #24
 8007976:	b09d      	sub	sp, #116	; 0x74
 8007978:	4607      	mov	r7, r0
 800797a:	460d      	mov	r5, r1
 800797c:	4614      	mov	r4, r2
 800797e:	d50e      	bpl.n	800799e <_svfiprintf_r+0x32>
 8007980:	690b      	ldr	r3, [r1, #16]
 8007982:	b963      	cbnz	r3, 800799e <_svfiprintf_r+0x32>
 8007984:	2140      	movs	r1, #64	; 0x40
 8007986:	f000 fafd 	bl	8007f84 <_malloc_r>
 800798a:	6028      	str	r0, [r5, #0]
 800798c:	6128      	str	r0, [r5, #16]
 800798e:	b920      	cbnz	r0, 800799a <_svfiprintf_r+0x2e>
 8007990:	230c      	movs	r3, #12
 8007992:	603b      	str	r3, [r7, #0]
 8007994:	f04f 30ff 	mov.w	r0, #4294967295
 8007998:	e0d1      	b.n	8007b3e <_svfiprintf_r+0x1d2>
 800799a:	2340      	movs	r3, #64	; 0x40
 800799c:	616b      	str	r3, [r5, #20]
 800799e:	2300      	movs	r3, #0
 80079a0:	9309      	str	r3, [sp, #36]	; 0x24
 80079a2:	2320      	movs	r3, #32
 80079a4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80079a8:	f8cd 800c 	str.w	r8, [sp, #12]
 80079ac:	2330      	movs	r3, #48	; 0x30
 80079ae:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007b58 <_svfiprintf_r+0x1ec>
 80079b2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80079b6:	f04f 0901 	mov.w	r9, #1
 80079ba:	4623      	mov	r3, r4
 80079bc:	469a      	mov	sl, r3
 80079be:	f813 2b01 	ldrb.w	r2, [r3], #1
 80079c2:	b10a      	cbz	r2, 80079c8 <_svfiprintf_r+0x5c>
 80079c4:	2a25      	cmp	r2, #37	; 0x25
 80079c6:	d1f9      	bne.n	80079bc <_svfiprintf_r+0x50>
 80079c8:	ebba 0b04 	subs.w	fp, sl, r4
 80079cc:	d00b      	beq.n	80079e6 <_svfiprintf_r+0x7a>
 80079ce:	465b      	mov	r3, fp
 80079d0:	4622      	mov	r2, r4
 80079d2:	4629      	mov	r1, r5
 80079d4:	4638      	mov	r0, r7
 80079d6:	f7ff ff6d 	bl	80078b4 <__ssputs_r>
 80079da:	3001      	adds	r0, #1
 80079dc:	f000 80aa 	beq.w	8007b34 <_svfiprintf_r+0x1c8>
 80079e0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80079e2:	445a      	add	r2, fp
 80079e4:	9209      	str	r2, [sp, #36]	; 0x24
 80079e6:	f89a 3000 	ldrb.w	r3, [sl]
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	f000 80a2 	beq.w	8007b34 <_svfiprintf_r+0x1c8>
 80079f0:	2300      	movs	r3, #0
 80079f2:	f04f 32ff 	mov.w	r2, #4294967295
 80079f6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80079fa:	f10a 0a01 	add.w	sl, sl, #1
 80079fe:	9304      	str	r3, [sp, #16]
 8007a00:	9307      	str	r3, [sp, #28]
 8007a02:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007a06:	931a      	str	r3, [sp, #104]	; 0x68
 8007a08:	4654      	mov	r4, sl
 8007a0a:	2205      	movs	r2, #5
 8007a0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a10:	4851      	ldr	r0, [pc, #324]	; (8007b58 <_svfiprintf_r+0x1ec>)
 8007a12:	f7f8 fbed 	bl	80001f0 <memchr>
 8007a16:	9a04      	ldr	r2, [sp, #16]
 8007a18:	b9d8      	cbnz	r0, 8007a52 <_svfiprintf_r+0xe6>
 8007a1a:	06d0      	lsls	r0, r2, #27
 8007a1c:	bf44      	itt	mi
 8007a1e:	2320      	movmi	r3, #32
 8007a20:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007a24:	0711      	lsls	r1, r2, #28
 8007a26:	bf44      	itt	mi
 8007a28:	232b      	movmi	r3, #43	; 0x2b
 8007a2a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007a2e:	f89a 3000 	ldrb.w	r3, [sl]
 8007a32:	2b2a      	cmp	r3, #42	; 0x2a
 8007a34:	d015      	beq.n	8007a62 <_svfiprintf_r+0xf6>
 8007a36:	9a07      	ldr	r2, [sp, #28]
 8007a38:	4654      	mov	r4, sl
 8007a3a:	2000      	movs	r0, #0
 8007a3c:	f04f 0c0a 	mov.w	ip, #10
 8007a40:	4621      	mov	r1, r4
 8007a42:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007a46:	3b30      	subs	r3, #48	; 0x30
 8007a48:	2b09      	cmp	r3, #9
 8007a4a:	d94e      	bls.n	8007aea <_svfiprintf_r+0x17e>
 8007a4c:	b1b0      	cbz	r0, 8007a7c <_svfiprintf_r+0x110>
 8007a4e:	9207      	str	r2, [sp, #28]
 8007a50:	e014      	b.n	8007a7c <_svfiprintf_r+0x110>
 8007a52:	eba0 0308 	sub.w	r3, r0, r8
 8007a56:	fa09 f303 	lsl.w	r3, r9, r3
 8007a5a:	4313      	orrs	r3, r2
 8007a5c:	9304      	str	r3, [sp, #16]
 8007a5e:	46a2      	mov	sl, r4
 8007a60:	e7d2      	b.n	8007a08 <_svfiprintf_r+0x9c>
 8007a62:	9b03      	ldr	r3, [sp, #12]
 8007a64:	1d19      	adds	r1, r3, #4
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	9103      	str	r1, [sp, #12]
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	bfbb      	ittet	lt
 8007a6e:	425b      	neglt	r3, r3
 8007a70:	f042 0202 	orrlt.w	r2, r2, #2
 8007a74:	9307      	strge	r3, [sp, #28]
 8007a76:	9307      	strlt	r3, [sp, #28]
 8007a78:	bfb8      	it	lt
 8007a7a:	9204      	strlt	r2, [sp, #16]
 8007a7c:	7823      	ldrb	r3, [r4, #0]
 8007a7e:	2b2e      	cmp	r3, #46	; 0x2e
 8007a80:	d10c      	bne.n	8007a9c <_svfiprintf_r+0x130>
 8007a82:	7863      	ldrb	r3, [r4, #1]
 8007a84:	2b2a      	cmp	r3, #42	; 0x2a
 8007a86:	d135      	bne.n	8007af4 <_svfiprintf_r+0x188>
 8007a88:	9b03      	ldr	r3, [sp, #12]
 8007a8a:	1d1a      	adds	r2, r3, #4
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	9203      	str	r2, [sp, #12]
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	bfb8      	it	lt
 8007a94:	f04f 33ff 	movlt.w	r3, #4294967295
 8007a98:	3402      	adds	r4, #2
 8007a9a:	9305      	str	r3, [sp, #20]
 8007a9c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007b68 <_svfiprintf_r+0x1fc>
 8007aa0:	7821      	ldrb	r1, [r4, #0]
 8007aa2:	2203      	movs	r2, #3
 8007aa4:	4650      	mov	r0, sl
 8007aa6:	f7f8 fba3 	bl	80001f0 <memchr>
 8007aaa:	b140      	cbz	r0, 8007abe <_svfiprintf_r+0x152>
 8007aac:	2340      	movs	r3, #64	; 0x40
 8007aae:	eba0 000a 	sub.w	r0, r0, sl
 8007ab2:	fa03 f000 	lsl.w	r0, r3, r0
 8007ab6:	9b04      	ldr	r3, [sp, #16]
 8007ab8:	4303      	orrs	r3, r0
 8007aba:	3401      	adds	r4, #1
 8007abc:	9304      	str	r3, [sp, #16]
 8007abe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ac2:	4826      	ldr	r0, [pc, #152]	; (8007b5c <_svfiprintf_r+0x1f0>)
 8007ac4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007ac8:	2206      	movs	r2, #6
 8007aca:	f7f8 fb91 	bl	80001f0 <memchr>
 8007ace:	2800      	cmp	r0, #0
 8007ad0:	d038      	beq.n	8007b44 <_svfiprintf_r+0x1d8>
 8007ad2:	4b23      	ldr	r3, [pc, #140]	; (8007b60 <_svfiprintf_r+0x1f4>)
 8007ad4:	bb1b      	cbnz	r3, 8007b1e <_svfiprintf_r+0x1b2>
 8007ad6:	9b03      	ldr	r3, [sp, #12]
 8007ad8:	3307      	adds	r3, #7
 8007ada:	f023 0307 	bic.w	r3, r3, #7
 8007ade:	3308      	adds	r3, #8
 8007ae0:	9303      	str	r3, [sp, #12]
 8007ae2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ae4:	4433      	add	r3, r6
 8007ae6:	9309      	str	r3, [sp, #36]	; 0x24
 8007ae8:	e767      	b.n	80079ba <_svfiprintf_r+0x4e>
 8007aea:	fb0c 3202 	mla	r2, ip, r2, r3
 8007aee:	460c      	mov	r4, r1
 8007af0:	2001      	movs	r0, #1
 8007af2:	e7a5      	b.n	8007a40 <_svfiprintf_r+0xd4>
 8007af4:	2300      	movs	r3, #0
 8007af6:	3401      	adds	r4, #1
 8007af8:	9305      	str	r3, [sp, #20]
 8007afa:	4619      	mov	r1, r3
 8007afc:	f04f 0c0a 	mov.w	ip, #10
 8007b00:	4620      	mov	r0, r4
 8007b02:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007b06:	3a30      	subs	r2, #48	; 0x30
 8007b08:	2a09      	cmp	r2, #9
 8007b0a:	d903      	bls.n	8007b14 <_svfiprintf_r+0x1a8>
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d0c5      	beq.n	8007a9c <_svfiprintf_r+0x130>
 8007b10:	9105      	str	r1, [sp, #20]
 8007b12:	e7c3      	b.n	8007a9c <_svfiprintf_r+0x130>
 8007b14:	fb0c 2101 	mla	r1, ip, r1, r2
 8007b18:	4604      	mov	r4, r0
 8007b1a:	2301      	movs	r3, #1
 8007b1c:	e7f0      	b.n	8007b00 <_svfiprintf_r+0x194>
 8007b1e:	ab03      	add	r3, sp, #12
 8007b20:	9300      	str	r3, [sp, #0]
 8007b22:	462a      	mov	r2, r5
 8007b24:	4b0f      	ldr	r3, [pc, #60]	; (8007b64 <_svfiprintf_r+0x1f8>)
 8007b26:	a904      	add	r1, sp, #16
 8007b28:	4638      	mov	r0, r7
 8007b2a:	f3af 8000 	nop.w
 8007b2e:	1c42      	adds	r2, r0, #1
 8007b30:	4606      	mov	r6, r0
 8007b32:	d1d6      	bne.n	8007ae2 <_svfiprintf_r+0x176>
 8007b34:	89ab      	ldrh	r3, [r5, #12]
 8007b36:	065b      	lsls	r3, r3, #25
 8007b38:	f53f af2c 	bmi.w	8007994 <_svfiprintf_r+0x28>
 8007b3c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007b3e:	b01d      	add	sp, #116	; 0x74
 8007b40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b44:	ab03      	add	r3, sp, #12
 8007b46:	9300      	str	r3, [sp, #0]
 8007b48:	462a      	mov	r2, r5
 8007b4a:	4b06      	ldr	r3, [pc, #24]	; (8007b64 <_svfiprintf_r+0x1f8>)
 8007b4c:	a904      	add	r1, sp, #16
 8007b4e:	4638      	mov	r0, r7
 8007b50:	f000 f87a 	bl	8007c48 <_printf_i>
 8007b54:	e7eb      	b.n	8007b2e <_svfiprintf_r+0x1c2>
 8007b56:	bf00      	nop
 8007b58:	08008158 	.word	0x08008158
 8007b5c:	08008162 	.word	0x08008162
 8007b60:	00000000 	.word	0x00000000
 8007b64:	080078b5 	.word	0x080078b5
 8007b68:	0800815e 	.word	0x0800815e

08007b6c <_printf_common>:
 8007b6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007b70:	4616      	mov	r6, r2
 8007b72:	4699      	mov	r9, r3
 8007b74:	688a      	ldr	r2, [r1, #8]
 8007b76:	690b      	ldr	r3, [r1, #16]
 8007b78:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007b7c:	4293      	cmp	r3, r2
 8007b7e:	bfb8      	it	lt
 8007b80:	4613      	movlt	r3, r2
 8007b82:	6033      	str	r3, [r6, #0]
 8007b84:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007b88:	4607      	mov	r7, r0
 8007b8a:	460c      	mov	r4, r1
 8007b8c:	b10a      	cbz	r2, 8007b92 <_printf_common+0x26>
 8007b8e:	3301      	adds	r3, #1
 8007b90:	6033      	str	r3, [r6, #0]
 8007b92:	6823      	ldr	r3, [r4, #0]
 8007b94:	0699      	lsls	r1, r3, #26
 8007b96:	bf42      	ittt	mi
 8007b98:	6833      	ldrmi	r3, [r6, #0]
 8007b9a:	3302      	addmi	r3, #2
 8007b9c:	6033      	strmi	r3, [r6, #0]
 8007b9e:	6825      	ldr	r5, [r4, #0]
 8007ba0:	f015 0506 	ands.w	r5, r5, #6
 8007ba4:	d106      	bne.n	8007bb4 <_printf_common+0x48>
 8007ba6:	f104 0a19 	add.w	sl, r4, #25
 8007baa:	68e3      	ldr	r3, [r4, #12]
 8007bac:	6832      	ldr	r2, [r6, #0]
 8007bae:	1a9b      	subs	r3, r3, r2
 8007bb0:	42ab      	cmp	r3, r5
 8007bb2:	dc26      	bgt.n	8007c02 <_printf_common+0x96>
 8007bb4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007bb8:	1e13      	subs	r3, r2, #0
 8007bba:	6822      	ldr	r2, [r4, #0]
 8007bbc:	bf18      	it	ne
 8007bbe:	2301      	movne	r3, #1
 8007bc0:	0692      	lsls	r2, r2, #26
 8007bc2:	d42b      	bmi.n	8007c1c <_printf_common+0xb0>
 8007bc4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007bc8:	4649      	mov	r1, r9
 8007bca:	4638      	mov	r0, r7
 8007bcc:	47c0      	blx	r8
 8007bce:	3001      	adds	r0, #1
 8007bd0:	d01e      	beq.n	8007c10 <_printf_common+0xa4>
 8007bd2:	6823      	ldr	r3, [r4, #0]
 8007bd4:	68e5      	ldr	r5, [r4, #12]
 8007bd6:	6832      	ldr	r2, [r6, #0]
 8007bd8:	f003 0306 	and.w	r3, r3, #6
 8007bdc:	2b04      	cmp	r3, #4
 8007bde:	bf08      	it	eq
 8007be0:	1aad      	subeq	r5, r5, r2
 8007be2:	68a3      	ldr	r3, [r4, #8]
 8007be4:	6922      	ldr	r2, [r4, #16]
 8007be6:	bf0c      	ite	eq
 8007be8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007bec:	2500      	movne	r5, #0
 8007bee:	4293      	cmp	r3, r2
 8007bf0:	bfc4      	itt	gt
 8007bf2:	1a9b      	subgt	r3, r3, r2
 8007bf4:	18ed      	addgt	r5, r5, r3
 8007bf6:	2600      	movs	r6, #0
 8007bf8:	341a      	adds	r4, #26
 8007bfa:	42b5      	cmp	r5, r6
 8007bfc:	d11a      	bne.n	8007c34 <_printf_common+0xc8>
 8007bfe:	2000      	movs	r0, #0
 8007c00:	e008      	b.n	8007c14 <_printf_common+0xa8>
 8007c02:	2301      	movs	r3, #1
 8007c04:	4652      	mov	r2, sl
 8007c06:	4649      	mov	r1, r9
 8007c08:	4638      	mov	r0, r7
 8007c0a:	47c0      	blx	r8
 8007c0c:	3001      	adds	r0, #1
 8007c0e:	d103      	bne.n	8007c18 <_printf_common+0xac>
 8007c10:	f04f 30ff 	mov.w	r0, #4294967295
 8007c14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c18:	3501      	adds	r5, #1
 8007c1a:	e7c6      	b.n	8007baa <_printf_common+0x3e>
 8007c1c:	18e1      	adds	r1, r4, r3
 8007c1e:	1c5a      	adds	r2, r3, #1
 8007c20:	2030      	movs	r0, #48	; 0x30
 8007c22:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007c26:	4422      	add	r2, r4
 8007c28:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007c2c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007c30:	3302      	adds	r3, #2
 8007c32:	e7c7      	b.n	8007bc4 <_printf_common+0x58>
 8007c34:	2301      	movs	r3, #1
 8007c36:	4622      	mov	r2, r4
 8007c38:	4649      	mov	r1, r9
 8007c3a:	4638      	mov	r0, r7
 8007c3c:	47c0      	blx	r8
 8007c3e:	3001      	adds	r0, #1
 8007c40:	d0e6      	beq.n	8007c10 <_printf_common+0xa4>
 8007c42:	3601      	adds	r6, #1
 8007c44:	e7d9      	b.n	8007bfa <_printf_common+0x8e>
	...

08007c48 <_printf_i>:
 8007c48:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007c4c:	460c      	mov	r4, r1
 8007c4e:	4691      	mov	r9, r2
 8007c50:	7e27      	ldrb	r7, [r4, #24]
 8007c52:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007c54:	2f78      	cmp	r7, #120	; 0x78
 8007c56:	4680      	mov	r8, r0
 8007c58:	469a      	mov	sl, r3
 8007c5a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007c5e:	d807      	bhi.n	8007c70 <_printf_i+0x28>
 8007c60:	2f62      	cmp	r7, #98	; 0x62
 8007c62:	d80a      	bhi.n	8007c7a <_printf_i+0x32>
 8007c64:	2f00      	cmp	r7, #0
 8007c66:	f000 80d8 	beq.w	8007e1a <_printf_i+0x1d2>
 8007c6a:	2f58      	cmp	r7, #88	; 0x58
 8007c6c:	f000 80a3 	beq.w	8007db6 <_printf_i+0x16e>
 8007c70:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007c74:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007c78:	e03a      	b.n	8007cf0 <_printf_i+0xa8>
 8007c7a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007c7e:	2b15      	cmp	r3, #21
 8007c80:	d8f6      	bhi.n	8007c70 <_printf_i+0x28>
 8007c82:	a001      	add	r0, pc, #4	; (adr r0, 8007c88 <_printf_i+0x40>)
 8007c84:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8007c88:	08007ce1 	.word	0x08007ce1
 8007c8c:	08007cf5 	.word	0x08007cf5
 8007c90:	08007c71 	.word	0x08007c71
 8007c94:	08007c71 	.word	0x08007c71
 8007c98:	08007c71 	.word	0x08007c71
 8007c9c:	08007c71 	.word	0x08007c71
 8007ca0:	08007cf5 	.word	0x08007cf5
 8007ca4:	08007c71 	.word	0x08007c71
 8007ca8:	08007c71 	.word	0x08007c71
 8007cac:	08007c71 	.word	0x08007c71
 8007cb0:	08007c71 	.word	0x08007c71
 8007cb4:	08007e01 	.word	0x08007e01
 8007cb8:	08007d25 	.word	0x08007d25
 8007cbc:	08007de3 	.word	0x08007de3
 8007cc0:	08007c71 	.word	0x08007c71
 8007cc4:	08007c71 	.word	0x08007c71
 8007cc8:	08007e23 	.word	0x08007e23
 8007ccc:	08007c71 	.word	0x08007c71
 8007cd0:	08007d25 	.word	0x08007d25
 8007cd4:	08007c71 	.word	0x08007c71
 8007cd8:	08007c71 	.word	0x08007c71
 8007cdc:	08007deb 	.word	0x08007deb
 8007ce0:	680b      	ldr	r3, [r1, #0]
 8007ce2:	1d1a      	adds	r2, r3, #4
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	600a      	str	r2, [r1, #0]
 8007ce8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007cec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007cf0:	2301      	movs	r3, #1
 8007cf2:	e0a3      	b.n	8007e3c <_printf_i+0x1f4>
 8007cf4:	6825      	ldr	r5, [r4, #0]
 8007cf6:	6808      	ldr	r0, [r1, #0]
 8007cf8:	062e      	lsls	r6, r5, #24
 8007cfa:	f100 0304 	add.w	r3, r0, #4
 8007cfe:	d50a      	bpl.n	8007d16 <_printf_i+0xce>
 8007d00:	6805      	ldr	r5, [r0, #0]
 8007d02:	600b      	str	r3, [r1, #0]
 8007d04:	2d00      	cmp	r5, #0
 8007d06:	da03      	bge.n	8007d10 <_printf_i+0xc8>
 8007d08:	232d      	movs	r3, #45	; 0x2d
 8007d0a:	426d      	negs	r5, r5
 8007d0c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007d10:	485e      	ldr	r0, [pc, #376]	; (8007e8c <_printf_i+0x244>)
 8007d12:	230a      	movs	r3, #10
 8007d14:	e019      	b.n	8007d4a <_printf_i+0x102>
 8007d16:	f015 0f40 	tst.w	r5, #64	; 0x40
 8007d1a:	6805      	ldr	r5, [r0, #0]
 8007d1c:	600b      	str	r3, [r1, #0]
 8007d1e:	bf18      	it	ne
 8007d20:	b22d      	sxthne	r5, r5
 8007d22:	e7ef      	b.n	8007d04 <_printf_i+0xbc>
 8007d24:	680b      	ldr	r3, [r1, #0]
 8007d26:	6825      	ldr	r5, [r4, #0]
 8007d28:	1d18      	adds	r0, r3, #4
 8007d2a:	6008      	str	r0, [r1, #0]
 8007d2c:	0628      	lsls	r0, r5, #24
 8007d2e:	d501      	bpl.n	8007d34 <_printf_i+0xec>
 8007d30:	681d      	ldr	r5, [r3, #0]
 8007d32:	e002      	b.n	8007d3a <_printf_i+0xf2>
 8007d34:	0669      	lsls	r1, r5, #25
 8007d36:	d5fb      	bpl.n	8007d30 <_printf_i+0xe8>
 8007d38:	881d      	ldrh	r5, [r3, #0]
 8007d3a:	4854      	ldr	r0, [pc, #336]	; (8007e8c <_printf_i+0x244>)
 8007d3c:	2f6f      	cmp	r7, #111	; 0x6f
 8007d3e:	bf0c      	ite	eq
 8007d40:	2308      	moveq	r3, #8
 8007d42:	230a      	movne	r3, #10
 8007d44:	2100      	movs	r1, #0
 8007d46:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007d4a:	6866      	ldr	r6, [r4, #4]
 8007d4c:	60a6      	str	r6, [r4, #8]
 8007d4e:	2e00      	cmp	r6, #0
 8007d50:	bfa2      	ittt	ge
 8007d52:	6821      	ldrge	r1, [r4, #0]
 8007d54:	f021 0104 	bicge.w	r1, r1, #4
 8007d58:	6021      	strge	r1, [r4, #0]
 8007d5a:	b90d      	cbnz	r5, 8007d60 <_printf_i+0x118>
 8007d5c:	2e00      	cmp	r6, #0
 8007d5e:	d04d      	beq.n	8007dfc <_printf_i+0x1b4>
 8007d60:	4616      	mov	r6, r2
 8007d62:	fbb5 f1f3 	udiv	r1, r5, r3
 8007d66:	fb03 5711 	mls	r7, r3, r1, r5
 8007d6a:	5dc7      	ldrb	r7, [r0, r7]
 8007d6c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007d70:	462f      	mov	r7, r5
 8007d72:	42bb      	cmp	r3, r7
 8007d74:	460d      	mov	r5, r1
 8007d76:	d9f4      	bls.n	8007d62 <_printf_i+0x11a>
 8007d78:	2b08      	cmp	r3, #8
 8007d7a:	d10b      	bne.n	8007d94 <_printf_i+0x14c>
 8007d7c:	6823      	ldr	r3, [r4, #0]
 8007d7e:	07df      	lsls	r7, r3, #31
 8007d80:	d508      	bpl.n	8007d94 <_printf_i+0x14c>
 8007d82:	6923      	ldr	r3, [r4, #16]
 8007d84:	6861      	ldr	r1, [r4, #4]
 8007d86:	4299      	cmp	r1, r3
 8007d88:	bfde      	ittt	le
 8007d8a:	2330      	movle	r3, #48	; 0x30
 8007d8c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007d90:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007d94:	1b92      	subs	r2, r2, r6
 8007d96:	6122      	str	r2, [r4, #16]
 8007d98:	f8cd a000 	str.w	sl, [sp]
 8007d9c:	464b      	mov	r3, r9
 8007d9e:	aa03      	add	r2, sp, #12
 8007da0:	4621      	mov	r1, r4
 8007da2:	4640      	mov	r0, r8
 8007da4:	f7ff fee2 	bl	8007b6c <_printf_common>
 8007da8:	3001      	adds	r0, #1
 8007daa:	d14c      	bne.n	8007e46 <_printf_i+0x1fe>
 8007dac:	f04f 30ff 	mov.w	r0, #4294967295
 8007db0:	b004      	add	sp, #16
 8007db2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007db6:	4835      	ldr	r0, [pc, #212]	; (8007e8c <_printf_i+0x244>)
 8007db8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007dbc:	6823      	ldr	r3, [r4, #0]
 8007dbe:	680e      	ldr	r6, [r1, #0]
 8007dc0:	061f      	lsls	r7, r3, #24
 8007dc2:	f856 5b04 	ldr.w	r5, [r6], #4
 8007dc6:	600e      	str	r6, [r1, #0]
 8007dc8:	d514      	bpl.n	8007df4 <_printf_i+0x1ac>
 8007dca:	07d9      	lsls	r1, r3, #31
 8007dcc:	bf44      	itt	mi
 8007dce:	f043 0320 	orrmi.w	r3, r3, #32
 8007dd2:	6023      	strmi	r3, [r4, #0]
 8007dd4:	b91d      	cbnz	r5, 8007dde <_printf_i+0x196>
 8007dd6:	6823      	ldr	r3, [r4, #0]
 8007dd8:	f023 0320 	bic.w	r3, r3, #32
 8007ddc:	6023      	str	r3, [r4, #0]
 8007dde:	2310      	movs	r3, #16
 8007de0:	e7b0      	b.n	8007d44 <_printf_i+0xfc>
 8007de2:	6823      	ldr	r3, [r4, #0]
 8007de4:	f043 0320 	orr.w	r3, r3, #32
 8007de8:	6023      	str	r3, [r4, #0]
 8007dea:	2378      	movs	r3, #120	; 0x78
 8007dec:	4828      	ldr	r0, [pc, #160]	; (8007e90 <_printf_i+0x248>)
 8007dee:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007df2:	e7e3      	b.n	8007dbc <_printf_i+0x174>
 8007df4:	065e      	lsls	r6, r3, #25
 8007df6:	bf48      	it	mi
 8007df8:	b2ad      	uxthmi	r5, r5
 8007dfa:	e7e6      	b.n	8007dca <_printf_i+0x182>
 8007dfc:	4616      	mov	r6, r2
 8007dfe:	e7bb      	b.n	8007d78 <_printf_i+0x130>
 8007e00:	680b      	ldr	r3, [r1, #0]
 8007e02:	6826      	ldr	r6, [r4, #0]
 8007e04:	6960      	ldr	r0, [r4, #20]
 8007e06:	1d1d      	adds	r5, r3, #4
 8007e08:	600d      	str	r5, [r1, #0]
 8007e0a:	0635      	lsls	r5, r6, #24
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	d501      	bpl.n	8007e14 <_printf_i+0x1cc>
 8007e10:	6018      	str	r0, [r3, #0]
 8007e12:	e002      	b.n	8007e1a <_printf_i+0x1d2>
 8007e14:	0671      	lsls	r1, r6, #25
 8007e16:	d5fb      	bpl.n	8007e10 <_printf_i+0x1c8>
 8007e18:	8018      	strh	r0, [r3, #0]
 8007e1a:	2300      	movs	r3, #0
 8007e1c:	6123      	str	r3, [r4, #16]
 8007e1e:	4616      	mov	r6, r2
 8007e20:	e7ba      	b.n	8007d98 <_printf_i+0x150>
 8007e22:	680b      	ldr	r3, [r1, #0]
 8007e24:	1d1a      	adds	r2, r3, #4
 8007e26:	600a      	str	r2, [r1, #0]
 8007e28:	681e      	ldr	r6, [r3, #0]
 8007e2a:	6862      	ldr	r2, [r4, #4]
 8007e2c:	2100      	movs	r1, #0
 8007e2e:	4630      	mov	r0, r6
 8007e30:	f7f8 f9de 	bl	80001f0 <memchr>
 8007e34:	b108      	cbz	r0, 8007e3a <_printf_i+0x1f2>
 8007e36:	1b80      	subs	r0, r0, r6
 8007e38:	6060      	str	r0, [r4, #4]
 8007e3a:	6863      	ldr	r3, [r4, #4]
 8007e3c:	6123      	str	r3, [r4, #16]
 8007e3e:	2300      	movs	r3, #0
 8007e40:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007e44:	e7a8      	b.n	8007d98 <_printf_i+0x150>
 8007e46:	6923      	ldr	r3, [r4, #16]
 8007e48:	4632      	mov	r2, r6
 8007e4a:	4649      	mov	r1, r9
 8007e4c:	4640      	mov	r0, r8
 8007e4e:	47d0      	blx	sl
 8007e50:	3001      	adds	r0, #1
 8007e52:	d0ab      	beq.n	8007dac <_printf_i+0x164>
 8007e54:	6823      	ldr	r3, [r4, #0]
 8007e56:	079b      	lsls	r3, r3, #30
 8007e58:	d413      	bmi.n	8007e82 <_printf_i+0x23a>
 8007e5a:	68e0      	ldr	r0, [r4, #12]
 8007e5c:	9b03      	ldr	r3, [sp, #12]
 8007e5e:	4298      	cmp	r0, r3
 8007e60:	bfb8      	it	lt
 8007e62:	4618      	movlt	r0, r3
 8007e64:	e7a4      	b.n	8007db0 <_printf_i+0x168>
 8007e66:	2301      	movs	r3, #1
 8007e68:	4632      	mov	r2, r6
 8007e6a:	4649      	mov	r1, r9
 8007e6c:	4640      	mov	r0, r8
 8007e6e:	47d0      	blx	sl
 8007e70:	3001      	adds	r0, #1
 8007e72:	d09b      	beq.n	8007dac <_printf_i+0x164>
 8007e74:	3501      	adds	r5, #1
 8007e76:	68e3      	ldr	r3, [r4, #12]
 8007e78:	9903      	ldr	r1, [sp, #12]
 8007e7a:	1a5b      	subs	r3, r3, r1
 8007e7c:	42ab      	cmp	r3, r5
 8007e7e:	dcf2      	bgt.n	8007e66 <_printf_i+0x21e>
 8007e80:	e7eb      	b.n	8007e5a <_printf_i+0x212>
 8007e82:	2500      	movs	r5, #0
 8007e84:	f104 0619 	add.w	r6, r4, #25
 8007e88:	e7f5      	b.n	8007e76 <_printf_i+0x22e>
 8007e8a:	bf00      	nop
 8007e8c:	08008169 	.word	0x08008169
 8007e90:	0800817a 	.word	0x0800817a

08007e94 <memcpy>:
 8007e94:	440a      	add	r2, r1
 8007e96:	4291      	cmp	r1, r2
 8007e98:	f100 33ff 	add.w	r3, r0, #4294967295
 8007e9c:	d100      	bne.n	8007ea0 <memcpy+0xc>
 8007e9e:	4770      	bx	lr
 8007ea0:	b510      	push	{r4, lr}
 8007ea2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007ea6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007eaa:	4291      	cmp	r1, r2
 8007eac:	d1f9      	bne.n	8007ea2 <memcpy+0xe>
 8007eae:	bd10      	pop	{r4, pc}

08007eb0 <memmove>:
 8007eb0:	4288      	cmp	r0, r1
 8007eb2:	b510      	push	{r4, lr}
 8007eb4:	eb01 0402 	add.w	r4, r1, r2
 8007eb8:	d902      	bls.n	8007ec0 <memmove+0x10>
 8007eba:	4284      	cmp	r4, r0
 8007ebc:	4623      	mov	r3, r4
 8007ebe:	d807      	bhi.n	8007ed0 <memmove+0x20>
 8007ec0:	1e43      	subs	r3, r0, #1
 8007ec2:	42a1      	cmp	r1, r4
 8007ec4:	d008      	beq.n	8007ed8 <memmove+0x28>
 8007ec6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007eca:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007ece:	e7f8      	b.n	8007ec2 <memmove+0x12>
 8007ed0:	4402      	add	r2, r0
 8007ed2:	4601      	mov	r1, r0
 8007ed4:	428a      	cmp	r2, r1
 8007ed6:	d100      	bne.n	8007eda <memmove+0x2a>
 8007ed8:	bd10      	pop	{r4, pc}
 8007eda:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007ede:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007ee2:	e7f7      	b.n	8007ed4 <memmove+0x24>

08007ee4 <_free_r>:
 8007ee4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007ee6:	2900      	cmp	r1, #0
 8007ee8:	d048      	beq.n	8007f7c <_free_r+0x98>
 8007eea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007eee:	9001      	str	r0, [sp, #4]
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	f1a1 0404 	sub.w	r4, r1, #4
 8007ef6:	bfb8      	it	lt
 8007ef8:	18e4      	addlt	r4, r4, r3
 8007efa:	f000 f8d3 	bl	80080a4 <__malloc_lock>
 8007efe:	4a20      	ldr	r2, [pc, #128]	; (8007f80 <_free_r+0x9c>)
 8007f00:	9801      	ldr	r0, [sp, #4]
 8007f02:	6813      	ldr	r3, [r2, #0]
 8007f04:	4615      	mov	r5, r2
 8007f06:	b933      	cbnz	r3, 8007f16 <_free_r+0x32>
 8007f08:	6063      	str	r3, [r4, #4]
 8007f0a:	6014      	str	r4, [r2, #0]
 8007f0c:	b003      	add	sp, #12
 8007f0e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007f12:	f000 b8cd 	b.w	80080b0 <__malloc_unlock>
 8007f16:	42a3      	cmp	r3, r4
 8007f18:	d90b      	bls.n	8007f32 <_free_r+0x4e>
 8007f1a:	6821      	ldr	r1, [r4, #0]
 8007f1c:	1862      	adds	r2, r4, r1
 8007f1e:	4293      	cmp	r3, r2
 8007f20:	bf04      	itt	eq
 8007f22:	681a      	ldreq	r2, [r3, #0]
 8007f24:	685b      	ldreq	r3, [r3, #4]
 8007f26:	6063      	str	r3, [r4, #4]
 8007f28:	bf04      	itt	eq
 8007f2a:	1852      	addeq	r2, r2, r1
 8007f2c:	6022      	streq	r2, [r4, #0]
 8007f2e:	602c      	str	r4, [r5, #0]
 8007f30:	e7ec      	b.n	8007f0c <_free_r+0x28>
 8007f32:	461a      	mov	r2, r3
 8007f34:	685b      	ldr	r3, [r3, #4]
 8007f36:	b10b      	cbz	r3, 8007f3c <_free_r+0x58>
 8007f38:	42a3      	cmp	r3, r4
 8007f3a:	d9fa      	bls.n	8007f32 <_free_r+0x4e>
 8007f3c:	6811      	ldr	r1, [r2, #0]
 8007f3e:	1855      	adds	r5, r2, r1
 8007f40:	42a5      	cmp	r5, r4
 8007f42:	d10b      	bne.n	8007f5c <_free_r+0x78>
 8007f44:	6824      	ldr	r4, [r4, #0]
 8007f46:	4421      	add	r1, r4
 8007f48:	1854      	adds	r4, r2, r1
 8007f4a:	42a3      	cmp	r3, r4
 8007f4c:	6011      	str	r1, [r2, #0]
 8007f4e:	d1dd      	bne.n	8007f0c <_free_r+0x28>
 8007f50:	681c      	ldr	r4, [r3, #0]
 8007f52:	685b      	ldr	r3, [r3, #4]
 8007f54:	6053      	str	r3, [r2, #4]
 8007f56:	4421      	add	r1, r4
 8007f58:	6011      	str	r1, [r2, #0]
 8007f5a:	e7d7      	b.n	8007f0c <_free_r+0x28>
 8007f5c:	d902      	bls.n	8007f64 <_free_r+0x80>
 8007f5e:	230c      	movs	r3, #12
 8007f60:	6003      	str	r3, [r0, #0]
 8007f62:	e7d3      	b.n	8007f0c <_free_r+0x28>
 8007f64:	6825      	ldr	r5, [r4, #0]
 8007f66:	1961      	adds	r1, r4, r5
 8007f68:	428b      	cmp	r3, r1
 8007f6a:	bf04      	itt	eq
 8007f6c:	6819      	ldreq	r1, [r3, #0]
 8007f6e:	685b      	ldreq	r3, [r3, #4]
 8007f70:	6063      	str	r3, [r4, #4]
 8007f72:	bf04      	itt	eq
 8007f74:	1949      	addeq	r1, r1, r5
 8007f76:	6021      	streq	r1, [r4, #0]
 8007f78:	6054      	str	r4, [r2, #4]
 8007f7a:	e7c7      	b.n	8007f0c <_free_r+0x28>
 8007f7c:	b003      	add	sp, #12
 8007f7e:	bd30      	pop	{r4, r5, pc}
 8007f80:	20000428 	.word	0x20000428

08007f84 <_malloc_r>:
 8007f84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f86:	1ccd      	adds	r5, r1, #3
 8007f88:	f025 0503 	bic.w	r5, r5, #3
 8007f8c:	3508      	adds	r5, #8
 8007f8e:	2d0c      	cmp	r5, #12
 8007f90:	bf38      	it	cc
 8007f92:	250c      	movcc	r5, #12
 8007f94:	2d00      	cmp	r5, #0
 8007f96:	4606      	mov	r6, r0
 8007f98:	db01      	blt.n	8007f9e <_malloc_r+0x1a>
 8007f9a:	42a9      	cmp	r1, r5
 8007f9c:	d903      	bls.n	8007fa6 <_malloc_r+0x22>
 8007f9e:	230c      	movs	r3, #12
 8007fa0:	6033      	str	r3, [r6, #0]
 8007fa2:	2000      	movs	r0, #0
 8007fa4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007fa6:	f000 f87d 	bl	80080a4 <__malloc_lock>
 8007faa:	4921      	ldr	r1, [pc, #132]	; (8008030 <_malloc_r+0xac>)
 8007fac:	680a      	ldr	r2, [r1, #0]
 8007fae:	4614      	mov	r4, r2
 8007fb0:	b99c      	cbnz	r4, 8007fda <_malloc_r+0x56>
 8007fb2:	4f20      	ldr	r7, [pc, #128]	; (8008034 <_malloc_r+0xb0>)
 8007fb4:	683b      	ldr	r3, [r7, #0]
 8007fb6:	b923      	cbnz	r3, 8007fc2 <_malloc_r+0x3e>
 8007fb8:	4621      	mov	r1, r4
 8007fba:	4630      	mov	r0, r6
 8007fbc:	f000 f862 	bl	8008084 <_sbrk_r>
 8007fc0:	6038      	str	r0, [r7, #0]
 8007fc2:	4629      	mov	r1, r5
 8007fc4:	4630      	mov	r0, r6
 8007fc6:	f000 f85d 	bl	8008084 <_sbrk_r>
 8007fca:	1c43      	adds	r3, r0, #1
 8007fcc:	d123      	bne.n	8008016 <_malloc_r+0x92>
 8007fce:	230c      	movs	r3, #12
 8007fd0:	6033      	str	r3, [r6, #0]
 8007fd2:	4630      	mov	r0, r6
 8007fd4:	f000 f86c 	bl	80080b0 <__malloc_unlock>
 8007fd8:	e7e3      	b.n	8007fa2 <_malloc_r+0x1e>
 8007fda:	6823      	ldr	r3, [r4, #0]
 8007fdc:	1b5b      	subs	r3, r3, r5
 8007fde:	d417      	bmi.n	8008010 <_malloc_r+0x8c>
 8007fe0:	2b0b      	cmp	r3, #11
 8007fe2:	d903      	bls.n	8007fec <_malloc_r+0x68>
 8007fe4:	6023      	str	r3, [r4, #0]
 8007fe6:	441c      	add	r4, r3
 8007fe8:	6025      	str	r5, [r4, #0]
 8007fea:	e004      	b.n	8007ff6 <_malloc_r+0x72>
 8007fec:	6863      	ldr	r3, [r4, #4]
 8007fee:	42a2      	cmp	r2, r4
 8007ff0:	bf0c      	ite	eq
 8007ff2:	600b      	streq	r3, [r1, #0]
 8007ff4:	6053      	strne	r3, [r2, #4]
 8007ff6:	4630      	mov	r0, r6
 8007ff8:	f000 f85a 	bl	80080b0 <__malloc_unlock>
 8007ffc:	f104 000b 	add.w	r0, r4, #11
 8008000:	1d23      	adds	r3, r4, #4
 8008002:	f020 0007 	bic.w	r0, r0, #7
 8008006:	1ac2      	subs	r2, r0, r3
 8008008:	d0cc      	beq.n	8007fa4 <_malloc_r+0x20>
 800800a:	1a1b      	subs	r3, r3, r0
 800800c:	50a3      	str	r3, [r4, r2]
 800800e:	e7c9      	b.n	8007fa4 <_malloc_r+0x20>
 8008010:	4622      	mov	r2, r4
 8008012:	6864      	ldr	r4, [r4, #4]
 8008014:	e7cc      	b.n	8007fb0 <_malloc_r+0x2c>
 8008016:	1cc4      	adds	r4, r0, #3
 8008018:	f024 0403 	bic.w	r4, r4, #3
 800801c:	42a0      	cmp	r0, r4
 800801e:	d0e3      	beq.n	8007fe8 <_malloc_r+0x64>
 8008020:	1a21      	subs	r1, r4, r0
 8008022:	4630      	mov	r0, r6
 8008024:	f000 f82e 	bl	8008084 <_sbrk_r>
 8008028:	3001      	adds	r0, #1
 800802a:	d1dd      	bne.n	8007fe8 <_malloc_r+0x64>
 800802c:	e7cf      	b.n	8007fce <_malloc_r+0x4a>
 800802e:	bf00      	nop
 8008030:	20000428 	.word	0x20000428
 8008034:	2000042c 	.word	0x2000042c

08008038 <_realloc_r>:
 8008038:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800803a:	4607      	mov	r7, r0
 800803c:	4614      	mov	r4, r2
 800803e:	460e      	mov	r6, r1
 8008040:	b921      	cbnz	r1, 800804c <_realloc_r+0x14>
 8008042:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008046:	4611      	mov	r1, r2
 8008048:	f7ff bf9c 	b.w	8007f84 <_malloc_r>
 800804c:	b922      	cbnz	r2, 8008058 <_realloc_r+0x20>
 800804e:	f7ff ff49 	bl	8007ee4 <_free_r>
 8008052:	4625      	mov	r5, r4
 8008054:	4628      	mov	r0, r5
 8008056:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008058:	f000 f830 	bl	80080bc <_malloc_usable_size_r>
 800805c:	42a0      	cmp	r0, r4
 800805e:	d20f      	bcs.n	8008080 <_realloc_r+0x48>
 8008060:	4621      	mov	r1, r4
 8008062:	4638      	mov	r0, r7
 8008064:	f7ff ff8e 	bl	8007f84 <_malloc_r>
 8008068:	4605      	mov	r5, r0
 800806a:	2800      	cmp	r0, #0
 800806c:	d0f2      	beq.n	8008054 <_realloc_r+0x1c>
 800806e:	4631      	mov	r1, r6
 8008070:	4622      	mov	r2, r4
 8008072:	f7ff ff0f 	bl	8007e94 <memcpy>
 8008076:	4631      	mov	r1, r6
 8008078:	4638      	mov	r0, r7
 800807a:	f7ff ff33 	bl	8007ee4 <_free_r>
 800807e:	e7e9      	b.n	8008054 <_realloc_r+0x1c>
 8008080:	4635      	mov	r5, r6
 8008082:	e7e7      	b.n	8008054 <_realloc_r+0x1c>

08008084 <_sbrk_r>:
 8008084:	b538      	push	{r3, r4, r5, lr}
 8008086:	4d06      	ldr	r5, [pc, #24]	; (80080a0 <_sbrk_r+0x1c>)
 8008088:	2300      	movs	r3, #0
 800808a:	4604      	mov	r4, r0
 800808c:	4608      	mov	r0, r1
 800808e:	602b      	str	r3, [r5, #0]
 8008090:	f7f8 fd6e 	bl	8000b70 <_sbrk>
 8008094:	1c43      	adds	r3, r0, #1
 8008096:	d102      	bne.n	800809e <_sbrk_r+0x1a>
 8008098:	682b      	ldr	r3, [r5, #0]
 800809a:	b103      	cbz	r3, 800809e <_sbrk_r+0x1a>
 800809c:	6023      	str	r3, [r4, #0]
 800809e:	bd38      	pop	{r3, r4, r5, pc}
 80080a0:	20001d6c 	.word	0x20001d6c

080080a4 <__malloc_lock>:
 80080a4:	4801      	ldr	r0, [pc, #4]	; (80080ac <__malloc_lock+0x8>)
 80080a6:	f000 b811 	b.w	80080cc <__retarget_lock_acquire_recursive>
 80080aa:	bf00      	nop
 80080ac:	20001d74 	.word	0x20001d74

080080b0 <__malloc_unlock>:
 80080b0:	4801      	ldr	r0, [pc, #4]	; (80080b8 <__malloc_unlock+0x8>)
 80080b2:	f000 b80c 	b.w	80080ce <__retarget_lock_release_recursive>
 80080b6:	bf00      	nop
 80080b8:	20001d74 	.word	0x20001d74

080080bc <_malloc_usable_size_r>:
 80080bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80080c0:	1f18      	subs	r0, r3, #4
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	bfbc      	itt	lt
 80080c6:	580b      	ldrlt	r3, [r1, r0]
 80080c8:	18c0      	addlt	r0, r0, r3
 80080ca:	4770      	bx	lr

080080cc <__retarget_lock_acquire_recursive>:
 80080cc:	4770      	bx	lr

080080ce <__retarget_lock_release_recursive>:
 80080ce:	4770      	bx	lr

080080d0 <_init>:
 80080d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080d2:	bf00      	nop
 80080d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80080d6:	bc08      	pop	{r3}
 80080d8:	469e      	mov	lr, r3
 80080da:	4770      	bx	lr

080080dc <_fini>:
 80080dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080de:	bf00      	nop
 80080e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80080e2:	bc08      	pop	{r3}
 80080e4:	469e      	mov	lr, r3
 80080e6:	4770      	bx	lr
