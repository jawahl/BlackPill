
STM32F411CEU6_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cd98  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000052c  0800cf38  0800cf38  0001cf38  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d464  0800d464  00020354  2**0
                  CONTENTS
  4 .ARM          00000008  0800d464  0800d464  0001d464  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d46c  0800d46c  00020354  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d46c  0800d46c  0001d46c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d470  0800d470  0001d470  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000354  20000000  0800d474  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001b98  20000354  0800d7c8  00020354  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001eec  0800d7c8  00021eec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020354  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018087  00000000  00000000  00020384  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000036c6  00000000  00000000  0003840b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ed0  00000000  00000000  0003bad8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d80  00000000  00000000  0003c9a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019d50  00000000  00000000  0003d728  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013a0b  00000000  00000000  00057478  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b8cc  00000000  00000000  0006ae83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f674f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000519c  00000000  00000000  000f67a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000354 	.word	0x20000354
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800cf20 	.word	0x0800cf20

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000358 	.word	0x20000358
 80001dc:	0800cf20 	.word	0x0800cf20

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9a4 	b.w	8000ff8 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	; (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	468c      	mov	ip, r1
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	f040 8083 	bne.w	8000e4a <__udivmoddi4+0x116>
 8000d44:	428a      	cmp	r2, r1
 8000d46:	4617      	mov	r7, r2
 8000d48:	d947      	bls.n	8000dda <__udivmoddi4+0xa6>
 8000d4a:	fab2 f282 	clz	r2, r2
 8000d4e:	b142      	cbz	r2, 8000d62 <__udivmoddi4+0x2e>
 8000d50:	f1c2 0020 	rsb	r0, r2, #32
 8000d54:	fa24 f000 	lsr.w	r0, r4, r0
 8000d58:	4091      	lsls	r1, r2
 8000d5a:	4097      	lsls	r7, r2
 8000d5c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d60:	4094      	lsls	r4, r2
 8000d62:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d66:	0c23      	lsrs	r3, r4, #16
 8000d68:	fbbc f6f8 	udiv	r6, ip, r8
 8000d6c:	fa1f fe87 	uxth.w	lr, r7
 8000d70:	fb08 c116 	mls	r1, r8, r6, ip
 8000d74:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d78:	fb06 f10e 	mul.w	r1, r6, lr
 8000d7c:	4299      	cmp	r1, r3
 8000d7e:	d909      	bls.n	8000d94 <__udivmoddi4+0x60>
 8000d80:	18fb      	adds	r3, r7, r3
 8000d82:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d86:	f080 8119 	bcs.w	8000fbc <__udivmoddi4+0x288>
 8000d8a:	4299      	cmp	r1, r3
 8000d8c:	f240 8116 	bls.w	8000fbc <__udivmoddi4+0x288>
 8000d90:	3e02      	subs	r6, #2
 8000d92:	443b      	add	r3, r7
 8000d94:	1a5b      	subs	r3, r3, r1
 8000d96:	b2a4      	uxth	r4, r4
 8000d98:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d9c:	fb08 3310 	mls	r3, r8, r0, r3
 8000da0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000da4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000da8:	45a6      	cmp	lr, r4
 8000daa:	d909      	bls.n	8000dc0 <__udivmoddi4+0x8c>
 8000dac:	193c      	adds	r4, r7, r4
 8000dae:	f100 33ff 	add.w	r3, r0, #4294967295
 8000db2:	f080 8105 	bcs.w	8000fc0 <__udivmoddi4+0x28c>
 8000db6:	45a6      	cmp	lr, r4
 8000db8:	f240 8102 	bls.w	8000fc0 <__udivmoddi4+0x28c>
 8000dbc:	3802      	subs	r0, #2
 8000dbe:	443c      	add	r4, r7
 8000dc0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dc4:	eba4 040e 	sub.w	r4, r4, lr
 8000dc8:	2600      	movs	r6, #0
 8000dca:	b11d      	cbz	r5, 8000dd4 <__udivmoddi4+0xa0>
 8000dcc:	40d4      	lsrs	r4, r2
 8000dce:	2300      	movs	r3, #0
 8000dd0:	e9c5 4300 	strd	r4, r3, [r5]
 8000dd4:	4631      	mov	r1, r6
 8000dd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dda:	b902      	cbnz	r2, 8000dde <__udivmoddi4+0xaa>
 8000ddc:	deff      	udf	#255	; 0xff
 8000dde:	fab2 f282 	clz	r2, r2
 8000de2:	2a00      	cmp	r2, #0
 8000de4:	d150      	bne.n	8000e88 <__udivmoddi4+0x154>
 8000de6:	1bcb      	subs	r3, r1, r7
 8000de8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dec:	fa1f f887 	uxth.w	r8, r7
 8000df0:	2601      	movs	r6, #1
 8000df2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000df6:	0c21      	lsrs	r1, r4, #16
 8000df8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000dfc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e00:	fb08 f30c 	mul.w	r3, r8, ip
 8000e04:	428b      	cmp	r3, r1
 8000e06:	d907      	bls.n	8000e18 <__udivmoddi4+0xe4>
 8000e08:	1879      	adds	r1, r7, r1
 8000e0a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e0e:	d202      	bcs.n	8000e16 <__udivmoddi4+0xe2>
 8000e10:	428b      	cmp	r3, r1
 8000e12:	f200 80e9 	bhi.w	8000fe8 <__udivmoddi4+0x2b4>
 8000e16:	4684      	mov	ip, r0
 8000e18:	1ac9      	subs	r1, r1, r3
 8000e1a:	b2a3      	uxth	r3, r4
 8000e1c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e20:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e24:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e28:	fb08 f800 	mul.w	r8, r8, r0
 8000e2c:	45a0      	cmp	r8, r4
 8000e2e:	d907      	bls.n	8000e40 <__udivmoddi4+0x10c>
 8000e30:	193c      	adds	r4, r7, r4
 8000e32:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e36:	d202      	bcs.n	8000e3e <__udivmoddi4+0x10a>
 8000e38:	45a0      	cmp	r8, r4
 8000e3a:	f200 80d9 	bhi.w	8000ff0 <__udivmoddi4+0x2bc>
 8000e3e:	4618      	mov	r0, r3
 8000e40:	eba4 0408 	sub.w	r4, r4, r8
 8000e44:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e48:	e7bf      	b.n	8000dca <__udivmoddi4+0x96>
 8000e4a:	428b      	cmp	r3, r1
 8000e4c:	d909      	bls.n	8000e62 <__udivmoddi4+0x12e>
 8000e4e:	2d00      	cmp	r5, #0
 8000e50:	f000 80b1 	beq.w	8000fb6 <__udivmoddi4+0x282>
 8000e54:	2600      	movs	r6, #0
 8000e56:	e9c5 0100 	strd	r0, r1, [r5]
 8000e5a:	4630      	mov	r0, r6
 8000e5c:	4631      	mov	r1, r6
 8000e5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e62:	fab3 f683 	clz	r6, r3
 8000e66:	2e00      	cmp	r6, #0
 8000e68:	d14a      	bne.n	8000f00 <__udivmoddi4+0x1cc>
 8000e6a:	428b      	cmp	r3, r1
 8000e6c:	d302      	bcc.n	8000e74 <__udivmoddi4+0x140>
 8000e6e:	4282      	cmp	r2, r0
 8000e70:	f200 80b8 	bhi.w	8000fe4 <__udivmoddi4+0x2b0>
 8000e74:	1a84      	subs	r4, r0, r2
 8000e76:	eb61 0103 	sbc.w	r1, r1, r3
 8000e7a:	2001      	movs	r0, #1
 8000e7c:	468c      	mov	ip, r1
 8000e7e:	2d00      	cmp	r5, #0
 8000e80:	d0a8      	beq.n	8000dd4 <__udivmoddi4+0xa0>
 8000e82:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e86:	e7a5      	b.n	8000dd4 <__udivmoddi4+0xa0>
 8000e88:	f1c2 0320 	rsb	r3, r2, #32
 8000e8c:	fa20 f603 	lsr.w	r6, r0, r3
 8000e90:	4097      	lsls	r7, r2
 8000e92:	fa01 f002 	lsl.w	r0, r1, r2
 8000e96:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e9a:	40d9      	lsrs	r1, r3
 8000e9c:	4330      	orrs	r0, r6
 8000e9e:	0c03      	lsrs	r3, r0, #16
 8000ea0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000ea4:	fa1f f887 	uxth.w	r8, r7
 8000ea8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000eac:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eb0:	fb06 f108 	mul.w	r1, r6, r8
 8000eb4:	4299      	cmp	r1, r3
 8000eb6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eba:	d909      	bls.n	8000ed0 <__udivmoddi4+0x19c>
 8000ebc:	18fb      	adds	r3, r7, r3
 8000ebe:	f106 3cff 	add.w	ip, r6, #4294967295
 8000ec2:	f080 808d 	bcs.w	8000fe0 <__udivmoddi4+0x2ac>
 8000ec6:	4299      	cmp	r1, r3
 8000ec8:	f240 808a 	bls.w	8000fe0 <__udivmoddi4+0x2ac>
 8000ecc:	3e02      	subs	r6, #2
 8000ece:	443b      	add	r3, r7
 8000ed0:	1a5b      	subs	r3, r3, r1
 8000ed2:	b281      	uxth	r1, r0
 8000ed4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ed8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000edc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ee0:	fb00 f308 	mul.w	r3, r0, r8
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	d907      	bls.n	8000ef8 <__udivmoddi4+0x1c4>
 8000ee8:	1879      	adds	r1, r7, r1
 8000eea:	f100 3cff 	add.w	ip, r0, #4294967295
 8000eee:	d273      	bcs.n	8000fd8 <__udivmoddi4+0x2a4>
 8000ef0:	428b      	cmp	r3, r1
 8000ef2:	d971      	bls.n	8000fd8 <__udivmoddi4+0x2a4>
 8000ef4:	3802      	subs	r0, #2
 8000ef6:	4439      	add	r1, r7
 8000ef8:	1acb      	subs	r3, r1, r3
 8000efa:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000efe:	e778      	b.n	8000df2 <__udivmoddi4+0xbe>
 8000f00:	f1c6 0c20 	rsb	ip, r6, #32
 8000f04:	fa03 f406 	lsl.w	r4, r3, r6
 8000f08:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f0c:	431c      	orrs	r4, r3
 8000f0e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f12:	fa01 f306 	lsl.w	r3, r1, r6
 8000f16:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f1a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f1e:	431f      	orrs	r7, r3
 8000f20:	0c3b      	lsrs	r3, r7, #16
 8000f22:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f26:	fa1f f884 	uxth.w	r8, r4
 8000f2a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f2e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f32:	fb09 fa08 	mul.w	sl, r9, r8
 8000f36:	458a      	cmp	sl, r1
 8000f38:	fa02 f206 	lsl.w	r2, r2, r6
 8000f3c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f40:	d908      	bls.n	8000f54 <__udivmoddi4+0x220>
 8000f42:	1861      	adds	r1, r4, r1
 8000f44:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f48:	d248      	bcs.n	8000fdc <__udivmoddi4+0x2a8>
 8000f4a:	458a      	cmp	sl, r1
 8000f4c:	d946      	bls.n	8000fdc <__udivmoddi4+0x2a8>
 8000f4e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f52:	4421      	add	r1, r4
 8000f54:	eba1 010a 	sub.w	r1, r1, sl
 8000f58:	b2bf      	uxth	r7, r7
 8000f5a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f5e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f62:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f66:	fb00 f808 	mul.w	r8, r0, r8
 8000f6a:	45b8      	cmp	r8, r7
 8000f6c:	d907      	bls.n	8000f7e <__udivmoddi4+0x24a>
 8000f6e:	19e7      	adds	r7, r4, r7
 8000f70:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f74:	d22e      	bcs.n	8000fd4 <__udivmoddi4+0x2a0>
 8000f76:	45b8      	cmp	r8, r7
 8000f78:	d92c      	bls.n	8000fd4 <__udivmoddi4+0x2a0>
 8000f7a:	3802      	subs	r0, #2
 8000f7c:	4427      	add	r7, r4
 8000f7e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f82:	eba7 0708 	sub.w	r7, r7, r8
 8000f86:	fba0 8902 	umull	r8, r9, r0, r2
 8000f8a:	454f      	cmp	r7, r9
 8000f8c:	46c6      	mov	lr, r8
 8000f8e:	4649      	mov	r1, r9
 8000f90:	d31a      	bcc.n	8000fc8 <__udivmoddi4+0x294>
 8000f92:	d017      	beq.n	8000fc4 <__udivmoddi4+0x290>
 8000f94:	b15d      	cbz	r5, 8000fae <__udivmoddi4+0x27a>
 8000f96:	ebb3 020e 	subs.w	r2, r3, lr
 8000f9a:	eb67 0701 	sbc.w	r7, r7, r1
 8000f9e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000fa2:	40f2      	lsrs	r2, r6
 8000fa4:	ea4c 0202 	orr.w	r2, ip, r2
 8000fa8:	40f7      	lsrs	r7, r6
 8000faa:	e9c5 2700 	strd	r2, r7, [r5]
 8000fae:	2600      	movs	r6, #0
 8000fb0:	4631      	mov	r1, r6
 8000fb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fb6:	462e      	mov	r6, r5
 8000fb8:	4628      	mov	r0, r5
 8000fba:	e70b      	b.n	8000dd4 <__udivmoddi4+0xa0>
 8000fbc:	4606      	mov	r6, r0
 8000fbe:	e6e9      	b.n	8000d94 <__udivmoddi4+0x60>
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	e6fd      	b.n	8000dc0 <__udivmoddi4+0x8c>
 8000fc4:	4543      	cmp	r3, r8
 8000fc6:	d2e5      	bcs.n	8000f94 <__udivmoddi4+0x260>
 8000fc8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fcc:	eb69 0104 	sbc.w	r1, r9, r4
 8000fd0:	3801      	subs	r0, #1
 8000fd2:	e7df      	b.n	8000f94 <__udivmoddi4+0x260>
 8000fd4:	4608      	mov	r0, r1
 8000fd6:	e7d2      	b.n	8000f7e <__udivmoddi4+0x24a>
 8000fd8:	4660      	mov	r0, ip
 8000fda:	e78d      	b.n	8000ef8 <__udivmoddi4+0x1c4>
 8000fdc:	4681      	mov	r9, r0
 8000fde:	e7b9      	b.n	8000f54 <__udivmoddi4+0x220>
 8000fe0:	4666      	mov	r6, ip
 8000fe2:	e775      	b.n	8000ed0 <__udivmoddi4+0x19c>
 8000fe4:	4630      	mov	r0, r6
 8000fe6:	e74a      	b.n	8000e7e <__udivmoddi4+0x14a>
 8000fe8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fec:	4439      	add	r1, r7
 8000fee:	e713      	b.n	8000e18 <__udivmoddi4+0xe4>
 8000ff0:	3802      	subs	r0, #2
 8000ff2:	443c      	add	r4, r7
 8000ff4:	e724      	b.n	8000e40 <__udivmoddi4+0x10c>
 8000ff6:	bf00      	nop

08000ff8 <__aeabi_idiv0>:
 8000ff8:	4770      	bx	lr
 8000ffa:	bf00      	nop

08000ffc <AHT20_Read>:
#include "AHT20.h"


/* Read AHT20 Sensor */

HAL_StatusTypeDef AHT20_Read( AHT20 *dev, uint8_t *data, uint8_t length ) {
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b086      	sub	sp, #24
 8001000:	af02      	add	r7, sp, #8
 8001002:	60f8      	str	r0, [r7, #12]
 8001004:	60b9      	str	r1, [r7, #8]
 8001006:	4613      	mov	r3, r2
 8001008:	71fb      	strb	r3, [r7, #7]

	return HAL_I2C_Master_Receive(dev->i2cHandle, AHT20_I2C_ADD, data, length, HAL_MAX_DELAY );
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	6818      	ldr	r0, [r3, #0]
 800100e:	79fb      	ldrb	r3, [r7, #7]
 8001010:	b29b      	uxth	r3, r3
 8001012:	f04f 32ff 	mov.w	r2, #4294967295
 8001016:	9200      	str	r2, [sp, #0]
 8001018:	68ba      	ldr	r2, [r7, #8]
 800101a:	2170      	movs	r1, #112	; 0x70
 800101c:	f001 f9d6 	bl	80023cc <HAL_I2C_Master_Receive>
 8001020:	4603      	mov	r3, r0

}
 8001022:	4618      	mov	r0, r3
 8001024:	3710      	adds	r7, #16
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}

0800102a <AHT20_Write>:

/* Write to AHT20 Sensor */

HAL_StatusTypeDef AHT20_Write( AHT20 *dev, uint8_t *data, uint8_t length ) {
 800102a:	b580      	push	{r7, lr}
 800102c:	b086      	sub	sp, #24
 800102e:	af02      	add	r7, sp, #8
 8001030:	60f8      	str	r0, [r7, #12]
 8001032:	60b9      	str	r1, [r7, #8]
 8001034:	4613      	mov	r3, r2
 8001036:	71fb      	strb	r3, [r7, #7]

	return HAL_I2C_Master_Transmit(dev->i2cHandle, AHT20_I2C_ADD, data, length, HAL_MAX_DELAY );
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	6818      	ldr	r0, [r3, #0]
 800103c:	79fb      	ldrb	r3, [r7, #7]
 800103e:	b29b      	uxth	r3, r3
 8001040:	f04f 32ff 	mov.w	r2, #4294967295
 8001044:	9200      	str	r2, [sp, #0]
 8001046:	68ba      	ldr	r2, [r7, #8]
 8001048:	2170      	movs	r1, #112	; 0x70
 800104a:	f001 f8c1 	bl	80021d0 <HAL_I2C_Master_Transmit>
 800104e:	4603      	mov	r3, r0

}
 8001050:	4618      	mov	r0, r3
 8001052:	3710      	adds	r7, #16
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}

08001058 <AHT20_GetState>:

/* Get State Data Byte of AHT20 Sensor */

uint8_t AHT20_GetState( AHT20 *dev, uint8_t *data) {
 8001058:	b580      	push	{r7, lr}
 800105a:	b084      	sub	sp, #16
 800105c:	af02      	add	r7, sp, #8
 800105e:	6078      	str	r0, [r7, #4]
 8001060:	6039      	str	r1, [r7, #0]

	if ( HAL_I2C_Master_Receive( dev->i2cHandle, AHT20_I2C_ADD, data, 1, HAL_MAX_DELAY ) == HAL_OK ) {
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	6818      	ldr	r0, [r3, #0]
 8001066:	f04f 33ff 	mov.w	r3, #4294967295
 800106a:	9300      	str	r3, [sp, #0]
 800106c:	2301      	movs	r3, #1
 800106e:	683a      	ldr	r2, [r7, #0]
 8001070:	2170      	movs	r1, #112	; 0x70
 8001072:	f001 f9ab 	bl	80023cc <HAL_I2C_Master_Receive>
 8001076:	4603      	mov	r3, r0
 8001078:	2b00      	cmp	r3, #0
 800107a:	d102      	bne.n	8001082 <AHT20_GetState+0x2a>

		return *data;
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	781b      	ldrb	r3, [r3, #0]
 8001080:	e000      	b.n	8001084 <AHT20_GetState+0x2c>

	} else {

		return 0;
 8001082:	2300      	movs	r3, #0
	}
}
 8001084:	4618      	mov	r0, r3
 8001086:	3708      	adds	r7, #8
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}

0800108c <AHT20_Init>:

/* Initialize AHT20 Sensor */

uint8_t AHT20_Init( AHT20 *dev, I2C_HandleTypeDef *i2cHandle ) {
 800108c:	b580      	push	{r7, lr}
 800108e:	b084      	sub	sp, #16
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
 8001094:	6039      	str	r1, [r7, #0]

	dev->i2cHandle		= i2cHandle;
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	683a      	ldr	r2, [r7, #0]
 800109a:	601a      	str	r2, [r3, #0]

	dev->humPercent		= 0.0f;
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	f04f 0200 	mov.w	r2, #0
 80010a2:	605a      	str	r2, [r3, #4]
	dev->tempC			= 0.0f;
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	f04f 0200 	mov.w	r2, #0
 80010aa:	609a      	str	r2, [r3, #8]

	uint8_t errNum = 0;
 80010ac:	2300      	movs	r3, #0
 80010ae:	73fb      	strb	r3, [r7, #15]
	HAL_StatusTypeDef status;

	/* Check if Device is ready to communicate (no Part ID) */
	status = HAL_I2C_IsDeviceReady( i2cHandle, AHT20_I2C_ADD, 1, HAL_MAX_DELAY );
 80010b0:	f04f 33ff 	mov.w	r3, #4294967295
 80010b4:	2201      	movs	r2, #1
 80010b6:	2170      	movs	r1, #112	; 0x70
 80010b8:	6838      	ldr	r0, [r7, #0]
 80010ba:	f001 fbad 	bl	8002818 <HAL_I2C_IsDeviceReady>
 80010be:	4603      	mov	r3, r0
 80010c0:	73bb      	strb	r3, [r7, #14]

	/* Add errors to return */
	errNum += ( status != HAL_OK );
 80010c2:	7bbb      	ldrb	r3, [r7, #14]
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	bf14      	ite	ne
 80010c8:	2301      	movne	r3, #1
 80010ca:	2300      	moveq	r3, #0
 80010cc:	b2db      	uxtb	r3, r3
 80010ce:	461a      	mov	r2, r3
 80010d0:	7bfb      	ldrb	r3, [r7, #15]
 80010d2:	4413      	add	r3, r2
 80010d4:	73fb      	strb	r3, [r7, #15]

	/* Initialize the sensor */
	uint8_t cmd[3];
	cmd[0] = 0xBE; // Initialization Command
 80010d6:	23be      	movs	r3, #190	; 0xbe
 80010d8:	723b      	strb	r3, [r7, #8]
	cmd[1] = 0x08;
 80010da:	2308      	movs	r3, #8
 80010dc:	727b      	strb	r3, [r7, #9]
	cmd[2] = 0x00;
 80010de:	2300      	movs	r3, #0
 80010e0:	72bb      	strb	r3, [r7, #10]
	status = AHT20_Write( dev, cmd, 3 );
 80010e2:	f107 0308 	add.w	r3, r7, #8
 80010e6:	2203      	movs	r2, #3
 80010e8:	4619      	mov	r1, r3
 80010ea:	6878      	ldr	r0, [r7, #4]
 80010ec:	f7ff ff9d 	bl	800102a <AHT20_Write>
 80010f0:	4603      	mov	r3, r0
 80010f2:	73bb      	strb	r3, [r7, #14]

	/* Add errors to return */
	errNum += ( status != HAL_OK );
 80010f4:	7bbb      	ldrb	r3, [r7, #14]
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	bf14      	ite	ne
 80010fa:	2301      	movne	r3, #1
 80010fc:	2300      	moveq	r3, #0
 80010fe:	b2db      	uxtb	r3, r3
 8001100:	461a      	mov	r2, r3
 8001102:	7bfb      	ldrb	r3, [r7, #15]
 8001104:	4413      	add	r3, r2
 8001106:	73fb      	strb	r3, [r7, #15]

	/* Return error number, 0 if successful */
	return errNum;
 8001108:	7bfb      	ldrb	r3, [r7, #15]

}
 800110a:	4618      	mov	r0, r3
 800110c:	3710      	adds	r7, #16
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
	...

08001114 <AHT20_ReadTempHum_Data>:

/* Read & Transform Temperature and Humidity Data from AHT20 Sensor */

HAL_StatusTypeDef AHT20_ReadTempHum_Data( AHT20 *dev ) {
 8001114:	b580      	push	{r7, lr}
 8001116:	b088      	sub	sp, #32
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
	uint32_t humData;
	uint32_t tempData;
	uint8_t state;

	/* Get Current State of Sensor (if initialized correctly) */
	AHT20_GetState( dev, state );
 800111c:	7ffb      	ldrb	r3, [r7, #31]
 800111e:	4619      	mov	r1, r3
 8001120:	6878      	ldr	r0, [r7, #4]
 8001122:	f7ff ff99 	bl	8001058 <AHT20_GetState>

	}

	/* Send Trigger Measurement Command */
	uint8_t cmd[3];
	cmd[0] = AHT20_TRIG_MEASURE;
 8001126:	23ac      	movs	r3, #172	; 0xac
 8001128:	723b      	strb	r3, [r7, #8]
	cmd[1] = 0x33;
 800112a:	2333      	movs	r3, #51	; 0x33
 800112c:	727b      	strb	r3, [r7, #9]
	cmd[2] = 0x00;
 800112e:	2300      	movs	r3, #0
 8001130:	72bb      	strb	r3, [r7, #10]
	AHT20_Write( dev, cmd, 3 );
 8001132:	f107 0308 	add.w	r3, r7, #8
 8001136:	2203      	movs	r2, #3
 8001138:	4619      	mov	r1, r3
 800113a:	6878      	ldr	r0, [r7, #4]
 800113c:	f7ff ff75 	bl	800102a <AHT20_Write>

	/* Wait */
	HAL_Delay(50);
 8001140:	2032      	movs	r0, #50	; 0x32
 8001142:	f000 fbfb 	bl	800193c <HAL_Delay>

	/* Read Sensor Data */
	AHT20_Read( dev, devData, 6 );
 8001146:	f107 030c 	add.w	r3, r7, #12
 800114a:	2206      	movs	r2, #6
 800114c:	4619      	mov	r1, r3
 800114e:	6878      	ldr	r0, [r7, #4]
 8001150:	f7ff ff54 	bl	8000ffc <AHT20_Read>

	/* devData = [State, Hum1, Hum2, Hum3/Temp1, Temp2, CRC]
	 * Hum3 and Temp1 split byte 3 of device data */

	/* Humidity Calculations */
	humData = devData[1];
 8001154:	7b7b      	ldrb	r3, [r7, #13]
 8001156:	61bb      	str	r3, [r7, #24]
	humData = humData << 8;
 8001158:	69bb      	ldr	r3, [r7, #24]
 800115a:	021b      	lsls	r3, r3, #8
 800115c:	61bb      	str	r3, [r7, #24]
	humData |= devData[2];
 800115e:	7bbb      	ldrb	r3, [r7, #14]
 8001160:	461a      	mov	r2, r3
 8001162:	69bb      	ldr	r3, [r7, #24]
 8001164:	4313      	orrs	r3, r2
 8001166:	61bb      	str	r3, [r7, #24]
	humData = humData << 4;
 8001168:	69bb      	ldr	r3, [r7, #24]
 800116a:	011b      	lsls	r3, r3, #4
 800116c:	61bb      	str	r3, [r7, #24]
	humData |= ( devData[3] >> 4 );
 800116e:	7bfb      	ldrb	r3, [r7, #15]
 8001170:	091b      	lsrs	r3, r3, #4
 8001172:	b2db      	uxtb	r3, r3
 8001174:	461a      	mov	r2, r3
 8001176:	69bb      	ldr	r3, [r7, #24]
 8001178:	4313      	orrs	r3, r2
 800117a:	61bb      	str	r3, [r7, #24]
	dev->humPercent = ( (float) humData * 100 ) / 0x100000;
 800117c:	69bb      	ldr	r3, [r7, #24]
 800117e:	ee07 3a90 	vmov	s15, r3
 8001182:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001186:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 80011f8 <AHT20_ReadTempHum_Data+0xe4>
 800118a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800118e:	eddf 6a1b 	vldr	s13, [pc, #108]	; 80011fc <AHT20_ReadTempHum_Data+0xe8>
 8001192:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	edc3 7a01 	vstr	s15, [r3, #4]

	/* Temperature Calculations */
	tempData = devData[3] & 0x0F;
 800119c:	7bfb      	ldrb	r3, [r7, #15]
 800119e:	f003 030f 	and.w	r3, r3, #15
 80011a2:	617b      	str	r3, [r7, #20]
	tempData = tempData << 8;
 80011a4:	697b      	ldr	r3, [r7, #20]
 80011a6:	021b      	lsls	r3, r3, #8
 80011a8:	617b      	str	r3, [r7, #20]
	tempData |= devData[4];
 80011aa:	7c3b      	ldrb	r3, [r7, #16]
 80011ac:	461a      	mov	r2, r3
 80011ae:	697b      	ldr	r3, [r7, #20]
 80011b0:	4313      	orrs	r3, r2
 80011b2:	617b      	str	r3, [r7, #20]
	tempData = tempData << 8;
 80011b4:	697b      	ldr	r3, [r7, #20]
 80011b6:	021b      	lsls	r3, r3, #8
 80011b8:	617b      	str	r3, [r7, #20]
	tempData |= devData[5];
 80011ba:	7c7b      	ldrb	r3, [r7, #17]
 80011bc:	461a      	mov	r2, r3
 80011be:	697b      	ldr	r3, [r7, #20]
 80011c0:	4313      	orrs	r3, r2
 80011c2:	617b      	str	r3, [r7, #20]
	dev->tempC = ( ( (float) tempData / 0x100000 ) * 200 ) - 50;
 80011c4:	697b      	ldr	r3, [r7, #20]
 80011c6:	ee07 3a90 	vmov	s15, r3
 80011ca:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80011ce:	eddf 6a0b 	vldr	s13, [pc, #44]	; 80011fc <AHT20_ReadTempHum_Data+0xe8>
 80011d2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80011d6:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8001200 <AHT20_ReadTempHum_Data+0xec>
 80011da:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011de:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8001204 <AHT20_ReadTempHum_Data+0xf0>
 80011e2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	edc3 7a02 	vstr	s15, [r3, #8]

	return HAL_OK;
 80011ec:	2300      	movs	r3, #0
}
 80011ee:	4618      	mov	r0, r3
 80011f0:	3720      	adds	r7, #32
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	42c80000 	.word	0x42c80000
 80011fc:	49800000 	.word	0x49800000
 8001200:	43480000 	.word	0x43480000
 8001204:	42480000 	.word	0x42480000

08001208 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001208:	b5b0      	push	{r4, r5, r7, lr}
 800120a:	b08a      	sub	sp, #40	; 0x28
 800120c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800120e:	f000 fb23 	bl	8001858 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001212:	f000 f839 	bl	8001288 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001216:	f000 f8cd 	bl	80013b4 <MX_GPIO_Init>
  MX_I2C1_Init();
 800121a:	f000 f89d 	bl	8001358 <MX_I2C1_Init>
  MX_USB_DEVICE_Init();
 800121e:	f006 fd17 	bl	8007c50 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  /* Initialize the AHT20 Sensor */
  AHT20_Init( &thSensor, &hi2c1 );
 8001222:	4916      	ldr	r1, [pc, #88]	; (800127c <main+0x74>)
 8001224:	4816      	ldr	r0, [pc, #88]	; (8001280 <main+0x78>)
 8001226:	f7ff ff31 	bl	800108c <AHT20_Init>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  /* Read & Calculate Sensor Values */
	  AHT20_ReadTempHum_Data( &thSensor );
 800122a:	4815      	ldr	r0, [pc, #84]	; (8001280 <main+0x78>)
 800122c:	f7ff ff72 	bl	8001114 <AHT20_ReadTempHum_Data>

	  sprintf(logBuf, "%.2f degC\t %.2f %\r\n", thSensor.tempC, thSensor.humPercent);
 8001230:	4b13      	ldr	r3, [pc, #76]	; (8001280 <main+0x78>)
 8001232:	689b      	ldr	r3, [r3, #8]
 8001234:	4618      	mov	r0, r3
 8001236:	f7ff f98f 	bl	8000558 <__aeabi_f2d>
 800123a:	4604      	mov	r4, r0
 800123c:	460d      	mov	r5, r1
 800123e:	4b10      	ldr	r3, [pc, #64]	; (8001280 <main+0x78>)
 8001240:	685b      	ldr	r3, [r3, #4]
 8001242:	4618      	mov	r0, r3
 8001244:	f7ff f988 	bl	8000558 <__aeabi_f2d>
 8001248:	4602      	mov	r2, r0
 800124a:	460b      	mov	r3, r1
 800124c:	4638      	mov	r0, r7
 800124e:	e9cd 2300 	strd	r2, r3, [sp]
 8001252:	4622      	mov	r2, r4
 8001254:	462b      	mov	r3, r5
 8001256:	490b      	ldr	r1, [pc, #44]	; (8001284 <main+0x7c>)
 8001258:	f008 f8bc 	bl	80093d4 <siprintf>

	  CDC_Transmit_FS((uint8_t *) logBuf, strlen(logBuf));
 800125c:	463b      	mov	r3, r7
 800125e:	4618      	mov	r0, r3
 8001260:	f7fe ffbe 	bl	80001e0 <strlen>
 8001264:	4603      	mov	r3, r0
 8001266:	b29a      	uxth	r2, r3
 8001268:	463b      	mov	r3, r7
 800126a:	4611      	mov	r1, r2
 800126c:	4618      	mov	r0, r3
 800126e:	f006 fdad 	bl	8007dcc <CDC_Transmit_FS>

	  HAL_Delay(1000);
 8001272:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001276:	f000 fb61 	bl	800193c <HAL_Delay>
	  AHT20_ReadTempHum_Data( &thSensor );
 800127a:	e7d6      	b.n	800122a <main+0x22>
 800127c:	200005a0 	.word	0x200005a0
 8001280:	200005f4 	.word	0x200005f4
 8001284:	0800cf38 	.word	0x0800cf38

08001288 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b094      	sub	sp, #80	; 0x50
 800128c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800128e:	f107 0320 	add.w	r3, r7, #32
 8001292:	2230      	movs	r2, #48	; 0x30
 8001294:	2100      	movs	r1, #0
 8001296:	4618      	mov	r0, r3
 8001298:	f007 fa14 	bl	80086c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800129c:	f107 030c 	add.w	r3, r7, #12
 80012a0:	2200      	movs	r2, #0
 80012a2:	601a      	str	r2, [r3, #0]
 80012a4:	605a      	str	r2, [r3, #4]
 80012a6:	609a      	str	r2, [r3, #8]
 80012a8:	60da      	str	r2, [r3, #12]
 80012aa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80012ac:	2300      	movs	r3, #0
 80012ae:	60bb      	str	r3, [r7, #8]
 80012b0:	4b27      	ldr	r3, [pc, #156]	; (8001350 <SystemClock_Config+0xc8>)
 80012b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b4:	4a26      	ldr	r2, [pc, #152]	; (8001350 <SystemClock_Config+0xc8>)
 80012b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012ba:	6413      	str	r3, [r2, #64]	; 0x40
 80012bc:	4b24      	ldr	r3, [pc, #144]	; (8001350 <SystemClock_Config+0xc8>)
 80012be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012c4:	60bb      	str	r3, [r7, #8]
 80012c6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80012c8:	2300      	movs	r3, #0
 80012ca:	607b      	str	r3, [r7, #4]
 80012cc:	4b21      	ldr	r3, [pc, #132]	; (8001354 <SystemClock_Config+0xcc>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	4a20      	ldr	r2, [pc, #128]	; (8001354 <SystemClock_Config+0xcc>)
 80012d2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80012d6:	6013      	str	r3, [r2, #0]
 80012d8:	4b1e      	ldr	r3, [pc, #120]	; (8001354 <SystemClock_Config+0xcc>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80012e0:	607b      	str	r3, [r7, #4]
 80012e2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80012e4:	2301      	movs	r3, #1
 80012e6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80012e8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80012ec:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012ee:	2302      	movs	r3, #2
 80012f0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80012f2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80012f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 15;
 80012f8:	230f      	movs	r3, #15
 80012fa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 80012fc:	2390      	movs	r3, #144	; 0x90
 80012fe:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001300:	2302      	movs	r3, #2
 8001302:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8001304:	2305      	movs	r3, #5
 8001306:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001308:	f107 0320 	add.w	r3, r7, #32
 800130c:	4618      	mov	r0, r3
 800130e:	f003 f861 	bl	80043d4 <HAL_RCC_OscConfig>
 8001312:	4603      	mov	r3, r0
 8001314:	2b00      	cmp	r3, #0
 8001316:	d001      	beq.n	800131c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001318:	f000 f8ea 	bl	80014f0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800131c:	230f      	movs	r3, #15
 800131e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8001320:	2301      	movs	r3, #1
 8001322:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001324:	2300      	movs	r3, #0
 8001326:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001328:	2300      	movs	r3, #0
 800132a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800132c:	2300      	movs	r3, #0
 800132e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001330:	f107 030c 	add.w	r3, r7, #12
 8001334:	2100      	movs	r1, #0
 8001336:	4618      	mov	r0, r3
 8001338:	f003 fac4 	bl	80048c4 <HAL_RCC_ClockConfig>
 800133c:	4603      	mov	r3, r0
 800133e:	2b00      	cmp	r3, #0
 8001340:	d001      	beq.n	8001346 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8001342:	f000 f8d5 	bl	80014f0 <Error_Handler>
  }
}
 8001346:	bf00      	nop
 8001348:	3750      	adds	r7, #80	; 0x50
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	40023800 	.word	0x40023800
 8001354:	40007000 	.word	0x40007000

08001358 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800135c:	4b12      	ldr	r3, [pc, #72]	; (80013a8 <MX_I2C1_Init+0x50>)
 800135e:	4a13      	ldr	r2, [pc, #76]	; (80013ac <MX_I2C1_Init+0x54>)
 8001360:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001362:	4b11      	ldr	r3, [pc, #68]	; (80013a8 <MX_I2C1_Init+0x50>)
 8001364:	4a12      	ldr	r2, [pc, #72]	; (80013b0 <MX_I2C1_Init+0x58>)
 8001366:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001368:	4b0f      	ldr	r3, [pc, #60]	; (80013a8 <MX_I2C1_Init+0x50>)
 800136a:	2200      	movs	r2, #0
 800136c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800136e:	4b0e      	ldr	r3, [pc, #56]	; (80013a8 <MX_I2C1_Init+0x50>)
 8001370:	2200      	movs	r2, #0
 8001372:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001374:	4b0c      	ldr	r3, [pc, #48]	; (80013a8 <MX_I2C1_Init+0x50>)
 8001376:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800137a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800137c:	4b0a      	ldr	r3, [pc, #40]	; (80013a8 <MX_I2C1_Init+0x50>)
 800137e:	2200      	movs	r2, #0
 8001380:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001382:	4b09      	ldr	r3, [pc, #36]	; (80013a8 <MX_I2C1_Init+0x50>)
 8001384:	2200      	movs	r2, #0
 8001386:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001388:	4b07      	ldr	r3, [pc, #28]	; (80013a8 <MX_I2C1_Init+0x50>)
 800138a:	2200      	movs	r2, #0
 800138c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800138e:	4b06      	ldr	r3, [pc, #24]	; (80013a8 <MX_I2C1_Init+0x50>)
 8001390:	2200      	movs	r2, #0
 8001392:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001394:	4804      	ldr	r0, [pc, #16]	; (80013a8 <MX_I2C1_Init+0x50>)
 8001396:	f000 fdd7 	bl	8001f48 <HAL_I2C_Init>
 800139a:	4603      	mov	r3, r0
 800139c:	2b00      	cmp	r3, #0
 800139e:	d001      	beq.n	80013a4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80013a0:	f000 f8a6 	bl	80014f0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80013a4:	bf00      	nop
 80013a6:	bd80      	pop	{r7, pc}
 80013a8:	200005a0 	.word	0x200005a0
 80013ac:	40005400 	.word	0x40005400
 80013b0:	000186a0 	.word	0x000186a0

080013b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b08a      	sub	sp, #40	; 0x28
 80013b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013ba:	f107 0314 	add.w	r3, r7, #20
 80013be:	2200      	movs	r2, #0
 80013c0:	601a      	str	r2, [r3, #0]
 80013c2:	605a      	str	r2, [r3, #4]
 80013c4:	609a      	str	r2, [r3, #8]
 80013c6:	60da      	str	r2, [r3, #12]
 80013c8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013ca:	2300      	movs	r3, #0
 80013cc:	613b      	str	r3, [r7, #16]
 80013ce:	4b3c      	ldr	r3, [pc, #240]	; (80014c0 <MX_GPIO_Init+0x10c>)
 80013d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d2:	4a3b      	ldr	r2, [pc, #236]	; (80014c0 <MX_GPIO_Init+0x10c>)
 80013d4:	f043 0304 	orr.w	r3, r3, #4
 80013d8:	6313      	str	r3, [r2, #48]	; 0x30
 80013da:	4b39      	ldr	r3, [pc, #228]	; (80014c0 <MX_GPIO_Init+0x10c>)
 80013dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013de:	f003 0304 	and.w	r3, r3, #4
 80013e2:	613b      	str	r3, [r7, #16]
 80013e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80013e6:	2300      	movs	r3, #0
 80013e8:	60fb      	str	r3, [r7, #12]
 80013ea:	4b35      	ldr	r3, [pc, #212]	; (80014c0 <MX_GPIO_Init+0x10c>)
 80013ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ee:	4a34      	ldr	r2, [pc, #208]	; (80014c0 <MX_GPIO_Init+0x10c>)
 80013f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013f4:	6313      	str	r3, [r2, #48]	; 0x30
 80013f6:	4b32      	ldr	r3, [pc, #200]	; (80014c0 <MX_GPIO_Init+0x10c>)
 80013f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013fe:	60fb      	str	r3, [r7, #12]
 8001400:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001402:	2300      	movs	r3, #0
 8001404:	60bb      	str	r3, [r7, #8]
 8001406:	4b2e      	ldr	r3, [pc, #184]	; (80014c0 <MX_GPIO_Init+0x10c>)
 8001408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800140a:	4a2d      	ldr	r2, [pc, #180]	; (80014c0 <MX_GPIO_Init+0x10c>)
 800140c:	f043 0301 	orr.w	r3, r3, #1
 8001410:	6313      	str	r3, [r2, #48]	; 0x30
 8001412:	4b2b      	ldr	r3, [pc, #172]	; (80014c0 <MX_GPIO_Init+0x10c>)
 8001414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001416:	f003 0301 	and.w	r3, r3, #1
 800141a:	60bb      	str	r3, [r7, #8]
 800141c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800141e:	2300      	movs	r3, #0
 8001420:	607b      	str	r3, [r7, #4]
 8001422:	4b27      	ldr	r3, [pc, #156]	; (80014c0 <MX_GPIO_Init+0x10c>)
 8001424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001426:	4a26      	ldr	r2, [pc, #152]	; (80014c0 <MX_GPIO_Init+0x10c>)
 8001428:	f043 0302 	orr.w	r3, r3, #2
 800142c:	6313      	str	r3, [r2, #48]	; 0x30
 800142e:	4b24      	ldr	r3, [pc, #144]	; (80014c0 <MX_GPIO_Init+0x10c>)
 8001430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001432:	f003 0302 	and.w	r3, r3, #2
 8001436:	607b      	str	r3, [r7, #4]
 8001438:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_C13_GPIO_Port, LED_C13_Pin, GPIO_PIN_RESET);
 800143a:	2200      	movs	r2, #0
 800143c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001440:	4820      	ldr	r0, [pc, #128]	; (80014c4 <MX_GPIO_Init+0x110>)
 8001442:	f000 fd35 	bl	8001eb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 8001446:	2200      	movs	r2, #0
 8001448:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800144c:	481e      	ldr	r0, [pc, #120]	; (80014c8 <MX_GPIO_Init+0x114>)
 800144e:	f000 fd2f 	bl	8001eb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_C13_Pin */
  GPIO_InitStruct.Pin = LED_C13_Pin;
 8001452:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001456:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001458:	2301      	movs	r3, #1
 800145a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800145c:	2300      	movs	r3, #0
 800145e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001460:	2300      	movs	r3, #0
 8001462:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_C13_GPIO_Port, &GPIO_InitStruct);
 8001464:	f107 0314 	add.w	r3, r7, #20
 8001468:	4619      	mov	r1, r3
 800146a:	4816      	ldr	r0, [pc, #88]	; (80014c4 <MX_GPIO_Init+0x110>)
 800146c:	f000 fb9c 	bl	8001ba8 <HAL_GPIO_Init>

  /*Configure GPIO pin : KEY_BTN_Pin */
  GPIO_InitStruct.Pin = KEY_BTN_Pin;
 8001470:	2301      	movs	r3, #1
 8001472:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001474:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001478:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800147a:	2301      	movs	r3, #1
 800147c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(KEY_BTN_GPIO_Port, &GPIO_InitStruct);
 800147e:	f107 0314 	add.w	r3, r7, #20
 8001482:	4619      	mov	r1, r3
 8001484:	4811      	ldr	r0, [pc, #68]	; (80014cc <MX_GPIO_Init+0x118>)
 8001486:	f000 fb8f 	bl	8001ba8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 800148a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800148e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001490:	2301      	movs	r3, #1
 8001492:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001494:	2300      	movs	r3, #0
 8001496:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001498:	2300      	movs	r3, #0
 800149a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800149c:	f107 0314 	add.w	r3, r7, #20
 80014a0:	4619      	mov	r1, r3
 80014a2:	4809      	ldr	r0, [pc, #36]	; (80014c8 <MX_GPIO_Init+0x114>)
 80014a4:	f000 fb80 	bl	8001ba8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80014a8:	2200      	movs	r2, #0
 80014aa:	2100      	movs	r1, #0
 80014ac:	2006      	movs	r0, #6
 80014ae:	f000 fb44 	bl	8001b3a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80014b2:	2006      	movs	r0, #6
 80014b4:	f000 fb5d 	bl	8001b72 <HAL_NVIC_EnableIRQ>

}
 80014b8:	bf00      	nop
 80014ba:	3728      	adds	r7, #40	; 0x28
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}
 80014c0:	40023800 	.word	0x40023800
 80014c4:	40020800 	.word	0x40020800
 80014c8:	40020400 	.word	0x40020400
 80014cc:	40020000 	.word	0x40020000

080014d0 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b082      	sub	sp, #8
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	4603      	mov	r3, r0
 80014d8:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_TogglePin(LED_C13_GPIO_Port, LED_C13_Pin);
 80014da:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80014de:	4803      	ldr	r0, [pc, #12]	; (80014ec <HAL_GPIO_EXTI_Callback+0x1c>)
 80014e0:	f000 fcff 	bl	8001ee2 <HAL_GPIO_TogglePin>
}
 80014e4:	bf00      	nop
 80014e6:	3708      	adds	r7, #8
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bd80      	pop	{r7, pc}
 80014ec:	40020800 	.word	0x40020800

080014f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014f0:	b480      	push	{r7}
 80014f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014f4:	b672      	cpsid	i
}
 80014f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014f8:	e7fe      	b.n	80014f8 <Error_Handler+0x8>
	...

080014fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014fc:	b480      	push	{r7}
 80014fe:	b083      	sub	sp, #12
 8001500:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001502:	2300      	movs	r3, #0
 8001504:	607b      	str	r3, [r7, #4]
 8001506:	4b10      	ldr	r3, [pc, #64]	; (8001548 <HAL_MspInit+0x4c>)
 8001508:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800150a:	4a0f      	ldr	r2, [pc, #60]	; (8001548 <HAL_MspInit+0x4c>)
 800150c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001510:	6453      	str	r3, [r2, #68]	; 0x44
 8001512:	4b0d      	ldr	r3, [pc, #52]	; (8001548 <HAL_MspInit+0x4c>)
 8001514:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001516:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800151a:	607b      	str	r3, [r7, #4]
 800151c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800151e:	2300      	movs	r3, #0
 8001520:	603b      	str	r3, [r7, #0]
 8001522:	4b09      	ldr	r3, [pc, #36]	; (8001548 <HAL_MspInit+0x4c>)
 8001524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001526:	4a08      	ldr	r2, [pc, #32]	; (8001548 <HAL_MspInit+0x4c>)
 8001528:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800152c:	6413      	str	r3, [r2, #64]	; 0x40
 800152e:	4b06      	ldr	r3, [pc, #24]	; (8001548 <HAL_MspInit+0x4c>)
 8001530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001532:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001536:	603b      	str	r3, [r7, #0]
 8001538:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800153a:	bf00      	nop
 800153c:	370c      	adds	r7, #12
 800153e:	46bd      	mov	sp, r7
 8001540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001544:	4770      	bx	lr
 8001546:	bf00      	nop
 8001548:	40023800 	.word	0x40023800

0800154c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b08a      	sub	sp, #40	; 0x28
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001554:	f107 0314 	add.w	r3, r7, #20
 8001558:	2200      	movs	r2, #0
 800155a:	601a      	str	r2, [r3, #0]
 800155c:	605a      	str	r2, [r3, #4]
 800155e:	609a      	str	r2, [r3, #8]
 8001560:	60da      	str	r2, [r3, #12]
 8001562:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4a19      	ldr	r2, [pc, #100]	; (80015d0 <HAL_I2C_MspInit+0x84>)
 800156a:	4293      	cmp	r3, r2
 800156c:	d12b      	bne.n	80015c6 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800156e:	2300      	movs	r3, #0
 8001570:	613b      	str	r3, [r7, #16]
 8001572:	4b18      	ldr	r3, [pc, #96]	; (80015d4 <HAL_I2C_MspInit+0x88>)
 8001574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001576:	4a17      	ldr	r2, [pc, #92]	; (80015d4 <HAL_I2C_MspInit+0x88>)
 8001578:	f043 0302 	orr.w	r3, r3, #2
 800157c:	6313      	str	r3, [r2, #48]	; 0x30
 800157e:	4b15      	ldr	r3, [pc, #84]	; (80015d4 <HAL_I2C_MspInit+0x88>)
 8001580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001582:	f003 0302 	and.w	r3, r3, #2
 8001586:	613b      	str	r3, [r7, #16]
 8001588:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800158a:	23c0      	movs	r3, #192	; 0xc0
 800158c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800158e:	2312      	movs	r3, #18
 8001590:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001592:	2300      	movs	r3, #0
 8001594:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001596:	2303      	movs	r3, #3
 8001598:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800159a:	2304      	movs	r3, #4
 800159c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800159e:	f107 0314 	add.w	r3, r7, #20
 80015a2:	4619      	mov	r1, r3
 80015a4:	480c      	ldr	r0, [pc, #48]	; (80015d8 <HAL_I2C_MspInit+0x8c>)
 80015a6:	f000 faff 	bl	8001ba8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80015aa:	2300      	movs	r3, #0
 80015ac:	60fb      	str	r3, [r7, #12]
 80015ae:	4b09      	ldr	r3, [pc, #36]	; (80015d4 <HAL_I2C_MspInit+0x88>)
 80015b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015b2:	4a08      	ldr	r2, [pc, #32]	; (80015d4 <HAL_I2C_MspInit+0x88>)
 80015b4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80015b8:	6413      	str	r3, [r2, #64]	; 0x40
 80015ba:	4b06      	ldr	r3, [pc, #24]	; (80015d4 <HAL_I2C_MspInit+0x88>)
 80015bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015be:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015c2:	60fb      	str	r3, [r7, #12]
 80015c4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80015c6:	bf00      	nop
 80015c8:	3728      	adds	r7, #40	; 0x28
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	40005400 	.word	0x40005400
 80015d4:	40023800 	.word	0x40023800
 80015d8:	40020400 	.word	0x40020400

080015dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015dc:	b480      	push	{r7}
 80015de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015e0:	e7fe      	b.n	80015e0 <NMI_Handler+0x4>

080015e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015e2:	b480      	push	{r7}
 80015e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015e6:	e7fe      	b.n	80015e6 <HardFault_Handler+0x4>

080015e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015e8:	b480      	push	{r7}
 80015ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015ec:	e7fe      	b.n	80015ec <MemManage_Handler+0x4>

080015ee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015ee:	b480      	push	{r7}
 80015f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015f2:	e7fe      	b.n	80015f2 <BusFault_Handler+0x4>

080015f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015f4:	b480      	push	{r7}
 80015f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015f8:	e7fe      	b.n	80015f8 <UsageFault_Handler+0x4>

080015fa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015fa:	b480      	push	{r7}
 80015fc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015fe:	bf00      	nop
 8001600:	46bd      	mov	sp, r7
 8001602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001606:	4770      	bx	lr

08001608 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001608:	b480      	push	{r7}
 800160a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800160c:	bf00      	nop
 800160e:	46bd      	mov	sp, r7
 8001610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001614:	4770      	bx	lr

08001616 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001616:	b480      	push	{r7}
 8001618:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800161a:	bf00      	nop
 800161c:	46bd      	mov	sp, r7
 800161e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001622:	4770      	bx	lr

08001624 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001628:	f000 f968 	bl	80018fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800162c:	bf00      	nop
 800162e:	bd80      	pop	{r7, pc}

08001630 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001634:	2001      	movs	r0, #1
 8001636:	f000 fc6f 	bl	8001f18 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800163a:	bf00      	nop
 800163c:	bd80      	pop	{r7, pc}
	...

08001640 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001644:	4802      	ldr	r0, [pc, #8]	; (8001650 <OTG_FS_IRQHandler+0x10>)
 8001646:	f001 fe92 	bl	800336e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800164a:	bf00      	nop
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	20001ad4 	.word	0x20001ad4

08001654 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001654:	b480      	push	{r7}
 8001656:	af00      	add	r7, sp, #0
	return 1;
 8001658:	2301      	movs	r3, #1
}
 800165a:	4618      	mov	r0, r3
 800165c:	46bd      	mov	sp, r7
 800165e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001662:	4770      	bx	lr

08001664 <_kill>:

int _kill(int pid, int sig)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b082      	sub	sp, #8
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
 800166c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800166e:	f006 ffff 	bl	8008670 <__errno>
 8001672:	4603      	mov	r3, r0
 8001674:	2216      	movs	r2, #22
 8001676:	601a      	str	r2, [r3, #0]
	return -1;
 8001678:	f04f 33ff 	mov.w	r3, #4294967295
}
 800167c:	4618      	mov	r0, r3
 800167e:	3708      	adds	r7, #8
 8001680:	46bd      	mov	sp, r7
 8001682:	bd80      	pop	{r7, pc}

08001684 <_exit>:

void _exit (int status)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b082      	sub	sp, #8
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800168c:	f04f 31ff 	mov.w	r1, #4294967295
 8001690:	6878      	ldr	r0, [r7, #4]
 8001692:	f7ff ffe7 	bl	8001664 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001696:	e7fe      	b.n	8001696 <_exit+0x12>

08001698 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b086      	sub	sp, #24
 800169c:	af00      	add	r7, sp, #0
 800169e:	60f8      	str	r0, [r7, #12]
 80016a0:	60b9      	str	r1, [r7, #8]
 80016a2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016a4:	2300      	movs	r3, #0
 80016a6:	617b      	str	r3, [r7, #20]
 80016a8:	e00a      	b.n	80016c0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80016aa:	f3af 8000 	nop.w
 80016ae:	4601      	mov	r1, r0
 80016b0:	68bb      	ldr	r3, [r7, #8]
 80016b2:	1c5a      	adds	r2, r3, #1
 80016b4:	60ba      	str	r2, [r7, #8]
 80016b6:	b2ca      	uxtb	r2, r1
 80016b8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016ba:	697b      	ldr	r3, [r7, #20]
 80016bc:	3301      	adds	r3, #1
 80016be:	617b      	str	r3, [r7, #20]
 80016c0:	697a      	ldr	r2, [r7, #20]
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	429a      	cmp	r2, r3
 80016c6:	dbf0      	blt.n	80016aa <_read+0x12>
	}

return len;
 80016c8:	687b      	ldr	r3, [r7, #4]
}
 80016ca:	4618      	mov	r0, r3
 80016cc:	3718      	adds	r7, #24
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}

080016d2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80016d2:	b580      	push	{r7, lr}
 80016d4:	b086      	sub	sp, #24
 80016d6:	af00      	add	r7, sp, #0
 80016d8:	60f8      	str	r0, [r7, #12]
 80016da:	60b9      	str	r1, [r7, #8]
 80016dc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016de:	2300      	movs	r3, #0
 80016e0:	617b      	str	r3, [r7, #20]
 80016e2:	e009      	b.n	80016f8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80016e4:	68bb      	ldr	r3, [r7, #8]
 80016e6:	1c5a      	adds	r2, r3, #1
 80016e8:	60ba      	str	r2, [r7, #8]
 80016ea:	781b      	ldrb	r3, [r3, #0]
 80016ec:	4618      	mov	r0, r3
 80016ee:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016f2:	697b      	ldr	r3, [r7, #20]
 80016f4:	3301      	adds	r3, #1
 80016f6:	617b      	str	r3, [r7, #20]
 80016f8:	697a      	ldr	r2, [r7, #20]
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	429a      	cmp	r2, r3
 80016fe:	dbf1      	blt.n	80016e4 <_write+0x12>
	}
	return len;
 8001700:	687b      	ldr	r3, [r7, #4]
}
 8001702:	4618      	mov	r0, r3
 8001704:	3718      	adds	r7, #24
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}

0800170a <_close>:

int _close(int file)
{
 800170a:	b480      	push	{r7}
 800170c:	b083      	sub	sp, #12
 800170e:	af00      	add	r7, sp, #0
 8001710:	6078      	str	r0, [r7, #4]
	return -1;
 8001712:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001716:	4618      	mov	r0, r3
 8001718:	370c      	adds	r7, #12
 800171a:	46bd      	mov	sp, r7
 800171c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001720:	4770      	bx	lr

08001722 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001722:	b480      	push	{r7}
 8001724:	b083      	sub	sp, #12
 8001726:	af00      	add	r7, sp, #0
 8001728:	6078      	str	r0, [r7, #4]
 800172a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001732:	605a      	str	r2, [r3, #4]
	return 0;
 8001734:	2300      	movs	r3, #0
}
 8001736:	4618      	mov	r0, r3
 8001738:	370c      	adds	r7, #12
 800173a:	46bd      	mov	sp, r7
 800173c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001740:	4770      	bx	lr

08001742 <_isatty>:

int _isatty(int file)
{
 8001742:	b480      	push	{r7}
 8001744:	b083      	sub	sp, #12
 8001746:	af00      	add	r7, sp, #0
 8001748:	6078      	str	r0, [r7, #4]
	return 1;
 800174a:	2301      	movs	r3, #1
}
 800174c:	4618      	mov	r0, r3
 800174e:	370c      	adds	r7, #12
 8001750:	46bd      	mov	sp, r7
 8001752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001756:	4770      	bx	lr

08001758 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001758:	b480      	push	{r7}
 800175a:	b085      	sub	sp, #20
 800175c:	af00      	add	r7, sp, #0
 800175e:	60f8      	str	r0, [r7, #12]
 8001760:	60b9      	str	r1, [r7, #8]
 8001762:	607a      	str	r2, [r7, #4]
	return 0;
 8001764:	2300      	movs	r3, #0
}
 8001766:	4618      	mov	r0, r3
 8001768:	3714      	adds	r7, #20
 800176a:	46bd      	mov	sp, r7
 800176c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001770:	4770      	bx	lr
	...

08001774 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b086      	sub	sp, #24
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800177c:	4a14      	ldr	r2, [pc, #80]	; (80017d0 <_sbrk+0x5c>)
 800177e:	4b15      	ldr	r3, [pc, #84]	; (80017d4 <_sbrk+0x60>)
 8001780:	1ad3      	subs	r3, r2, r3
 8001782:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001784:	697b      	ldr	r3, [r7, #20]
 8001786:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001788:	4b13      	ldr	r3, [pc, #76]	; (80017d8 <_sbrk+0x64>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	2b00      	cmp	r3, #0
 800178e:	d102      	bne.n	8001796 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001790:	4b11      	ldr	r3, [pc, #68]	; (80017d8 <_sbrk+0x64>)
 8001792:	4a12      	ldr	r2, [pc, #72]	; (80017dc <_sbrk+0x68>)
 8001794:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001796:	4b10      	ldr	r3, [pc, #64]	; (80017d8 <_sbrk+0x64>)
 8001798:	681a      	ldr	r2, [r3, #0]
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	4413      	add	r3, r2
 800179e:	693a      	ldr	r2, [r7, #16]
 80017a0:	429a      	cmp	r2, r3
 80017a2:	d207      	bcs.n	80017b4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017a4:	f006 ff64 	bl	8008670 <__errno>
 80017a8:	4603      	mov	r3, r0
 80017aa:	220c      	movs	r2, #12
 80017ac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017ae:	f04f 33ff 	mov.w	r3, #4294967295
 80017b2:	e009      	b.n	80017c8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017b4:	4b08      	ldr	r3, [pc, #32]	; (80017d8 <_sbrk+0x64>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017ba:	4b07      	ldr	r3, [pc, #28]	; (80017d8 <_sbrk+0x64>)
 80017bc:	681a      	ldr	r2, [r3, #0]
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	4413      	add	r3, r2
 80017c2:	4a05      	ldr	r2, [pc, #20]	; (80017d8 <_sbrk+0x64>)
 80017c4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017c6:	68fb      	ldr	r3, [r7, #12]
}
 80017c8:	4618      	mov	r0, r3
 80017ca:	3718      	adds	r7, #24
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bd80      	pop	{r7, pc}
 80017d0:	20020000 	.word	0x20020000
 80017d4:	00000400 	.word	0x00000400
 80017d8:	20000370 	.word	0x20000370
 80017dc:	20001ef0 	.word	0x20001ef0

080017e0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80017e0:	b480      	push	{r7}
 80017e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80017e4:	4b06      	ldr	r3, [pc, #24]	; (8001800 <SystemInit+0x20>)
 80017e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017ea:	4a05      	ldr	r2, [pc, #20]	; (8001800 <SystemInit+0x20>)
 80017ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80017f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017f4:	bf00      	nop
 80017f6:	46bd      	mov	sp, r7
 80017f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fc:	4770      	bx	lr
 80017fe:	bf00      	nop
 8001800:	e000ed00 	.word	0xe000ed00

08001804 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001804:	f8df d034 	ldr.w	sp, [pc, #52]	; 800183c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001808:	480d      	ldr	r0, [pc, #52]	; (8001840 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800180a:	490e      	ldr	r1, [pc, #56]	; (8001844 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800180c:	4a0e      	ldr	r2, [pc, #56]	; (8001848 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800180e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001810:	e002      	b.n	8001818 <LoopCopyDataInit>

08001812 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001812:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001814:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001816:	3304      	adds	r3, #4

08001818 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001818:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800181a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800181c:	d3f9      	bcc.n	8001812 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800181e:	4a0b      	ldr	r2, [pc, #44]	; (800184c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001820:	4c0b      	ldr	r4, [pc, #44]	; (8001850 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001822:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001824:	e001      	b.n	800182a <LoopFillZerobss>

08001826 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001826:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001828:	3204      	adds	r2, #4

0800182a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800182a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800182c:	d3fb      	bcc.n	8001826 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800182e:	f7ff ffd7 	bl	80017e0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001832:	f006 ff23 	bl	800867c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001836:	f7ff fce7 	bl	8001208 <main>
  bx  lr    
 800183a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800183c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001840:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001844:	20000354 	.word	0x20000354
  ldr r2, =_sidata
 8001848:	0800d474 	.word	0x0800d474
  ldr r2, =_sbss
 800184c:	20000354 	.word	0x20000354
  ldr r4, =_ebss
 8001850:	20001eec 	.word	0x20001eec

08001854 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001854:	e7fe      	b.n	8001854 <ADC_IRQHandler>
	...

08001858 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800185c:	4b0e      	ldr	r3, [pc, #56]	; (8001898 <HAL_Init+0x40>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	4a0d      	ldr	r2, [pc, #52]	; (8001898 <HAL_Init+0x40>)
 8001862:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001866:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001868:	4b0b      	ldr	r3, [pc, #44]	; (8001898 <HAL_Init+0x40>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4a0a      	ldr	r2, [pc, #40]	; (8001898 <HAL_Init+0x40>)
 800186e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001872:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001874:	4b08      	ldr	r3, [pc, #32]	; (8001898 <HAL_Init+0x40>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4a07      	ldr	r2, [pc, #28]	; (8001898 <HAL_Init+0x40>)
 800187a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800187e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001880:	2003      	movs	r0, #3
 8001882:	f000 f94f 	bl	8001b24 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001886:	200f      	movs	r0, #15
 8001888:	f000 f808 	bl	800189c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800188c:	f7ff fe36 	bl	80014fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001890:	2300      	movs	r3, #0
}
 8001892:	4618      	mov	r0, r3
 8001894:	bd80      	pop	{r7, pc}
 8001896:	bf00      	nop
 8001898:	40023c00 	.word	0x40023c00

0800189c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b082      	sub	sp, #8
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80018a4:	4b12      	ldr	r3, [pc, #72]	; (80018f0 <HAL_InitTick+0x54>)
 80018a6:	681a      	ldr	r2, [r3, #0]
 80018a8:	4b12      	ldr	r3, [pc, #72]	; (80018f4 <HAL_InitTick+0x58>)
 80018aa:	781b      	ldrb	r3, [r3, #0]
 80018ac:	4619      	mov	r1, r3
 80018ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80018b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80018ba:	4618      	mov	r0, r3
 80018bc:	f000 f967 	bl	8001b8e <HAL_SYSTICK_Config>
 80018c0:	4603      	mov	r3, r0
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d001      	beq.n	80018ca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80018c6:	2301      	movs	r3, #1
 80018c8:	e00e      	b.n	80018e8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	2b0f      	cmp	r3, #15
 80018ce:	d80a      	bhi.n	80018e6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018d0:	2200      	movs	r2, #0
 80018d2:	6879      	ldr	r1, [r7, #4]
 80018d4:	f04f 30ff 	mov.w	r0, #4294967295
 80018d8:	f000 f92f 	bl	8001b3a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018dc:	4a06      	ldr	r2, [pc, #24]	; (80018f8 <HAL_InitTick+0x5c>)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80018e2:	2300      	movs	r3, #0
 80018e4:	e000      	b.n	80018e8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80018e6:	2301      	movs	r3, #1
}
 80018e8:	4618      	mov	r0, r3
 80018ea:	3708      	adds	r7, #8
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bd80      	pop	{r7, pc}
 80018f0:	20000000 	.word	0x20000000
 80018f4:	20000008 	.word	0x20000008
 80018f8:	20000004 	.word	0x20000004

080018fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018fc:	b480      	push	{r7}
 80018fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001900:	4b06      	ldr	r3, [pc, #24]	; (800191c <HAL_IncTick+0x20>)
 8001902:	781b      	ldrb	r3, [r3, #0]
 8001904:	461a      	mov	r2, r3
 8001906:	4b06      	ldr	r3, [pc, #24]	; (8001920 <HAL_IncTick+0x24>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	4413      	add	r3, r2
 800190c:	4a04      	ldr	r2, [pc, #16]	; (8001920 <HAL_IncTick+0x24>)
 800190e:	6013      	str	r3, [r2, #0]
}
 8001910:	bf00      	nop
 8001912:	46bd      	mov	sp, r7
 8001914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001918:	4770      	bx	lr
 800191a:	bf00      	nop
 800191c:	20000008 	.word	0x20000008
 8001920:	20000600 	.word	0x20000600

08001924 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001924:	b480      	push	{r7}
 8001926:	af00      	add	r7, sp, #0
  return uwTick;
 8001928:	4b03      	ldr	r3, [pc, #12]	; (8001938 <HAL_GetTick+0x14>)
 800192a:	681b      	ldr	r3, [r3, #0]
}
 800192c:	4618      	mov	r0, r3
 800192e:	46bd      	mov	sp, r7
 8001930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001934:	4770      	bx	lr
 8001936:	bf00      	nop
 8001938:	20000600 	.word	0x20000600

0800193c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b084      	sub	sp, #16
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001944:	f7ff ffee 	bl	8001924 <HAL_GetTick>
 8001948:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001954:	d005      	beq.n	8001962 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001956:	4b0a      	ldr	r3, [pc, #40]	; (8001980 <HAL_Delay+0x44>)
 8001958:	781b      	ldrb	r3, [r3, #0]
 800195a:	461a      	mov	r2, r3
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	4413      	add	r3, r2
 8001960:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001962:	bf00      	nop
 8001964:	f7ff ffde 	bl	8001924 <HAL_GetTick>
 8001968:	4602      	mov	r2, r0
 800196a:	68bb      	ldr	r3, [r7, #8]
 800196c:	1ad3      	subs	r3, r2, r3
 800196e:	68fa      	ldr	r2, [r7, #12]
 8001970:	429a      	cmp	r2, r3
 8001972:	d8f7      	bhi.n	8001964 <HAL_Delay+0x28>
  {
  }
}
 8001974:	bf00      	nop
 8001976:	bf00      	nop
 8001978:	3710      	adds	r7, #16
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}
 800197e:	bf00      	nop
 8001980:	20000008 	.word	0x20000008

08001984 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001984:	b480      	push	{r7}
 8001986:	b085      	sub	sp, #20
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	f003 0307 	and.w	r3, r3, #7
 8001992:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001994:	4b0c      	ldr	r3, [pc, #48]	; (80019c8 <__NVIC_SetPriorityGrouping+0x44>)
 8001996:	68db      	ldr	r3, [r3, #12]
 8001998:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800199a:	68ba      	ldr	r2, [r7, #8]
 800199c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80019a0:	4013      	ands	r3, r2
 80019a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019a8:	68bb      	ldr	r3, [r7, #8]
 80019aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80019b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019b6:	4a04      	ldr	r2, [pc, #16]	; (80019c8 <__NVIC_SetPriorityGrouping+0x44>)
 80019b8:	68bb      	ldr	r3, [r7, #8]
 80019ba:	60d3      	str	r3, [r2, #12]
}
 80019bc:	bf00      	nop
 80019be:	3714      	adds	r7, #20
 80019c0:	46bd      	mov	sp, r7
 80019c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c6:	4770      	bx	lr
 80019c8:	e000ed00 	.word	0xe000ed00

080019cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019cc:	b480      	push	{r7}
 80019ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019d0:	4b04      	ldr	r3, [pc, #16]	; (80019e4 <__NVIC_GetPriorityGrouping+0x18>)
 80019d2:	68db      	ldr	r3, [r3, #12]
 80019d4:	0a1b      	lsrs	r3, r3, #8
 80019d6:	f003 0307 	and.w	r3, r3, #7
}
 80019da:	4618      	mov	r0, r3
 80019dc:	46bd      	mov	sp, r7
 80019de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e2:	4770      	bx	lr
 80019e4:	e000ed00 	.word	0xe000ed00

080019e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019e8:	b480      	push	{r7}
 80019ea:	b083      	sub	sp, #12
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	4603      	mov	r3, r0
 80019f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	db0b      	blt.n	8001a12 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019fa:	79fb      	ldrb	r3, [r7, #7]
 80019fc:	f003 021f 	and.w	r2, r3, #31
 8001a00:	4907      	ldr	r1, [pc, #28]	; (8001a20 <__NVIC_EnableIRQ+0x38>)
 8001a02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a06:	095b      	lsrs	r3, r3, #5
 8001a08:	2001      	movs	r0, #1
 8001a0a:	fa00 f202 	lsl.w	r2, r0, r2
 8001a0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a12:	bf00      	nop
 8001a14:	370c      	adds	r7, #12
 8001a16:	46bd      	mov	sp, r7
 8001a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1c:	4770      	bx	lr
 8001a1e:	bf00      	nop
 8001a20:	e000e100 	.word	0xe000e100

08001a24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a24:	b480      	push	{r7}
 8001a26:	b083      	sub	sp, #12
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	6039      	str	r1, [r7, #0]
 8001a2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	db0a      	blt.n	8001a4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	b2da      	uxtb	r2, r3
 8001a3c:	490c      	ldr	r1, [pc, #48]	; (8001a70 <__NVIC_SetPriority+0x4c>)
 8001a3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a42:	0112      	lsls	r2, r2, #4
 8001a44:	b2d2      	uxtb	r2, r2
 8001a46:	440b      	add	r3, r1
 8001a48:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a4c:	e00a      	b.n	8001a64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	b2da      	uxtb	r2, r3
 8001a52:	4908      	ldr	r1, [pc, #32]	; (8001a74 <__NVIC_SetPriority+0x50>)
 8001a54:	79fb      	ldrb	r3, [r7, #7]
 8001a56:	f003 030f 	and.w	r3, r3, #15
 8001a5a:	3b04      	subs	r3, #4
 8001a5c:	0112      	lsls	r2, r2, #4
 8001a5e:	b2d2      	uxtb	r2, r2
 8001a60:	440b      	add	r3, r1
 8001a62:	761a      	strb	r2, [r3, #24]
}
 8001a64:	bf00      	nop
 8001a66:	370c      	adds	r7, #12
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6e:	4770      	bx	lr
 8001a70:	e000e100 	.word	0xe000e100
 8001a74:	e000ed00 	.word	0xe000ed00

08001a78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	b089      	sub	sp, #36	; 0x24
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	60f8      	str	r0, [r7, #12]
 8001a80:	60b9      	str	r1, [r7, #8]
 8001a82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	f003 0307 	and.w	r3, r3, #7
 8001a8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a8c:	69fb      	ldr	r3, [r7, #28]
 8001a8e:	f1c3 0307 	rsb	r3, r3, #7
 8001a92:	2b04      	cmp	r3, #4
 8001a94:	bf28      	it	cs
 8001a96:	2304      	movcs	r3, #4
 8001a98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a9a:	69fb      	ldr	r3, [r7, #28]
 8001a9c:	3304      	adds	r3, #4
 8001a9e:	2b06      	cmp	r3, #6
 8001aa0:	d902      	bls.n	8001aa8 <NVIC_EncodePriority+0x30>
 8001aa2:	69fb      	ldr	r3, [r7, #28]
 8001aa4:	3b03      	subs	r3, #3
 8001aa6:	e000      	b.n	8001aaa <NVIC_EncodePriority+0x32>
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001aac:	f04f 32ff 	mov.w	r2, #4294967295
 8001ab0:	69bb      	ldr	r3, [r7, #24]
 8001ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab6:	43da      	mvns	r2, r3
 8001ab8:	68bb      	ldr	r3, [r7, #8]
 8001aba:	401a      	ands	r2, r3
 8001abc:	697b      	ldr	r3, [r7, #20]
 8001abe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ac0:	f04f 31ff 	mov.w	r1, #4294967295
 8001ac4:	697b      	ldr	r3, [r7, #20]
 8001ac6:	fa01 f303 	lsl.w	r3, r1, r3
 8001aca:	43d9      	mvns	r1, r3
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ad0:	4313      	orrs	r3, r2
         );
}
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	3724      	adds	r7, #36	; 0x24
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001adc:	4770      	bx	lr
	...

08001ae0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b082      	sub	sp, #8
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	3b01      	subs	r3, #1
 8001aec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001af0:	d301      	bcc.n	8001af6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001af2:	2301      	movs	r3, #1
 8001af4:	e00f      	b.n	8001b16 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001af6:	4a0a      	ldr	r2, [pc, #40]	; (8001b20 <SysTick_Config+0x40>)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	3b01      	subs	r3, #1
 8001afc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001afe:	210f      	movs	r1, #15
 8001b00:	f04f 30ff 	mov.w	r0, #4294967295
 8001b04:	f7ff ff8e 	bl	8001a24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b08:	4b05      	ldr	r3, [pc, #20]	; (8001b20 <SysTick_Config+0x40>)
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b0e:	4b04      	ldr	r3, [pc, #16]	; (8001b20 <SysTick_Config+0x40>)
 8001b10:	2207      	movs	r2, #7
 8001b12:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b14:	2300      	movs	r3, #0
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	3708      	adds	r7, #8
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	e000e010 	.word	0xe000e010

08001b24 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b082      	sub	sp, #8
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b2c:	6878      	ldr	r0, [r7, #4]
 8001b2e:	f7ff ff29 	bl	8001984 <__NVIC_SetPriorityGrouping>
}
 8001b32:	bf00      	nop
 8001b34:	3708      	adds	r7, #8
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}

08001b3a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b3a:	b580      	push	{r7, lr}
 8001b3c:	b086      	sub	sp, #24
 8001b3e:	af00      	add	r7, sp, #0
 8001b40:	4603      	mov	r3, r0
 8001b42:	60b9      	str	r1, [r7, #8]
 8001b44:	607a      	str	r2, [r7, #4]
 8001b46:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b4c:	f7ff ff3e 	bl	80019cc <__NVIC_GetPriorityGrouping>
 8001b50:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b52:	687a      	ldr	r2, [r7, #4]
 8001b54:	68b9      	ldr	r1, [r7, #8]
 8001b56:	6978      	ldr	r0, [r7, #20]
 8001b58:	f7ff ff8e 	bl	8001a78 <NVIC_EncodePriority>
 8001b5c:	4602      	mov	r2, r0
 8001b5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b62:	4611      	mov	r1, r2
 8001b64:	4618      	mov	r0, r3
 8001b66:	f7ff ff5d 	bl	8001a24 <__NVIC_SetPriority>
}
 8001b6a:	bf00      	nop
 8001b6c:	3718      	adds	r7, #24
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}

08001b72 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b72:	b580      	push	{r7, lr}
 8001b74:	b082      	sub	sp, #8
 8001b76:	af00      	add	r7, sp, #0
 8001b78:	4603      	mov	r3, r0
 8001b7a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b80:	4618      	mov	r0, r3
 8001b82:	f7ff ff31 	bl	80019e8 <__NVIC_EnableIRQ>
}
 8001b86:	bf00      	nop
 8001b88:	3708      	adds	r7, #8
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}

08001b8e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b8e:	b580      	push	{r7, lr}
 8001b90:	b082      	sub	sp, #8
 8001b92:	af00      	add	r7, sp, #0
 8001b94:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b96:	6878      	ldr	r0, [r7, #4]
 8001b98:	f7ff ffa2 	bl	8001ae0 <SysTick_Config>
 8001b9c:	4603      	mov	r3, r0
}
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	3708      	adds	r7, #8
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}
	...

08001ba8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	b089      	sub	sp, #36	; 0x24
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
 8001bb0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	61fb      	str	r3, [r7, #28]
 8001bc2:	e159      	b.n	8001e78 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001bc4:	2201      	movs	r2, #1
 8001bc6:	69fb      	ldr	r3, [r7, #28]
 8001bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bcc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	697a      	ldr	r2, [r7, #20]
 8001bd4:	4013      	ands	r3, r2
 8001bd6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001bd8:	693a      	ldr	r2, [r7, #16]
 8001bda:	697b      	ldr	r3, [r7, #20]
 8001bdc:	429a      	cmp	r2, r3
 8001bde:	f040 8148 	bne.w	8001e72 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	685b      	ldr	r3, [r3, #4]
 8001be6:	f003 0303 	and.w	r3, r3, #3
 8001bea:	2b01      	cmp	r3, #1
 8001bec:	d005      	beq.n	8001bfa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001bf6:	2b02      	cmp	r3, #2
 8001bf8:	d130      	bne.n	8001c5c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	689b      	ldr	r3, [r3, #8]
 8001bfe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001c00:	69fb      	ldr	r3, [r7, #28]
 8001c02:	005b      	lsls	r3, r3, #1
 8001c04:	2203      	movs	r2, #3
 8001c06:	fa02 f303 	lsl.w	r3, r2, r3
 8001c0a:	43db      	mvns	r3, r3
 8001c0c:	69ba      	ldr	r2, [r7, #24]
 8001c0e:	4013      	ands	r3, r2
 8001c10:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	68da      	ldr	r2, [r3, #12]
 8001c16:	69fb      	ldr	r3, [r7, #28]
 8001c18:	005b      	lsls	r3, r3, #1
 8001c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1e:	69ba      	ldr	r2, [r7, #24]
 8001c20:	4313      	orrs	r3, r2
 8001c22:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	69ba      	ldr	r2, [r7, #24]
 8001c28:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c30:	2201      	movs	r2, #1
 8001c32:	69fb      	ldr	r3, [r7, #28]
 8001c34:	fa02 f303 	lsl.w	r3, r2, r3
 8001c38:	43db      	mvns	r3, r3
 8001c3a:	69ba      	ldr	r2, [r7, #24]
 8001c3c:	4013      	ands	r3, r2
 8001c3e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	091b      	lsrs	r3, r3, #4
 8001c46:	f003 0201 	and.w	r2, r3, #1
 8001c4a:	69fb      	ldr	r3, [r7, #28]
 8001c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c50:	69ba      	ldr	r2, [r7, #24]
 8001c52:	4313      	orrs	r3, r2
 8001c54:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	69ba      	ldr	r2, [r7, #24]
 8001c5a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	f003 0303 	and.w	r3, r3, #3
 8001c64:	2b03      	cmp	r3, #3
 8001c66:	d017      	beq.n	8001c98 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	68db      	ldr	r3, [r3, #12]
 8001c6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001c6e:	69fb      	ldr	r3, [r7, #28]
 8001c70:	005b      	lsls	r3, r3, #1
 8001c72:	2203      	movs	r2, #3
 8001c74:	fa02 f303 	lsl.w	r3, r2, r3
 8001c78:	43db      	mvns	r3, r3
 8001c7a:	69ba      	ldr	r2, [r7, #24]
 8001c7c:	4013      	ands	r3, r2
 8001c7e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	689a      	ldr	r2, [r3, #8]
 8001c84:	69fb      	ldr	r3, [r7, #28]
 8001c86:	005b      	lsls	r3, r3, #1
 8001c88:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8c:	69ba      	ldr	r2, [r7, #24]
 8001c8e:	4313      	orrs	r3, r2
 8001c90:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	69ba      	ldr	r2, [r7, #24]
 8001c96:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	f003 0303 	and.w	r3, r3, #3
 8001ca0:	2b02      	cmp	r3, #2
 8001ca2:	d123      	bne.n	8001cec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ca4:	69fb      	ldr	r3, [r7, #28]
 8001ca6:	08da      	lsrs	r2, r3, #3
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	3208      	adds	r2, #8
 8001cac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cb0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001cb2:	69fb      	ldr	r3, [r7, #28]
 8001cb4:	f003 0307 	and.w	r3, r3, #7
 8001cb8:	009b      	lsls	r3, r3, #2
 8001cba:	220f      	movs	r2, #15
 8001cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc0:	43db      	mvns	r3, r3
 8001cc2:	69ba      	ldr	r2, [r7, #24]
 8001cc4:	4013      	ands	r3, r2
 8001cc6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	691a      	ldr	r2, [r3, #16]
 8001ccc:	69fb      	ldr	r3, [r7, #28]
 8001cce:	f003 0307 	and.w	r3, r3, #7
 8001cd2:	009b      	lsls	r3, r3, #2
 8001cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd8:	69ba      	ldr	r2, [r7, #24]
 8001cda:	4313      	orrs	r3, r2
 8001cdc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001cde:	69fb      	ldr	r3, [r7, #28]
 8001ce0:	08da      	lsrs	r2, r3, #3
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	3208      	adds	r2, #8
 8001ce6:	69b9      	ldr	r1, [r7, #24]
 8001ce8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001cf2:	69fb      	ldr	r3, [r7, #28]
 8001cf4:	005b      	lsls	r3, r3, #1
 8001cf6:	2203      	movs	r2, #3
 8001cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cfc:	43db      	mvns	r3, r3
 8001cfe:	69ba      	ldr	r2, [r7, #24]
 8001d00:	4013      	ands	r3, r2
 8001d02:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	f003 0203 	and.w	r2, r3, #3
 8001d0c:	69fb      	ldr	r3, [r7, #28]
 8001d0e:	005b      	lsls	r3, r3, #1
 8001d10:	fa02 f303 	lsl.w	r3, r2, r3
 8001d14:	69ba      	ldr	r2, [r7, #24]
 8001d16:	4313      	orrs	r3, r2
 8001d18:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	69ba      	ldr	r2, [r7, #24]
 8001d1e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	f000 80a2 	beq.w	8001e72 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d2e:	2300      	movs	r3, #0
 8001d30:	60fb      	str	r3, [r7, #12]
 8001d32:	4b57      	ldr	r3, [pc, #348]	; (8001e90 <HAL_GPIO_Init+0x2e8>)
 8001d34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d36:	4a56      	ldr	r2, [pc, #344]	; (8001e90 <HAL_GPIO_Init+0x2e8>)
 8001d38:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d3c:	6453      	str	r3, [r2, #68]	; 0x44
 8001d3e:	4b54      	ldr	r3, [pc, #336]	; (8001e90 <HAL_GPIO_Init+0x2e8>)
 8001d40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d46:	60fb      	str	r3, [r7, #12]
 8001d48:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001d4a:	4a52      	ldr	r2, [pc, #328]	; (8001e94 <HAL_GPIO_Init+0x2ec>)
 8001d4c:	69fb      	ldr	r3, [r7, #28]
 8001d4e:	089b      	lsrs	r3, r3, #2
 8001d50:	3302      	adds	r3, #2
 8001d52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d56:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001d58:	69fb      	ldr	r3, [r7, #28]
 8001d5a:	f003 0303 	and.w	r3, r3, #3
 8001d5e:	009b      	lsls	r3, r3, #2
 8001d60:	220f      	movs	r2, #15
 8001d62:	fa02 f303 	lsl.w	r3, r2, r3
 8001d66:	43db      	mvns	r3, r3
 8001d68:	69ba      	ldr	r2, [r7, #24]
 8001d6a:	4013      	ands	r3, r2
 8001d6c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	4a49      	ldr	r2, [pc, #292]	; (8001e98 <HAL_GPIO_Init+0x2f0>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d019      	beq.n	8001daa <HAL_GPIO_Init+0x202>
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	4a48      	ldr	r2, [pc, #288]	; (8001e9c <HAL_GPIO_Init+0x2f4>)
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d013      	beq.n	8001da6 <HAL_GPIO_Init+0x1fe>
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	4a47      	ldr	r2, [pc, #284]	; (8001ea0 <HAL_GPIO_Init+0x2f8>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d00d      	beq.n	8001da2 <HAL_GPIO_Init+0x1fa>
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	4a46      	ldr	r2, [pc, #280]	; (8001ea4 <HAL_GPIO_Init+0x2fc>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d007      	beq.n	8001d9e <HAL_GPIO_Init+0x1f6>
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	4a45      	ldr	r2, [pc, #276]	; (8001ea8 <HAL_GPIO_Init+0x300>)
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d101      	bne.n	8001d9a <HAL_GPIO_Init+0x1f2>
 8001d96:	2304      	movs	r3, #4
 8001d98:	e008      	b.n	8001dac <HAL_GPIO_Init+0x204>
 8001d9a:	2307      	movs	r3, #7
 8001d9c:	e006      	b.n	8001dac <HAL_GPIO_Init+0x204>
 8001d9e:	2303      	movs	r3, #3
 8001da0:	e004      	b.n	8001dac <HAL_GPIO_Init+0x204>
 8001da2:	2302      	movs	r3, #2
 8001da4:	e002      	b.n	8001dac <HAL_GPIO_Init+0x204>
 8001da6:	2301      	movs	r3, #1
 8001da8:	e000      	b.n	8001dac <HAL_GPIO_Init+0x204>
 8001daa:	2300      	movs	r3, #0
 8001dac:	69fa      	ldr	r2, [r7, #28]
 8001dae:	f002 0203 	and.w	r2, r2, #3
 8001db2:	0092      	lsls	r2, r2, #2
 8001db4:	4093      	lsls	r3, r2
 8001db6:	69ba      	ldr	r2, [r7, #24]
 8001db8:	4313      	orrs	r3, r2
 8001dba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001dbc:	4935      	ldr	r1, [pc, #212]	; (8001e94 <HAL_GPIO_Init+0x2ec>)
 8001dbe:	69fb      	ldr	r3, [r7, #28]
 8001dc0:	089b      	lsrs	r3, r3, #2
 8001dc2:	3302      	adds	r3, #2
 8001dc4:	69ba      	ldr	r2, [r7, #24]
 8001dc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001dca:	4b38      	ldr	r3, [pc, #224]	; (8001eac <HAL_GPIO_Init+0x304>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dd0:	693b      	ldr	r3, [r7, #16]
 8001dd2:	43db      	mvns	r3, r3
 8001dd4:	69ba      	ldr	r2, [r7, #24]
 8001dd6:	4013      	ands	r3, r2
 8001dd8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d003      	beq.n	8001dee <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001de6:	69ba      	ldr	r2, [r7, #24]
 8001de8:	693b      	ldr	r3, [r7, #16]
 8001dea:	4313      	orrs	r3, r2
 8001dec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001dee:	4a2f      	ldr	r2, [pc, #188]	; (8001eac <HAL_GPIO_Init+0x304>)
 8001df0:	69bb      	ldr	r3, [r7, #24]
 8001df2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001df4:	4b2d      	ldr	r3, [pc, #180]	; (8001eac <HAL_GPIO_Init+0x304>)
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dfa:	693b      	ldr	r3, [r7, #16]
 8001dfc:	43db      	mvns	r3, r3
 8001dfe:	69ba      	ldr	r2, [r7, #24]
 8001e00:	4013      	ands	r3, r2
 8001e02:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d003      	beq.n	8001e18 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001e10:	69ba      	ldr	r2, [r7, #24]
 8001e12:	693b      	ldr	r3, [r7, #16]
 8001e14:	4313      	orrs	r3, r2
 8001e16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001e18:	4a24      	ldr	r2, [pc, #144]	; (8001eac <HAL_GPIO_Init+0x304>)
 8001e1a:	69bb      	ldr	r3, [r7, #24]
 8001e1c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e1e:	4b23      	ldr	r3, [pc, #140]	; (8001eac <HAL_GPIO_Init+0x304>)
 8001e20:	689b      	ldr	r3, [r3, #8]
 8001e22:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e24:	693b      	ldr	r3, [r7, #16]
 8001e26:	43db      	mvns	r3, r3
 8001e28:	69ba      	ldr	r2, [r7, #24]
 8001e2a:	4013      	ands	r3, r2
 8001e2c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d003      	beq.n	8001e42 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001e3a:	69ba      	ldr	r2, [r7, #24]
 8001e3c:	693b      	ldr	r3, [r7, #16]
 8001e3e:	4313      	orrs	r3, r2
 8001e40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001e42:	4a1a      	ldr	r2, [pc, #104]	; (8001eac <HAL_GPIO_Init+0x304>)
 8001e44:	69bb      	ldr	r3, [r7, #24]
 8001e46:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e48:	4b18      	ldr	r3, [pc, #96]	; (8001eac <HAL_GPIO_Init+0x304>)
 8001e4a:	68db      	ldr	r3, [r3, #12]
 8001e4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e4e:	693b      	ldr	r3, [r7, #16]
 8001e50:	43db      	mvns	r3, r3
 8001e52:	69ba      	ldr	r2, [r7, #24]
 8001e54:	4013      	ands	r3, r2
 8001e56:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d003      	beq.n	8001e6c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001e64:	69ba      	ldr	r2, [r7, #24]
 8001e66:	693b      	ldr	r3, [r7, #16]
 8001e68:	4313      	orrs	r3, r2
 8001e6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001e6c:	4a0f      	ldr	r2, [pc, #60]	; (8001eac <HAL_GPIO_Init+0x304>)
 8001e6e:	69bb      	ldr	r3, [r7, #24]
 8001e70:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e72:	69fb      	ldr	r3, [r7, #28]
 8001e74:	3301      	adds	r3, #1
 8001e76:	61fb      	str	r3, [r7, #28]
 8001e78:	69fb      	ldr	r3, [r7, #28]
 8001e7a:	2b0f      	cmp	r3, #15
 8001e7c:	f67f aea2 	bls.w	8001bc4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001e80:	bf00      	nop
 8001e82:	bf00      	nop
 8001e84:	3724      	adds	r7, #36	; 0x24
 8001e86:	46bd      	mov	sp, r7
 8001e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8c:	4770      	bx	lr
 8001e8e:	bf00      	nop
 8001e90:	40023800 	.word	0x40023800
 8001e94:	40013800 	.word	0x40013800
 8001e98:	40020000 	.word	0x40020000
 8001e9c:	40020400 	.word	0x40020400
 8001ea0:	40020800 	.word	0x40020800
 8001ea4:	40020c00 	.word	0x40020c00
 8001ea8:	40021000 	.word	0x40021000
 8001eac:	40013c00 	.word	0x40013c00

08001eb0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	b083      	sub	sp, #12
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
 8001eb8:	460b      	mov	r3, r1
 8001eba:	807b      	strh	r3, [r7, #2]
 8001ebc:	4613      	mov	r3, r2
 8001ebe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ec0:	787b      	ldrb	r3, [r7, #1]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d003      	beq.n	8001ece <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ec6:	887a      	ldrh	r2, [r7, #2]
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001ecc:	e003      	b.n	8001ed6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001ece:	887b      	ldrh	r3, [r7, #2]
 8001ed0:	041a      	lsls	r2, r3, #16
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	619a      	str	r2, [r3, #24]
}
 8001ed6:	bf00      	nop
 8001ed8:	370c      	adds	r7, #12
 8001eda:	46bd      	mov	sp, r7
 8001edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee0:	4770      	bx	lr

08001ee2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001ee2:	b480      	push	{r7}
 8001ee4:	b085      	sub	sp, #20
 8001ee6:	af00      	add	r7, sp, #0
 8001ee8:	6078      	str	r0, [r7, #4]
 8001eea:	460b      	mov	r3, r1
 8001eec:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	695b      	ldr	r3, [r3, #20]
 8001ef2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001ef4:	887a      	ldrh	r2, [r7, #2]
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	4013      	ands	r3, r2
 8001efa:	041a      	lsls	r2, r3, #16
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	43d9      	mvns	r1, r3
 8001f00:	887b      	ldrh	r3, [r7, #2]
 8001f02:	400b      	ands	r3, r1
 8001f04:	431a      	orrs	r2, r3
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	619a      	str	r2, [r3, #24]
}
 8001f0a:	bf00      	nop
 8001f0c:	3714      	adds	r7, #20
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f14:	4770      	bx	lr
	...

08001f18 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b082      	sub	sp, #8
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	4603      	mov	r3, r0
 8001f20:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001f22:	4b08      	ldr	r3, [pc, #32]	; (8001f44 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001f24:	695a      	ldr	r2, [r3, #20]
 8001f26:	88fb      	ldrh	r3, [r7, #6]
 8001f28:	4013      	ands	r3, r2
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d006      	beq.n	8001f3c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001f2e:	4a05      	ldr	r2, [pc, #20]	; (8001f44 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001f30:	88fb      	ldrh	r3, [r7, #6]
 8001f32:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001f34:	88fb      	ldrh	r3, [r7, #6]
 8001f36:	4618      	mov	r0, r3
 8001f38:	f7ff faca 	bl	80014d0 <HAL_GPIO_EXTI_Callback>
  }
}
 8001f3c:	bf00      	nop
 8001f3e:	3708      	adds	r7, #8
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bd80      	pop	{r7, pc}
 8001f44:	40013c00 	.word	0x40013c00

08001f48 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b084      	sub	sp, #16
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d101      	bne.n	8001f5a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001f56:	2301      	movs	r3, #1
 8001f58:	e12b      	b.n	80021b2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f60:	b2db      	uxtb	r3, r3
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d106      	bne.n	8001f74 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	2200      	movs	r2, #0
 8001f6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001f6e:	6878      	ldr	r0, [r7, #4]
 8001f70:	f7ff faec 	bl	800154c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2224      	movs	r2, #36	; 0x24
 8001f78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	681a      	ldr	r2, [r3, #0]
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f022 0201 	bic.w	r2, r2, #1
 8001f8a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	681a      	ldr	r2, [r3, #0]
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001f9a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	681a      	ldr	r2, [r3, #0]
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001faa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001fac:	f002 fe32 	bl	8004c14 <HAL_RCC_GetPCLK1Freq>
 8001fb0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	685b      	ldr	r3, [r3, #4]
 8001fb6:	4a81      	ldr	r2, [pc, #516]	; (80021bc <HAL_I2C_Init+0x274>)
 8001fb8:	4293      	cmp	r3, r2
 8001fba:	d807      	bhi.n	8001fcc <HAL_I2C_Init+0x84>
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	4a80      	ldr	r2, [pc, #512]	; (80021c0 <HAL_I2C_Init+0x278>)
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	bf94      	ite	ls
 8001fc4:	2301      	movls	r3, #1
 8001fc6:	2300      	movhi	r3, #0
 8001fc8:	b2db      	uxtb	r3, r3
 8001fca:	e006      	b.n	8001fda <HAL_I2C_Init+0x92>
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	4a7d      	ldr	r2, [pc, #500]	; (80021c4 <HAL_I2C_Init+0x27c>)
 8001fd0:	4293      	cmp	r3, r2
 8001fd2:	bf94      	ite	ls
 8001fd4:	2301      	movls	r3, #1
 8001fd6:	2300      	movhi	r3, #0
 8001fd8:	b2db      	uxtb	r3, r3
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d001      	beq.n	8001fe2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001fde:	2301      	movs	r3, #1
 8001fe0:	e0e7      	b.n	80021b2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	4a78      	ldr	r2, [pc, #480]	; (80021c8 <HAL_I2C_Init+0x280>)
 8001fe6:	fba2 2303 	umull	r2, r3, r2, r3
 8001fea:	0c9b      	lsrs	r3, r3, #18
 8001fec:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	68ba      	ldr	r2, [r7, #8]
 8001ffe:	430a      	orrs	r2, r1
 8002000:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	6a1b      	ldr	r3, [r3, #32]
 8002008:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	4a6a      	ldr	r2, [pc, #424]	; (80021bc <HAL_I2C_Init+0x274>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d802      	bhi.n	800201c <HAL_I2C_Init+0xd4>
 8002016:	68bb      	ldr	r3, [r7, #8]
 8002018:	3301      	adds	r3, #1
 800201a:	e009      	b.n	8002030 <HAL_I2C_Init+0xe8>
 800201c:	68bb      	ldr	r3, [r7, #8]
 800201e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002022:	fb02 f303 	mul.w	r3, r2, r3
 8002026:	4a69      	ldr	r2, [pc, #420]	; (80021cc <HAL_I2C_Init+0x284>)
 8002028:	fba2 2303 	umull	r2, r3, r2, r3
 800202c:	099b      	lsrs	r3, r3, #6
 800202e:	3301      	adds	r3, #1
 8002030:	687a      	ldr	r2, [r7, #4]
 8002032:	6812      	ldr	r2, [r2, #0]
 8002034:	430b      	orrs	r3, r1
 8002036:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	69db      	ldr	r3, [r3, #28]
 800203e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002042:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	495c      	ldr	r1, [pc, #368]	; (80021bc <HAL_I2C_Init+0x274>)
 800204c:	428b      	cmp	r3, r1
 800204e:	d819      	bhi.n	8002084 <HAL_I2C_Init+0x13c>
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	1e59      	subs	r1, r3, #1
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	005b      	lsls	r3, r3, #1
 800205a:	fbb1 f3f3 	udiv	r3, r1, r3
 800205e:	1c59      	adds	r1, r3, #1
 8002060:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002064:	400b      	ands	r3, r1
 8002066:	2b00      	cmp	r3, #0
 8002068:	d00a      	beq.n	8002080 <HAL_I2C_Init+0x138>
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	1e59      	subs	r1, r3, #1
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	005b      	lsls	r3, r3, #1
 8002074:	fbb1 f3f3 	udiv	r3, r1, r3
 8002078:	3301      	adds	r3, #1
 800207a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800207e:	e051      	b.n	8002124 <HAL_I2C_Init+0x1dc>
 8002080:	2304      	movs	r3, #4
 8002082:	e04f      	b.n	8002124 <HAL_I2C_Init+0x1dc>
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	689b      	ldr	r3, [r3, #8]
 8002088:	2b00      	cmp	r3, #0
 800208a:	d111      	bne.n	80020b0 <HAL_I2C_Init+0x168>
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	1e58      	subs	r0, r3, #1
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6859      	ldr	r1, [r3, #4]
 8002094:	460b      	mov	r3, r1
 8002096:	005b      	lsls	r3, r3, #1
 8002098:	440b      	add	r3, r1
 800209a:	fbb0 f3f3 	udiv	r3, r0, r3
 800209e:	3301      	adds	r3, #1
 80020a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	bf0c      	ite	eq
 80020a8:	2301      	moveq	r3, #1
 80020aa:	2300      	movne	r3, #0
 80020ac:	b2db      	uxtb	r3, r3
 80020ae:	e012      	b.n	80020d6 <HAL_I2C_Init+0x18e>
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	1e58      	subs	r0, r3, #1
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6859      	ldr	r1, [r3, #4]
 80020b8:	460b      	mov	r3, r1
 80020ba:	009b      	lsls	r3, r3, #2
 80020bc:	440b      	add	r3, r1
 80020be:	0099      	lsls	r1, r3, #2
 80020c0:	440b      	add	r3, r1
 80020c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80020c6:	3301      	adds	r3, #1
 80020c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	bf0c      	ite	eq
 80020d0:	2301      	moveq	r3, #1
 80020d2:	2300      	movne	r3, #0
 80020d4:	b2db      	uxtb	r3, r3
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d001      	beq.n	80020de <HAL_I2C_Init+0x196>
 80020da:	2301      	movs	r3, #1
 80020dc:	e022      	b.n	8002124 <HAL_I2C_Init+0x1dc>
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	689b      	ldr	r3, [r3, #8]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d10e      	bne.n	8002104 <HAL_I2C_Init+0x1bc>
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	1e58      	subs	r0, r3, #1
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6859      	ldr	r1, [r3, #4]
 80020ee:	460b      	mov	r3, r1
 80020f0:	005b      	lsls	r3, r3, #1
 80020f2:	440b      	add	r3, r1
 80020f4:	fbb0 f3f3 	udiv	r3, r0, r3
 80020f8:	3301      	adds	r3, #1
 80020fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002102:	e00f      	b.n	8002124 <HAL_I2C_Init+0x1dc>
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	1e58      	subs	r0, r3, #1
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6859      	ldr	r1, [r3, #4]
 800210c:	460b      	mov	r3, r1
 800210e:	009b      	lsls	r3, r3, #2
 8002110:	440b      	add	r3, r1
 8002112:	0099      	lsls	r1, r3, #2
 8002114:	440b      	add	r3, r1
 8002116:	fbb0 f3f3 	udiv	r3, r0, r3
 800211a:	3301      	adds	r3, #1
 800211c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002120:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002124:	6879      	ldr	r1, [r7, #4]
 8002126:	6809      	ldr	r1, [r1, #0]
 8002128:	4313      	orrs	r3, r2
 800212a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	69da      	ldr	r2, [r3, #28]
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6a1b      	ldr	r3, [r3, #32]
 800213e:	431a      	orrs	r2, r3
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	430a      	orrs	r2, r1
 8002146:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	689b      	ldr	r3, [r3, #8]
 800214e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002152:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002156:	687a      	ldr	r2, [r7, #4]
 8002158:	6911      	ldr	r1, [r2, #16]
 800215a:	687a      	ldr	r2, [r7, #4]
 800215c:	68d2      	ldr	r2, [r2, #12]
 800215e:	4311      	orrs	r1, r2
 8002160:	687a      	ldr	r2, [r7, #4]
 8002162:	6812      	ldr	r2, [r2, #0]
 8002164:	430b      	orrs	r3, r1
 8002166:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	68db      	ldr	r3, [r3, #12]
 800216e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	695a      	ldr	r2, [r3, #20]
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	699b      	ldr	r3, [r3, #24]
 800217a:	431a      	orrs	r2, r3
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	430a      	orrs	r2, r1
 8002182:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	681a      	ldr	r2, [r3, #0]
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f042 0201 	orr.w	r2, r2, #1
 8002192:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2200      	movs	r2, #0
 8002198:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2220      	movs	r2, #32
 800219e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2200      	movs	r2, #0
 80021a6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2200      	movs	r2, #0
 80021ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80021b0:	2300      	movs	r3, #0
}
 80021b2:	4618      	mov	r0, r3
 80021b4:	3710      	adds	r7, #16
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd80      	pop	{r7, pc}
 80021ba:	bf00      	nop
 80021bc:	000186a0 	.word	0x000186a0
 80021c0:	001e847f 	.word	0x001e847f
 80021c4:	003d08ff 	.word	0x003d08ff
 80021c8:	431bde83 	.word	0x431bde83
 80021cc:	10624dd3 	.word	0x10624dd3

080021d0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b088      	sub	sp, #32
 80021d4:	af02      	add	r7, sp, #8
 80021d6:	60f8      	str	r0, [r7, #12]
 80021d8:	607a      	str	r2, [r7, #4]
 80021da:	461a      	mov	r2, r3
 80021dc:	460b      	mov	r3, r1
 80021de:	817b      	strh	r3, [r7, #10]
 80021e0:	4613      	mov	r3, r2
 80021e2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80021e4:	f7ff fb9e 	bl	8001924 <HAL_GetTick>
 80021e8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021f0:	b2db      	uxtb	r3, r3
 80021f2:	2b20      	cmp	r3, #32
 80021f4:	f040 80e0 	bne.w	80023b8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80021f8:	697b      	ldr	r3, [r7, #20]
 80021fa:	9300      	str	r3, [sp, #0]
 80021fc:	2319      	movs	r3, #25
 80021fe:	2201      	movs	r2, #1
 8002200:	4970      	ldr	r1, [pc, #448]	; (80023c4 <HAL_I2C_Master_Transmit+0x1f4>)
 8002202:	68f8      	ldr	r0, [r7, #12]
 8002204:	f000 fd86 	bl	8002d14 <I2C_WaitOnFlagUntilTimeout>
 8002208:	4603      	mov	r3, r0
 800220a:	2b00      	cmp	r3, #0
 800220c:	d001      	beq.n	8002212 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800220e:	2302      	movs	r3, #2
 8002210:	e0d3      	b.n	80023ba <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002218:	2b01      	cmp	r3, #1
 800221a:	d101      	bne.n	8002220 <HAL_I2C_Master_Transmit+0x50>
 800221c:	2302      	movs	r3, #2
 800221e:	e0cc      	b.n	80023ba <HAL_I2C_Master_Transmit+0x1ea>
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	2201      	movs	r2, #1
 8002224:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f003 0301 	and.w	r3, r3, #1
 8002232:	2b01      	cmp	r3, #1
 8002234:	d007      	beq.n	8002246 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	681a      	ldr	r2, [r3, #0]
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f042 0201 	orr.w	r2, r2, #1
 8002244:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	681a      	ldr	r2, [r3, #0]
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002254:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	2221      	movs	r2, #33	; 0x21
 800225a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	2210      	movs	r2, #16
 8002262:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	2200      	movs	r2, #0
 800226a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	687a      	ldr	r2, [r7, #4]
 8002270:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	893a      	ldrh	r2, [r7, #8]
 8002276:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800227c:	b29a      	uxth	r2, r3
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	4a50      	ldr	r2, [pc, #320]	; (80023c8 <HAL_I2C_Master_Transmit+0x1f8>)
 8002286:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002288:	8979      	ldrh	r1, [r7, #10]
 800228a:	697b      	ldr	r3, [r7, #20]
 800228c:	6a3a      	ldr	r2, [r7, #32]
 800228e:	68f8      	ldr	r0, [r7, #12]
 8002290:	f000 fbf0 	bl	8002a74 <I2C_MasterRequestWrite>
 8002294:	4603      	mov	r3, r0
 8002296:	2b00      	cmp	r3, #0
 8002298:	d001      	beq.n	800229e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800229a:	2301      	movs	r3, #1
 800229c:	e08d      	b.n	80023ba <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800229e:	2300      	movs	r3, #0
 80022a0:	613b      	str	r3, [r7, #16]
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	695b      	ldr	r3, [r3, #20]
 80022a8:	613b      	str	r3, [r7, #16]
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	699b      	ldr	r3, [r3, #24]
 80022b0:	613b      	str	r3, [r7, #16]
 80022b2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80022b4:	e066      	b.n	8002384 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80022b6:	697a      	ldr	r2, [r7, #20]
 80022b8:	6a39      	ldr	r1, [r7, #32]
 80022ba:	68f8      	ldr	r0, [r7, #12]
 80022bc:	f000 fe00 	bl	8002ec0 <I2C_WaitOnTXEFlagUntilTimeout>
 80022c0:	4603      	mov	r3, r0
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d00d      	beq.n	80022e2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ca:	2b04      	cmp	r3, #4
 80022cc:	d107      	bne.n	80022de <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	681a      	ldr	r2, [r3, #0]
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022dc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80022de:	2301      	movs	r3, #1
 80022e0:	e06b      	b.n	80023ba <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022e6:	781a      	ldrb	r2, [r3, #0]
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022f2:	1c5a      	adds	r2, r3, #1
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022fc:	b29b      	uxth	r3, r3
 80022fe:	3b01      	subs	r3, #1
 8002300:	b29a      	uxth	r2, r3
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800230a:	3b01      	subs	r3, #1
 800230c:	b29a      	uxth	r2, r3
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	695b      	ldr	r3, [r3, #20]
 8002318:	f003 0304 	and.w	r3, r3, #4
 800231c:	2b04      	cmp	r3, #4
 800231e:	d11b      	bne.n	8002358 <HAL_I2C_Master_Transmit+0x188>
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002324:	2b00      	cmp	r3, #0
 8002326:	d017      	beq.n	8002358 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800232c:	781a      	ldrb	r2, [r3, #0]
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002338:	1c5a      	adds	r2, r3, #1
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002342:	b29b      	uxth	r3, r3
 8002344:	3b01      	subs	r3, #1
 8002346:	b29a      	uxth	r2, r3
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002350:	3b01      	subs	r3, #1
 8002352:	b29a      	uxth	r2, r3
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002358:	697a      	ldr	r2, [r7, #20]
 800235a:	6a39      	ldr	r1, [r7, #32]
 800235c:	68f8      	ldr	r0, [r7, #12]
 800235e:	f000 fdf0 	bl	8002f42 <I2C_WaitOnBTFFlagUntilTimeout>
 8002362:	4603      	mov	r3, r0
 8002364:	2b00      	cmp	r3, #0
 8002366:	d00d      	beq.n	8002384 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800236c:	2b04      	cmp	r3, #4
 800236e:	d107      	bne.n	8002380 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	681a      	ldr	r2, [r3, #0]
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800237e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002380:	2301      	movs	r3, #1
 8002382:	e01a      	b.n	80023ba <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002388:	2b00      	cmp	r3, #0
 800238a:	d194      	bne.n	80022b6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	681a      	ldr	r2, [r3, #0]
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800239a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	2220      	movs	r2, #32
 80023a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	2200      	movs	r2, #0
 80023a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	2200      	movs	r2, #0
 80023b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80023b4:	2300      	movs	r3, #0
 80023b6:	e000      	b.n	80023ba <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80023b8:	2302      	movs	r3, #2
  }
}
 80023ba:	4618      	mov	r0, r3
 80023bc:	3718      	adds	r7, #24
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd80      	pop	{r7, pc}
 80023c2:	bf00      	nop
 80023c4:	00100002 	.word	0x00100002
 80023c8:	ffff0000 	.word	0xffff0000

080023cc <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b08c      	sub	sp, #48	; 0x30
 80023d0:	af02      	add	r7, sp, #8
 80023d2:	60f8      	str	r0, [r7, #12]
 80023d4:	607a      	str	r2, [r7, #4]
 80023d6:	461a      	mov	r2, r3
 80023d8:	460b      	mov	r3, r1
 80023da:	817b      	strh	r3, [r7, #10]
 80023dc:	4613      	mov	r3, r2
 80023de:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80023e0:	f7ff faa0 	bl	8001924 <HAL_GetTick>
 80023e4:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023ec:	b2db      	uxtb	r3, r3
 80023ee:	2b20      	cmp	r3, #32
 80023f0:	f040 820b 	bne.w	800280a <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80023f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023f6:	9300      	str	r3, [sp, #0]
 80023f8:	2319      	movs	r3, #25
 80023fa:	2201      	movs	r2, #1
 80023fc:	497c      	ldr	r1, [pc, #496]	; (80025f0 <HAL_I2C_Master_Receive+0x224>)
 80023fe:	68f8      	ldr	r0, [r7, #12]
 8002400:	f000 fc88 	bl	8002d14 <I2C_WaitOnFlagUntilTimeout>
 8002404:	4603      	mov	r3, r0
 8002406:	2b00      	cmp	r3, #0
 8002408:	d001      	beq.n	800240e <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800240a:	2302      	movs	r3, #2
 800240c:	e1fe      	b.n	800280c <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002414:	2b01      	cmp	r3, #1
 8002416:	d101      	bne.n	800241c <HAL_I2C_Master_Receive+0x50>
 8002418:	2302      	movs	r3, #2
 800241a:	e1f7      	b.n	800280c <HAL_I2C_Master_Receive+0x440>
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	2201      	movs	r2, #1
 8002420:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f003 0301 	and.w	r3, r3, #1
 800242e:	2b01      	cmp	r3, #1
 8002430:	d007      	beq.n	8002442 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	681a      	ldr	r2, [r3, #0]
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f042 0201 	orr.w	r2, r2, #1
 8002440:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	681a      	ldr	r2, [r3, #0]
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002450:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	2222      	movs	r2, #34	; 0x22
 8002456:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	2210      	movs	r2, #16
 800245e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	2200      	movs	r2, #0
 8002466:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	687a      	ldr	r2, [r7, #4]
 800246c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	893a      	ldrh	r2, [r7, #8]
 8002472:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002478:	b29a      	uxth	r2, r3
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	4a5c      	ldr	r2, [pc, #368]	; (80025f4 <HAL_I2C_Master_Receive+0x228>)
 8002482:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002484:	8979      	ldrh	r1, [r7, #10]
 8002486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002488:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800248a:	68f8      	ldr	r0, [r7, #12]
 800248c:	f000 fb74 	bl	8002b78 <I2C_MasterRequestRead>
 8002490:	4603      	mov	r3, r0
 8002492:	2b00      	cmp	r3, #0
 8002494:	d001      	beq.n	800249a <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8002496:	2301      	movs	r3, #1
 8002498:	e1b8      	b.n	800280c <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d113      	bne.n	80024ca <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80024a2:	2300      	movs	r3, #0
 80024a4:	623b      	str	r3, [r7, #32]
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	695b      	ldr	r3, [r3, #20]
 80024ac:	623b      	str	r3, [r7, #32]
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	699b      	ldr	r3, [r3, #24]
 80024b4:	623b      	str	r3, [r7, #32]
 80024b6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	681a      	ldr	r2, [r3, #0]
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024c6:	601a      	str	r2, [r3, #0]
 80024c8:	e18c      	b.n	80027e4 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024ce:	2b01      	cmp	r3, #1
 80024d0:	d11b      	bne.n	800250a <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	681a      	ldr	r2, [r3, #0]
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80024e0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80024e2:	2300      	movs	r3, #0
 80024e4:	61fb      	str	r3, [r7, #28]
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	695b      	ldr	r3, [r3, #20]
 80024ec:	61fb      	str	r3, [r7, #28]
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	699b      	ldr	r3, [r3, #24]
 80024f4:	61fb      	str	r3, [r7, #28]
 80024f6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	681a      	ldr	r2, [r3, #0]
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002506:	601a      	str	r2, [r3, #0]
 8002508:	e16c      	b.n	80027e4 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800250e:	2b02      	cmp	r3, #2
 8002510:	d11b      	bne.n	800254a <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	681a      	ldr	r2, [r3, #0]
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002520:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	681a      	ldr	r2, [r3, #0]
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002530:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002532:	2300      	movs	r3, #0
 8002534:	61bb      	str	r3, [r7, #24]
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	695b      	ldr	r3, [r3, #20]
 800253c:	61bb      	str	r3, [r7, #24]
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	699b      	ldr	r3, [r3, #24]
 8002544:	61bb      	str	r3, [r7, #24]
 8002546:	69bb      	ldr	r3, [r7, #24]
 8002548:	e14c      	b.n	80027e4 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	681a      	ldr	r2, [r3, #0]
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002558:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800255a:	2300      	movs	r3, #0
 800255c:	617b      	str	r3, [r7, #20]
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	695b      	ldr	r3, [r3, #20]
 8002564:	617b      	str	r3, [r7, #20]
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	699b      	ldr	r3, [r3, #24]
 800256c:	617b      	str	r3, [r7, #20]
 800256e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002570:	e138      	b.n	80027e4 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002576:	2b03      	cmp	r3, #3
 8002578:	f200 80f1 	bhi.w	800275e <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002580:	2b01      	cmp	r3, #1
 8002582:	d123      	bne.n	80025cc <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002584:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002586:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002588:	68f8      	ldr	r0, [r7, #12]
 800258a:	f000 fd1b 	bl	8002fc4 <I2C_WaitOnRXNEFlagUntilTimeout>
 800258e:	4603      	mov	r3, r0
 8002590:	2b00      	cmp	r3, #0
 8002592:	d001      	beq.n	8002598 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8002594:	2301      	movs	r3, #1
 8002596:	e139      	b.n	800280c <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	691a      	ldr	r2, [r3, #16]
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025a2:	b2d2      	uxtb	r2, r2
 80025a4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025aa:	1c5a      	adds	r2, r3, #1
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025b4:	3b01      	subs	r3, #1
 80025b6:	b29a      	uxth	r2, r3
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025c0:	b29b      	uxth	r3, r3
 80025c2:	3b01      	subs	r3, #1
 80025c4:	b29a      	uxth	r2, r3
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80025ca:	e10b      	b.n	80027e4 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025d0:	2b02      	cmp	r3, #2
 80025d2:	d14e      	bne.n	8002672 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80025d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d6:	9300      	str	r3, [sp, #0]
 80025d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025da:	2200      	movs	r2, #0
 80025dc:	4906      	ldr	r1, [pc, #24]	; (80025f8 <HAL_I2C_Master_Receive+0x22c>)
 80025de:	68f8      	ldr	r0, [r7, #12]
 80025e0:	f000 fb98 	bl	8002d14 <I2C_WaitOnFlagUntilTimeout>
 80025e4:	4603      	mov	r3, r0
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d008      	beq.n	80025fc <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80025ea:	2301      	movs	r3, #1
 80025ec:	e10e      	b.n	800280c <HAL_I2C_Master_Receive+0x440>
 80025ee:	bf00      	nop
 80025f0:	00100002 	.word	0x00100002
 80025f4:	ffff0000 	.word	0xffff0000
 80025f8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	681a      	ldr	r2, [r3, #0]
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800260a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	691a      	ldr	r2, [r3, #16]
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002616:	b2d2      	uxtb	r2, r2
 8002618:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800261e:	1c5a      	adds	r2, r3, #1
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002628:	3b01      	subs	r3, #1
 800262a:	b29a      	uxth	r2, r3
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002634:	b29b      	uxth	r3, r3
 8002636:	3b01      	subs	r3, #1
 8002638:	b29a      	uxth	r2, r3
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	691a      	ldr	r2, [r3, #16]
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002648:	b2d2      	uxtb	r2, r2
 800264a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002650:	1c5a      	adds	r2, r3, #1
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800265a:	3b01      	subs	r3, #1
 800265c:	b29a      	uxth	r2, r3
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002666:	b29b      	uxth	r3, r3
 8002668:	3b01      	subs	r3, #1
 800266a:	b29a      	uxth	r2, r3
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002670:	e0b8      	b.n	80027e4 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002674:	9300      	str	r3, [sp, #0]
 8002676:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002678:	2200      	movs	r2, #0
 800267a:	4966      	ldr	r1, [pc, #408]	; (8002814 <HAL_I2C_Master_Receive+0x448>)
 800267c:	68f8      	ldr	r0, [r7, #12]
 800267e:	f000 fb49 	bl	8002d14 <I2C_WaitOnFlagUntilTimeout>
 8002682:	4603      	mov	r3, r0
 8002684:	2b00      	cmp	r3, #0
 8002686:	d001      	beq.n	800268c <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8002688:	2301      	movs	r3, #1
 800268a:	e0bf      	b.n	800280c <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	681a      	ldr	r2, [r3, #0]
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800269a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	691a      	ldr	r2, [r3, #16]
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026a6:	b2d2      	uxtb	r2, r2
 80026a8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ae:	1c5a      	adds	r2, r3, #1
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026b8:	3b01      	subs	r3, #1
 80026ba:	b29a      	uxth	r2, r3
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026c4:	b29b      	uxth	r3, r3
 80026c6:	3b01      	subs	r3, #1
 80026c8:	b29a      	uxth	r2, r3
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80026ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026d0:	9300      	str	r3, [sp, #0]
 80026d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026d4:	2200      	movs	r2, #0
 80026d6:	494f      	ldr	r1, [pc, #316]	; (8002814 <HAL_I2C_Master_Receive+0x448>)
 80026d8:	68f8      	ldr	r0, [r7, #12]
 80026da:	f000 fb1b 	bl	8002d14 <I2C_WaitOnFlagUntilTimeout>
 80026de:	4603      	mov	r3, r0
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d001      	beq.n	80026e8 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80026e4:	2301      	movs	r3, #1
 80026e6:	e091      	b.n	800280c <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	681a      	ldr	r2, [r3, #0]
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026f6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	691a      	ldr	r2, [r3, #16]
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002702:	b2d2      	uxtb	r2, r2
 8002704:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800270a:	1c5a      	adds	r2, r3, #1
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002714:	3b01      	subs	r3, #1
 8002716:	b29a      	uxth	r2, r3
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002720:	b29b      	uxth	r3, r3
 8002722:	3b01      	subs	r3, #1
 8002724:	b29a      	uxth	r2, r3
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	691a      	ldr	r2, [r3, #16]
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002734:	b2d2      	uxtb	r2, r2
 8002736:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800273c:	1c5a      	adds	r2, r3, #1
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002746:	3b01      	subs	r3, #1
 8002748:	b29a      	uxth	r2, r3
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002752:	b29b      	uxth	r3, r3
 8002754:	3b01      	subs	r3, #1
 8002756:	b29a      	uxth	r2, r3
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800275c:	e042      	b.n	80027e4 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800275e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002760:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002762:	68f8      	ldr	r0, [r7, #12]
 8002764:	f000 fc2e 	bl	8002fc4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002768:	4603      	mov	r3, r0
 800276a:	2b00      	cmp	r3, #0
 800276c:	d001      	beq.n	8002772 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800276e:	2301      	movs	r3, #1
 8002770:	e04c      	b.n	800280c <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	691a      	ldr	r2, [r3, #16]
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800277c:	b2d2      	uxtb	r2, r2
 800277e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002784:	1c5a      	adds	r2, r3, #1
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800278e:	3b01      	subs	r3, #1
 8002790:	b29a      	uxth	r2, r3
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800279a:	b29b      	uxth	r3, r3
 800279c:	3b01      	subs	r3, #1
 800279e:	b29a      	uxth	r2, r3
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	695b      	ldr	r3, [r3, #20]
 80027aa:	f003 0304 	and.w	r3, r3, #4
 80027ae:	2b04      	cmp	r3, #4
 80027b0:	d118      	bne.n	80027e4 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	691a      	ldr	r2, [r3, #16]
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027bc:	b2d2      	uxtb	r2, r2
 80027be:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027c4:	1c5a      	adds	r2, r3, #1
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027ce:	3b01      	subs	r3, #1
 80027d0:	b29a      	uxth	r2, r3
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027da:	b29b      	uxth	r3, r3
 80027dc:	3b01      	subs	r3, #1
 80027de:	b29a      	uxth	r2, r3
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	f47f aec2 	bne.w	8002572 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	2220      	movs	r2, #32
 80027f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	2200      	movs	r2, #0
 80027fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	2200      	movs	r2, #0
 8002802:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002806:	2300      	movs	r3, #0
 8002808:	e000      	b.n	800280c <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800280a:	2302      	movs	r3, #2
  }
}
 800280c:	4618      	mov	r0, r3
 800280e:	3728      	adds	r7, #40	; 0x28
 8002810:	46bd      	mov	sp, r7
 8002812:	bd80      	pop	{r7, pc}
 8002814:	00010004 	.word	0x00010004

08002818 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b08a      	sub	sp, #40	; 0x28
 800281c:	af02      	add	r7, sp, #8
 800281e:	60f8      	str	r0, [r7, #12]
 8002820:	607a      	str	r2, [r7, #4]
 8002822:	603b      	str	r3, [r7, #0]
 8002824:	460b      	mov	r3, r1
 8002826:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002828:	f7ff f87c 	bl	8001924 <HAL_GetTick>
 800282c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 800282e:	2301      	movs	r3, #1
 8002830:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002838:	b2db      	uxtb	r3, r3
 800283a:	2b20      	cmp	r3, #32
 800283c:	f040 8111 	bne.w	8002a62 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002840:	69fb      	ldr	r3, [r7, #28]
 8002842:	9300      	str	r3, [sp, #0]
 8002844:	2319      	movs	r3, #25
 8002846:	2201      	movs	r2, #1
 8002848:	4988      	ldr	r1, [pc, #544]	; (8002a6c <HAL_I2C_IsDeviceReady+0x254>)
 800284a:	68f8      	ldr	r0, [r7, #12]
 800284c:	f000 fa62 	bl	8002d14 <I2C_WaitOnFlagUntilTimeout>
 8002850:	4603      	mov	r3, r0
 8002852:	2b00      	cmp	r3, #0
 8002854:	d001      	beq.n	800285a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002856:	2302      	movs	r3, #2
 8002858:	e104      	b.n	8002a64 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002860:	2b01      	cmp	r3, #1
 8002862:	d101      	bne.n	8002868 <HAL_I2C_IsDeviceReady+0x50>
 8002864:	2302      	movs	r3, #2
 8002866:	e0fd      	b.n	8002a64 <HAL_I2C_IsDeviceReady+0x24c>
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	2201      	movs	r2, #1
 800286c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f003 0301 	and.w	r3, r3, #1
 800287a:	2b01      	cmp	r3, #1
 800287c:	d007      	beq.n	800288e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	681a      	ldr	r2, [r3, #0]
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f042 0201 	orr.w	r2, r2, #1
 800288c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	681a      	ldr	r2, [r3, #0]
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800289c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	2224      	movs	r2, #36	; 0x24
 80028a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	2200      	movs	r2, #0
 80028aa:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	4a70      	ldr	r2, [pc, #448]	; (8002a70 <HAL_I2C_IsDeviceReady+0x258>)
 80028b0:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	681a      	ldr	r2, [r3, #0]
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80028c0:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80028c2:	69fb      	ldr	r3, [r7, #28]
 80028c4:	9300      	str	r3, [sp, #0]
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	2200      	movs	r2, #0
 80028ca:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80028ce:	68f8      	ldr	r0, [r7, #12]
 80028d0:	f000 fa20 	bl	8002d14 <I2C_WaitOnFlagUntilTimeout>
 80028d4:	4603      	mov	r3, r0
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d00d      	beq.n	80028f6 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80028e8:	d103      	bne.n	80028f2 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80028f0:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 80028f2:	2303      	movs	r3, #3
 80028f4:	e0b6      	b.n	8002a64 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80028f6:	897b      	ldrh	r3, [r7, #10]
 80028f8:	b2db      	uxtb	r3, r3
 80028fa:	461a      	mov	r2, r3
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002904:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8002906:	f7ff f80d 	bl	8001924 <HAL_GetTick>
 800290a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	695b      	ldr	r3, [r3, #20]
 8002912:	f003 0302 	and.w	r3, r3, #2
 8002916:	2b02      	cmp	r3, #2
 8002918:	bf0c      	ite	eq
 800291a:	2301      	moveq	r3, #1
 800291c:	2300      	movne	r3, #0
 800291e:	b2db      	uxtb	r3, r3
 8002920:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	695b      	ldr	r3, [r3, #20]
 8002928:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800292c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002930:	bf0c      	ite	eq
 8002932:	2301      	moveq	r3, #1
 8002934:	2300      	movne	r3, #0
 8002936:	b2db      	uxtb	r3, r3
 8002938:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800293a:	e025      	b.n	8002988 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800293c:	f7fe fff2 	bl	8001924 <HAL_GetTick>
 8002940:	4602      	mov	r2, r0
 8002942:	69fb      	ldr	r3, [r7, #28]
 8002944:	1ad3      	subs	r3, r2, r3
 8002946:	683a      	ldr	r2, [r7, #0]
 8002948:	429a      	cmp	r2, r3
 800294a:	d302      	bcc.n	8002952 <HAL_I2C_IsDeviceReady+0x13a>
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	2b00      	cmp	r3, #0
 8002950:	d103      	bne.n	800295a <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	22a0      	movs	r2, #160	; 0xa0
 8002956:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	695b      	ldr	r3, [r3, #20]
 8002960:	f003 0302 	and.w	r3, r3, #2
 8002964:	2b02      	cmp	r3, #2
 8002966:	bf0c      	ite	eq
 8002968:	2301      	moveq	r3, #1
 800296a:	2300      	movne	r3, #0
 800296c:	b2db      	uxtb	r3, r3
 800296e:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	695b      	ldr	r3, [r3, #20]
 8002976:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800297a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800297e:	bf0c      	ite	eq
 8002980:	2301      	moveq	r3, #1
 8002982:	2300      	movne	r3, #0
 8002984:	b2db      	uxtb	r3, r3
 8002986:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800298e:	b2db      	uxtb	r3, r3
 8002990:	2ba0      	cmp	r3, #160	; 0xa0
 8002992:	d005      	beq.n	80029a0 <HAL_I2C_IsDeviceReady+0x188>
 8002994:	7dfb      	ldrb	r3, [r7, #23]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d102      	bne.n	80029a0 <HAL_I2C_IsDeviceReady+0x188>
 800299a:	7dbb      	ldrb	r3, [r7, #22]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d0cd      	beq.n	800293c <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	2220      	movs	r2, #32
 80029a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	695b      	ldr	r3, [r3, #20]
 80029ae:	f003 0302 	and.w	r3, r3, #2
 80029b2:	2b02      	cmp	r3, #2
 80029b4:	d129      	bne.n	8002a0a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	681a      	ldr	r2, [r3, #0]
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029c4:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80029c6:	2300      	movs	r3, #0
 80029c8:	613b      	str	r3, [r7, #16]
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	695b      	ldr	r3, [r3, #20]
 80029d0:	613b      	str	r3, [r7, #16]
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	699b      	ldr	r3, [r3, #24]
 80029d8:	613b      	str	r3, [r7, #16]
 80029da:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80029dc:	69fb      	ldr	r3, [r7, #28]
 80029de:	9300      	str	r3, [sp, #0]
 80029e0:	2319      	movs	r3, #25
 80029e2:	2201      	movs	r2, #1
 80029e4:	4921      	ldr	r1, [pc, #132]	; (8002a6c <HAL_I2C_IsDeviceReady+0x254>)
 80029e6:	68f8      	ldr	r0, [r7, #12]
 80029e8:	f000 f994 	bl	8002d14 <I2C_WaitOnFlagUntilTimeout>
 80029ec:	4603      	mov	r3, r0
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d001      	beq.n	80029f6 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80029f2:	2301      	movs	r3, #1
 80029f4:	e036      	b.n	8002a64 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	2220      	movs	r2, #32
 80029fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	2200      	movs	r2, #0
 8002a02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8002a06:	2300      	movs	r3, #0
 8002a08:	e02c      	b.n	8002a64 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	681a      	ldr	r2, [r3, #0]
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a18:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002a22:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002a24:	69fb      	ldr	r3, [r7, #28]
 8002a26:	9300      	str	r3, [sp, #0]
 8002a28:	2319      	movs	r3, #25
 8002a2a:	2201      	movs	r2, #1
 8002a2c:	490f      	ldr	r1, [pc, #60]	; (8002a6c <HAL_I2C_IsDeviceReady+0x254>)
 8002a2e:	68f8      	ldr	r0, [r7, #12]
 8002a30:	f000 f970 	bl	8002d14 <I2C_WaitOnFlagUntilTimeout>
 8002a34:	4603      	mov	r3, r0
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d001      	beq.n	8002a3e <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	e012      	b.n	8002a64 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8002a3e:	69bb      	ldr	r3, [r7, #24]
 8002a40:	3301      	adds	r3, #1
 8002a42:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002a44:	69ba      	ldr	r2, [r7, #24]
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	429a      	cmp	r2, r3
 8002a4a:	f4ff af32 	bcc.w	80028b2 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	2220      	movs	r2, #32
 8002a52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	2200      	movs	r2, #0
 8002a5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002a5e:	2301      	movs	r3, #1
 8002a60:	e000      	b.n	8002a64 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8002a62:	2302      	movs	r3, #2
  }
}
 8002a64:	4618      	mov	r0, r3
 8002a66:	3720      	adds	r7, #32
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	bd80      	pop	{r7, pc}
 8002a6c:	00100002 	.word	0x00100002
 8002a70:	ffff0000 	.word	0xffff0000

08002a74 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b088      	sub	sp, #32
 8002a78:	af02      	add	r7, sp, #8
 8002a7a:	60f8      	str	r0, [r7, #12]
 8002a7c:	607a      	str	r2, [r7, #4]
 8002a7e:	603b      	str	r3, [r7, #0]
 8002a80:	460b      	mov	r3, r1
 8002a82:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a88:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002a8a:	697b      	ldr	r3, [r7, #20]
 8002a8c:	2b08      	cmp	r3, #8
 8002a8e:	d006      	beq.n	8002a9e <I2C_MasterRequestWrite+0x2a>
 8002a90:	697b      	ldr	r3, [r7, #20]
 8002a92:	2b01      	cmp	r3, #1
 8002a94:	d003      	beq.n	8002a9e <I2C_MasterRequestWrite+0x2a>
 8002a96:	697b      	ldr	r3, [r7, #20]
 8002a98:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002a9c:	d108      	bne.n	8002ab0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	681a      	ldr	r2, [r3, #0]
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002aac:	601a      	str	r2, [r3, #0]
 8002aae:	e00b      	b.n	8002ac8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ab4:	2b12      	cmp	r3, #18
 8002ab6:	d107      	bne.n	8002ac8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	681a      	ldr	r2, [r3, #0]
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ac6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	9300      	str	r3, [sp, #0]
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2200      	movs	r2, #0
 8002ad0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002ad4:	68f8      	ldr	r0, [r7, #12]
 8002ad6:	f000 f91d 	bl	8002d14 <I2C_WaitOnFlagUntilTimeout>
 8002ada:	4603      	mov	r3, r0
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d00d      	beq.n	8002afc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002aea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002aee:	d103      	bne.n	8002af8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002af6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002af8:	2303      	movs	r3, #3
 8002afa:	e035      	b.n	8002b68 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	691b      	ldr	r3, [r3, #16]
 8002b00:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002b04:	d108      	bne.n	8002b18 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002b06:	897b      	ldrh	r3, [r7, #10]
 8002b08:	b2db      	uxtb	r3, r3
 8002b0a:	461a      	mov	r2, r3
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002b14:	611a      	str	r2, [r3, #16]
 8002b16:	e01b      	b.n	8002b50 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002b18:	897b      	ldrh	r3, [r7, #10]
 8002b1a:	11db      	asrs	r3, r3, #7
 8002b1c:	b2db      	uxtb	r3, r3
 8002b1e:	f003 0306 	and.w	r3, r3, #6
 8002b22:	b2db      	uxtb	r3, r3
 8002b24:	f063 030f 	orn	r3, r3, #15
 8002b28:	b2da      	uxtb	r2, r3
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	687a      	ldr	r2, [r7, #4]
 8002b34:	490e      	ldr	r1, [pc, #56]	; (8002b70 <I2C_MasterRequestWrite+0xfc>)
 8002b36:	68f8      	ldr	r0, [r7, #12]
 8002b38:	f000 f943 	bl	8002dc2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d001      	beq.n	8002b46 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002b42:	2301      	movs	r3, #1
 8002b44:	e010      	b.n	8002b68 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002b46:	897b      	ldrh	r3, [r7, #10]
 8002b48:	b2da      	uxtb	r2, r3
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	687a      	ldr	r2, [r7, #4]
 8002b54:	4907      	ldr	r1, [pc, #28]	; (8002b74 <I2C_MasterRequestWrite+0x100>)
 8002b56:	68f8      	ldr	r0, [r7, #12]
 8002b58:	f000 f933 	bl	8002dc2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d001      	beq.n	8002b66 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002b62:	2301      	movs	r3, #1
 8002b64:	e000      	b.n	8002b68 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002b66:	2300      	movs	r3, #0
}
 8002b68:	4618      	mov	r0, r3
 8002b6a:	3718      	adds	r7, #24
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	bd80      	pop	{r7, pc}
 8002b70:	00010008 	.word	0x00010008
 8002b74:	00010002 	.word	0x00010002

08002b78 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b088      	sub	sp, #32
 8002b7c:	af02      	add	r7, sp, #8
 8002b7e:	60f8      	str	r0, [r7, #12]
 8002b80:	607a      	str	r2, [r7, #4]
 8002b82:	603b      	str	r3, [r7, #0]
 8002b84:	460b      	mov	r3, r1
 8002b86:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b8c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	681a      	ldr	r2, [r3, #0]
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002b9c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002b9e:	697b      	ldr	r3, [r7, #20]
 8002ba0:	2b08      	cmp	r3, #8
 8002ba2:	d006      	beq.n	8002bb2 <I2C_MasterRequestRead+0x3a>
 8002ba4:	697b      	ldr	r3, [r7, #20]
 8002ba6:	2b01      	cmp	r3, #1
 8002ba8:	d003      	beq.n	8002bb2 <I2C_MasterRequestRead+0x3a>
 8002baa:	697b      	ldr	r3, [r7, #20]
 8002bac:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002bb0:	d108      	bne.n	8002bc4 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	681a      	ldr	r2, [r3, #0]
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002bc0:	601a      	str	r2, [r3, #0]
 8002bc2:	e00b      	b.n	8002bdc <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bc8:	2b11      	cmp	r3, #17
 8002bca:	d107      	bne.n	8002bdc <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	681a      	ldr	r2, [r3, #0]
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002bda:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	9300      	str	r3, [sp, #0]
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2200      	movs	r2, #0
 8002be4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002be8:	68f8      	ldr	r0, [r7, #12]
 8002bea:	f000 f893 	bl	8002d14 <I2C_WaitOnFlagUntilTimeout>
 8002bee:	4603      	mov	r3, r0
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d00d      	beq.n	8002c10 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bfe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c02:	d103      	bne.n	8002c0c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c0a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002c0c:	2303      	movs	r3, #3
 8002c0e:	e079      	b.n	8002d04 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	691b      	ldr	r3, [r3, #16]
 8002c14:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002c18:	d108      	bne.n	8002c2c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002c1a:	897b      	ldrh	r3, [r7, #10]
 8002c1c:	b2db      	uxtb	r3, r3
 8002c1e:	f043 0301 	orr.w	r3, r3, #1
 8002c22:	b2da      	uxtb	r2, r3
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	611a      	str	r2, [r3, #16]
 8002c2a:	e05f      	b.n	8002cec <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002c2c:	897b      	ldrh	r3, [r7, #10]
 8002c2e:	11db      	asrs	r3, r3, #7
 8002c30:	b2db      	uxtb	r3, r3
 8002c32:	f003 0306 	and.w	r3, r3, #6
 8002c36:	b2db      	uxtb	r3, r3
 8002c38:	f063 030f 	orn	r3, r3, #15
 8002c3c:	b2da      	uxtb	r2, r3
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	687a      	ldr	r2, [r7, #4]
 8002c48:	4930      	ldr	r1, [pc, #192]	; (8002d0c <I2C_MasterRequestRead+0x194>)
 8002c4a:	68f8      	ldr	r0, [r7, #12]
 8002c4c:	f000 f8b9 	bl	8002dc2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002c50:	4603      	mov	r3, r0
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d001      	beq.n	8002c5a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8002c56:	2301      	movs	r3, #1
 8002c58:	e054      	b.n	8002d04 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002c5a:	897b      	ldrh	r3, [r7, #10]
 8002c5c:	b2da      	uxtb	r2, r3
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	687a      	ldr	r2, [r7, #4]
 8002c68:	4929      	ldr	r1, [pc, #164]	; (8002d10 <I2C_MasterRequestRead+0x198>)
 8002c6a:	68f8      	ldr	r0, [r7, #12]
 8002c6c:	f000 f8a9 	bl	8002dc2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002c70:	4603      	mov	r3, r0
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d001      	beq.n	8002c7a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8002c76:	2301      	movs	r3, #1
 8002c78:	e044      	b.n	8002d04 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	613b      	str	r3, [r7, #16]
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	695b      	ldr	r3, [r3, #20]
 8002c84:	613b      	str	r3, [r7, #16]
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	699b      	ldr	r3, [r3, #24]
 8002c8c:	613b      	str	r3, [r7, #16]
 8002c8e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	681a      	ldr	r2, [r3, #0]
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c9e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	9300      	str	r3, [sp, #0]
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002cac:	68f8      	ldr	r0, [r7, #12]
 8002cae:	f000 f831 	bl	8002d14 <I2C_WaitOnFlagUntilTimeout>
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d00d      	beq.n	8002cd4 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cc2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002cc6:	d103      	bne.n	8002cd0 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002cce:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8002cd0:	2303      	movs	r3, #3
 8002cd2:	e017      	b.n	8002d04 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002cd4:	897b      	ldrh	r3, [r7, #10]
 8002cd6:	11db      	asrs	r3, r3, #7
 8002cd8:	b2db      	uxtb	r3, r3
 8002cda:	f003 0306 	and.w	r3, r3, #6
 8002cde:	b2db      	uxtb	r3, r3
 8002ce0:	f063 030e 	orn	r3, r3, #14
 8002ce4:	b2da      	uxtb	r2, r3
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	687a      	ldr	r2, [r7, #4]
 8002cf0:	4907      	ldr	r1, [pc, #28]	; (8002d10 <I2C_MasterRequestRead+0x198>)
 8002cf2:	68f8      	ldr	r0, [r7, #12]
 8002cf4:	f000 f865 	bl	8002dc2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d001      	beq.n	8002d02 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8002cfe:	2301      	movs	r3, #1
 8002d00:	e000      	b.n	8002d04 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8002d02:	2300      	movs	r3, #0
}
 8002d04:	4618      	mov	r0, r3
 8002d06:	3718      	adds	r7, #24
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	bd80      	pop	{r7, pc}
 8002d0c:	00010008 	.word	0x00010008
 8002d10:	00010002 	.word	0x00010002

08002d14 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b084      	sub	sp, #16
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	60f8      	str	r0, [r7, #12]
 8002d1c:	60b9      	str	r1, [r7, #8]
 8002d1e:	603b      	str	r3, [r7, #0]
 8002d20:	4613      	mov	r3, r2
 8002d22:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002d24:	e025      	b.n	8002d72 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d2c:	d021      	beq.n	8002d72 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d2e:	f7fe fdf9 	bl	8001924 <HAL_GetTick>
 8002d32:	4602      	mov	r2, r0
 8002d34:	69bb      	ldr	r3, [r7, #24]
 8002d36:	1ad3      	subs	r3, r2, r3
 8002d38:	683a      	ldr	r2, [r7, #0]
 8002d3a:	429a      	cmp	r2, r3
 8002d3c:	d302      	bcc.n	8002d44 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d116      	bne.n	8002d72 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	2200      	movs	r2, #0
 8002d48:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	2220      	movs	r2, #32
 8002d4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	2200      	movs	r2, #0
 8002d56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d5e:	f043 0220 	orr.w	r2, r3, #32
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	2200      	movs	r2, #0
 8002d6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002d6e:	2301      	movs	r3, #1
 8002d70:	e023      	b.n	8002dba <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002d72:	68bb      	ldr	r3, [r7, #8]
 8002d74:	0c1b      	lsrs	r3, r3, #16
 8002d76:	b2db      	uxtb	r3, r3
 8002d78:	2b01      	cmp	r3, #1
 8002d7a:	d10d      	bne.n	8002d98 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	695b      	ldr	r3, [r3, #20]
 8002d82:	43da      	mvns	r2, r3
 8002d84:	68bb      	ldr	r3, [r7, #8]
 8002d86:	4013      	ands	r3, r2
 8002d88:	b29b      	uxth	r3, r3
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	bf0c      	ite	eq
 8002d8e:	2301      	moveq	r3, #1
 8002d90:	2300      	movne	r3, #0
 8002d92:	b2db      	uxtb	r3, r3
 8002d94:	461a      	mov	r2, r3
 8002d96:	e00c      	b.n	8002db2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	699b      	ldr	r3, [r3, #24]
 8002d9e:	43da      	mvns	r2, r3
 8002da0:	68bb      	ldr	r3, [r7, #8]
 8002da2:	4013      	ands	r3, r2
 8002da4:	b29b      	uxth	r3, r3
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	bf0c      	ite	eq
 8002daa:	2301      	moveq	r3, #1
 8002dac:	2300      	movne	r3, #0
 8002dae:	b2db      	uxtb	r3, r3
 8002db0:	461a      	mov	r2, r3
 8002db2:	79fb      	ldrb	r3, [r7, #7]
 8002db4:	429a      	cmp	r2, r3
 8002db6:	d0b6      	beq.n	8002d26 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002db8:	2300      	movs	r3, #0
}
 8002dba:	4618      	mov	r0, r3
 8002dbc:	3710      	adds	r7, #16
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bd80      	pop	{r7, pc}

08002dc2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002dc2:	b580      	push	{r7, lr}
 8002dc4:	b084      	sub	sp, #16
 8002dc6:	af00      	add	r7, sp, #0
 8002dc8:	60f8      	str	r0, [r7, #12]
 8002dca:	60b9      	str	r1, [r7, #8]
 8002dcc:	607a      	str	r2, [r7, #4]
 8002dce:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002dd0:	e051      	b.n	8002e76 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	695b      	ldr	r3, [r3, #20]
 8002dd8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ddc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002de0:	d123      	bne.n	8002e2a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	681a      	ldr	r2, [r3, #0]
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002df0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002dfa:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	2200      	movs	r2, #0
 8002e00:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	2220      	movs	r2, #32
 8002e06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e16:	f043 0204 	orr.w	r2, r3, #4
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	2200      	movs	r2, #0
 8002e22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002e26:	2301      	movs	r3, #1
 8002e28:	e046      	b.n	8002eb8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e30:	d021      	beq.n	8002e76 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e32:	f7fe fd77 	bl	8001924 <HAL_GetTick>
 8002e36:	4602      	mov	r2, r0
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	1ad3      	subs	r3, r2, r3
 8002e3c:	687a      	ldr	r2, [r7, #4]
 8002e3e:	429a      	cmp	r2, r3
 8002e40:	d302      	bcc.n	8002e48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d116      	bne.n	8002e76 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	2220      	movs	r2, #32
 8002e52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	2200      	movs	r2, #0
 8002e5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e62:	f043 0220 	orr.w	r2, r3, #32
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002e72:	2301      	movs	r3, #1
 8002e74:	e020      	b.n	8002eb8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002e76:	68bb      	ldr	r3, [r7, #8]
 8002e78:	0c1b      	lsrs	r3, r3, #16
 8002e7a:	b2db      	uxtb	r3, r3
 8002e7c:	2b01      	cmp	r3, #1
 8002e7e:	d10c      	bne.n	8002e9a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	695b      	ldr	r3, [r3, #20]
 8002e86:	43da      	mvns	r2, r3
 8002e88:	68bb      	ldr	r3, [r7, #8]
 8002e8a:	4013      	ands	r3, r2
 8002e8c:	b29b      	uxth	r3, r3
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	bf14      	ite	ne
 8002e92:	2301      	movne	r3, #1
 8002e94:	2300      	moveq	r3, #0
 8002e96:	b2db      	uxtb	r3, r3
 8002e98:	e00b      	b.n	8002eb2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	699b      	ldr	r3, [r3, #24]
 8002ea0:	43da      	mvns	r2, r3
 8002ea2:	68bb      	ldr	r3, [r7, #8]
 8002ea4:	4013      	ands	r3, r2
 8002ea6:	b29b      	uxth	r3, r3
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	bf14      	ite	ne
 8002eac:	2301      	movne	r3, #1
 8002eae:	2300      	moveq	r3, #0
 8002eb0:	b2db      	uxtb	r3, r3
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d18d      	bne.n	8002dd2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002eb6:	2300      	movs	r3, #0
}
 8002eb8:	4618      	mov	r0, r3
 8002eba:	3710      	adds	r7, #16
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	bd80      	pop	{r7, pc}

08002ec0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b084      	sub	sp, #16
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	60f8      	str	r0, [r7, #12]
 8002ec8:	60b9      	str	r1, [r7, #8]
 8002eca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002ecc:	e02d      	b.n	8002f2a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002ece:	68f8      	ldr	r0, [r7, #12]
 8002ed0:	f000 f8ce 	bl	8003070 <I2C_IsAcknowledgeFailed>
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d001      	beq.n	8002ede <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002eda:	2301      	movs	r3, #1
 8002edc:	e02d      	b.n	8002f3a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ede:	68bb      	ldr	r3, [r7, #8]
 8002ee0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ee4:	d021      	beq.n	8002f2a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ee6:	f7fe fd1d 	bl	8001924 <HAL_GetTick>
 8002eea:	4602      	mov	r2, r0
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	1ad3      	subs	r3, r2, r3
 8002ef0:	68ba      	ldr	r2, [r7, #8]
 8002ef2:	429a      	cmp	r2, r3
 8002ef4:	d302      	bcc.n	8002efc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002ef6:	68bb      	ldr	r3, [r7, #8]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d116      	bne.n	8002f2a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	2200      	movs	r2, #0
 8002f00:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	2220      	movs	r2, #32
 8002f06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f16:	f043 0220 	orr.w	r2, r3, #32
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	2200      	movs	r2, #0
 8002f22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002f26:	2301      	movs	r3, #1
 8002f28:	e007      	b.n	8002f3a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	695b      	ldr	r3, [r3, #20]
 8002f30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f34:	2b80      	cmp	r3, #128	; 0x80
 8002f36:	d1ca      	bne.n	8002ece <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002f38:	2300      	movs	r3, #0
}
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	3710      	adds	r7, #16
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bd80      	pop	{r7, pc}

08002f42 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002f42:	b580      	push	{r7, lr}
 8002f44:	b084      	sub	sp, #16
 8002f46:	af00      	add	r7, sp, #0
 8002f48:	60f8      	str	r0, [r7, #12]
 8002f4a:	60b9      	str	r1, [r7, #8]
 8002f4c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002f4e:	e02d      	b.n	8002fac <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002f50:	68f8      	ldr	r0, [r7, #12]
 8002f52:	f000 f88d 	bl	8003070 <I2C_IsAcknowledgeFailed>
 8002f56:	4603      	mov	r3, r0
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d001      	beq.n	8002f60 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	e02d      	b.n	8002fbc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f60:	68bb      	ldr	r3, [r7, #8]
 8002f62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f66:	d021      	beq.n	8002fac <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f68:	f7fe fcdc 	bl	8001924 <HAL_GetTick>
 8002f6c:	4602      	mov	r2, r0
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	1ad3      	subs	r3, r2, r3
 8002f72:	68ba      	ldr	r2, [r7, #8]
 8002f74:	429a      	cmp	r2, r3
 8002f76:	d302      	bcc.n	8002f7e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002f78:	68bb      	ldr	r3, [r7, #8]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d116      	bne.n	8002fac <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	2200      	movs	r2, #0
 8002f82:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	2220      	movs	r2, #32
 8002f88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	2200      	movs	r2, #0
 8002f90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f98:	f043 0220 	orr.w	r2, r3, #32
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002fa8:	2301      	movs	r3, #1
 8002faa:	e007      	b.n	8002fbc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	695b      	ldr	r3, [r3, #20]
 8002fb2:	f003 0304 	and.w	r3, r3, #4
 8002fb6:	2b04      	cmp	r3, #4
 8002fb8:	d1ca      	bne.n	8002f50 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002fba:	2300      	movs	r3, #0
}
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	3710      	adds	r7, #16
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	bd80      	pop	{r7, pc}

08002fc4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b084      	sub	sp, #16
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	60f8      	str	r0, [r7, #12]
 8002fcc:	60b9      	str	r1, [r7, #8]
 8002fce:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002fd0:	e042      	b.n	8003058 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	695b      	ldr	r3, [r3, #20]
 8002fd8:	f003 0310 	and.w	r3, r3, #16
 8002fdc:	2b10      	cmp	r3, #16
 8002fde:	d119      	bne.n	8003014 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f06f 0210 	mvn.w	r2, #16
 8002fe8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	2200      	movs	r2, #0
 8002fee:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	2220      	movs	r2, #32
 8002ff4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	2200      	movs	r2, #0
 800300c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003010:	2301      	movs	r3, #1
 8003012:	e029      	b.n	8003068 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003014:	f7fe fc86 	bl	8001924 <HAL_GetTick>
 8003018:	4602      	mov	r2, r0
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	1ad3      	subs	r3, r2, r3
 800301e:	68ba      	ldr	r2, [r7, #8]
 8003020:	429a      	cmp	r2, r3
 8003022:	d302      	bcc.n	800302a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003024:	68bb      	ldr	r3, [r7, #8]
 8003026:	2b00      	cmp	r3, #0
 8003028:	d116      	bne.n	8003058 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	2200      	movs	r2, #0
 800302e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	2220      	movs	r2, #32
 8003034:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	2200      	movs	r2, #0
 800303c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003044:	f043 0220 	orr.w	r2, r3, #32
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	2200      	movs	r2, #0
 8003050:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003054:	2301      	movs	r3, #1
 8003056:	e007      	b.n	8003068 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	695b      	ldr	r3, [r3, #20]
 800305e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003062:	2b40      	cmp	r3, #64	; 0x40
 8003064:	d1b5      	bne.n	8002fd2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003066:	2300      	movs	r3, #0
}
 8003068:	4618      	mov	r0, r3
 800306a:	3710      	adds	r7, #16
 800306c:	46bd      	mov	sp, r7
 800306e:	bd80      	pop	{r7, pc}

08003070 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003070:	b480      	push	{r7}
 8003072:	b083      	sub	sp, #12
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	695b      	ldr	r3, [r3, #20]
 800307e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003082:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003086:	d11b      	bne.n	80030c0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003090:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2200      	movs	r2, #0
 8003096:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2220      	movs	r2, #32
 800309c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2200      	movs	r2, #0
 80030a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ac:	f043 0204 	orr.w	r2, r3, #4
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2200      	movs	r2, #0
 80030b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80030bc:	2301      	movs	r3, #1
 80030be:	e000      	b.n	80030c2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80030c0:	2300      	movs	r3, #0
}
 80030c2:	4618      	mov	r0, r3
 80030c4:	370c      	adds	r7, #12
 80030c6:	46bd      	mov	sp, r7
 80030c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030cc:	4770      	bx	lr

080030ce <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80030ce:	b5f0      	push	{r4, r5, r6, r7, lr}
 80030d0:	b08f      	sub	sp, #60	; 0x3c
 80030d2:	af0a      	add	r7, sp, #40	; 0x28
 80030d4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d101      	bne.n	80030e0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80030dc:	2301      	movs	r3, #1
 80030de:	e10f      	b.n	8003300 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80030ec:	b2db      	uxtb	r3, r3
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d106      	bne.n	8003100 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2200      	movs	r2, #0
 80030f6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80030fa:	6878      	ldr	r0, [r7, #4]
 80030fc:	f004 ffae 	bl	800805c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2203      	movs	r2, #3
 8003104:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003108:	68bb      	ldr	r3, [r7, #8]
 800310a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800310c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003110:	2b00      	cmp	r3, #0
 8003112:	d102      	bne.n	800311a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2200      	movs	r2, #0
 8003118:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4618      	mov	r0, r3
 8003120:	f001 fea1 	bl	8004e66 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	603b      	str	r3, [r7, #0]
 800312a:	687e      	ldr	r6, [r7, #4]
 800312c:	466d      	mov	r5, sp
 800312e:	f106 0410 	add.w	r4, r6, #16
 8003132:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003134:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003136:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003138:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800313a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800313e:	e885 0003 	stmia.w	r5, {r0, r1}
 8003142:	1d33      	adds	r3, r6, #4
 8003144:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003146:	6838      	ldr	r0, [r7, #0]
 8003148:	f001 fd78 	bl	8004c3c <USB_CoreInit>
 800314c:	4603      	mov	r3, r0
 800314e:	2b00      	cmp	r3, #0
 8003150:	d005      	beq.n	800315e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2202      	movs	r2, #2
 8003156:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800315a:	2301      	movs	r3, #1
 800315c:	e0d0      	b.n	8003300 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	2100      	movs	r1, #0
 8003164:	4618      	mov	r0, r3
 8003166:	f001 fe8f 	bl	8004e88 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800316a:	2300      	movs	r3, #0
 800316c:	73fb      	strb	r3, [r7, #15]
 800316e:	e04a      	b.n	8003206 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003170:	7bfa      	ldrb	r2, [r7, #15]
 8003172:	6879      	ldr	r1, [r7, #4]
 8003174:	4613      	mov	r3, r2
 8003176:	00db      	lsls	r3, r3, #3
 8003178:	1a9b      	subs	r3, r3, r2
 800317a:	009b      	lsls	r3, r3, #2
 800317c:	440b      	add	r3, r1
 800317e:	333d      	adds	r3, #61	; 0x3d
 8003180:	2201      	movs	r2, #1
 8003182:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003184:	7bfa      	ldrb	r2, [r7, #15]
 8003186:	6879      	ldr	r1, [r7, #4]
 8003188:	4613      	mov	r3, r2
 800318a:	00db      	lsls	r3, r3, #3
 800318c:	1a9b      	subs	r3, r3, r2
 800318e:	009b      	lsls	r3, r3, #2
 8003190:	440b      	add	r3, r1
 8003192:	333c      	adds	r3, #60	; 0x3c
 8003194:	7bfa      	ldrb	r2, [r7, #15]
 8003196:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003198:	7bfa      	ldrb	r2, [r7, #15]
 800319a:	7bfb      	ldrb	r3, [r7, #15]
 800319c:	b298      	uxth	r0, r3
 800319e:	6879      	ldr	r1, [r7, #4]
 80031a0:	4613      	mov	r3, r2
 80031a2:	00db      	lsls	r3, r3, #3
 80031a4:	1a9b      	subs	r3, r3, r2
 80031a6:	009b      	lsls	r3, r3, #2
 80031a8:	440b      	add	r3, r1
 80031aa:	3342      	adds	r3, #66	; 0x42
 80031ac:	4602      	mov	r2, r0
 80031ae:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80031b0:	7bfa      	ldrb	r2, [r7, #15]
 80031b2:	6879      	ldr	r1, [r7, #4]
 80031b4:	4613      	mov	r3, r2
 80031b6:	00db      	lsls	r3, r3, #3
 80031b8:	1a9b      	subs	r3, r3, r2
 80031ba:	009b      	lsls	r3, r3, #2
 80031bc:	440b      	add	r3, r1
 80031be:	333f      	adds	r3, #63	; 0x3f
 80031c0:	2200      	movs	r2, #0
 80031c2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80031c4:	7bfa      	ldrb	r2, [r7, #15]
 80031c6:	6879      	ldr	r1, [r7, #4]
 80031c8:	4613      	mov	r3, r2
 80031ca:	00db      	lsls	r3, r3, #3
 80031cc:	1a9b      	subs	r3, r3, r2
 80031ce:	009b      	lsls	r3, r3, #2
 80031d0:	440b      	add	r3, r1
 80031d2:	3344      	adds	r3, #68	; 0x44
 80031d4:	2200      	movs	r2, #0
 80031d6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80031d8:	7bfa      	ldrb	r2, [r7, #15]
 80031da:	6879      	ldr	r1, [r7, #4]
 80031dc:	4613      	mov	r3, r2
 80031de:	00db      	lsls	r3, r3, #3
 80031e0:	1a9b      	subs	r3, r3, r2
 80031e2:	009b      	lsls	r3, r3, #2
 80031e4:	440b      	add	r3, r1
 80031e6:	3348      	adds	r3, #72	; 0x48
 80031e8:	2200      	movs	r2, #0
 80031ea:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80031ec:	7bfa      	ldrb	r2, [r7, #15]
 80031ee:	6879      	ldr	r1, [r7, #4]
 80031f0:	4613      	mov	r3, r2
 80031f2:	00db      	lsls	r3, r3, #3
 80031f4:	1a9b      	subs	r3, r3, r2
 80031f6:	009b      	lsls	r3, r3, #2
 80031f8:	440b      	add	r3, r1
 80031fa:	3350      	adds	r3, #80	; 0x50
 80031fc:	2200      	movs	r2, #0
 80031fe:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003200:	7bfb      	ldrb	r3, [r7, #15]
 8003202:	3301      	adds	r3, #1
 8003204:	73fb      	strb	r3, [r7, #15]
 8003206:	7bfa      	ldrb	r2, [r7, #15]
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	429a      	cmp	r2, r3
 800320e:	d3af      	bcc.n	8003170 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003210:	2300      	movs	r3, #0
 8003212:	73fb      	strb	r3, [r7, #15]
 8003214:	e044      	b.n	80032a0 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003216:	7bfa      	ldrb	r2, [r7, #15]
 8003218:	6879      	ldr	r1, [r7, #4]
 800321a:	4613      	mov	r3, r2
 800321c:	00db      	lsls	r3, r3, #3
 800321e:	1a9b      	subs	r3, r3, r2
 8003220:	009b      	lsls	r3, r3, #2
 8003222:	440b      	add	r3, r1
 8003224:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8003228:	2200      	movs	r2, #0
 800322a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800322c:	7bfa      	ldrb	r2, [r7, #15]
 800322e:	6879      	ldr	r1, [r7, #4]
 8003230:	4613      	mov	r3, r2
 8003232:	00db      	lsls	r3, r3, #3
 8003234:	1a9b      	subs	r3, r3, r2
 8003236:	009b      	lsls	r3, r3, #2
 8003238:	440b      	add	r3, r1
 800323a:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800323e:	7bfa      	ldrb	r2, [r7, #15]
 8003240:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003242:	7bfa      	ldrb	r2, [r7, #15]
 8003244:	6879      	ldr	r1, [r7, #4]
 8003246:	4613      	mov	r3, r2
 8003248:	00db      	lsls	r3, r3, #3
 800324a:	1a9b      	subs	r3, r3, r2
 800324c:	009b      	lsls	r3, r3, #2
 800324e:	440b      	add	r3, r1
 8003250:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8003254:	2200      	movs	r2, #0
 8003256:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003258:	7bfa      	ldrb	r2, [r7, #15]
 800325a:	6879      	ldr	r1, [r7, #4]
 800325c:	4613      	mov	r3, r2
 800325e:	00db      	lsls	r3, r3, #3
 8003260:	1a9b      	subs	r3, r3, r2
 8003262:	009b      	lsls	r3, r3, #2
 8003264:	440b      	add	r3, r1
 8003266:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800326a:	2200      	movs	r2, #0
 800326c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800326e:	7bfa      	ldrb	r2, [r7, #15]
 8003270:	6879      	ldr	r1, [r7, #4]
 8003272:	4613      	mov	r3, r2
 8003274:	00db      	lsls	r3, r3, #3
 8003276:	1a9b      	subs	r3, r3, r2
 8003278:	009b      	lsls	r3, r3, #2
 800327a:	440b      	add	r3, r1
 800327c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003280:	2200      	movs	r2, #0
 8003282:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003284:	7bfa      	ldrb	r2, [r7, #15]
 8003286:	6879      	ldr	r1, [r7, #4]
 8003288:	4613      	mov	r3, r2
 800328a:	00db      	lsls	r3, r3, #3
 800328c:	1a9b      	subs	r3, r3, r2
 800328e:	009b      	lsls	r3, r3, #2
 8003290:	440b      	add	r3, r1
 8003292:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003296:	2200      	movs	r2, #0
 8003298:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800329a:	7bfb      	ldrb	r3, [r7, #15]
 800329c:	3301      	adds	r3, #1
 800329e:	73fb      	strb	r3, [r7, #15]
 80032a0:	7bfa      	ldrb	r2, [r7, #15]
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	429a      	cmp	r2, r3
 80032a8:	d3b5      	bcc.n	8003216 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	603b      	str	r3, [r7, #0]
 80032b0:	687e      	ldr	r6, [r7, #4]
 80032b2:	466d      	mov	r5, sp
 80032b4:	f106 0410 	add.w	r4, r6, #16
 80032b8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80032ba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80032bc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80032be:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80032c0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80032c4:	e885 0003 	stmia.w	r5, {r0, r1}
 80032c8:	1d33      	adds	r3, r6, #4
 80032ca:	cb0e      	ldmia	r3, {r1, r2, r3}
 80032cc:	6838      	ldr	r0, [r7, #0]
 80032ce:	f001 fe27 	bl	8004f20 <USB_DevInit>
 80032d2:	4603      	mov	r3, r0
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d005      	beq.n	80032e4 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2202      	movs	r2, #2
 80032dc:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80032e0:	2301      	movs	r3, #1
 80032e2:	e00d      	b.n	8003300 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2200      	movs	r2, #0
 80032e8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2201      	movs	r2, #1
 80032f0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	4618      	mov	r0, r3
 80032fa:	f002 fea3 	bl	8006044 <USB_DevDisconnect>

  return HAL_OK;
 80032fe:	2300      	movs	r3, #0
}
 8003300:	4618      	mov	r0, r3
 8003302:	3714      	adds	r7, #20
 8003304:	46bd      	mov	sp, r7
 8003306:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003308 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b084      	sub	sp, #16
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800331c:	2b01      	cmp	r3, #1
 800331e:	d101      	bne.n	8003324 <HAL_PCD_Start+0x1c>
 8003320:	2302      	movs	r3, #2
 8003322:	e020      	b.n	8003366 <HAL_PCD_Start+0x5e>
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2201      	movs	r2, #1
 8003328:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003330:	2b01      	cmp	r3, #1
 8003332:	d109      	bne.n	8003348 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003338:	2b01      	cmp	r3, #1
 800333a:	d005      	beq.n	8003348 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003340:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4618      	mov	r0, r3
 800334e:	f001 fd79 	bl	8004e44 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	4618      	mov	r0, r3
 8003358:	f002 fe53 	bl	8006002 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2200      	movs	r2, #0
 8003360:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003364:	2300      	movs	r3, #0
}
 8003366:	4618      	mov	r0, r3
 8003368:	3710      	adds	r7, #16
 800336a:	46bd      	mov	sp, r7
 800336c:	bd80      	pop	{r7, pc}

0800336e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800336e:	b590      	push	{r4, r7, lr}
 8003370:	b08d      	sub	sp, #52	; 0x34
 8003372:	af00      	add	r7, sp, #0
 8003374:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800337c:	6a3b      	ldr	r3, [r7, #32]
 800337e:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	4618      	mov	r0, r3
 8003386:	f002 ff11 	bl	80061ac <USB_GetMode>
 800338a:	4603      	mov	r3, r0
 800338c:	2b00      	cmp	r3, #0
 800338e:	f040 839d 	bne.w	8003acc <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4618      	mov	r0, r3
 8003398:	f002 fe75 	bl	8006086 <USB_ReadInterrupts>
 800339c:	4603      	mov	r3, r0
 800339e:	2b00      	cmp	r3, #0
 80033a0:	f000 8393 	beq.w	8003aca <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4618      	mov	r0, r3
 80033aa:	f002 fe6c 	bl	8006086 <USB_ReadInterrupts>
 80033ae:	4603      	mov	r3, r0
 80033b0:	f003 0302 	and.w	r3, r3, #2
 80033b4:	2b02      	cmp	r3, #2
 80033b6:	d107      	bne.n	80033c8 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	695a      	ldr	r2, [r3, #20]
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f002 0202 	and.w	r2, r2, #2
 80033c6:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4618      	mov	r0, r3
 80033ce:	f002 fe5a 	bl	8006086 <USB_ReadInterrupts>
 80033d2:	4603      	mov	r3, r0
 80033d4:	f003 0310 	and.w	r3, r3, #16
 80033d8:	2b10      	cmp	r3, #16
 80033da:	d161      	bne.n	80034a0 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	699a      	ldr	r2, [r3, #24]
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f022 0210 	bic.w	r2, r2, #16
 80033ea:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80033ec:	6a3b      	ldr	r3, [r7, #32]
 80033ee:	6a1b      	ldr	r3, [r3, #32]
 80033f0:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80033f2:	69bb      	ldr	r3, [r7, #24]
 80033f4:	f003 020f 	and.w	r2, r3, #15
 80033f8:	4613      	mov	r3, r2
 80033fa:	00db      	lsls	r3, r3, #3
 80033fc:	1a9b      	subs	r3, r3, r2
 80033fe:	009b      	lsls	r3, r3, #2
 8003400:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003404:	687a      	ldr	r2, [r7, #4]
 8003406:	4413      	add	r3, r2
 8003408:	3304      	adds	r3, #4
 800340a:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800340c:	69bb      	ldr	r3, [r7, #24]
 800340e:	0c5b      	lsrs	r3, r3, #17
 8003410:	f003 030f 	and.w	r3, r3, #15
 8003414:	2b02      	cmp	r3, #2
 8003416:	d124      	bne.n	8003462 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003418:	69ba      	ldr	r2, [r7, #24]
 800341a:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800341e:	4013      	ands	r3, r2
 8003420:	2b00      	cmp	r3, #0
 8003422:	d035      	beq.n	8003490 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003424:	697b      	ldr	r3, [r7, #20]
 8003426:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003428:	69bb      	ldr	r3, [r7, #24]
 800342a:	091b      	lsrs	r3, r3, #4
 800342c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800342e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003432:	b29b      	uxth	r3, r3
 8003434:	461a      	mov	r2, r3
 8003436:	6a38      	ldr	r0, [r7, #32]
 8003438:	f002 fc91 	bl	8005d5e <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800343c:	697b      	ldr	r3, [r7, #20]
 800343e:	68da      	ldr	r2, [r3, #12]
 8003440:	69bb      	ldr	r3, [r7, #24]
 8003442:	091b      	lsrs	r3, r3, #4
 8003444:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003448:	441a      	add	r2, r3
 800344a:	697b      	ldr	r3, [r7, #20]
 800344c:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800344e:	697b      	ldr	r3, [r7, #20]
 8003450:	699a      	ldr	r2, [r3, #24]
 8003452:	69bb      	ldr	r3, [r7, #24]
 8003454:	091b      	lsrs	r3, r3, #4
 8003456:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800345a:	441a      	add	r2, r3
 800345c:	697b      	ldr	r3, [r7, #20]
 800345e:	619a      	str	r2, [r3, #24]
 8003460:	e016      	b.n	8003490 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8003462:	69bb      	ldr	r3, [r7, #24]
 8003464:	0c5b      	lsrs	r3, r3, #17
 8003466:	f003 030f 	and.w	r3, r3, #15
 800346a:	2b06      	cmp	r3, #6
 800346c:	d110      	bne.n	8003490 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003474:	2208      	movs	r2, #8
 8003476:	4619      	mov	r1, r3
 8003478:	6a38      	ldr	r0, [r7, #32]
 800347a:	f002 fc70 	bl	8005d5e <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800347e:	697b      	ldr	r3, [r7, #20]
 8003480:	699a      	ldr	r2, [r3, #24]
 8003482:	69bb      	ldr	r3, [r7, #24]
 8003484:	091b      	lsrs	r3, r3, #4
 8003486:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800348a:	441a      	add	r2, r3
 800348c:	697b      	ldr	r3, [r7, #20]
 800348e:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	699a      	ldr	r2, [r3, #24]
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f042 0210 	orr.w	r2, r2, #16
 800349e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4618      	mov	r0, r3
 80034a6:	f002 fdee 	bl	8006086 <USB_ReadInterrupts>
 80034aa:	4603      	mov	r3, r0
 80034ac:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80034b0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80034b4:	d16e      	bne.n	8003594 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 80034b6:	2300      	movs	r3, #0
 80034b8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4618      	mov	r0, r3
 80034c0:	f002 fdf4 	bl	80060ac <USB_ReadDevAllOutEpInterrupt>
 80034c4:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80034c6:	e062      	b.n	800358e <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 80034c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034ca:	f003 0301 	and.w	r3, r3, #1
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d057      	beq.n	8003582 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034d8:	b2d2      	uxtb	r2, r2
 80034da:	4611      	mov	r1, r2
 80034dc:	4618      	mov	r0, r3
 80034de:	f002 fe19 	bl	8006114 <USB_ReadDevOutEPInterrupt>
 80034e2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80034e4:	693b      	ldr	r3, [r7, #16]
 80034e6:	f003 0301 	and.w	r3, r3, #1
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d00c      	beq.n	8003508 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80034ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034f0:	015a      	lsls	r2, r3, #5
 80034f2:	69fb      	ldr	r3, [r7, #28]
 80034f4:	4413      	add	r3, r2
 80034f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034fa:	461a      	mov	r2, r3
 80034fc:	2301      	movs	r3, #1
 80034fe:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003500:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003502:	6878      	ldr	r0, [r7, #4]
 8003504:	f000 fdb0 	bl	8004068 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003508:	693b      	ldr	r3, [r7, #16]
 800350a:	f003 0308 	and.w	r3, r3, #8
 800350e:	2b00      	cmp	r3, #0
 8003510:	d00c      	beq.n	800352c <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003514:	015a      	lsls	r2, r3, #5
 8003516:	69fb      	ldr	r3, [r7, #28]
 8003518:	4413      	add	r3, r2
 800351a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800351e:	461a      	mov	r2, r3
 8003520:	2308      	movs	r3, #8
 8003522:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003524:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003526:	6878      	ldr	r0, [r7, #4]
 8003528:	f000 feaa 	bl	8004280 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800352c:	693b      	ldr	r3, [r7, #16]
 800352e:	f003 0310 	and.w	r3, r3, #16
 8003532:	2b00      	cmp	r3, #0
 8003534:	d008      	beq.n	8003548 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003538:	015a      	lsls	r2, r3, #5
 800353a:	69fb      	ldr	r3, [r7, #28]
 800353c:	4413      	add	r3, r2
 800353e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003542:	461a      	mov	r2, r3
 8003544:	2310      	movs	r3, #16
 8003546:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003548:	693b      	ldr	r3, [r7, #16]
 800354a:	f003 0320 	and.w	r3, r3, #32
 800354e:	2b00      	cmp	r3, #0
 8003550:	d008      	beq.n	8003564 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003554:	015a      	lsls	r2, r3, #5
 8003556:	69fb      	ldr	r3, [r7, #28]
 8003558:	4413      	add	r3, r2
 800355a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800355e:	461a      	mov	r2, r3
 8003560:	2320      	movs	r3, #32
 8003562:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003564:	693b      	ldr	r3, [r7, #16]
 8003566:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800356a:	2b00      	cmp	r3, #0
 800356c:	d009      	beq.n	8003582 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800356e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003570:	015a      	lsls	r2, r3, #5
 8003572:	69fb      	ldr	r3, [r7, #28]
 8003574:	4413      	add	r3, r2
 8003576:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800357a:	461a      	mov	r2, r3
 800357c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003580:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003584:	3301      	adds	r3, #1
 8003586:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003588:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800358a:	085b      	lsrs	r3, r3, #1
 800358c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800358e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003590:	2b00      	cmp	r3, #0
 8003592:	d199      	bne.n	80034c8 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	4618      	mov	r0, r3
 800359a:	f002 fd74 	bl	8006086 <USB_ReadInterrupts>
 800359e:	4603      	mov	r3, r0
 80035a0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80035a4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80035a8:	f040 80c0 	bne.w	800372c <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4618      	mov	r0, r3
 80035b2:	f002 fd95 	bl	80060e0 <USB_ReadDevAllInEpInterrupt>
 80035b6:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80035b8:	2300      	movs	r3, #0
 80035ba:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80035bc:	e0b2      	b.n	8003724 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80035be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035c0:	f003 0301 	and.w	r3, r3, #1
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	f000 80a7 	beq.w	8003718 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035d0:	b2d2      	uxtb	r2, r2
 80035d2:	4611      	mov	r1, r2
 80035d4:	4618      	mov	r0, r3
 80035d6:	f002 fdbb 	bl	8006150 <USB_ReadDevInEPInterrupt>
 80035da:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80035dc:	693b      	ldr	r3, [r7, #16]
 80035de:	f003 0301 	and.w	r3, r3, #1
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d057      	beq.n	8003696 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80035e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035e8:	f003 030f 	and.w	r3, r3, #15
 80035ec:	2201      	movs	r2, #1
 80035ee:	fa02 f303 	lsl.w	r3, r2, r3
 80035f2:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80035f4:	69fb      	ldr	r3, [r7, #28]
 80035f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80035fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	43db      	mvns	r3, r3
 8003600:	69f9      	ldr	r1, [r7, #28]
 8003602:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003606:	4013      	ands	r3, r2
 8003608:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800360a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800360c:	015a      	lsls	r2, r3, #5
 800360e:	69fb      	ldr	r3, [r7, #28]
 8003610:	4413      	add	r3, r2
 8003612:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003616:	461a      	mov	r2, r3
 8003618:	2301      	movs	r3, #1
 800361a:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	691b      	ldr	r3, [r3, #16]
 8003620:	2b01      	cmp	r3, #1
 8003622:	d132      	bne.n	800368a <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003624:	6879      	ldr	r1, [r7, #4]
 8003626:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003628:	4613      	mov	r3, r2
 800362a:	00db      	lsls	r3, r3, #3
 800362c:	1a9b      	subs	r3, r3, r2
 800362e:	009b      	lsls	r3, r3, #2
 8003630:	440b      	add	r3, r1
 8003632:	3348      	adds	r3, #72	; 0x48
 8003634:	6819      	ldr	r1, [r3, #0]
 8003636:	6878      	ldr	r0, [r7, #4]
 8003638:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800363a:	4613      	mov	r3, r2
 800363c:	00db      	lsls	r3, r3, #3
 800363e:	1a9b      	subs	r3, r3, r2
 8003640:	009b      	lsls	r3, r3, #2
 8003642:	4403      	add	r3, r0
 8003644:	3344      	adds	r3, #68	; 0x44
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4419      	add	r1, r3
 800364a:	6878      	ldr	r0, [r7, #4]
 800364c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800364e:	4613      	mov	r3, r2
 8003650:	00db      	lsls	r3, r3, #3
 8003652:	1a9b      	subs	r3, r3, r2
 8003654:	009b      	lsls	r3, r3, #2
 8003656:	4403      	add	r3, r0
 8003658:	3348      	adds	r3, #72	; 0x48
 800365a:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800365c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800365e:	2b00      	cmp	r3, #0
 8003660:	d113      	bne.n	800368a <HAL_PCD_IRQHandler+0x31c>
 8003662:	6879      	ldr	r1, [r7, #4]
 8003664:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003666:	4613      	mov	r3, r2
 8003668:	00db      	lsls	r3, r3, #3
 800366a:	1a9b      	subs	r3, r3, r2
 800366c:	009b      	lsls	r3, r3, #2
 800366e:	440b      	add	r3, r1
 8003670:	3350      	adds	r3, #80	; 0x50
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	2b00      	cmp	r3, #0
 8003676:	d108      	bne.n	800368a <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6818      	ldr	r0, [r3, #0]
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003682:	461a      	mov	r2, r3
 8003684:	2101      	movs	r1, #1
 8003686:	f002 fdc3 	bl	8006210 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800368a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800368c:	b2db      	uxtb	r3, r3
 800368e:	4619      	mov	r1, r3
 8003690:	6878      	ldr	r0, [r7, #4]
 8003692:	f004 fd64 	bl	800815e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003696:	693b      	ldr	r3, [r7, #16]
 8003698:	f003 0308 	and.w	r3, r3, #8
 800369c:	2b00      	cmp	r3, #0
 800369e:	d008      	beq.n	80036b2 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80036a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036a2:	015a      	lsls	r2, r3, #5
 80036a4:	69fb      	ldr	r3, [r7, #28]
 80036a6:	4413      	add	r3, r2
 80036a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036ac:	461a      	mov	r2, r3
 80036ae:	2308      	movs	r3, #8
 80036b0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80036b2:	693b      	ldr	r3, [r7, #16]
 80036b4:	f003 0310 	and.w	r3, r3, #16
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d008      	beq.n	80036ce <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80036bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036be:	015a      	lsls	r2, r3, #5
 80036c0:	69fb      	ldr	r3, [r7, #28]
 80036c2:	4413      	add	r3, r2
 80036c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036c8:	461a      	mov	r2, r3
 80036ca:	2310      	movs	r3, #16
 80036cc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80036ce:	693b      	ldr	r3, [r7, #16]
 80036d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d008      	beq.n	80036ea <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80036d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036da:	015a      	lsls	r2, r3, #5
 80036dc:	69fb      	ldr	r3, [r7, #28]
 80036de:	4413      	add	r3, r2
 80036e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036e4:	461a      	mov	r2, r3
 80036e6:	2340      	movs	r3, #64	; 0x40
 80036e8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80036ea:	693b      	ldr	r3, [r7, #16]
 80036ec:	f003 0302 	and.w	r3, r3, #2
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d008      	beq.n	8003706 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80036f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036f6:	015a      	lsls	r2, r3, #5
 80036f8:	69fb      	ldr	r3, [r7, #28]
 80036fa:	4413      	add	r3, r2
 80036fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003700:	461a      	mov	r2, r3
 8003702:	2302      	movs	r3, #2
 8003704:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003706:	693b      	ldr	r3, [r7, #16]
 8003708:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800370c:	2b00      	cmp	r3, #0
 800370e:	d003      	beq.n	8003718 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003710:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003712:	6878      	ldr	r0, [r7, #4]
 8003714:	f000 fc1b 	bl	8003f4e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800371a:	3301      	adds	r3, #1
 800371c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800371e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003720:	085b      	lsrs	r3, r3, #1
 8003722:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003724:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003726:	2b00      	cmp	r3, #0
 8003728:	f47f af49 	bne.w	80035be <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4618      	mov	r0, r3
 8003732:	f002 fca8 	bl	8006086 <USB_ReadInterrupts>
 8003736:	4603      	mov	r3, r0
 8003738:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800373c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003740:	d122      	bne.n	8003788 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003742:	69fb      	ldr	r3, [r7, #28]
 8003744:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003748:	685b      	ldr	r3, [r3, #4]
 800374a:	69fa      	ldr	r2, [r7, #28]
 800374c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003750:	f023 0301 	bic.w	r3, r3, #1
 8003754:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800375c:	2b01      	cmp	r3, #1
 800375e:	d108      	bne.n	8003772 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2200      	movs	r2, #0
 8003764:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003768:	2100      	movs	r1, #0
 800376a:	6878      	ldr	r0, [r7, #4]
 800376c:	f000 fe26 	bl	80043bc <HAL_PCDEx_LPM_Callback>
 8003770:	e002      	b.n	8003778 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003772:	6878      	ldr	r0, [r7, #4]
 8003774:	f004 fd60 	bl	8008238 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	695a      	ldr	r2, [r3, #20]
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003786:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4618      	mov	r0, r3
 800378e:	f002 fc7a 	bl	8006086 <USB_ReadInterrupts>
 8003792:	4603      	mov	r3, r0
 8003794:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003798:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800379c:	d112      	bne.n	80037c4 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800379e:	69fb      	ldr	r3, [r7, #28]
 80037a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037a4:	689b      	ldr	r3, [r3, #8]
 80037a6:	f003 0301 	and.w	r3, r3, #1
 80037aa:	2b01      	cmp	r3, #1
 80037ac:	d102      	bne.n	80037b4 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80037ae:	6878      	ldr	r0, [r7, #4]
 80037b0:	f004 fd1c 	bl	80081ec <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	695a      	ldr	r2, [r3, #20]
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80037c2:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4618      	mov	r0, r3
 80037ca:	f002 fc5c 	bl	8006086 <USB_ReadInterrupts>
 80037ce:	4603      	mov	r3, r0
 80037d0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80037d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037d8:	f040 80c7 	bne.w	800396a <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80037dc:	69fb      	ldr	r3, [r7, #28]
 80037de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037e2:	685b      	ldr	r3, [r3, #4]
 80037e4:	69fa      	ldr	r2, [r7, #28]
 80037e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80037ea:	f023 0301 	bic.w	r3, r3, #1
 80037ee:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	2110      	movs	r1, #16
 80037f6:	4618      	mov	r0, r3
 80037f8:	f001 fcf6 	bl	80051e8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80037fc:	2300      	movs	r3, #0
 80037fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003800:	e056      	b.n	80038b0 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003802:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003804:	015a      	lsls	r2, r3, #5
 8003806:	69fb      	ldr	r3, [r7, #28]
 8003808:	4413      	add	r3, r2
 800380a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800380e:	461a      	mov	r2, r3
 8003810:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003814:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003816:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003818:	015a      	lsls	r2, r3, #5
 800381a:	69fb      	ldr	r3, [r7, #28]
 800381c:	4413      	add	r3, r2
 800381e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003826:	0151      	lsls	r1, r2, #5
 8003828:	69fa      	ldr	r2, [r7, #28]
 800382a:	440a      	add	r2, r1
 800382c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003830:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003834:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003836:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003838:	015a      	lsls	r2, r3, #5
 800383a:	69fb      	ldr	r3, [r7, #28]
 800383c:	4413      	add	r3, r2
 800383e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003846:	0151      	lsls	r1, r2, #5
 8003848:	69fa      	ldr	r2, [r7, #28]
 800384a:	440a      	add	r2, r1
 800384c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003850:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003854:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003856:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003858:	015a      	lsls	r2, r3, #5
 800385a:	69fb      	ldr	r3, [r7, #28]
 800385c:	4413      	add	r3, r2
 800385e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003862:	461a      	mov	r2, r3
 8003864:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003868:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800386a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800386c:	015a      	lsls	r2, r3, #5
 800386e:	69fb      	ldr	r3, [r7, #28]
 8003870:	4413      	add	r3, r2
 8003872:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800387a:	0151      	lsls	r1, r2, #5
 800387c:	69fa      	ldr	r2, [r7, #28]
 800387e:	440a      	add	r2, r1
 8003880:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003884:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003888:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800388a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800388c:	015a      	lsls	r2, r3, #5
 800388e:	69fb      	ldr	r3, [r7, #28]
 8003890:	4413      	add	r3, r2
 8003892:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800389a:	0151      	lsls	r1, r2, #5
 800389c:	69fa      	ldr	r2, [r7, #28]
 800389e:	440a      	add	r2, r1
 80038a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80038a4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80038a8:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80038aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038ac:	3301      	adds	r3, #1
 80038ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	685b      	ldr	r3, [r3, #4]
 80038b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80038b6:	429a      	cmp	r2, r3
 80038b8:	d3a3      	bcc.n	8003802 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80038ba:	69fb      	ldr	r3, [r7, #28]
 80038bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038c0:	69db      	ldr	r3, [r3, #28]
 80038c2:	69fa      	ldr	r2, [r7, #28]
 80038c4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80038c8:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80038cc:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d016      	beq.n	8003904 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80038d6:	69fb      	ldr	r3, [r7, #28]
 80038d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80038e0:	69fa      	ldr	r2, [r7, #28]
 80038e2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80038e6:	f043 030b 	orr.w	r3, r3, #11
 80038ea:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80038ee:	69fb      	ldr	r3, [r7, #28]
 80038f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038f6:	69fa      	ldr	r2, [r7, #28]
 80038f8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80038fc:	f043 030b 	orr.w	r3, r3, #11
 8003900:	6453      	str	r3, [r2, #68]	; 0x44
 8003902:	e015      	b.n	8003930 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003904:	69fb      	ldr	r3, [r7, #28]
 8003906:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800390a:	695b      	ldr	r3, [r3, #20]
 800390c:	69fa      	ldr	r2, [r7, #28]
 800390e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003912:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003916:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800391a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800391c:	69fb      	ldr	r3, [r7, #28]
 800391e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003922:	691b      	ldr	r3, [r3, #16]
 8003924:	69fa      	ldr	r2, [r7, #28]
 8003926:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800392a:	f043 030b 	orr.w	r3, r3, #11
 800392e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003930:	69fb      	ldr	r3, [r7, #28]
 8003932:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	69fa      	ldr	r2, [r7, #28]
 800393a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800393e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003942:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6818      	ldr	r0, [r3, #0]
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	691b      	ldr	r3, [r3, #16]
 800394c:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003954:	461a      	mov	r2, r3
 8003956:	f002 fc5b 	bl	8006210 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	695a      	ldr	r2, [r3, #20]
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003968:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	4618      	mov	r0, r3
 8003970:	f002 fb89 	bl	8006086 <USB_ReadInterrupts>
 8003974:	4603      	mov	r3, r0
 8003976:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800397a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800397e:	d124      	bne.n	80039ca <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4618      	mov	r0, r3
 8003986:	f002 fc1f 	bl	80061c8 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	4618      	mov	r0, r3
 8003990:	f001 fc87 	bl	80052a2 <USB_GetDevSpeed>
 8003994:	4603      	mov	r3, r0
 8003996:	461a      	mov	r2, r3
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681c      	ldr	r4, [r3, #0]
 80039a0:	f001 f92c 	bl	8004bfc <HAL_RCC_GetHCLKFreq>
 80039a4:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80039aa:	b2db      	uxtb	r3, r3
 80039ac:	461a      	mov	r2, r3
 80039ae:	4620      	mov	r0, r4
 80039b0:	f001 f9a6 	bl	8004d00 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80039b4:	6878      	ldr	r0, [r7, #4]
 80039b6:	f004 fbfa 	bl	80081ae <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	695a      	ldr	r2, [r3, #20]
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80039c8:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4618      	mov	r0, r3
 80039d0:	f002 fb59 	bl	8006086 <USB_ReadInterrupts>
 80039d4:	4603      	mov	r3, r0
 80039d6:	f003 0308 	and.w	r3, r3, #8
 80039da:	2b08      	cmp	r3, #8
 80039dc:	d10a      	bne.n	80039f4 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80039de:	6878      	ldr	r0, [r7, #4]
 80039e0:	f004 fbd7 	bl	8008192 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	695a      	ldr	r2, [r3, #20]
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f002 0208 	and.w	r2, r2, #8
 80039f2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4618      	mov	r0, r3
 80039fa:	f002 fb44 	bl	8006086 <USB_ReadInterrupts>
 80039fe:	4603      	mov	r3, r0
 8003a00:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a04:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a08:	d10f      	bne.n	8003a2a <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a10:	b2db      	uxtb	r3, r3
 8003a12:	4619      	mov	r1, r3
 8003a14:	6878      	ldr	r0, [r7, #4]
 8003a16:	f004 fc2f 	bl	8008278 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	695a      	ldr	r2, [r3, #20]
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003a28:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4618      	mov	r0, r3
 8003a30:	f002 fb29 	bl	8006086 <USB_ReadInterrupts>
 8003a34:	4603      	mov	r3, r0
 8003a36:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a3a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003a3e:	d10f      	bne.n	8003a60 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8003a40:	2300      	movs	r3, #0
 8003a42:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a46:	b2db      	uxtb	r3, r3
 8003a48:	4619      	mov	r1, r3
 8003a4a:	6878      	ldr	r0, [r7, #4]
 8003a4c:	f004 fc02 	bl	8008254 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	695a      	ldr	r2, [r3, #20]
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003a5e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	4618      	mov	r0, r3
 8003a66:	f002 fb0e 	bl	8006086 <USB_ReadInterrupts>
 8003a6a:	4603      	mov	r3, r0
 8003a6c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003a70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a74:	d10a      	bne.n	8003a8c <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003a76:	6878      	ldr	r0, [r7, #4]
 8003a78:	f004 fc10 	bl	800829c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	695a      	ldr	r2, [r3, #20]
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003a8a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4618      	mov	r0, r3
 8003a92:	f002 faf8 	bl	8006086 <USB_ReadInterrupts>
 8003a96:	4603      	mov	r3, r0
 8003a98:	f003 0304 	and.w	r3, r3, #4
 8003a9c:	2b04      	cmp	r3, #4
 8003a9e:	d115      	bne.n	8003acc <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	685b      	ldr	r3, [r3, #4]
 8003aa6:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003aa8:	69bb      	ldr	r3, [r7, #24]
 8003aaa:	f003 0304 	and.w	r3, r3, #4
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d002      	beq.n	8003ab8 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003ab2:	6878      	ldr	r0, [r7, #4]
 8003ab4:	f004 fc00 	bl	80082b8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	6859      	ldr	r1, [r3, #4]
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	69ba      	ldr	r2, [r7, #24]
 8003ac4:	430a      	orrs	r2, r1
 8003ac6:	605a      	str	r2, [r3, #4]
 8003ac8:	e000      	b.n	8003acc <HAL_PCD_IRQHandler+0x75e>
      return;
 8003aca:	bf00      	nop
    }
  }
}
 8003acc:	3734      	adds	r7, #52	; 0x34
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	bd90      	pop	{r4, r7, pc}

08003ad2 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003ad2:	b580      	push	{r7, lr}
 8003ad4:	b082      	sub	sp, #8
 8003ad6:	af00      	add	r7, sp, #0
 8003ad8:	6078      	str	r0, [r7, #4]
 8003ada:	460b      	mov	r3, r1
 8003adc:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003ae4:	2b01      	cmp	r3, #1
 8003ae6:	d101      	bne.n	8003aec <HAL_PCD_SetAddress+0x1a>
 8003ae8:	2302      	movs	r3, #2
 8003aea:	e013      	b.n	8003b14 <HAL_PCD_SetAddress+0x42>
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2201      	movs	r2, #1
 8003af0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	78fa      	ldrb	r2, [r7, #3]
 8003af8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	78fa      	ldrb	r2, [r7, #3]
 8003b02:	4611      	mov	r1, r2
 8003b04:	4618      	mov	r0, r3
 8003b06:	f002 fa56 	bl	8005fb6 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003b12:	2300      	movs	r3, #0
}
 8003b14:	4618      	mov	r0, r3
 8003b16:	3708      	adds	r7, #8
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	bd80      	pop	{r7, pc}

08003b1c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b084      	sub	sp, #16
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
 8003b24:	4608      	mov	r0, r1
 8003b26:	4611      	mov	r1, r2
 8003b28:	461a      	mov	r2, r3
 8003b2a:	4603      	mov	r3, r0
 8003b2c:	70fb      	strb	r3, [r7, #3]
 8003b2e:	460b      	mov	r3, r1
 8003b30:	803b      	strh	r3, [r7, #0]
 8003b32:	4613      	mov	r3, r2
 8003b34:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003b36:	2300      	movs	r3, #0
 8003b38:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003b3a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	da0f      	bge.n	8003b62 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003b42:	78fb      	ldrb	r3, [r7, #3]
 8003b44:	f003 020f 	and.w	r2, r3, #15
 8003b48:	4613      	mov	r3, r2
 8003b4a:	00db      	lsls	r3, r3, #3
 8003b4c:	1a9b      	subs	r3, r3, r2
 8003b4e:	009b      	lsls	r3, r3, #2
 8003b50:	3338      	adds	r3, #56	; 0x38
 8003b52:	687a      	ldr	r2, [r7, #4]
 8003b54:	4413      	add	r3, r2
 8003b56:	3304      	adds	r3, #4
 8003b58:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	2201      	movs	r2, #1
 8003b5e:	705a      	strb	r2, [r3, #1]
 8003b60:	e00f      	b.n	8003b82 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003b62:	78fb      	ldrb	r3, [r7, #3]
 8003b64:	f003 020f 	and.w	r2, r3, #15
 8003b68:	4613      	mov	r3, r2
 8003b6a:	00db      	lsls	r3, r3, #3
 8003b6c:	1a9b      	subs	r3, r3, r2
 8003b6e:	009b      	lsls	r3, r3, #2
 8003b70:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003b74:	687a      	ldr	r2, [r7, #4]
 8003b76:	4413      	add	r3, r2
 8003b78:	3304      	adds	r3, #4
 8003b7a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	2200      	movs	r2, #0
 8003b80:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003b82:	78fb      	ldrb	r3, [r7, #3]
 8003b84:	f003 030f 	and.w	r3, r3, #15
 8003b88:	b2da      	uxtb	r2, r3
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003b8e:	883a      	ldrh	r2, [r7, #0]
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	78ba      	ldrb	r2, [r7, #2]
 8003b98:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	785b      	ldrb	r3, [r3, #1]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d004      	beq.n	8003bac <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	781b      	ldrb	r3, [r3, #0]
 8003ba6:	b29a      	uxth	r2, r3
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003bac:	78bb      	ldrb	r3, [r7, #2]
 8003bae:	2b02      	cmp	r3, #2
 8003bb0:	d102      	bne.n	8003bb8 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003bbe:	2b01      	cmp	r3, #1
 8003bc0:	d101      	bne.n	8003bc6 <HAL_PCD_EP_Open+0xaa>
 8003bc2:	2302      	movs	r3, #2
 8003bc4:	e00e      	b.n	8003be4 <HAL_PCD_EP_Open+0xc8>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2201      	movs	r2, #1
 8003bca:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	68f9      	ldr	r1, [r7, #12]
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	f001 fb89 	bl	80052ec <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2200      	movs	r2, #0
 8003bde:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8003be2:	7afb      	ldrb	r3, [r7, #11]
}
 8003be4:	4618      	mov	r0, r3
 8003be6:	3710      	adds	r7, #16
 8003be8:	46bd      	mov	sp, r7
 8003bea:	bd80      	pop	{r7, pc}

08003bec <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b084      	sub	sp, #16
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
 8003bf4:	460b      	mov	r3, r1
 8003bf6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003bf8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	da0f      	bge.n	8003c20 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003c00:	78fb      	ldrb	r3, [r7, #3]
 8003c02:	f003 020f 	and.w	r2, r3, #15
 8003c06:	4613      	mov	r3, r2
 8003c08:	00db      	lsls	r3, r3, #3
 8003c0a:	1a9b      	subs	r3, r3, r2
 8003c0c:	009b      	lsls	r3, r3, #2
 8003c0e:	3338      	adds	r3, #56	; 0x38
 8003c10:	687a      	ldr	r2, [r7, #4]
 8003c12:	4413      	add	r3, r2
 8003c14:	3304      	adds	r3, #4
 8003c16:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	2201      	movs	r2, #1
 8003c1c:	705a      	strb	r2, [r3, #1]
 8003c1e:	e00f      	b.n	8003c40 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003c20:	78fb      	ldrb	r3, [r7, #3]
 8003c22:	f003 020f 	and.w	r2, r3, #15
 8003c26:	4613      	mov	r3, r2
 8003c28:	00db      	lsls	r3, r3, #3
 8003c2a:	1a9b      	subs	r3, r3, r2
 8003c2c:	009b      	lsls	r3, r3, #2
 8003c2e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003c32:	687a      	ldr	r2, [r7, #4]
 8003c34:	4413      	add	r3, r2
 8003c36:	3304      	adds	r3, #4
 8003c38:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003c40:	78fb      	ldrb	r3, [r7, #3]
 8003c42:	f003 030f 	and.w	r3, r3, #15
 8003c46:	b2da      	uxtb	r2, r3
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003c52:	2b01      	cmp	r3, #1
 8003c54:	d101      	bne.n	8003c5a <HAL_PCD_EP_Close+0x6e>
 8003c56:	2302      	movs	r3, #2
 8003c58:	e00e      	b.n	8003c78 <HAL_PCD_EP_Close+0x8c>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2201      	movs	r2, #1
 8003c5e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	68f9      	ldr	r1, [r7, #12]
 8003c68:	4618      	mov	r0, r3
 8003c6a:	f001 fbc7 	bl	80053fc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2200      	movs	r2, #0
 8003c72:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8003c76:	2300      	movs	r3, #0
}
 8003c78:	4618      	mov	r0, r3
 8003c7a:	3710      	adds	r7, #16
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	bd80      	pop	{r7, pc}

08003c80 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b086      	sub	sp, #24
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	60f8      	str	r0, [r7, #12]
 8003c88:	607a      	str	r2, [r7, #4]
 8003c8a:	603b      	str	r3, [r7, #0]
 8003c8c:	460b      	mov	r3, r1
 8003c8e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003c90:	7afb      	ldrb	r3, [r7, #11]
 8003c92:	f003 020f 	and.w	r2, r3, #15
 8003c96:	4613      	mov	r3, r2
 8003c98:	00db      	lsls	r3, r3, #3
 8003c9a:	1a9b      	subs	r3, r3, r2
 8003c9c:	009b      	lsls	r3, r3, #2
 8003c9e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003ca2:	68fa      	ldr	r2, [r7, #12]
 8003ca4:	4413      	add	r3, r2
 8003ca6:	3304      	adds	r3, #4
 8003ca8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003caa:	697b      	ldr	r3, [r7, #20]
 8003cac:	687a      	ldr	r2, [r7, #4]
 8003cae:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003cb0:	697b      	ldr	r3, [r7, #20]
 8003cb2:	683a      	ldr	r2, [r7, #0]
 8003cb4:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8003cb6:	697b      	ldr	r3, [r7, #20]
 8003cb8:	2200      	movs	r2, #0
 8003cba:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8003cbc:	697b      	ldr	r3, [r7, #20]
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003cc2:	7afb      	ldrb	r3, [r7, #11]
 8003cc4:	f003 030f 	and.w	r3, r3, #15
 8003cc8:	b2da      	uxtb	r2, r3
 8003cca:	697b      	ldr	r3, [r7, #20]
 8003ccc:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	691b      	ldr	r3, [r3, #16]
 8003cd2:	2b01      	cmp	r3, #1
 8003cd4:	d102      	bne.n	8003cdc <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003cd6:	687a      	ldr	r2, [r7, #4]
 8003cd8:	697b      	ldr	r3, [r7, #20]
 8003cda:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003cdc:	7afb      	ldrb	r3, [r7, #11]
 8003cde:	f003 030f 	and.w	r3, r3, #15
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d109      	bne.n	8003cfa <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	6818      	ldr	r0, [r3, #0]
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	691b      	ldr	r3, [r3, #16]
 8003cee:	b2db      	uxtb	r3, r3
 8003cf0:	461a      	mov	r2, r3
 8003cf2:	6979      	ldr	r1, [r7, #20]
 8003cf4:	f001 fea2 	bl	8005a3c <USB_EP0StartXfer>
 8003cf8:	e008      	b.n	8003d0c <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	6818      	ldr	r0, [r3, #0]
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	691b      	ldr	r3, [r3, #16]
 8003d02:	b2db      	uxtb	r3, r3
 8003d04:	461a      	mov	r2, r3
 8003d06:	6979      	ldr	r1, [r7, #20]
 8003d08:	f001 fc54 	bl	80055b4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003d0c:	2300      	movs	r3, #0
}
 8003d0e:	4618      	mov	r0, r3
 8003d10:	3718      	adds	r7, #24
 8003d12:	46bd      	mov	sp, r7
 8003d14:	bd80      	pop	{r7, pc}

08003d16 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003d16:	b480      	push	{r7}
 8003d18:	b083      	sub	sp, #12
 8003d1a:	af00      	add	r7, sp, #0
 8003d1c:	6078      	str	r0, [r7, #4]
 8003d1e:	460b      	mov	r3, r1
 8003d20:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003d22:	78fb      	ldrb	r3, [r7, #3]
 8003d24:	f003 020f 	and.w	r2, r3, #15
 8003d28:	6879      	ldr	r1, [r7, #4]
 8003d2a:	4613      	mov	r3, r2
 8003d2c:	00db      	lsls	r3, r3, #3
 8003d2e:	1a9b      	subs	r3, r3, r2
 8003d30:	009b      	lsls	r3, r3, #2
 8003d32:	440b      	add	r3, r1
 8003d34:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003d38:	681b      	ldr	r3, [r3, #0]
}
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	370c      	adds	r7, #12
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d44:	4770      	bx	lr

08003d46 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003d46:	b580      	push	{r7, lr}
 8003d48:	b086      	sub	sp, #24
 8003d4a:	af00      	add	r7, sp, #0
 8003d4c:	60f8      	str	r0, [r7, #12]
 8003d4e:	607a      	str	r2, [r7, #4]
 8003d50:	603b      	str	r3, [r7, #0]
 8003d52:	460b      	mov	r3, r1
 8003d54:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003d56:	7afb      	ldrb	r3, [r7, #11]
 8003d58:	f003 020f 	and.w	r2, r3, #15
 8003d5c:	4613      	mov	r3, r2
 8003d5e:	00db      	lsls	r3, r3, #3
 8003d60:	1a9b      	subs	r3, r3, r2
 8003d62:	009b      	lsls	r3, r3, #2
 8003d64:	3338      	adds	r3, #56	; 0x38
 8003d66:	68fa      	ldr	r2, [r7, #12]
 8003d68:	4413      	add	r3, r2
 8003d6a:	3304      	adds	r3, #4
 8003d6c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003d6e:	697b      	ldr	r3, [r7, #20]
 8003d70:	687a      	ldr	r2, [r7, #4]
 8003d72:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003d74:	697b      	ldr	r3, [r7, #20]
 8003d76:	683a      	ldr	r2, [r7, #0]
 8003d78:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8003d7a:	697b      	ldr	r3, [r7, #20]
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8003d80:	697b      	ldr	r3, [r7, #20]
 8003d82:	2201      	movs	r2, #1
 8003d84:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003d86:	7afb      	ldrb	r3, [r7, #11]
 8003d88:	f003 030f 	and.w	r3, r3, #15
 8003d8c:	b2da      	uxtb	r2, r3
 8003d8e:	697b      	ldr	r3, [r7, #20]
 8003d90:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	691b      	ldr	r3, [r3, #16]
 8003d96:	2b01      	cmp	r3, #1
 8003d98:	d102      	bne.n	8003da0 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003d9a:	687a      	ldr	r2, [r7, #4]
 8003d9c:	697b      	ldr	r3, [r7, #20]
 8003d9e:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003da0:	7afb      	ldrb	r3, [r7, #11]
 8003da2:	f003 030f 	and.w	r3, r3, #15
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d109      	bne.n	8003dbe <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	6818      	ldr	r0, [r3, #0]
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	691b      	ldr	r3, [r3, #16]
 8003db2:	b2db      	uxtb	r3, r3
 8003db4:	461a      	mov	r2, r3
 8003db6:	6979      	ldr	r1, [r7, #20]
 8003db8:	f001 fe40 	bl	8005a3c <USB_EP0StartXfer>
 8003dbc:	e008      	b.n	8003dd0 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	6818      	ldr	r0, [r3, #0]
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	691b      	ldr	r3, [r3, #16]
 8003dc6:	b2db      	uxtb	r3, r3
 8003dc8:	461a      	mov	r2, r3
 8003dca:	6979      	ldr	r1, [r7, #20]
 8003dcc:	f001 fbf2 	bl	80055b4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003dd0:	2300      	movs	r3, #0
}
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	3718      	adds	r7, #24
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	bd80      	pop	{r7, pc}

08003dda <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003dda:	b580      	push	{r7, lr}
 8003ddc:	b084      	sub	sp, #16
 8003dde:	af00      	add	r7, sp, #0
 8003de0:	6078      	str	r0, [r7, #4]
 8003de2:	460b      	mov	r3, r1
 8003de4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003de6:	78fb      	ldrb	r3, [r7, #3]
 8003de8:	f003 020f 	and.w	r2, r3, #15
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	685b      	ldr	r3, [r3, #4]
 8003df0:	429a      	cmp	r2, r3
 8003df2:	d901      	bls.n	8003df8 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003df4:	2301      	movs	r3, #1
 8003df6:	e050      	b.n	8003e9a <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003df8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	da0f      	bge.n	8003e20 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003e00:	78fb      	ldrb	r3, [r7, #3]
 8003e02:	f003 020f 	and.w	r2, r3, #15
 8003e06:	4613      	mov	r3, r2
 8003e08:	00db      	lsls	r3, r3, #3
 8003e0a:	1a9b      	subs	r3, r3, r2
 8003e0c:	009b      	lsls	r3, r3, #2
 8003e0e:	3338      	adds	r3, #56	; 0x38
 8003e10:	687a      	ldr	r2, [r7, #4]
 8003e12:	4413      	add	r3, r2
 8003e14:	3304      	adds	r3, #4
 8003e16:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	2201      	movs	r2, #1
 8003e1c:	705a      	strb	r2, [r3, #1]
 8003e1e:	e00d      	b.n	8003e3c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003e20:	78fa      	ldrb	r2, [r7, #3]
 8003e22:	4613      	mov	r3, r2
 8003e24:	00db      	lsls	r3, r3, #3
 8003e26:	1a9b      	subs	r3, r3, r2
 8003e28:	009b      	lsls	r3, r3, #2
 8003e2a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003e2e:	687a      	ldr	r2, [r7, #4]
 8003e30:	4413      	add	r3, r2
 8003e32:	3304      	adds	r3, #4
 8003e34:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	2200      	movs	r2, #0
 8003e3a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	2201      	movs	r2, #1
 8003e40:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003e42:	78fb      	ldrb	r3, [r7, #3]
 8003e44:	f003 030f 	and.w	r3, r3, #15
 8003e48:	b2da      	uxtb	r2, r3
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003e54:	2b01      	cmp	r3, #1
 8003e56:	d101      	bne.n	8003e5c <HAL_PCD_EP_SetStall+0x82>
 8003e58:	2302      	movs	r3, #2
 8003e5a:	e01e      	b.n	8003e9a <HAL_PCD_EP_SetStall+0xc0>
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2201      	movs	r2, #1
 8003e60:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	68f9      	ldr	r1, [r7, #12]
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	f001 ffcf 	bl	8005e0e <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003e70:	78fb      	ldrb	r3, [r7, #3]
 8003e72:	f003 030f 	and.w	r3, r3, #15
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d10a      	bne.n	8003e90 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6818      	ldr	r0, [r3, #0]
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	691b      	ldr	r3, [r3, #16]
 8003e82:	b2d9      	uxtb	r1, r3
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003e8a:	461a      	mov	r2, r3
 8003e8c:	f002 f9c0 	bl	8006210 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2200      	movs	r2, #0
 8003e94:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003e98:	2300      	movs	r3, #0
}
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	3710      	adds	r7, #16
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	bd80      	pop	{r7, pc}

08003ea2 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003ea2:	b580      	push	{r7, lr}
 8003ea4:	b084      	sub	sp, #16
 8003ea6:	af00      	add	r7, sp, #0
 8003ea8:	6078      	str	r0, [r7, #4]
 8003eaa:	460b      	mov	r3, r1
 8003eac:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003eae:	78fb      	ldrb	r3, [r7, #3]
 8003eb0:	f003 020f 	and.w	r2, r3, #15
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	685b      	ldr	r3, [r3, #4]
 8003eb8:	429a      	cmp	r2, r3
 8003eba:	d901      	bls.n	8003ec0 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003ebc:	2301      	movs	r3, #1
 8003ebe:	e042      	b.n	8003f46 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003ec0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	da0f      	bge.n	8003ee8 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003ec8:	78fb      	ldrb	r3, [r7, #3]
 8003eca:	f003 020f 	and.w	r2, r3, #15
 8003ece:	4613      	mov	r3, r2
 8003ed0:	00db      	lsls	r3, r3, #3
 8003ed2:	1a9b      	subs	r3, r3, r2
 8003ed4:	009b      	lsls	r3, r3, #2
 8003ed6:	3338      	adds	r3, #56	; 0x38
 8003ed8:	687a      	ldr	r2, [r7, #4]
 8003eda:	4413      	add	r3, r2
 8003edc:	3304      	adds	r3, #4
 8003ede:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	2201      	movs	r2, #1
 8003ee4:	705a      	strb	r2, [r3, #1]
 8003ee6:	e00f      	b.n	8003f08 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003ee8:	78fb      	ldrb	r3, [r7, #3]
 8003eea:	f003 020f 	and.w	r2, r3, #15
 8003eee:	4613      	mov	r3, r2
 8003ef0:	00db      	lsls	r3, r3, #3
 8003ef2:	1a9b      	subs	r3, r3, r2
 8003ef4:	009b      	lsls	r3, r3, #2
 8003ef6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003efa:	687a      	ldr	r2, [r7, #4]
 8003efc:	4413      	add	r3, r2
 8003efe:	3304      	adds	r3, #4
 8003f00:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	2200      	movs	r2, #0
 8003f06:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003f0e:	78fb      	ldrb	r3, [r7, #3]
 8003f10:	f003 030f 	and.w	r3, r3, #15
 8003f14:	b2da      	uxtb	r2, r3
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003f20:	2b01      	cmp	r3, #1
 8003f22:	d101      	bne.n	8003f28 <HAL_PCD_EP_ClrStall+0x86>
 8003f24:	2302      	movs	r3, #2
 8003f26:	e00e      	b.n	8003f46 <HAL_PCD_EP_ClrStall+0xa4>
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2201      	movs	r2, #1
 8003f2c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	68f9      	ldr	r1, [r7, #12]
 8003f36:	4618      	mov	r0, r3
 8003f38:	f001 ffd7 	bl	8005eea <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2200      	movs	r2, #0
 8003f40:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003f44:	2300      	movs	r3, #0
}
 8003f46:	4618      	mov	r0, r3
 8003f48:	3710      	adds	r7, #16
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	bd80      	pop	{r7, pc}

08003f4e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003f4e:	b580      	push	{r7, lr}
 8003f50:	b08a      	sub	sp, #40	; 0x28
 8003f52:	af02      	add	r7, sp, #8
 8003f54:	6078      	str	r0, [r7, #4]
 8003f56:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f5e:	697b      	ldr	r3, [r7, #20]
 8003f60:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003f62:	683a      	ldr	r2, [r7, #0]
 8003f64:	4613      	mov	r3, r2
 8003f66:	00db      	lsls	r3, r3, #3
 8003f68:	1a9b      	subs	r3, r3, r2
 8003f6a:	009b      	lsls	r3, r3, #2
 8003f6c:	3338      	adds	r3, #56	; 0x38
 8003f6e:	687a      	ldr	r2, [r7, #4]
 8003f70:	4413      	add	r3, r2
 8003f72:	3304      	adds	r3, #4
 8003f74:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	699a      	ldr	r2, [r3, #24]
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	695b      	ldr	r3, [r3, #20]
 8003f7e:	429a      	cmp	r2, r3
 8003f80:	d901      	bls.n	8003f86 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003f82:	2301      	movs	r3, #1
 8003f84:	e06c      	b.n	8004060 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	695a      	ldr	r2, [r3, #20]
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	699b      	ldr	r3, [r3, #24]
 8003f8e:	1ad3      	subs	r3, r2, r3
 8003f90:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	689b      	ldr	r3, [r3, #8]
 8003f96:	69fa      	ldr	r2, [r7, #28]
 8003f98:	429a      	cmp	r2, r3
 8003f9a:	d902      	bls.n	8003fa2 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	689b      	ldr	r3, [r3, #8]
 8003fa0:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003fa2:	69fb      	ldr	r3, [r7, #28]
 8003fa4:	3303      	adds	r3, #3
 8003fa6:	089b      	lsrs	r3, r3, #2
 8003fa8:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003faa:	e02b      	b.n	8004004 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	695a      	ldr	r2, [r3, #20]
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	699b      	ldr	r3, [r3, #24]
 8003fb4:	1ad3      	subs	r3, r2, r3
 8003fb6:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	689b      	ldr	r3, [r3, #8]
 8003fbc:	69fa      	ldr	r2, [r7, #28]
 8003fbe:	429a      	cmp	r2, r3
 8003fc0:	d902      	bls.n	8003fc8 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	689b      	ldr	r3, [r3, #8]
 8003fc6:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003fc8:	69fb      	ldr	r3, [r7, #28]
 8003fca:	3303      	adds	r3, #3
 8003fcc:	089b      	lsrs	r3, r3, #2
 8003fce:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	68d9      	ldr	r1, [r3, #12]
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	b2da      	uxtb	r2, r3
 8003fd8:	69fb      	ldr	r3, [r7, #28]
 8003fda:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003fe0:	b2db      	uxtb	r3, r3
 8003fe2:	9300      	str	r3, [sp, #0]
 8003fe4:	4603      	mov	r3, r0
 8003fe6:	6978      	ldr	r0, [r7, #20]
 8003fe8:	f001 fe7b 	bl	8005ce2 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	68da      	ldr	r2, [r3, #12]
 8003ff0:	69fb      	ldr	r3, [r7, #28]
 8003ff2:	441a      	add	r2, r3
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	699a      	ldr	r2, [r3, #24]
 8003ffc:	69fb      	ldr	r3, [r7, #28]
 8003ffe:	441a      	add	r2, r3
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	015a      	lsls	r2, r3, #5
 8004008:	693b      	ldr	r3, [r7, #16]
 800400a:	4413      	add	r3, r2
 800400c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004010:	699b      	ldr	r3, [r3, #24]
 8004012:	b29b      	uxth	r3, r3
 8004014:	69ba      	ldr	r2, [r7, #24]
 8004016:	429a      	cmp	r2, r3
 8004018:	d809      	bhi.n	800402e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	699a      	ldr	r2, [r3, #24]
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004022:	429a      	cmp	r2, r3
 8004024:	d203      	bcs.n	800402e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	695b      	ldr	r3, [r3, #20]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d1be      	bne.n	8003fac <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	695a      	ldr	r2, [r3, #20]
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	699b      	ldr	r3, [r3, #24]
 8004036:	429a      	cmp	r2, r3
 8004038:	d811      	bhi.n	800405e <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	f003 030f 	and.w	r3, r3, #15
 8004040:	2201      	movs	r2, #1
 8004042:	fa02 f303 	lsl.w	r3, r2, r3
 8004046:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004048:	693b      	ldr	r3, [r7, #16]
 800404a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800404e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004050:	68bb      	ldr	r3, [r7, #8]
 8004052:	43db      	mvns	r3, r3
 8004054:	6939      	ldr	r1, [r7, #16]
 8004056:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800405a:	4013      	ands	r3, r2
 800405c:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800405e:	2300      	movs	r3, #0
}
 8004060:	4618      	mov	r0, r3
 8004062:	3720      	adds	r7, #32
 8004064:	46bd      	mov	sp, r7
 8004066:	bd80      	pop	{r7, pc}

08004068 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	b086      	sub	sp, #24
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
 8004070:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004078:	697b      	ldr	r3, [r7, #20]
 800407a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800407c:	697b      	ldr	r3, [r7, #20]
 800407e:	333c      	adds	r3, #60	; 0x3c
 8004080:	3304      	adds	r3, #4
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	015a      	lsls	r2, r3, #5
 800408a:	693b      	ldr	r3, [r7, #16]
 800408c:	4413      	add	r3, r2
 800408e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004092:	689b      	ldr	r3, [r3, #8]
 8004094:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	691b      	ldr	r3, [r3, #16]
 800409a:	2b01      	cmp	r3, #1
 800409c:	f040 80a0 	bne.w	80041e0 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80040a0:	68bb      	ldr	r3, [r7, #8]
 80040a2:	f003 0308 	and.w	r3, r3, #8
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d015      	beq.n	80040d6 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	4a72      	ldr	r2, [pc, #456]	; (8004278 <PCD_EP_OutXfrComplete_int+0x210>)
 80040ae:	4293      	cmp	r3, r2
 80040b0:	f240 80dd 	bls.w	800426e <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80040b4:	68bb      	ldr	r3, [r7, #8]
 80040b6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	f000 80d7 	beq.w	800426e <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	015a      	lsls	r2, r3, #5
 80040c4:	693b      	ldr	r3, [r7, #16]
 80040c6:	4413      	add	r3, r2
 80040c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040cc:	461a      	mov	r2, r3
 80040ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80040d2:	6093      	str	r3, [r2, #8]
 80040d4:	e0cb      	b.n	800426e <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80040d6:	68bb      	ldr	r3, [r7, #8]
 80040d8:	f003 0320 	and.w	r3, r3, #32
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d009      	beq.n	80040f4 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	015a      	lsls	r2, r3, #5
 80040e4:	693b      	ldr	r3, [r7, #16]
 80040e6:	4413      	add	r3, r2
 80040e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040ec:	461a      	mov	r2, r3
 80040ee:	2320      	movs	r3, #32
 80040f0:	6093      	str	r3, [r2, #8]
 80040f2:	e0bc      	b.n	800426e <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80040f4:	68bb      	ldr	r3, [r7, #8]
 80040f6:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	f040 80b7 	bne.w	800426e <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	4a5d      	ldr	r2, [pc, #372]	; (8004278 <PCD_EP_OutXfrComplete_int+0x210>)
 8004104:	4293      	cmp	r3, r2
 8004106:	d90f      	bls.n	8004128 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004108:	68bb      	ldr	r3, [r7, #8]
 800410a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800410e:	2b00      	cmp	r3, #0
 8004110:	d00a      	beq.n	8004128 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	015a      	lsls	r2, r3, #5
 8004116:	693b      	ldr	r3, [r7, #16]
 8004118:	4413      	add	r3, r2
 800411a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800411e:	461a      	mov	r2, r3
 8004120:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004124:	6093      	str	r3, [r2, #8]
 8004126:	e0a2      	b.n	800426e <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8004128:	6879      	ldr	r1, [r7, #4]
 800412a:	683a      	ldr	r2, [r7, #0]
 800412c:	4613      	mov	r3, r2
 800412e:	00db      	lsls	r3, r3, #3
 8004130:	1a9b      	subs	r3, r3, r2
 8004132:	009b      	lsls	r3, r3, #2
 8004134:	440b      	add	r3, r1
 8004136:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800413a:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	0159      	lsls	r1, r3, #5
 8004140:	693b      	ldr	r3, [r7, #16]
 8004142:	440b      	add	r3, r1
 8004144:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004148:	691b      	ldr	r3, [r3, #16]
 800414a:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800414e:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8004150:	6878      	ldr	r0, [r7, #4]
 8004152:	683a      	ldr	r2, [r7, #0]
 8004154:	4613      	mov	r3, r2
 8004156:	00db      	lsls	r3, r3, #3
 8004158:	1a9b      	subs	r3, r3, r2
 800415a:	009b      	lsls	r3, r3, #2
 800415c:	4403      	add	r3, r0
 800415e:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8004162:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8004164:	6879      	ldr	r1, [r7, #4]
 8004166:	683a      	ldr	r2, [r7, #0]
 8004168:	4613      	mov	r3, r2
 800416a:	00db      	lsls	r3, r3, #3
 800416c:	1a9b      	subs	r3, r3, r2
 800416e:	009b      	lsls	r3, r3, #2
 8004170:	440b      	add	r3, r1
 8004172:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004176:	6819      	ldr	r1, [r3, #0]
 8004178:	6878      	ldr	r0, [r7, #4]
 800417a:	683a      	ldr	r2, [r7, #0]
 800417c:	4613      	mov	r3, r2
 800417e:	00db      	lsls	r3, r3, #3
 8004180:	1a9b      	subs	r3, r3, r2
 8004182:	009b      	lsls	r3, r3, #2
 8004184:	4403      	add	r3, r0
 8004186:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	4419      	add	r1, r3
 800418e:	6878      	ldr	r0, [r7, #4]
 8004190:	683a      	ldr	r2, [r7, #0]
 8004192:	4613      	mov	r3, r2
 8004194:	00db      	lsls	r3, r3, #3
 8004196:	1a9b      	subs	r3, r3, r2
 8004198:	009b      	lsls	r3, r3, #2
 800419a:	4403      	add	r3, r0
 800419c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80041a0:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d114      	bne.n	80041d2 <PCD_EP_OutXfrComplete_int+0x16a>
 80041a8:	6879      	ldr	r1, [r7, #4]
 80041aa:	683a      	ldr	r2, [r7, #0]
 80041ac:	4613      	mov	r3, r2
 80041ae:	00db      	lsls	r3, r3, #3
 80041b0:	1a9b      	subs	r3, r3, r2
 80041b2:	009b      	lsls	r3, r3, #2
 80041b4:	440b      	add	r3, r1
 80041b6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d108      	bne.n	80041d2 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6818      	ldr	r0, [r3, #0]
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80041ca:	461a      	mov	r2, r3
 80041cc:	2101      	movs	r1, #1
 80041ce:	f002 f81f 	bl	8006210 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	b2db      	uxtb	r3, r3
 80041d6:	4619      	mov	r1, r3
 80041d8:	6878      	ldr	r0, [r7, #4]
 80041da:	f003 ffa5 	bl	8008128 <HAL_PCD_DataOutStageCallback>
 80041de:	e046      	b.n	800426e <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	4a26      	ldr	r2, [pc, #152]	; (800427c <PCD_EP_OutXfrComplete_int+0x214>)
 80041e4:	4293      	cmp	r3, r2
 80041e6:	d124      	bne.n	8004232 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80041e8:	68bb      	ldr	r3, [r7, #8]
 80041ea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d00a      	beq.n	8004208 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	015a      	lsls	r2, r3, #5
 80041f6:	693b      	ldr	r3, [r7, #16]
 80041f8:	4413      	add	r3, r2
 80041fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041fe:	461a      	mov	r2, r3
 8004200:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004204:	6093      	str	r3, [r2, #8]
 8004206:	e032      	b.n	800426e <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004208:	68bb      	ldr	r3, [r7, #8]
 800420a:	f003 0320 	and.w	r3, r3, #32
 800420e:	2b00      	cmp	r3, #0
 8004210:	d008      	beq.n	8004224 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	015a      	lsls	r2, r3, #5
 8004216:	693b      	ldr	r3, [r7, #16]
 8004218:	4413      	add	r3, r2
 800421a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800421e:	461a      	mov	r2, r3
 8004220:	2320      	movs	r3, #32
 8004222:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	b2db      	uxtb	r3, r3
 8004228:	4619      	mov	r1, r3
 800422a:	6878      	ldr	r0, [r7, #4]
 800422c:	f003 ff7c 	bl	8008128 <HAL_PCD_DataOutStageCallback>
 8004230:	e01d      	b.n	800426e <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	2b00      	cmp	r3, #0
 8004236:	d114      	bne.n	8004262 <PCD_EP_OutXfrComplete_int+0x1fa>
 8004238:	6879      	ldr	r1, [r7, #4]
 800423a:	683a      	ldr	r2, [r7, #0]
 800423c:	4613      	mov	r3, r2
 800423e:	00db      	lsls	r3, r3, #3
 8004240:	1a9b      	subs	r3, r3, r2
 8004242:	009b      	lsls	r3, r3, #2
 8004244:	440b      	add	r3, r1
 8004246:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	2b00      	cmp	r3, #0
 800424e:	d108      	bne.n	8004262 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6818      	ldr	r0, [r3, #0]
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800425a:	461a      	mov	r2, r3
 800425c:	2100      	movs	r1, #0
 800425e:	f001 ffd7 	bl	8006210 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	b2db      	uxtb	r3, r3
 8004266:	4619      	mov	r1, r3
 8004268:	6878      	ldr	r0, [r7, #4]
 800426a:	f003 ff5d 	bl	8008128 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800426e:	2300      	movs	r3, #0
}
 8004270:	4618      	mov	r0, r3
 8004272:	3718      	adds	r7, #24
 8004274:	46bd      	mov	sp, r7
 8004276:	bd80      	pop	{r7, pc}
 8004278:	4f54300a 	.word	0x4f54300a
 800427c:	4f54310a 	.word	0x4f54310a

08004280 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	b086      	sub	sp, #24
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
 8004288:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004290:	697b      	ldr	r3, [r7, #20]
 8004292:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004294:	697b      	ldr	r3, [r7, #20]
 8004296:	333c      	adds	r3, #60	; 0x3c
 8004298:	3304      	adds	r3, #4
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	015a      	lsls	r2, r3, #5
 80042a2:	693b      	ldr	r3, [r7, #16]
 80042a4:	4413      	add	r3, r2
 80042a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042aa:	689b      	ldr	r3, [r3, #8]
 80042ac:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	4a15      	ldr	r2, [pc, #84]	; (8004308 <PCD_EP_OutSetupPacket_int+0x88>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d90e      	bls.n	80042d4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80042b6:	68bb      	ldr	r3, [r7, #8]
 80042b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d009      	beq.n	80042d4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	015a      	lsls	r2, r3, #5
 80042c4:	693b      	ldr	r3, [r7, #16]
 80042c6:	4413      	add	r3, r2
 80042c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042cc:	461a      	mov	r2, r3
 80042ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80042d2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80042d4:	6878      	ldr	r0, [r7, #4]
 80042d6:	f003 ff15 	bl	8008104 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	4a0a      	ldr	r2, [pc, #40]	; (8004308 <PCD_EP_OutSetupPacket_int+0x88>)
 80042de:	4293      	cmp	r3, r2
 80042e0:	d90c      	bls.n	80042fc <PCD_EP_OutSetupPacket_int+0x7c>
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	691b      	ldr	r3, [r3, #16]
 80042e6:	2b01      	cmp	r3, #1
 80042e8:	d108      	bne.n	80042fc <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6818      	ldr	r0, [r3, #0]
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80042f4:	461a      	mov	r2, r3
 80042f6:	2101      	movs	r1, #1
 80042f8:	f001 ff8a 	bl	8006210 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80042fc:	2300      	movs	r3, #0
}
 80042fe:	4618      	mov	r0, r3
 8004300:	3718      	adds	r7, #24
 8004302:	46bd      	mov	sp, r7
 8004304:	bd80      	pop	{r7, pc}
 8004306:	bf00      	nop
 8004308:	4f54300a 	.word	0x4f54300a

0800430c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800430c:	b480      	push	{r7}
 800430e:	b085      	sub	sp, #20
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
 8004314:	460b      	mov	r3, r1
 8004316:	70fb      	strb	r3, [r7, #3]
 8004318:	4613      	mov	r3, r2
 800431a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004322:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004324:	78fb      	ldrb	r3, [r7, #3]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d107      	bne.n	800433a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800432a:	883b      	ldrh	r3, [r7, #0]
 800432c:	0419      	lsls	r1, r3, #16
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	68ba      	ldr	r2, [r7, #8]
 8004334:	430a      	orrs	r2, r1
 8004336:	629a      	str	r2, [r3, #40]	; 0x28
 8004338:	e028      	b.n	800438c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004340:	0c1b      	lsrs	r3, r3, #16
 8004342:	68ba      	ldr	r2, [r7, #8]
 8004344:	4413      	add	r3, r2
 8004346:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004348:	2300      	movs	r3, #0
 800434a:	73fb      	strb	r3, [r7, #15]
 800434c:	e00d      	b.n	800436a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681a      	ldr	r2, [r3, #0]
 8004352:	7bfb      	ldrb	r3, [r7, #15]
 8004354:	3340      	adds	r3, #64	; 0x40
 8004356:	009b      	lsls	r3, r3, #2
 8004358:	4413      	add	r3, r2
 800435a:	685b      	ldr	r3, [r3, #4]
 800435c:	0c1b      	lsrs	r3, r3, #16
 800435e:	68ba      	ldr	r2, [r7, #8]
 8004360:	4413      	add	r3, r2
 8004362:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004364:	7bfb      	ldrb	r3, [r7, #15]
 8004366:	3301      	adds	r3, #1
 8004368:	73fb      	strb	r3, [r7, #15]
 800436a:	7bfa      	ldrb	r2, [r7, #15]
 800436c:	78fb      	ldrb	r3, [r7, #3]
 800436e:	3b01      	subs	r3, #1
 8004370:	429a      	cmp	r2, r3
 8004372:	d3ec      	bcc.n	800434e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004374:	883b      	ldrh	r3, [r7, #0]
 8004376:	0418      	lsls	r0, r3, #16
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6819      	ldr	r1, [r3, #0]
 800437c:	78fb      	ldrb	r3, [r7, #3]
 800437e:	3b01      	subs	r3, #1
 8004380:	68ba      	ldr	r2, [r7, #8]
 8004382:	4302      	orrs	r2, r0
 8004384:	3340      	adds	r3, #64	; 0x40
 8004386:	009b      	lsls	r3, r3, #2
 8004388:	440b      	add	r3, r1
 800438a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800438c:	2300      	movs	r3, #0
}
 800438e:	4618      	mov	r0, r3
 8004390:	3714      	adds	r7, #20
 8004392:	46bd      	mov	sp, r7
 8004394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004398:	4770      	bx	lr

0800439a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800439a:	b480      	push	{r7}
 800439c:	b083      	sub	sp, #12
 800439e:	af00      	add	r7, sp, #0
 80043a0:	6078      	str	r0, [r7, #4]
 80043a2:	460b      	mov	r3, r1
 80043a4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	887a      	ldrh	r2, [r7, #2]
 80043ac:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80043ae:	2300      	movs	r3, #0
}
 80043b0:	4618      	mov	r0, r3
 80043b2:	370c      	adds	r7, #12
 80043b4:	46bd      	mov	sp, r7
 80043b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ba:	4770      	bx	lr

080043bc <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80043bc:	b480      	push	{r7}
 80043be:	b083      	sub	sp, #12
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
 80043c4:	460b      	mov	r3, r1
 80043c6:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80043c8:	bf00      	nop
 80043ca:	370c      	adds	r7, #12
 80043cc:	46bd      	mov	sp, r7
 80043ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d2:	4770      	bx	lr

080043d4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b086      	sub	sp, #24
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d101      	bne.n	80043e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80043e2:	2301      	movs	r3, #1
 80043e4:	e264      	b.n	80048b0 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f003 0301 	and.w	r3, r3, #1
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d075      	beq.n	80044de <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80043f2:	4ba3      	ldr	r3, [pc, #652]	; (8004680 <HAL_RCC_OscConfig+0x2ac>)
 80043f4:	689b      	ldr	r3, [r3, #8]
 80043f6:	f003 030c 	and.w	r3, r3, #12
 80043fa:	2b04      	cmp	r3, #4
 80043fc:	d00c      	beq.n	8004418 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80043fe:	4ba0      	ldr	r3, [pc, #640]	; (8004680 <HAL_RCC_OscConfig+0x2ac>)
 8004400:	689b      	ldr	r3, [r3, #8]
 8004402:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004406:	2b08      	cmp	r3, #8
 8004408:	d112      	bne.n	8004430 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800440a:	4b9d      	ldr	r3, [pc, #628]	; (8004680 <HAL_RCC_OscConfig+0x2ac>)
 800440c:	685b      	ldr	r3, [r3, #4]
 800440e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004412:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004416:	d10b      	bne.n	8004430 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004418:	4b99      	ldr	r3, [pc, #612]	; (8004680 <HAL_RCC_OscConfig+0x2ac>)
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004420:	2b00      	cmp	r3, #0
 8004422:	d05b      	beq.n	80044dc <HAL_RCC_OscConfig+0x108>
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	685b      	ldr	r3, [r3, #4]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d157      	bne.n	80044dc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800442c:	2301      	movs	r3, #1
 800442e:	e23f      	b.n	80048b0 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	685b      	ldr	r3, [r3, #4]
 8004434:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004438:	d106      	bne.n	8004448 <HAL_RCC_OscConfig+0x74>
 800443a:	4b91      	ldr	r3, [pc, #580]	; (8004680 <HAL_RCC_OscConfig+0x2ac>)
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	4a90      	ldr	r2, [pc, #576]	; (8004680 <HAL_RCC_OscConfig+0x2ac>)
 8004440:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004444:	6013      	str	r3, [r2, #0]
 8004446:	e01d      	b.n	8004484 <HAL_RCC_OscConfig+0xb0>
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	685b      	ldr	r3, [r3, #4]
 800444c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004450:	d10c      	bne.n	800446c <HAL_RCC_OscConfig+0x98>
 8004452:	4b8b      	ldr	r3, [pc, #556]	; (8004680 <HAL_RCC_OscConfig+0x2ac>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	4a8a      	ldr	r2, [pc, #552]	; (8004680 <HAL_RCC_OscConfig+0x2ac>)
 8004458:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800445c:	6013      	str	r3, [r2, #0]
 800445e:	4b88      	ldr	r3, [pc, #544]	; (8004680 <HAL_RCC_OscConfig+0x2ac>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	4a87      	ldr	r2, [pc, #540]	; (8004680 <HAL_RCC_OscConfig+0x2ac>)
 8004464:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004468:	6013      	str	r3, [r2, #0]
 800446a:	e00b      	b.n	8004484 <HAL_RCC_OscConfig+0xb0>
 800446c:	4b84      	ldr	r3, [pc, #528]	; (8004680 <HAL_RCC_OscConfig+0x2ac>)
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	4a83      	ldr	r2, [pc, #524]	; (8004680 <HAL_RCC_OscConfig+0x2ac>)
 8004472:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004476:	6013      	str	r3, [r2, #0]
 8004478:	4b81      	ldr	r3, [pc, #516]	; (8004680 <HAL_RCC_OscConfig+0x2ac>)
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	4a80      	ldr	r2, [pc, #512]	; (8004680 <HAL_RCC_OscConfig+0x2ac>)
 800447e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004482:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	685b      	ldr	r3, [r3, #4]
 8004488:	2b00      	cmp	r3, #0
 800448a:	d013      	beq.n	80044b4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800448c:	f7fd fa4a 	bl	8001924 <HAL_GetTick>
 8004490:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004492:	e008      	b.n	80044a6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004494:	f7fd fa46 	bl	8001924 <HAL_GetTick>
 8004498:	4602      	mov	r2, r0
 800449a:	693b      	ldr	r3, [r7, #16]
 800449c:	1ad3      	subs	r3, r2, r3
 800449e:	2b64      	cmp	r3, #100	; 0x64
 80044a0:	d901      	bls.n	80044a6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80044a2:	2303      	movs	r3, #3
 80044a4:	e204      	b.n	80048b0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044a6:	4b76      	ldr	r3, [pc, #472]	; (8004680 <HAL_RCC_OscConfig+0x2ac>)
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d0f0      	beq.n	8004494 <HAL_RCC_OscConfig+0xc0>
 80044b2:	e014      	b.n	80044de <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044b4:	f7fd fa36 	bl	8001924 <HAL_GetTick>
 80044b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80044ba:	e008      	b.n	80044ce <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80044bc:	f7fd fa32 	bl	8001924 <HAL_GetTick>
 80044c0:	4602      	mov	r2, r0
 80044c2:	693b      	ldr	r3, [r7, #16]
 80044c4:	1ad3      	subs	r3, r2, r3
 80044c6:	2b64      	cmp	r3, #100	; 0x64
 80044c8:	d901      	bls.n	80044ce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80044ca:	2303      	movs	r3, #3
 80044cc:	e1f0      	b.n	80048b0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80044ce:	4b6c      	ldr	r3, [pc, #432]	; (8004680 <HAL_RCC_OscConfig+0x2ac>)
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d1f0      	bne.n	80044bc <HAL_RCC_OscConfig+0xe8>
 80044da:	e000      	b.n	80044de <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f003 0302 	and.w	r3, r3, #2
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d063      	beq.n	80045b2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80044ea:	4b65      	ldr	r3, [pc, #404]	; (8004680 <HAL_RCC_OscConfig+0x2ac>)
 80044ec:	689b      	ldr	r3, [r3, #8]
 80044ee:	f003 030c 	and.w	r3, r3, #12
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d00b      	beq.n	800450e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80044f6:	4b62      	ldr	r3, [pc, #392]	; (8004680 <HAL_RCC_OscConfig+0x2ac>)
 80044f8:	689b      	ldr	r3, [r3, #8]
 80044fa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80044fe:	2b08      	cmp	r3, #8
 8004500:	d11c      	bne.n	800453c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004502:	4b5f      	ldr	r3, [pc, #380]	; (8004680 <HAL_RCC_OscConfig+0x2ac>)
 8004504:	685b      	ldr	r3, [r3, #4]
 8004506:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800450a:	2b00      	cmp	r3, #0
 800450c:	d116      	bne.n	800453c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800450e:	4b5c      	ldr	r3, [pc, #368]	; (8004680 <HAL_RCC_OscConfig+0x2ac>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f003 0302 	and.w	r3, r3, #2
 8004516:	2b00      	cmp	r3, #0
 8004518:	d005      	beq.n	8004526 <HAL_RCC_OscConfig+0x152>
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	68db      	ldr	r3, [r3, #12]
 800451e:	2b01      	cmp	r3, #1
 8004520:	d001      	beq.n	8004526 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004522:	2301      	movs	r3, #1
 8004524:	e1c4      	b.n	80048b0 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004526:	4b56      	ldr	r3, [pc, #344]	; (8004680 <HAL_RCC_OscConfig+0x2ac>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	691b      	ldr	r3, [r3, #16]
 8004532:	00db      	lsls	r3, r3, #3
 8004534:	4952      	ldr	r1, [pc, #328]	; (8004680 <HAL_RCC_OscConfig+0x2ac>)
 8004536:	4313      	orrs	r3, r2
 8004538:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800453a:	e03a      	b.n	80045b2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	68db      	ldr	r3, [r3, #12]
 8004540:	2b00      	cmp	r3, #0
 8004542:	d020      	beq.n	8004586 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004544:	4b4f      	ldr	r3, [pc, #316]	; (8004684 <HAL_RCC_OscConfig+0x2b0>)
 8004546:	2201      	movs	r2, #1
 8004548:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800454a:	f7fd f9eb 	bl	8001924 <HAL_GetTick>
 800454e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004550:	e008      	b.n	8004564 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004552:	f7fd f9e7 	bl	8001924 <HAL_GetTick>
 8004556:	4602      	mov	r2, r0
 8004558:	693b      	ldr	r3, [r7, #16]
 800455a:	1ad3      	subs	r3, r2, r3
 800455c:	2b02      	cmp	r3, #2
 800455e:	d901      	bls.n	8004564 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004560:	2303      	movs	r3, #3
 8004562:	e1a5      	b.n	80048b0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004564:	4b46      	ldr	r3, [pc, #280]	; (8004680 <HAL_RCC_OscConfig+0x2ac>)
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f003 0302 	and.w	r3, r3, #2
 800456c:	2b00      	cmp	r3, #0
 800456e:	d0f0      	beq.n	8004552 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004570:	4b43      	ldr	r3, [pc, #268]	; (8004680 <HAL_RCC_OscConfig+0x2ac>)
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	691b      	ldr	r3, [r3, #16]
 800457c:	00db      	lsls	r3, r3, #3
 800457e:	4940      	ldr	r1, [pc, #256]	; (8004680 <HAL_RCC_OscConfig+0x2ac>)
 8004580:	4313      	orrs	r3, r2
 8004582:	600b      	str	r3, [r1, #0]
 8004584:	e015      	b.n	80045b2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004586:	4b3f      	ldr	r3, [pc, #252]	; (8004684 <HAL_RCC_OscConfig+0x2b0>)
 8004588:	2200      	movs	r2, #0
 800458a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800458c:	f7fd f9ca 	bl	8001924 <HAL_GetTick>
 8004590:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004592:	e008      	b.n	80045a6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004594:	f7fd f9c6 	bl	8001924 <HAL_GetTick>
 8004598:	4602      	mov	r2, r0
 800459a:	693b      	ldr	r3, [r7, #16]
 800459c:	1ad3      	subs	r3, r2, r3
 800459e:	2b02      	cmp	r3, #2
 80045a0:	d901      	bls.n	80045a6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80045a2:	2303      	movs	r3, #3
 80045a4:	e184      	b.n	80048b0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80045a6:	4b36      	ldr	r3, [pc, #216]	; (8004680 <HAL_RCC_OscConfig+0x2ac>)
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f003 0302 	and.w	r3, r3, #2
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d1f0      	bne.n	8004594 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f003 0308 	and.w	r3, r3, #8
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d030      	beq.n	8004620 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	695b      	ldr	r3, [r3, #20]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d016      	beq.n	80045f4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80045c6:	4b30      	ldr	r3, [pc, #192]	; (8004688 <HAL_RCC_OscConfig+0x2b4>)
 80045c8:	2201      	movs	r2, #1
 80045ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045cc:	f7fd f9aa 	bl	8001924 <HAL_GetTick>
 80045d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80045d2:	e008      	b.n	80045e6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80045d4:	f7fd f9a6 	bl	8001924 <HAL_GetTick>
 80045d8:	4602      	mov	r2, r0
 80045da:	693b      	ldr	r3, [r7, #16]
 80045dc:	1ad3      	subs	r3, r2, r3
 80045de:	2b02      	cmp	r3, #2
 80045e0:	d901      	bls.n	80045e6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80045e2:	2303      	movs	r3, #3
 80045e4:	e164      	b.n	80048b0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80045e6:	4b26      	ldr	r3, [pc, #152]	; (8004680 <HAL_RCC_OscConfig+0x2ac>)
 80045e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045ea:	f003 0302 	and.w	r3, r3, #2
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d0f0      	beq.n	80045d4 <HAL_RCC_OscConfig+0x200>
 80045f2:	e015      	b.n	8004620 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80045f4:	4b24      	ldr	r3, [pc, #144]	; (8004688 <HAL_RCC_OscConfig+0x2b4>)
 80045f6:	2200      	movs	r2, #0
 80045f8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045fa:	f7fd f993 	bl	8001924 <HAL_GetTick>
 80045fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004600:	e008      	b.n	8004614 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004602:	f7fd f98f 	bl	8001924 <HAL_GetTick>
 8004606:	4602      	mov	r2, r0
 8004608:	693b      	ldr	r3, [r7, #16]
 800460a:	1ad3      	subs	r3, r2, r3
 800460c:	2b02      	cmp	r3, #2
 800460e:	d901      	bls.n	8004614 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004610:	2303      	movs	r3, #3
 8004612:	e14d      	b.n	80048b0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004614:	4b1a      	ldr	r3, [pc, #104]	; (8004680 <HAL_RCC_OscConfig+0x2ac>)
 8004616:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004618:	f003 0302 	and.w	r3, r3, #2
 800461c:	2b00      	cmp	r3, #0
 800461e:	d1f0      	bne.n	8004602 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f003 0304 	and.w	r3, r3, #4
 8004628:	2b00      	cmp	r3, #0
 800462a:	f000 80a0 	beq.w	800476e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800462e:	2300      	movs	r3, #0
 8004630:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004632:	4b13      	ldr	r3, [pc, #76]	; (8004680 <HAL_RCC_OscConfig+0x2ac>)
 8004634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004636:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800463a:	2b00      	cmp	r3, #0
 800463c:	d10f      	bne.n	800465e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800463e:	2300      	movs	r3, #0
 8004640:	60bb      	str	r3, [r7, #8]
 8004642:	4b0f      	ldr	r3, [pc, #60]	; (8004680 <HAL_RCC_OscConfig+0x2ac>)
 8004644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004646:	4a0e      	ldr	r2, [pc, #56]	; (8004680 <HAL_RCC_OscConfig+0x2ac>)
 8004648:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800464c:	6413      	str	r3, [r2, #64]	; 0x40
 800464e:	4b0c      	ldr	r3, [pc, #48]	; (8004680 <HAL_RCC_OscConfig+0x2ac>)
 8004650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004652:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004656:	60bb      	str	r3, [r7, #8]
 8004658:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800465a:	2301      	movs	r3, #1
 800465c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800465e:	4b0b      	ldr	r3, [pc, #44]	; (800468c <HAL_RCC_OscConfig+0x2b8>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004666:	2b00      	cmp	r3, #0
 8004668:	d121      	bne.n	80046ae <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800466a:	4b08      	ldr	r3, [pc, #32]	; (800468c <HAL_RCC_OscConfig+0x2b8>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	4a07      	ldr	r2, [pc, #28]	; (800468c <HAL_RCC_OscConfig+0x2b8>)
 8004670:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004674:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004676:	f7fd f955 	bl	8001924 <HAL_GetTick>
 800467a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800467c:	e011      	b.n	80046a2 <HAL_RCC_OscConfig+0x2ce>
 800467e:	bf00      	nop
 8004680:	40023800 	.word	0x40023800
 8004684:	42470000 	.word	0x42470000
 8004688:	42470e80 	.word	0x42470e80
 800468c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004690:	f7fd f948 	bl	8001924 <HAL_GetTick>
 8004694:	4602      	mov	r2, r0
 8004696:	693b      	ldr	r3, [r7, #16]
 8004698:	1ad3      	subs	r3, r2, r3
 800469a:	2b02      	cmp	r3, #2
 800469c:	d901      	bls.n	80046a2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800469e:	2303      	movs	r3, #3
 80046a0:	e106      	b.n	80048b0 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046a2:	4b85      	ldr	r3, [pc, #532]	; (80048b8 <HAL_RCC_OscConfig+0x4e4>)
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d0f0      	beq.n	8004690 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	689b      	ldr	r3, [r3, #8]
 80046b2:	2b01      	cmp	r3, #1
 80046b4:	d106      	bne.n	80046c4 <HAL_RCC_OscConfig+0x2f0>
 80046b6:	4b81      	ldr	r3, [pc, #516]	; (80048bc <HAL_RCC_OscConfig+0x4e8>)
 80046b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046ba:	4a80      	ldr	r2, [pc, #512]	; (80048bc <HAL_RCC_OscConfig+0x4e8>)
 80046bc:	f043 0301 	orr.w	r3, r3, #1
 80046c0:	6713      	str	r3, [r2, #112]	; 0x70
 80046c2:	e01c      	b.n	80046fe <HAL_RCC_OscConfig+0x32a>
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	689b      	ldr	r3, [r3, #8]
 80046c8:	2b05      	cmp	r3, #5
 80046ca:	d10c      	bne.n	80046e6 <HAL_RCC_OscConfig+0x312>
 80046cc:	4b7b      	ldr	r3, [pc, #492]	; (80048bc <HAL_RCC_OscConfig+0x4e8>)
 80046ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046d0:	4a7a      	ldr	r2, [pc, #488]	; (80048bc <HAL_RCC_OscConfig+0x4e8>)
 80046d2:	f043 0304 	orr.w	r3, r3, #4
 80046d6:	6713      	str	r3, [r2, #112]	; 0x70
 80046d8:	4b78      	ldr	r3, [pc, #480]	; (80048bc <HAL_RCC_OscConfig+0x4e8>)
 80046da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046dc:	4a77      	ldr	r2, [pc, #476]	; (80048bc <HAL_RCC_OscConfig+0x4e8>)
 80046de:	f043 0301 	orr.w	r3, r3, #1
 80046e2:	6713      	str	r3, [r2, #112]	; 0x70
 80046e4:	e00b      	b.n	80046fe <HAL_RCC_OscConfig+0x32a>
 80046e6:	4b75      	ldr	r3, [pc, #468]	; (80048bc <HAL_RCC_OscConfig+0x4e8>)
 80046e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046ea:	4a74      	ldr	r2, [pc, #464]	; (80048bc <HAL_RCC_OscConfig+0x4e8>)
 80046ec:	f023 0301 	bic.w	r3, r3, #1
 80046f0:	6713      	str	r3, [r2, #112]	; 0x70
 80046f2:	4b72      	ldr	r3, [pc, #456]	; (80048bc <HAL_RCC_OscConfig+0x4e8>)
 80046f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046f6:	4a71      	ldr	r2, [pc, #452]	; (80048bc <HAL_RCC_OscConfig+0x4e8>)
 80046f8:	f023 0304 	bic.w	r3, r3, #4
 80046fc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	689b      	ldr	r3, [r3, #8]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d015      	beq.n	8004732 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004706:	f7fd f90d 	bl	8001924 <HAL_GetTick>
 800470a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800470c:	e00a      	b.n	8004724 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800470e:	f7fd f909 	bl	8001924 <HAL_GetTick>
 8004712:	4602      	mov	r2, r0
 8004714:	693b      	ldr	r3, [r7, #16]
 8004716:	1ad3      	subs	r3, r2, r3
 8004718:	f241 3288 	movw	r2, #5000	; 0x1388
 800471c:	4293      	cmp	r3, r2
 800471e:	d901      	bls.n	8004724 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004720:	2303      	movs	r3, #3
 8004722:	e0c5      	b.n	80048b0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004724:	4b65      	ldr	r3, [pc, #404]	; (80048bc <HAL_RCC_OscConfig+0x4e8>)
 8004726:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004728:	f003 0302 	and.w	r3, r3, #2
 800472c:	2b00      	cmp	r3, #0
 800472e:	d0ee      	beq.n	800470e <HAL_RCC_OscConfig+0x33a>
 8004730:	e014      	b.n	800475c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004732:	f7fd f8f7 	bl	8001924 <HAL_GetTick>
 8004736:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004738:	e00a      	b.n	8004750 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800473a:	f7fd f8f3 	bl	8001924 <HAL_GetTick>
 800473e:	4602      	mov	r2, r0
 8004740:	693b      	ldr	r3, [r7, #16]
 8004742:	1ad3      	subs	r3, r2, r3
 8004744:	f241 3288 	movw	r2, #5000	; 0x1388
 8004748:	4293      	cmp	r3, r2
 800474a:	d901      	bls.n	8004750 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800474c:	2303      	movs	r3, #3
 800474e:	e0af      	b.n	80048b0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004750:	4b5a      	ldr	r3, [pc, #360]	; (80048bc <HAL_RCC_OscConfig+0x4e8>)
 8004752:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004754:	f003 0302 	and.w	r3, r3, #2
 8004758:	2b00      	cmp	r3, #0
 800475a:	d1ee      	bne.n	800473a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800475c:	7dfb      	ldrb	r3, [r7, #23]
 800475e:	2b01      	cmp	r3, #1
 8004760:	d105      	bne.n	800476e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004762:	4b56      	ldr	r3, [pc, #344]	; (80048bc <HAL_RCC_OscConfig+0x4e8>)
 8004764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004766:	4a55      	ldr	r2, [pc, #340]	; (80048bc <HAL_RCC_OscConfig+0x4e8>)
 8004768:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800476c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	699b      	ldr	r3, [r3, #24]
 8004772:	2b00      	cmp	r3, #0
 8004774:	f000 809b 	beq.w	80048ae <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004778:	4b50      	ldr	r3, [pc, #320]	; (80048bc <HAL_RCC_OscConfig+0x4e8>)
 800477a:	689b      	ldr	r3, [r3, #8]
 800477c:	f003 030c 	and.w	r3, r3, #12
 8004780:	2b08      	cmp	r3, #8
 8004782:	d05c      	beq.n	800483e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	699b      	ldr	r3, [r3, #24]
 8004788:	2b02      	cmp	r3, #2
 800478a:	d141      	bne.n	8004810 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800478c:	4b4c      	ldr	r3, [pc, #304]	; (80048c0 <HAL_RCC_OscConfig+0x4ec>)
 800478e:	2200      	movs	r2, #0
 8004790:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004792:	f7fd f8c7 	bl	8001924 <HAL_GetTick>
 8004796:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004798:	e008      	b.n	80047ac <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800479a:	f7fd f8c3 	bl	8001924 <HAL_GetTick>
 800479e:	4602      	mov	r2, r0
 80047a0:	693b      	ldr	r3, [r7, #16]
 80047a2:	1ad3      	subs	r3, r2, r3
 80047a4:	2b02      	cmp	r3, #2
 80047a6:	d901      	bls.n	80047ac <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80047a8:	2303      	movs	r3, #3
 80047aa:	e081      	b.n	80048b0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047ac:	4b43      	ldr	r3, [pc, #268]	; (80048bc <HAL_RCC_OscConfig+0x4e8>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d1f0      	bne.n	800479a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	69da      	ldr	r2, [r3, #28]
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	6a1b      	ldr	r3, [r3, #32]
 80047c0:	431a      	orrs	r2, r3
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047c6:	019b      	lsls	r3, r3, #6
 80047c8:	431a      	orrs	r2, r3
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047ce:	085b      	lsrs	r3, r3, #1
 80047d0:	3b01      	subs	r3, #1
 80047d2:	041b      	lsls	r3, r3, #16
 80047d4:	431a      	orrs	r2, r3
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047da:	061b      	lsls	r3, r3, #24
 80047dc:	4937      	ldr	r1, [pc, #220]	; (80048bc <HAL_RCC_OscConfig+0x4e8>)
 80047de:	4313      	orrs	r3, r2
 80047e0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80047e2:	4b37      	ldr	r3, [pc, #220]	; (80048c0 <HAL_RCC_OscConfig+0x4ec>)
 80047e4:	2201      	movs	r2, #1
 80047e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047e8:	f7fd f89c 	bl	8001924 <HAL_GetTick>
 80047ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047ee:	e008      	b.n	8004802 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80047f0:	f7fd f898 	bl	8001924 <HAL_GetTick>
 80047f4:	4602      	mov	r2, r0
 80047f6:	693b      	ldr	r3, [r7, #16]
 80047f8:	1ad3      	subs	r3, r2, r3
 80047fa:	2b02      	cmp	r3, #2
 80047fc:	d901      	bls.n	8004802 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80047fe:	2303      	movs	r3, #3
 8004800:	e056      	b.n	80048b0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004802:	4b2e      	ldr	r3, [pc, #184]	; (80048bc <HAL_RCC_OscConfig+0x4e8>)
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800480a:	2b00      	cmp	r3, #0
 800480c:	d0f0      	beq.n	80047f0 <HAL_RCC_OscConfig+0x41c>
 800480e:	e04e      	b.n	80048ae <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004810:	4b2b      	ldr	r3, [pc, #172]	; (80048c0 <HAL_RCC_OscConfig+0x4ec>)
 8004812:	2200      	movs	r2, #0
 8004814:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004816:	f7fd f885 	bl	8001924 <HAL_GetTick>
 800481a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800481c:	e008      	b.n	8004830 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800481e:	f7fd f881 	bl	8001924 <HAL_GetTick>
 8004822:	4602      	mov	r2, r0
 8004824:	693b      	ldr	r3, [r7, #16]
 8004826:	1ad3      	subs	r3, r2, r3
 8004828:	2b02      	cmp	r3, #2
 800482a:	d901      	bls.n	8004830 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800482c:	2303      	movs	r3, #3
 800482e:	e03f      	b.n	80048b0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004830:	4b22      	ldr	r3, [pc, #136]	; (80048bc <HAL_RCC_OscConfig+0x4e8>)
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004838:	2b00      	cmp	r3, #0
 800483a:	d1f0      	bne.n	800481e <HAL_RCC_OscConfig+0x44a>
 800483c:	e037      	b.n	80048ae <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	699b      	ldr	r3, [r3, #24]
 8004842:	2b01      	cmp	r3, #1
 8004844:	d101      	bne.n	800484a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004846:	2301      	movs	r3, #1
 8004848:	e032      	b.n	80048b0 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800484a:	4b1c      	ldr	r3, [pc, #112]	; (80048bc <HAL_RCC_OscConfig+0x4e8>)
 800484c:	685b      	ldr	r3, [r3, #4]
 800484e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	699b      	ldr	r3, [r3, #24]
 8004854:	2b01      	cmp	r3, #1
 8004856:	d028      	beq.n	80048aa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004862:	429a      	cmp	r2, r3
 8004864:	d121      	bne.n	80048aa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004870:	429a      	cmp	r2, r3
 8004872:	d11a      	bne.n	80048aa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004874:	68fa      	ldr	r2, [r7, #12]
 8004876:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800487a:	4013      	ands	r3, r2
 800487c:	687a      	ldr	r2, [r7, #4]
 800487e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004880:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004882:	4293      	cmp	r3, r2
 8004884:	d111      	bne.n	80048aa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004890:	085b      	lsrs	r3, r3, #1
 8004892:	3b01      	subs	r3, #1
 8004894:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004896:	429a      	cmp	r2, r3
 8004898:	d107      	bne.n	80048aa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048a4:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80048a6:	429a      	cmp	r2, r3
 80048a8:	d001      	beq.n	80048ae <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80048aa:	2301      	movs	r3, #1
 80048ac:	e000      	b.n	80048b0 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80048ae:	2300      	movs	r3, #0
}
 80048b0:	4618      	mov	r0, r3
 80048b2:	3718      	adds	r7, #24
 80048b4:	46bd      	mov	sp, r7
 80048b6:	bd80      	pop	{r7, pc}
 80048b8:	40007000 	.word	0x40007000
 80048bc:	40023800 	.word	0x40023800
 80048c0:	42470060 	.word	0x42470060

080048c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	b084      	sub	sp, #16
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
 80048cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d101      	bne.n	80048d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80048d4:	2301      	movs	r3, #1
 80048d6:	e0cc      	b.n	8004a72 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80048d8:	4b68      	ldr	r3, [pc, #416]	; (8004a7c <HAL_RCC_ClockConfig+0x1b8>)
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f003 0307 	and.w	r3, r3, #7
 80048e0:	683a      	ldr	r2, [r7, #0]
 80048e2:	429a      	cmp	r2, r3
 80048e4:	d90c      	bls.n	8004900 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048e6:	4b65      	ldr	r3, [pc, #404]	; (8004a7c <HAL_RCC_ClockConfig+0x1b8>)
 80048e8:	683a      	ldr	r2, [r7, #0]
 80048ea:	b2d2      	uxtb	r2, r2
 80048ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80048ee:	4b63      	ldr	r3, [pc, #396]	; (8004a7c <HAL_RCC_ClockConfig+0x1b8>)
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f003 0307 	and.w	r3, r3, #7
 80048f6:	683a      	ldr	r2, [r7, #0]
 80048f8:	429a      	cmp	r2, r3
 80048fa:	d001      	beq.n	8004900 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80048fc:	2301      	movs	r3, #1
 80048fe:	e0b8      	b.n	8004a72 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f003 0302 	and.w	r3, r3, #2
 8004908:	2b00      	cmp	r3, #0
 800490a:	d020      	beq.n	800494e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f003 0304 	and.w	r3, r3, #4
 8004914:	2b00      	cmp	r3, #0
 8004916:	d005      	beq.n	8004924 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004918:	4b59      	ldr	r3, [pc, #356]	; (8004a80 <HAL_RCC_ClockConfig+0x1bc>)
 800491a:	689b      	ldr	r3, [r3, #8]
 800491c:	4a58      	ldr	r2, [pc, #352]	; (8004a80 <HAL_RCC_ClockConfig+0x1bc>)
 800491e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004922:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f003 0308 	and.w	r3, r3, #8
 800492c:	2b00      	cmp	r3, #0
 800492e:	d005      	beq.n	800493c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004930:	4b53      	ldr	r3, [pc, #332]	; (8004a80 <HAL_RCC_ClockConfig+0x1bc>)
 8004932:	689b      	ldr	r3, [r3, #8]
 8004934:	4a52      	ldr	r2, [pc, #328]	; (8004a80 <HAL_RCC_ClockConfig+0x1bc>)
 8004936:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800493a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800493c:	4b50      	ldr	r3, [pc, #320]	; (8004a80 <HAL_RCC_ClockConfig+0x1bc>)
 800493e:	689b      	ldr	r3, [r3, #8]
 8004940:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	689b      	ldr	r3, [r3, #8]
 8004948:	494d      	ldr	r1, [pc, #308]	; (8004a80 <HAL_RCC_ClockConfig+0x1bc>)
 800494a:	4313      	orrs	r3, r2
 800494c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f003 0301 	and.w	r3, r3, #1
 8004956:	2b00      	cmp	r3, #0
 8004958:	d044      	beq.n	80049e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	685b      	ldr	r3, [r3, #4]
 800495e:	2b01      	cmp	r3, #1
 8004960:	d107      	bne.n	8004972 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004962:	4b47      	ldr	r3, [pc, #284]	; (8004a80 <HAL_RCC_ClockConfig+0x1bc>)
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800496a:	2b00      	cmp	r3, #0
 800496c:	d119      	bne.n	80049a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800496e:	2301      	movs	r3, #1
 8004970:	e07f      	b.n	8004a72 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	685b      	ldr	r3, [r3, #4]
 8004976:	2b02      	cmp	r3, #2
 8004978:	d003      	beq.n	8004982 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800497e:	2b03      	cmp	r3, #3
 8004980:	d107      	bne.n	8004992 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004982:	4b3f      	ldr	r3, [pc, #252]	; (8004a80 <HAL_RCC_ClockConfig+0x1bc>)
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800498a:	2b00      	cmp	r3, #0
 800498c:	d109      	bne.n	80049a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800498e:	2301      	movs	r3, #1
 8004990:	e06f      	b.n	8004a72 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004992:	4b3b      	ldr	r3, [pc, #236]	; (8004a80 <HAL_RCC_ClockConfig+0x1bc>)
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f003 0302 	and.w	r3, r3, #2
 800499a:	2b00      	cmp	r3, #0
 800499c:	d101      	bne.n	80049a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800499e:	2301      	movs	r3, #1
 80049a0:	e067      	b.n	8004a72 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80049a2:	4b37      	ldr	r3, [pc, #220]	; (8004a80 <HAL_RCC_ClockConfig+0x1bc>)
 80049a4:	689b      	ldr	r3, [r3, #8]
 80049a6:	f023 0203 	bic.w	r2, r3, #3
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	685b      	ldr	r3, [r3, #4]
 80049ae:	4934      	ldr	r1, [pc, #208]	; (8004a80 <HAL_RCC_ClockConfig+0x1bc>)
 80049b0:	4313      	orrs	r3, r2
 80049b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80049b4:	f7fc ffb6 	bl	8001924 <HAL_GetTick>
 80049b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049ba:	e00a      	b.n	80049d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80049bc:	f7fc ffb2 	bl	8001924 <HAL_GetTick>
 80049c0:	4602      	mov	r2, r0
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	1ad3      	subs	r3, r2, r3
 80049c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80049ca:	4293      	cmp	r3, r2
 80049cc:	d901      	bls.n	80049d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80049ce:	2303      	movs	r3, #3
 80049d0:	e04f      	b.n	8004a72 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049d2:	4b2b      	ldr	r3, [pc, #172]	; (8004a80 <HAL_RCC_ClockConfig+0x1bc>)
 80049d4:	689b      	ldr	r3, [r3, #8]
 80049d6:	f003 020c 	and.w	r2, r3, #12
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	685b      	ldr	r3, [r3, #4]
 80049de:	009b      	lsls	r3, r3, #2
 80049e0:	429a      	cmp	r2, r3
 80049e2:	d1eb      	bne.n	80049bc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80049e4:	4b25      	ldr	r3, [pc, #148]	; (8004a7c <HAL_RCC_ClockConfig+0x1b8>)
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f003 0307 	and.w	r3, r3, #7
 80049ec:	683a      	ldr	r2, [r7, #0]
 80049ee:	429a      	cmp	r2, r3
 80049f0:	d20c      	bcs.n	8004a0c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049f2:	4b22      	ldr	r3, [pc, #136]	; (8004a7c <HAL_RCC_ClockConfig+0x1b8>)
 80049f4:	683a      	ldr	r2, [r7, #0]
 80049f6:	b2d2      	uxtb	r2, r2
 80049f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80049fa:	4b20      	ldr	r3, [pc, #128]	; (8004a7c <HAL_RCC_ClockConfig+0x1b8>)
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f003 0307 	and.w	r3, r3, #7
 8004a02:	683a      	ldr	r2, [r7, #0]
 8004a04:	429a      	cmp	r2, r3
 8004a06:	d001      	beq.n	8004a0c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004a08:	2301      	movs	r3, #1
 8004a0a:	e032      	b.n	8004a72 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f003 0304 	and.w	r3, r3, #4
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d008      	beq.n	8004a2a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004a18:	4b19      	ldr	r3, [pc, #100]	; (8004a80 <HAL_RCC_ClockConfig+0x1bc>)
 8004a1a:	689b      	ldr	r3, [r3, #8]
 8004a1c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	68db      	ldr	r3, [r3, #12]
 8004a24:	4916      	ldr	r1, [pc, #88]	; (8004a80 <HAL_RCC_ClockConfig+0x1bc>)
 8004a26:	4313      	orrs	r3, r2
 8004a28:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f003 0308 	and.w	r3, r3, #8
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d009      	beq.n	8004a4a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004a36:	4b12      	ldr	r3, [pc, #72]	; (8004a80 <HAL_RCC_ClockConfig+0x1bc>)
 8004a38:	689b      	ldr	r3, [r3, #8]
 8004a3a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	691b      	ldr	r3, [r3, #16]
 8004a42:	00db      	lsls	r3, r3, #3
 8004a44:	490e      	ldr	r1, [pc, #56]	; (8004a80 <HAL_RCC_ClockConfig+0x1bc>)
 8004a46:	4313      	orrs	r3, r2
 8004a48:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004a4a:	f000 f821 	bl	8004a90 <HAL_RCC_GetSysClockFreq>
 8004a4e:	4602      	mov	r2, r0
 8004a50:	4b0b      	ldr	r3, [pc, #44]	; (8004a80 <HAL_RCC_ClockConfig+0x1bc>)
 8004a52:	689b      	ldr	r3, [r3, #8]
 8004a54:	091b      	lsrs	r3, r3, #4
 8004a56:	f003 030f 	and.w	r3, r3, #15
 8004a5a:	490a      	ldr	r1, [pc, #40]	; (8004a84 <HAL_RCC_ClockConfig+0x1c0>)
 8004a5c:	5ccb      	ldrb	r3, [r1, r3]
 8004a5e:	fa22 f303 	lsr.w	r3, r2, r3
 8004a62:	4a09      	ldr	r2, [pc, #36]	; (8004a88 <HAL_RCC_ClockConfig+0x1c4>)
 8004a64:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004a66:	4b09      	ldr	r3, [pc, #36]	; (8004a8c <HAL_RCC_ClockConfig+0x1c8>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	f7fc ff16 	bl	800189c <HAL_InitTick>

  return HAL_OK;
 8004a70:	2300      	movs	r3, #0
}
 8004a72:	4618      	mov	r0, r3
 8004a74:	3710      	adds	r7, #16
 8004a76:	46bd      	mov	sp, r7
 8004a78:	bd80      	pop	{r7, pc}
 8004a7a:	bf00      	nop
 8004a7c:	40023c00 	.word	0x40023c00
 8004a80:	40023800 	.word	0x40023800
 8004a84:	0800cf94 	.word	0x0800cf94
 8004a88:	20000000 	.word	0x20000000
 8004a8c:	20000004 	.word	0x20000004

08004a90 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a90:	b5b0      	push	{r4, r5, r7, lr}
 8004a92:	b084      	sub	sp, #16
 8004a94:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004a96:	2100      	movs	r1, #0
 8004a98:	6079      	str	r1, [r7, #4]
 8004a9a:	2100      	movs	r1, #0
 8004a9c:	60f9      	str	r1, [r7, #12]
 8004a9e:	2100      	movs	r1, #0
 8004aa0:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004aa2:	2100      	movs	r1, #0
 8004aa4:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004aa6:	4952      	ldr	r1, [pc, #328]	; (8004bf0 <HAL_RCC_GetSysClockFreq+0x160>)
 8004aa8:	6889      	ldr	r1, [r1, #8]
 8004aaa:	f001 010c 	and.w	r1, r1, #12
 8004aae:	2908      	cmp	r1, #8
 8004ab0:	d00d      	beq.n	8004ace <HAL_RCC_GetSysClockFreq+0x3e>
 8004ab2:	2908      	cmp	r1, #8
 8004ab4:	f200 8094 	bhi.w	8004be0 <HAL_RCC_GetSysClockFreq+0x150>
 8004ab8:	2900      	cmp	r1, #0
 8004aba:	d002      	beq.n	8004ac2 <HAL_RCC_GetSysClockFreq+0x32>
 8004abc:	2904      	cmp	r1, #4
 8004abe:	d003      	beq.n	8004ac8 <HAL_RCC_GetSysClockFreq+0x38>
 8004ac0:	e08e      	b.n	8004be0 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004ac2:	4b4c      	ldr	r3, [pc, #304]	; (8004bf4 <HAL_RCC_GetSysClockFreq+0x164>)
 8004ac4:	60bb      	str	r3, [r7, #8]
       break;
 8004ac6:	e08e      	b.n	8004be6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004ac8:	4b4b      	ldr	r3, [pc, #300]	; (8004bf8 <HAL_RCC_GetSysClockFreq+0x168>)
 8004aca:	60bb      	str	r3, [r7, #8]
      break;
 8004acc:	e08b      	b.n	8004be6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004ace:	4948      	ldr	r1, [pc, #288]	; (8004bf0 <HAL_RCC_GetSysClockFreq+0x160>)
 8004ad0:	6849      	ldr	r1, [r1, #4]
 8004ad2:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8004ad6:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004ad8:	4945      	ldr	r1, [pc, #276]	; (8004bf0 <HAL_RCC_GetSysClockFreq+0x160>)
 8004ada:	6849      	ldr	r1, [r1, #4]
 8004adc:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8004ae0:	2900      	cmp	r1, #0
 8004ae2:	d024      	beq.n	8004b2e <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ae4:	4942      	ldr	r1, [pc, #264]	; (8004bf0 <HAL_RCC_GetSysClockFreq+0x160>)
 8004ae6:	6849      	ldr	r1, [r1, #4]
 8004ae8:	0989      	lsrs	r1, r1, #6
 8004aea:	4608      	mov	r0, r1
 8004aec:	f04f 0100 	mov.w	r1, #0
 8004af0:	f240 14ff 	movw	r4, #511	; 0x1ff
 8004af4:	f04f 0500 	mov.w	r5, #0
 8004af8:	ea00 0204 	and.w	r2, r0, r4
 8004afc:	ea01 0305 	and.w	r3, r1, r5
 8004b00:	493d      	ldr	r1, [pc, #244]	; (8004bf8 <HAL_RCC_GetSysClockFreq+0x168>)
 8004b02:	fb01 f003 	mul.w	r0, r1, r3
 8004b06:	2100      	movs	r1, #0
 8004b08:	fb01 f102 	mul.w	r1, r1, r2
 8004b0c:	1844      	adds	r4, r0, r1
 8004b0e:	493a      	ldr	r1, [pc, #232]	; (8004bf8 <HAL_RCC_GetSysClockFreq+0x168>)
 8004b10:	fba2 0101 	umull	r0, r1, r2, r1
 8004b14:	1863      	adds	r3, r4, r1
 8004b16:	4619      	mov	r1, r3
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	461a      	mov	r2, r3
 8004b1c:	f04f 0300 	mov.w	r3, #0
 8004b20:	f7fc f8ba 	bl	8000c98 <__aeabi_uldivmod>
 8004b24:	4602      	mov	r2, r0
 8004b26:	460b      	mov	r3, r1
 8004b28:	4613      	mov	r3, r2
 8004b2a:	60fb      	str	r3, [r7, #12]
 8004b2c:	e04a      	b.n	8004bc4 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b2e:	4b30      	ldr	r3, [pc, #192]	; (8004bf0 <HAL_RCC_GetSysClockFreq+0x160>)
 8004b30:	685b      	ldr	r3, [r3, #4]
 8004b32:	099b      	lsrs	r3, r3, #6
 8004b34:	461a      	mov	r2, r3
 8004b36:	f04f 0300 	mov.w	r3, #0
 8004b3a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004b3e:	f04f 0100 	mov.w	r1, #0
 8004b42:	ea02 0400 	and.w	r4, r2, r0
 8004b46:	ea03 0501 	and.w	r5, r3, r1
 8004b4a:	4620      	mov	r0, r4
 8004b4c:	4629      	mov	r1, r5
 8004b4e:	f04f 0200 	mov.w	r2, #0
 8004b52:	f04f 0300 	mov.w	r3, #0
 8004b56:	014b      	lsls	r3, r1, #5
 8004b58:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004b5c:	0142      	lsls	r2, r0, #5
 8004b5e:	4610      	mov	r0, r2
 8004b60:	4619      	mov	r1, r3
 8004b62:	1b00      	subs	r0, r0, r4
 8004b64:	eb61 0105 	sbc.w	r1, r1, r5
 8004b68:	f04f 0200 	mov.w	r2, #0
 8004b6c:	f04f 0300 	mov.w	r3, #0
 8004b70:	018b      	lsls	r3, r1, #6
 8004b72:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004b76:	0182      	lsls	r2, r0, #6
 8004b78:	1a12      	subs	r2, r2, r0
 8004b7a:	eb63 0301 	sbc.w	r3, r3, r1
 8004b7e:	f04f 0000 	mov.w	r0, #0
 8004b82:	f04f 0100 	mov.w	r1, #0
 8004b86:	00d9      	lsls	r1, r3, #3
 8004b88:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004b8c:	00d0      	lsls	r0, r2, #3
 8004b8e:	4602      	mov	r2, r0
 8004b90:	460b      	mov	r3, r1
 8004b92:	1912      	adds	r2, r2, r4
 8004b94:	eb45 0303 	adc.w	r3, r5, r3
 8004b98:	f04f 0000 	mov.w	r0, #0
 8004b9c:	f04f 0100 	mov.w	r1, #0
 8004ba0:	0299      	lsls	r1, r3, #10
 8004ba2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004ba6:	0290      	lsls	r0, r2, #10
 8004ba8:	4602      	mov	r2, r0
 8004baa:	460b      	mov	r3, r1
 8004bac:	4610      	mov	r0, r2
 8004bae:	4619      	mov	r1, r3
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	461a      	mov	r2, r3
 8004bb4:	f04f 0300 	mov.w	r3, #0
 8004bb8:	f7fc f86e 	bl	8000c98 <__aeabi_uldivmod>
 8004bbc:	4602      	mov	r2, r0
 8004bbe:	460b      	mov	r3, r1
 8004bc0:	4613      	mov	r3, r2
 8004bc2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004bc4:	4b0a      	ldr	r3, [pc, #40]	; (8004bf0 <HAL_RCC_GetSysClockFreq+0x160>)
 8004bc6:	685b      	ldr	r3, [r3, #4]
 8004bc8:	0c1b      	lsrs	r3, r3, #16
 8004bca:	f003 0303 	and.w	r3, r3, #3
 8004bce:	3301      	adds	r3, #1
 8004bd0:	005b      	lsls	r3, r3, #1
 8004bd2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004bd4:	68fa      	ldr	r2, [r7, #12]
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bdc:	60bb      	str	r3, [r7, #8]
      break;
 8004bde:	e002      	b.n	8004be6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004be0:	4b04      	ldr	r3, [pc, #16]	; (8004bf4 <HAL_RCC_GetSysClockFreq+0x164>)
 8004be2:	60bb      	str	r3, [r7, #8]
      break;
 8004be4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004be6:	68bb      	ldr	r3, [r7, #8]
}
 8004be8:	4618      	mov	r0, r3
 8004bea:	3710      	adds	r7, #16
 8004bec:	46bd      	mov	sp, r7
 8004bee:	bdb0      	pop	{r4, r5, r7, pc}
 8004bf0:	40023800 	.word	0x40023800
 8004bf4:	00f42400 	.word	0x00f42400
 8004bf8:	017d7840 	.word	0x017d7840

08004bfc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004bfc:	b480      	push	{r7}
 8004bfe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004c00:	4b03      	ldr	r3, [pc, #12]	; (8004c10 <HAL_RCC_GetHCLKFreq+0x14>)
 8004c02:	681b      	ldr	r3, [r3, #0]
}
 8004c04:	4618      	mov	r0, r3
 8004c06:	46bd      	mov	sp, r7
 8004c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0c:	4770      	bx	lr
 8004c0e:	bf00      	nop
 8004c10:	20000000 	.word	0x20000000

08004c14 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c14:	b580      	push	{r7, lr}
 8004c16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004c18:	f7ff fff0 	bl	8004bfc <HAL_RCC_GetHCLKFreq>
 8004c1c:	4602      	mov	r2, r0
 8004c1e:	4b05      	ldr	r3, [pc, #20]	; (8004c34 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004c20:	689b      	ldr	r3, [r3, #8]
 8004c22:	0a9b      	lsrs	r3, r3, #10
 8004c24:	f003 0307 	and.w	r3, r3, #7
 8004c28:	4903      	ldr	r1, [pc, #12]	; (8004c38 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004c2a:	5ccb      	ldrb	r3, [r1, r3]
 8004c2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c30:	4618      	mov	r0, r3
 8004c32:	bd80      	pop	{r7, pc}
 8004c34:	40023800 	.word	0x40023800
 8004c38:	0800cfa4 	.word	0x0800cfa4

08004c3c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004c3c:	b084      	sub	sp, #16
 8004c3e:	b580      	push	{r7, lr}
 8004c40:	b084      	sub	sp, #16
 8004c42:	af00      	add	r7, sp, #0
 8004c44:	6078      	str	r0, [r7, #4]
 8004c46:	f107 001c 	add.w	r0, r7, #28
 8004c4a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004c4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c50:	2b01      	cmp	r3, #1
 8004c52:	d122      	bne.n	8004c9a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c58:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	68db      	ldr	r3, [r3, #12]
 8004c64:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004c68:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c6c:	687a      	ldr	r2, [r7, #4]
 8004c6e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	68db      	ldr	r3, [r3, #12]
 8004c74:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004c7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c7e:	2b01      	cmp	r3, #1
 8004c80:	d105      	bne.n	8004c8e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	68db      	ldr	r3, [r3, #12]
 8004c86:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004c8e:	6878      	ldr	r0, [r7, #4]
 8004c90:	f001 fb1c 	bl	80062cc <USB_CoreReset>
 8004c94:	4603      	mov	r3, r0
 8004c96:	73fb      	strb	r3, [r7, #15]
 8004c98:	e01a      	b.n	8004cd0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	68db      	ldr	r3, [r3, #12]
 8004c9e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004ca6:	6878      	ldr	r0, [r7, #4]
 8004ca8:	f001 fb10 	bl	80062cc <USB_CoreReset>
 8004cac:	4603      	mov	r3, r0
 8004cae:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004cb0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d106      	bne.n	8004cc4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cba:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	639a      	str	r2, [r3, #56]	; 0x38
 8004cc2:	e005      	b.n	8004cd0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cc8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004cd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cd2:	2b01      	cmp	r3, #1
 8004cd4:	d10b      	bne.n	8004cee <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	689b      	ldr	r3, [r3, #8]
 8004cda:	f043 0206 	orr.w	r2, r3, #6
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	689b      	ldr	r3, [r3, #8]
 8004ce6:	f043 0220 	orr.w	r2, r3, #32
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004cee:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	3710      	adds	r7, #16
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004cfa:	b004      	add	sp, #16
 8004cfc:	4770      	bx	lr
	...

08004d00 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004d00:	b480      	push	{r7}
 8004d02:	b087      	sub	sp, #28
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	60f8      	str	r0, [r7, #12]
 8004d08:	60b9      	str	r1, [r7, #8]
 8004d0a:	4613      	mov	r3, r2
 8004d0c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004d0e:	79fb      	ldrb	r3, [r7, #7]
 8004d10:	2b02      	cmp	r3, #2
 8004d12:	d165      	bne.n	8004de0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004d14:	68bb      	ldr	r3, [r7, #8]
 8004d16:	4a41      	ldr	r2, [pc, #260]	; (8004e1c <USB_SetTurnaroundTime+0x11c>)
 8004d18:	4293      	cmp	r3, r2
 8004d1a:	d906      	bls.n	8004d2a <USB_SetTurnaroundTime+0x2a>
 8004d1c:	68bb      	ldr	r3, [r7, #8]
 8004d1e:	4a40      	ldr	r2, [pc, #256]	; (8004e20 <USB_SetTurnaroundTime+0x120>)
 8004d20:	4293      	cmp	r3, r2
 8004d22:	d202      	bcs.n	8004d2a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004d24:	230f      	movs	r3, #15
 8004d26:	617b      	str	r3, [r7, #20]
 8004d28:	e062      	b.n	8004df0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004d2a:	68bb      	ldr	r3, [r7, #8]
 8004d2c:	4a3c      	ldr	r2, [pc, #240]	; (8004e20 <USB_SetTurnaroundTime+0x120>)
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d306      	bcc.n	8004d40 <USB_SetTurnaroundTime+0x40>
 8004d32:	68bb      	ldr	r3, [r7, #8]
 8004d34:	4a3b      	ldr	r2, [pc, #236]	; (8004e24 <USB_SetTurnaroundTime+0x124>)
 8004d36:	4293      	cmp	r3, r2
 8004d38:	d202      	bcs.n	8004d40 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004d3a:	230e      	movs	r3, #14
 8004d3c:	617b      	str	r3, [r7, #20]
 8004d3e:	e057      	b.n	8004df0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004d40:	68bb      	ldr	r3, [r7, #8]
 8004d42:	4a38      	ldr	r2, [pc, #224]	; (8004e24 <USB_SetTurnaroundTime+0x124>)
 8004d44:	4293      	cmp	r3, r2
 8004d46:	d306      	bcc.n	8004d56 <USB_SetTurnaroundTime+0x56>
 8004d48:	68bb      	ldr	r3, [r7, #8]
 8004d4a:	4a37      	ldr	r2, [pc, #220]	; (8004e28 <USB_SetTurnaroundTime+0x128>)
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d202      	bcs.n	8004d56 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004d50:	230d      	movs	r3, #13
 8004d52:	617b      	str	r3, [r7, #20]
 8004d54:	e04c      	b.n	8004df0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004d56:	68bb      	ldr	r3, [r7, #8]
 8004d58:	4a33      	ldr	r2, [pc, #204]	; (8004e28 <USB_SetTurnaroundTime+0x128>)
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	d306      	bcc.n	8004d6c <USB_SetTurnaroundTime+0x6c>
 8004d5e:	68bb      	ldr	r3, [r7, #8]
 8004d60:	4a32      	ldr	r2, [pc, #200]	; (8004e2c <USB_SetTurnaroundTime+0x12c>)
 8004d62:	4293      	cmp	r3, r2
 8004d64:	d802      	bhi.n	8004d6c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004d66:	230c      	movs	r3, #12
 8004d68:	617b      	str	r3, [r7, #20]
 8004d6a:	e041      	b.n	8004df0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004d6c:	68bb      	ldr	r3, [r7, #8]
 8004d6e:	4a2f      	ldr	r2, [pc, #188]	; (8004e2c <USB_SetTurnaroundTime+0x12c>)
 8004d70:	4293      	cmp	r3, r2
 8004d72:	d906      	bls.n	8004d82 <USB_SetTurnaroundTime+0x82>
 8004d74:	68bb      	ldr	r3, [r7, #8]
 8004d76:	4a2e      	ldr	r2, [pc, #184]	; (8004e30 <USB_SetTurnaroundTime+0x130>)
 8004d78:	4293      	cmp	r3, r2
 8004d7a:	d802      	bhi.n	8004d82 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004d7c:	230b      	movs	r3, #11
 8004d7e:	617b      	str	r3, [r7, #20]
 8004d80:	e036      	b.n	8004df0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004d82:	68bb      	ldr	r3, [r7, #8]
 8004d84:	4a2a      	ldr	r2, [pc, #168]	; (8004e30 <USB_SetTurnaroundTime+0x130>)
 8004d86:	4293      	cmp	r3, r2
 8004d88:	d906      	bls.n	8004d98 <USB_SetTurnaroundTime+0x98>
 8004d8a:	68bb      	ldr	r3, [r7, #8]
 8004d8c:	4a29      	ldr	r2, [pc, #164]	; (8004e34 <USB_SetTurnaroundTime+0x134>)
 8004d8e:	4293      	cmp	r3, r2
 8004d90:	d802      	bhi.n	8004d98 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004d92:	230a      	movs	r3, #10
 8004d94:	617b      	str	r3, [r7, #20]
 8004d96:	e02b      	b.n	8004df0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004d98:	68bb      	ldr	r3, [r7, #8]
 8004d9a:	4a26      	ldr	r2, [pc, #152]	; (8004e34 <USB_SetTurnaroundTime+0x134>)
 8004d9c:	4293      	cmp	r3, r2
 8004d9e:	d906      	bls.n	8004dae <USB_SetTurnaroundTime+0xae>
 8004da0:	68bb      	ldr	r3, [r7, #8]
 8004da2:	4a25      	ldr	r2, [pc, #148]	; (8004e38 <USB_SetTurnaroundTime+0x138>)
 8004da4:	4293      	cmp	r3, r2
 8004da6:	d202      	bcs.n	8004dae <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004da8:	2309      	movs	r3, #9
 8004daa:	617b      	str	r3, [r7, #20]
 8004dac:	e020      	b.n	8004df0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004dae:	68bb      	ldr	r3, [r7, #8]
 8004db0:	4a21      	ldr	r2, [pc, #132]	; (8004e38 <USB_SetTurnaroundTime+0x138>)
 8004db2:	4293      	cmp	r3, r2
 8004db4:	d306      	bcc.n	8004dc4 <USB_SetTurnaroundTime+0xc4>
 8004db6:	68bb      	ldr	r3, [r7, #8]
 8004db8:	4a20      	ldr	r2, [pc, #128]	; (8004e3c <USB_SetTurnaroundTime+0x13c>)
 8004dba:	4293      	cmp	r3, r2
 8004dbc:	d802      	bhi.n	8004dc4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004dbe:	2308      	movs	r3, #8
 8004dc0:	617b      	str	r3, [r7, #20]
 8004dc2:	e015      	b.n	8004df0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004dc4:	68bb      	ldr	r3, [r7, #8]
 8004dc6:	4a1d      	ldr	r2, [pc, #116]	; (8004e3c <USB_SetTurnaroundTime+0x13c>)
 8004dc8:	4293      	cmp	r3, r2
 8004dca:	d906      	bls.n	8004dda <USB_SetTurnaroundTime+0xda>
 8004dcc:	68bb      	ldr	r3, [r7, #8]
 8004dce:	4a1c      	ldr	r2, [pc, #112]	; (8004e40 <USB_SetTurnaroundTime+0x140>)
 8004dd0:	4293      	cmp	r3, r2
 8004dd2:	d202      	bcs.n	8004dda <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004dd4:	2307      	movs	r3, #7
 8004dd6:	617b      	str	r3, [r7, #20]
 8004dd8:	e00a      	b.n	8004df0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004dda:	2306      	movs	r3, #6
 8004ddc:	617b      	str	r3, [r7, #20]
 8004dde:	e007      	b.n	8004df0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004de0:	79fb      	ldrb	r3, [r7, #7]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d102      	bne.n	8004dec <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004de6:	2309      	movs	r3, #9
 8004de8:	617b      	str	r3, [r7, #20]
 8004dea:	e001      	b.n	8004df0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004dec:	2309      	movs	r3, #9
 8004dee:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	68db      	ldr	r3, [r3, #12]
 8004df4:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	68da      	ldr	r2, [r3, #12]
 8004e00:	697b      	ldr	r3, [r7, #20]
 8004e02:	029b      	lsls	r3, r3, #10
 8004e04:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004e08:	431a      	orrs	r2, r3
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004e0e:	2300      	movs	r3, #0
}
 8004e10:	4618      	mov	r0, r3
 8004e12:	371c      	adds	r7, #28
 8004e14:	46bd      	mov	sp, r7
 8004e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1a:	4770      	bx	lr
 8004e1c:	00d8acbf 	.word	0x00d8acbf
 8004e20:	00e4e1c0 	.word	0x00e4e1c0
 8004e24:	00f42400 	.word	0x00f42400
 8004e28:	01067380 	.word	0x01067380
 8004e2c:	011a499f 	.word	0x011a499f
 8004e30:	01312cff 	.word	0x01312cff
 8004e34:	014ca43f 	.word	0x014ca43f
 8004e38:	016e3600 	.word	0x016e3600
 8004e3c:	01a6ab1f 	.word	0x01a6ab1f
 8004e40:	01e84800 	.word	0x01e84800

08004e44 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004e44:	b480      	push	{r7}
 8004e46:	b083      	sub	sp, #12
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	689b      	ldr	r3, [r3, #8]
 8004e50:	f043 0201 	orr.w	r2, r3, #1
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004e58:	2300      	movs	r3, #0
}
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	370c      	adds	r7, #12
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e64:	4770      	bx	lr

08004e66 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004e66:	b480      	push	{r7}
 8004e68:	b083      	sub	sp, #12
 8004e6a:	af00      	add	r7, sp, #0
 8004e6c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	689b      	ldr	r3, [r3, #8]
 8004e72:	f023 0201 	bic.w	r2, r3, #1
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004e7a:	2300      	movs	r3, #0
}
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	370c      	adds	r7, #12
 8004e80:	46bd      	mov	sp, r7
 8004e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e86:	4770      	bx	lr

08004e88 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	b084      	sub	sp, #16
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
 8004e90:	460b      	mov	r3, r1
 8004e92:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004e94:	2300      	movs	r3, #0
 8004e96:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	68db      	ldr	r3, [r3, #12]
 8004e9c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004ea4:	78fb      	ldrb	r3, [r7, #3]
 8004ea6:	2b01      	cmp	r3, #1
 8004ea8:	d115      	bne.n	8004ed6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	68db      	ldr	r3, [r3, #12]
 8004eae:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004eb6:	2001      	movs	r0, #1
 8004eb8:	f7fc fd40 	bl	800193c <HAL_Delay>
      ms++;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	3301      	adds	r3, #1
 8004ec0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004ec2:	6878      	ldr	r0, [r7, #4]
 8004ec4:	f001 f972 	bl	80061ac <USB_GetMode>
 8004ec8:	4603      	mov	r3, r0
 8004eca:	2b01      	cmp	r3, #1
 8004ecc:	d01e      	beq.n	8004f0c <USB_SetCurrentMode+0x84>
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	2b31      	cmp	r3, #49	; 0x31
 8004ed2:	d9f0      	bls.n	8004eb6 <USB_SetCurrentMode+0x2e>
 8004ed4:	e01a      	b.n	8004f0c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004ed6:	78fb      	ldrb	r3, [r7, #3]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d115      	bne.n	8004f08 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	68db      	ldr	r3, [r3, #12]
 8004ee0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004ee8:	2001      	movs	r0, #1
 8004eea:	f7fc fd27 	bl	800193c <HAL_Delay>
      ms++;
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	3301      	adds	r3, #1
 8004ef2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004ef4:	6878      	ldr	r0, [r7, #4]
 8004ef6:	f001 f959 	bl	80061ac <USB_GetMode>
 8004efa:	4603      	mov	r3, r0
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d005      	beq.n	8004f0c <USB_SetCurrentMode+0x84>
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	2b31      	cmp	r3, #49	; 0x31
 8004f04:	d9f0      	bls.n	8004ee8 <USB_SetCurrentMode+0x60>
 8004f06:	e001      	b.n	8004f0c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004f08:	2301      	movs	r3, #1
 8004f0a:	e005      	b.n	8004f18 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	2b32      	cmp	r3, #50	; 0x32
 8004f10:	d101      	bne.n	8004f16 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004f12:	2301      	movs	r3, #1
 8004f14:	e000      	b.n	8004f18 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004f16:	2300      	movs	r3, #0
}
 8004f18:	4618      	mov	r0, r3
 8004f1a:	3710      	adds	r7, #16
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	bd80      	pop	{r7, pc}

08004f20 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004f20:	b084      	sub	sp, #16
 8004f22:	b580      	push	{r7, lr}
 8004f24:	b086      	sub	sp, #24
 8004f26:	af00      	add	r7, sp, #0
 8004f28:	6078      	str	r0, [r7, #4]
 8004f2a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004f2e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004f32:	2300      	movs	r3, #0
 8004f34:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	613b      	str	r3, [r7, #16]
 8004f3e:	e009      	b.n	8004f54 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004f40:	687a      	ldr	r2, [r7, #4]
 8004f42:	693b      	ldr	r3, [r7, #16]
 8004f44:	3340      	adds	r3, #64	; 0x40
 8004f46:	009b      	lsls	r3, r3, #2
 8004f48:	4413      	add	r3, r2
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004f4e:	693b      	ldr	r3, [r7, #16]
 8004f50:	3301      	adds	r3, #1
 8004f52:	613b      	str	r3, [r7, #16]
 8004f54:	693b      	ldr	r3, [r7, #16]
 8004f56:	2b0e      	cmp	r3, #14
 8004f58:	d9f2      	bls.n	8004f40 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004f5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d11c      	bne.n	8004f9a <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f66:	685b      	ldr	r3, [r3, #4]
 8004f68:	68fa      	ldr	r2, [r7, #12]
 8004f6a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004f6e:	f043 0302 	orr.w	r3, r3, #2
 8004f72:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f78:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f84:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f90:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	639a      	str	r2, [r3, #56]	; 0x38
 8004f98:	e00b      	b.n	8004fb2 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f9e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004faa:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004fb8:	461a      	mov	r2, r3
 8004fba:	2300      	movs	r3, #0
 8004fbc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fc4:	4619      	mov	r1, r3
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fcc:	461a      	mov	r2, r3
 8004fce:	680b      	ldr	r3, [r1, #0]
 8004fd0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004fd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fd4:	2b01      	cmp	r3, #1
 8004fd6:	d10c      	bne.n	8004ff2 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004fd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d104      	bne.n	8004fe8 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004fde:	2100      	movs	r1, #0
 8004fe0:	6878      	ldr	r0, [r7, #4]
 8004fe2:	f000 f945 	bl	8005270 <USB_SetDevSpeed>
 8004fe6:	e008      	b.n	8004ffa <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004fe8:	2101      	movs	r1, #1
 8004fea:	6878      	ldr	r0, [r7, #4]
 8004fec:	f000 f940 	bl	8005270 <USB_SetDevSpeed>
 8004ff0:	e003      	b.n	8004ffa <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004ff2:	2103      	movs	r1, #3
 8004ff4:	6878      	ldr	r0, [r7, #4]
 8004ff6:	f000 f93b 	bl	8005270 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004ffa:	2110      	movs	r1, #16
 8004ffc:	6878      	ldr	r0, [r7, #4]
 8004ffe:	f000 f8f3 	bl	80051e8 <USB_FlushTxFifo>
 8005002:	4603      	mov	r3, r0
 8005004:	2b00      	cmp	r3, #0
 8005006:	d001      	beq.n	800500c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8005008:	2301      	movs	r3, #1
 800500a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800500c:	6878      	ldr	r0, [r7, #4]
 800500e:	f000 f90f 	bl	8005230 <USB_FlushRxFifo>
 8005012:	4603      	mov	r3, r0
 8005014:	2b00      	cmp	r3, #0
 8005016:	d001      	beq.n	800501c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8005018:	2301      	movs	r3, #1
 800501a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005022:	461a      	mov	r2, r3
 8005024:	2300      	movs	r3, #0
 8005026:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800502e:	461a      	mov	r2, r3
 8005030:	2300      	movs	r3, #0
 8005032:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800503a:	461a      	mov	r2, r3
 800503c:	2300      	movs	r3, #0
 800503e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005040:	2300      	movs	r3, #0
 8005042:	613b      	str	r3, [r7, #16]
 8005044:	e043      	b.n	80050ce <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005046:	693b      	ldr	r3, [r7, #16]
 8005048:	015a      	lsls	r2, r3, #5
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	4413      	add	r3, r2
 800504e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005058:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800505c:	d118      	bne.n	8005090 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800505e:	693b      	ldr	r3, [r7, #16]
 8005060:	2b00      	cmp	r3, #0
 8005062:	d10a      	bne.n	800507a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005064:	693b      	ldr	r3, [r7, #16]
 8005066:	015a      	lsls	r2, r3, #5
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	4413      	add	r3, r2
 800506c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005070:	461a      	mov	r2, r3
 8005072:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005076:	6013      	str	r3, [r2, #0]
 8005078:	e013      	b.n	80050a2 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800507a:	693b      	ldr	r3, [r7, #16]
 800507c:	015a      	lsls	r2, r3, #5
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	4413      	add	r3, r2
 8005082:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005086:	461a      	mov	r2, r3
 8005088:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800508c:	6013      	str	r3, [r2, #0]
 800508e:	e008      	b.n	80050a2 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005090:	693b      	ldr	r3, [r7, #16]
 8005092:	015a      	lsls	r2, r3, #5
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	4413      	add	r3, r2
 8005098:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800509c:	461a      	mov	r2, r3
 800509e:	2300      	movs	r3, #0
 80050a0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80050a2:	693b      	ldr	r3, [r7, #16]
 80050a4:	015a      	lsls	r2, r3, #5
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	4413      	add	r3, r2
 80050aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050ae:	461a      	mov	r2, r3
 80050b0:	2300      	movs	r3, #0
 80050b2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80050b4:	693b      	ldr	r3, [r7, #16]
 80050b6:	015a      	lsls	r2, r3, #5
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	4413      	add	r3, r2
 80050bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050c0:	461a      	mov	r2, r3
 80050c2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80050c6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80050c8:	693b      	ldr	r3, [r7, #16]
 80050ca:	3301      	adds	r3, #1
 80050cc:	613b      	str	r3, [r7, #16]
 80050ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050d0:	693a      	ldr	r2, [r7, #16]
 80050d2:	429a      	cmp	r2, r3
 80050d4:	d3b7      	bcc.n	8005046 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80050d6:	2300      	movs	r3, #0
 80050d8:	613b      	str	r3, [r7, #16]
 80050da:	e043      	b.n	8005164 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80050dc:	693b      	ldr	r3, [r7, #16]
 80050de:	015a      	lsls	r2, r3, #5
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	4413      	add	r3, r2
 80050e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80050ee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80050f2:	d118      	bne.n	8005126 <USB_DevInit+0x206>
    {
      if (i == 0U)
 80050f4:	693b      	ldr	r3, [r7, #16]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d10a      	bne.n	8005110 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80050fa:	693b      	ldr	r3, [r7, #16]
 80050fc:	015a      	lsls	r2, r3, #5
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	4413      	add	r3, r2
 8005102:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005106:	461a      	mov	r2, r3
 8005108:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800510c:	6013      	str	r3, [r2, #0]
 800510e:	e013      	b.n	8005138 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005110:	693b      	ldr	r3, [r7, #16]
 8005112:	015a      	lsls	r2, r3, #5
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	4413      	add	r3, r2
 8005118:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800511c:	461a      	mov	r2, r3
 800511e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005122:	6013      	str	r3, [r2, #0]
 8005124:	e008      	b.n	8005138 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005126:	693b      	ldr	r3, [r7, #16]
 8005128:	015a      	lsls	r2, r3, #5
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	4413      	add	r3, r2
 800512e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005132:	461a      	mov	r2, r3
 8005134:	2300      	movs	r3, #0
 8005136:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005138:	693b      	ldr	r3, [r7, #16]
 800513a:	015a      	lsls	r2, r3, #5
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	4413      	add	r3, r2
 8005140:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005144:	461a      	mov	r2, r3
 8005146:	2300      	movs	r3, #0
 8005148:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800514a:	693b      	ldr	r3, [r7, #16]
 800514c:	015a      	lsls	r2, r3, #5
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	4413      	add	r3, r2
 8005152:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005156:	461a      	mov	r2, r3
 8005158:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800515c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800515e:	693b      	ldr	r3, [r7, #16]
 8005160:	3301      	adds	r3, #1
 8005162:	613b      	str	r3, [r7, #16]
 8005164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005166:	693a      	ldr	r2, [r7, #16]
 8005168:	429a      	cmp	r2, r3
 800516a:	d3b7      	bcc.n	80050dc <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005172:	691b      	ldr	r3, [r3, #16]
 8005174:	68fa      	ldr	r2, [r7, #12]
 8005176:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800517a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800517e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2200      	movs	r2, #0
 8005184:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800518c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800518e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005190:	2b00      	cmp	r3, #0
 8005192:	d105      	bne.n	80051a0 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	699b      	ldr	r3, [r3, #24]
 8005198:	f043 0210 	orr.w	r2, r3, #16
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	699a      	ldr	r2, [r3, #24]
 80051a4:	4b0f      	ldr	r3, [pc, #60]	; (80051e4 <USB_DevInit+0x2c4>)
 80051a6:	4313      	orrs	r3, r2
 80051a8:	687a      	ldr	r2, [r7, #4]
 80051aa:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80051ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d005      	beq.n	80051be <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	699b      	ldr	r3, [r3, #24]
 80051b6:	f043 0208 	orr.w	r2, r3, #8
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80051be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80051c0:	2b01      	cmp	r3, #1
 80051c2:	d107      	bne.n	80051d4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	699b      	ldr	r3, [r3, #24]
 80051c8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80051cc:	f043 0304 	orr.w	r3, r3, #4
 80051d0:	687a      	ldr	r2, [r7, #4]
 80051d2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80051d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80051d6:	4618      	mov	r0, r3
 80051d8:	3718      	adds	r7, #24
 80051da:	46bd      	mov	sp, r7
 80051dc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80051e0:	b004      	add	sp, #16
 80051e2:	4770      	bx	lr
 80051e4:	803c3800 	.word	0x803c3800

080051e8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80051e8:	b480      	push	{r7}
 80051ea:	b085      	sub	sp, #20
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
 80051f0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80051f2:	2300      	movs	r3, #0
 80051f4:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80051f6:	683b      	ldr	r3, [r7, #0]
 80051f8:	019b      	lsls	r3, r3, #6
 80051fa:	f043 0220 	orr.w	r2, r3, #32
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	3301      	adds	r3, #1
 8005206:	60fb      	str	r3, [r7, #12]
 8005208:	4a08      	ldr	r2, [pc, #32]	; (800522c <USB_FlushTxFifo+0x44>)
 800520a:	4293      	cmp	r3, r2
 800520c:	d901      	bls.n	8005212 <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 800520e:	2303      	movs	r3, #3
 8005210:	e006      	b.n	8005220 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	691b      	ldr	r3, [r3, #16]
 8005216:	f003 0320 	and.w	r3, r3, #32
 800521a:	2b20      	cmp	r3, #32
 800521c:	d0f1      	beq.n	8005202 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800521e:	2300      	movs	r3, #0
}
 8005220:	4618      	mov	r0, r3
 8005222:	3714      	adds	r7, #20
 8005224:	46bd      	mov	sp, r7
 8005226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522a:	4770      	bx	lr
 800522c:	00030d40 	.word	0x00030d40

08005230 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005230:	b480      	push	{r7}
 8005232:	b085      	sub	sp, #20
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005238:	2300      	movs	r3, #0
 800523a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2210      	movs	r2, #16
 8005240:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	3301      	adds	r3, #1
 8005246:	60fb      	str	r3, [r7, #12]
 8005248:	4a08      	ldr	r2, [pc, #32]	; (800526c <USB_FlushRxFifo+0x3c>)
 800524a:	4293      	cmp	r3, r2
 800524c:	d901      	bls.n	8005252 <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 800524e:	2303      	movs	r3, #3
 8005250:	e006      	b.n	8005260 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	691b      	ldr	r3, [r3, #16]
 8005256:	f003 0310 	and.w	r3, r3, #16
 800525a:	2b10      	cmp	r3, #16
 800525c:	d0f1      	beq.n	8005242 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800525e:	2300      	movs	r3, #0
}
 8005260:	4618      	mov	r0, r3
 8005262:	3714      	adds	r7, #20
 8005264:	46bd      	mov	sp, r7
 8005266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526a:	4770      	bx	lr
 800526c:	00030d40 	.word	0x00030d40

08005270 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005270:	b480      	push	{r7}
 8005272:	b085      	sub	sp, #20
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
 8005278:	460b      	mov	r3, r1
 800527a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005286:	681a      	ldr	r2, [r3, #0]
 8005288:	78fb      	ldrb	r3, [r7, #3]
 800528a:	68f9      	ldr	r1, [r7, #12]
 800528c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005290:	4313      	orrs	r3, r2
 8005292:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005294:	2300      	movs	r3, #0
}
 8005296:	4618      	mov	r0, r3
 8005298:	3714      	adds	r7, #20
 800529a:	46bd      	mov	sp, r7
 800529c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a0:	4770      	bx	lr

080052a2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80052a2:	b480      	push	{r7}
 80052a4:	b087      	sub	sp, #28
 80052a6:	af00      	add	r7, sp, #0
 80052a8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80052ae:	693b      	ldr	r3, [r7, #16]
 80052b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052b4:	689b      	ldr	r3, [r3, #8]
 80052b6:	f003 0306 	and.w	r3, r3, #6
 80052ba:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d102      	bne.n	80052c8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80052c2:	2300      	movs	r3, #0
 80052c4:	75fb      	strb	r3, [r7, #23]
 80052c6:	e00a      	b.n	80052de <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	2b02      	cmp	r3, #2
 80052cc:	d002      	beq.n	80052d4 <USB_GetDevSpeed+0x32>
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	2b06      	cmp	r3, #6
 80052d2:	d102      	bne.n	80052da <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80052d4:	2302      	movs	r3, #2
 80052d6:	75fb      	strb	r3, [r7, #23]
 80052d8:	e001      	b.n	80052de <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80052da:	230f      	movs	r3, #15
 80052dc:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80052de:	7dfb      	ldrb	r3, [r7, #23]
}
 80052e0:	4618      	mov	r0, r3
 80052e2:	371c      	adds	r7, #28
 80052e4:	46bd      	mov	sp, r7
 80052e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ea:	4770      	bx	lr

080052ec <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80052ec:	b480      	push	{r7}
 80052ee:	b085      	sub	sp, #20
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
 80052f4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80052fa:	683b      	ldr	r3, [r7, #0]
 80052fc:	781b      	ldrb	r3, [r3, #0]
 80052fe:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	785b      	ldrb	r3, [r3, #1]
 8005304:	2b01      	cmp	r3, #1
 8005306:	d13a      	bne.n	800537e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800530e:	69da      	ldr	r2, [r3, #28]
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	781b      	ldrb	r3, [r3, #0]
 8005314:	f003 030f 	and.w	r3, r3, #15
 8005318:	2101      	movs	r1, #1
 800531a:	fa01 f303 	lsl.w	r3, r1, r3
 800531e:	b29b      	uxth	r3, r3
 8005320:	68f9      	ldr	r1, [r7, #12]
 8005322:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005326:	4313      	orrs	r3, r2
 8005328:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800532a:	68bb      	ldr	r3, [r7, #8]
 800532c:	015a      	lsls	r2, r3, #5
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	4413      	add	r3, r2
 8005332:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800533c:	2b00      	cmp	r3, #0
 800533e:	d155      	bne.n	80053ec <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005340:	68bb      	ldr	r3, [r7, #8]
 8005342:	015a      	lsls	r2, r3, #5
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	4413      	add	r3, r2
 8005348:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800534c:	681a      	ldr	r2, [r3, #0]
 800534e:	683b      	ldr	r3, [r7, #0]
 8005350:	689b      	ldr	r3, [r3, #8]
 8005352:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005356:	683b      	ldr	r3, [r7, #0]
 8005358:	78db      	ldrb	r3, [r3, #3]
 800535a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800535c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800535e:	68bb      	ldr	r3, [r7, #8]
 8005360:	059b      	lsls	r3, r3, #22
 8005362:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005364:	4313      	orrs	r3, r2
 8005366:	68ba      	ldr	r2, [r7, #8]
 8005368:	0151      	lsls	r1, r2, #5
 800536a:	68fa      	ldr	r2, [r7, #12]
 800536c:	440a      	add	r2, r1
 800536e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005372:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005376:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800537a:	6013      	str	r3, [r2, #0]
 800537c:	e036      	b.n	80053ec <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005384:	69da      	ldr	r2, [r3, #28]
 8005386:	683b      	ldr	r3, [r7, #0]
 8005388:	781b      	ldrb	r3, [r3, #0]
 800538a:	f003 030f 	and.w	r3, r3, #15
 800538e:	2101      	movs	r1, #1
 8005390:	fa01 f303 	lsl.w	r3, r1, r3
 8005394:	041b      	lsls	r3, r3, #16
 8005396:	68f9      	ldr	r1, [r7, #12]
 8005398:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800539c:	4313      	orrs	r3, r2
 800539e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80053a0:	68bb      	ldr	r3, [r7, #8]
 80053a2:	015a      	lsls	r2, r3, #5
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	4413      	add	r3, r2
 80053a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d11a      	bne.n	80053ec <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80053b6:	68bb      	ldr	r3, [r7, #8]
 80053b8:	015a      	lsls	r2, r3, #5
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	4413      	add	r3, r2
 80053be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053c2:	681a      	ldr	r2, [r3, #0]
 80053c4:	683b      	ldr	r3, [r7, #0]
 80053c6:	689b      	ldr	r3, [r3, #8]
 80053c8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	78db      	ldrb	r3, [r3, #3]
 80053d0:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80053d2:	430b      	orrs	r3, r1
 80053d4:	4313      	orrs	r3, r2
 80053d6:	68ba      	ldr	r2, [r7, #8]
 80053d8:	0151      	lsls	r1, r2, #5
 80053da:	68fa      	ldr	r2, [r7, #12]
 80053dc:	440a      	add	r2, r1
 80053de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80053e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80053e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80053ea:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80053ec:	2300      	movs	r3, #0
}
 80053ee:	4618      	mov	r0, r3
 80053f0:	3714      	adds	r7, #20
 80053f2:	46bd      	mov	sp, r7
 80053f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f8:	4770      	bx	lr
	...

080053fc <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80053fc:	b480      	push	{r7}
 80053fe:	b085      	sub	sp, #20
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
 8005404:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	781b      	ldrb	r3, [r3, #0]
 800540e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	785b      	ldrb	r3, [r3, #1]
 8005414:	2b01      	cmp	r3, #1
 8005416:	d161      	bne.n	80054dc <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005418:	68bb      	ldr	r3, [r7, #8]
 800541a:	015a      	lsls	r2, r3, #5
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	4413      	add	r3, r2
 8005420:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800542a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800542e:	d11f      	bne.n	8005470 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005430:	68bb      	ldr	r3, [r7, #8]
 8005432:	015a      	lsls	r2, r3, #5
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	4413      	add	r3, r2
 8005438:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	68ba      	ldr	r2, [r7, #8]
 8005440:	0151      	lsls	r1, r2, #5
 8005442:	68fa      	ldr	r2, [r7, #12]
 8005444:	440a      	add	r2, r1
 8005446:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800544a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800544e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005450:	68bb      	ldr	r3, [r7, #8]
 8005452:	015a      	lsls	r2, r3, #5
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	4413      	add	r3, r2
 8005458:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	68ba      	ldr	r2, [r7, #8]
 8005460:	0151      	lsls	r1, r2, #5
 8005462:	68fa      	ldr	r2, [r7, #12]
 8005464:	440a      	add	r2, r1
 8005466:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800546a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800546e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005476:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	781b      	ldrb	r3, [r3, #0]
 800547c:	f003 030f 	and.w	r3, r3, #15
 8005480:	2101      	movs	r1, #1
 8005482:	fa01 f303 	lsl.w	r3, r1, r3
 8005486:	b29b      	uxth	r3, r3
 8005488:	43db      	mvns	r3, r3
 800548a:	68f9      	ldr	r1, [r7, #12]
 800548c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005490:	4013      	ands	r3, r2
 8005492:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800549a:	69da      	ldr	r2, [r3, #28]
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	781b      	ldrb	r3, [r3, #0]
 80054a0:	f003 030f 	and.w	r3, r3, #15
 80054a4:	2101      	movs	r1, #1
 80054a6:	fa01 f303 	lsl.w	r3, r1, r3
 80054aa:	b29b      	uxth	r3, r3
 80054ac:	43db      	mvns	r3, r3
 80054ae:	68f9      	ldr	r1, [r7, #12]
 80054b0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80054b4:	4013      	ands	r3, r2
 80054b6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80054b8:	68bb      	ldr	r3, [r7, #8]
 80054ba:	015a      	lsls	r2, r3, #5
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	4413      	add	r3, r2
 80054c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054c4:	681a      	ldr	r2, [r3, #0]
 80054c6:	68bb      	ldr	r3, [r7, #8]
 80054c8:	0159      	lsls	r1, r3, #5
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	440b      	add	r3, r1
 80054ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054d2:	4619      	mov	r1, r3
 80054d4:	4b35      	ldr	r3, [pc, #212]	; (80055ac <USB_DeactivateEndpoint+0x1b0>)
 80054d6:	4013      	ands	r3, r2
 80054d8:	600b      	str	r3, [r1, #0]
 80054da:	e060      	b.n	800559e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80054dc:	68bb      	ldr	r3, [r7, #8]
 80054de:	015a      	lsls	r2, r3, #5
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	4413      	add	r3, r2
 80054e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80054ee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80054f2:	d11f      	bne.n	8005534 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80054f4:	68bb      	ldr	r3, [r7, #8]
 80054f6:	015a      	lsls	r2, r3, #5
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	4413      	add	r3, r2
 80054fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	68ba      	ldr	r2, [r7, #8]
 8005504:	0151      	lsls	r1, r2, #5
 8005506:	68fa      	ldr	r2, [r7, #12]
 8005508:	440a      	add	r2, r1
 800550a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800550e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005512:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005514:	68bb      	ldr	r3, [r7, #8]
 8005516:	015a      	lsls	r2, r3, #5
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	4413      	add	r3, r2
 800551c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	68ba      	ldr	r2, [r7, #8]
 8005524:	0151      	lsls	r1, r2, #5
 8005526:	68fa      	ldr	r2, [r7, #12]
 8005528:	440a      	add	r2, r1
 800552a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800552e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005532:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800553a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800553c:	683b      	ldr	r3, [r7, #0]
 800553e:	781b      	ldrb	r3, [r3, #0]
 8005540:	f003 030f 	and.w	r3, r3, #15
 8005544:	2101      	movs	r1, #1
 8005546:	fa01 f303 	lsl.w	r3, r1, r3
 800554a:	041b      	lsls	r3, r3, #16
 800554c:	43db      	mvns	r3, r3
 800554e:	68f9      	ldr	r1, [r7, #12]
 8005550:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005554:	4013      	ands	r3, r2
 8005556:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800555e:	69da      	ldr	r2, [r3, #28]
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	781b      	ldrb	r3, [r3, #0]
 8005564:	f003 030f 	and.w	r3, r3, #15
 8005568:	2101      	movs	r1, #1
 800556a:	fa01 f303 	lsl.w	r3, r1, r3
 800556e:	041b      	lsls	r3, r3, #16
 8005570:	43db      	mvns	r3, r3
 8005572:	68f9      	ldr	r1, [r7, #12]
 8005574:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005578:	4013      	ands	r3, r2
 800557a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800557c:	68bb      	ldr	r3, [r7, #8]
 800557e:	015a      	lsls	r2, r3, #5
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	4413      	add	r3, r2
 8005584:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005588:	681a      	ldr	r2, [r3, #0]
 800558a:	68bb      	ldr	r3, [r7, #8]
 800558c:	0159      	lsls	r1, r3, #5
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	440b      	add	r3, r1
 8005592:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005596:	4619      	mov	r1, r3
 8005598:	4b05      	ldr	r3, [pc, #20]	; (80055b0 <USB_DeactivateEndpoint+0x1b4>)
 800559a:	4013      	ands	r3, r2
 800559c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800559e:	2300      	movs	r3, #0
}
 80055a0:	4618      	mov	r0, r3
 80055a2:	3714      	adds	r7, #20
 80055a4:	46bd      	mov	sp, r7
 80055a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055aa:	4770      	bx	lr
 80055ac:	ec337800 	.word	0xec337800
 80055b0:	eff37800 	.word	0xeff37800

080055b4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80055b4:	b580      	push	{r7, lr}
 80055b6:	b08a      	sub	sp, #40	; 0x28
 80055b8:	af02      	add	r7, sp, #8
 80055ba:	60f8      	str	r0, [r7, #12]
 80055bc:	60b9      	str	r1, [r7, #8]
 80055be:	4613      	mov	r3, r2
 80055c0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80055c6:	68bb      	ldr	r3, [r7, #8]
 80055c8:	781b      	ldrb	r3, [r3, #0]
 80055ca:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80055cc:	68bb      	ldr	r3, [r7, #8]
 80055ce:	785b      	ldrb	r3, [r3, #1]
 80055d0:	2b01      	cmp	r3, #1
 80055d2:	f040 815c 	bne.w	800588e <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80055d6:	68bb      	ldr	r3, [r7, #8]
 80055d8:	695b      	ldr	r3, [r3, #20]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d132      	bne.n	8005644 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80055de:	69bb      	ldr	r3, [r7, #24]
 80055e0:	015a      	lsls	r2, r3, #5
 80055e2:	69fb      	ldr	r3, [r7, #28]
 80055e4:	4413      	add	r3, r2
 80055e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055ea:	691b      	ldr	r3, [r3, #16]
 80055ec:	69ba      	ldr	r2, [r7, #24]
 80055ee:	0151      	lsls	r1, r2, #5
 80055f0:	69fa      	ldr	r2, [r7, #28]
 80055f2:	440a      	add	r2, r1
 80055f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80055f8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80055fc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005600:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005602:	69bb      	ldr	r3, [r7, #24]
 8005604:	015a      	lsls	r2, r3, #5
 8005606:	69fb      	ldr	r3, [r7, #28]
 8005608:	4413      	add	r3, r2
 800560a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800560e:	691b      	ldr	r3, [r3, #16]
 8005610:	69ba      	ldr	r2, [r7, #24]
 8005612:	0151      	lsls	r1, r2, #5
 8005614:	69fa      	ldr	r2, [r7, #28]
 8005616:	440a      	add	r2, r1
 8005618:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800561c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005620:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005622:	69bb      	ldr	r3, [r7, #24]
 8005624:	015a      	lsls	r2, r3, #5
 8005626:	69fb      	ldr	r3, [r7, #28]
 8005628:	4413      	add	r3, r2
 800562a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800562e:	691b      	ldr	r3, [r3, #16]
 8005630:	69ba      	ldr	r2, [r7, #24]
 8005632:	0151      	lsls	r1, r2, #5
 8005634:	69fa      	ldr	r2, [r7, #28]
 8005636:	440a      	add	r2, r1
 8005638:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800563c:	0cdb      	lsrs	r3, r3, #19
 800563e:	04db      	lsls	r3, r3, #19
 8005640:	6113      	str	r3, [r2, #16]
 8005642:	e074      	b.n	800572e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005644:	69bb      	ldr	r3, [r7, #24]
 8005646:	015a      	lsls	r2, r3, #5
 8005648:	69fb      	ldr	r3, [r7, #28]
 800564a:	4413      	add	r3, r2
 800564c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005650:	691b      	ldr	r3, [r3, #16]
 8005652:	69ba      	ldr	r2, [r7, #24]
 8005654:	0151      	lsls	r1, r2, #5
 8005656:	69fa      	ldr	r2, [r7, #28]
 8005658:	440a      	add	r2, r1
 800565a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800565e:	0cdb      	lsrs	r3, r3, #19
 8005660:	04db      	lsls	r3, r3, #19
 8005662:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005664:	69bb      	ldr	r3, [r7, #24]
 8005666:	015a      	lsls	r2, r3, #5
 8005668:	69fb      	ldr	r3, [r7, #28]
 800566a:	4413      	add	r3, r2
 800566c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005670:	691b      	ldr	r3, [r3, #16]
 8005672:	69ba      	ldr	r2, [r7, #24]
 8005674:	0151      	lsls	r1, r2, #5
 8005676:	69fa      	ldr	r2, [r7, #28]
 8005678:	440a      	add	r2, r1
 800567a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800567e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005682:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005686:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005688:	69bb      	ldr	r3, [r7, #24]
 800568a:	015a      	lsls	r2, r3, #5
 800568c:	69fb      	ldr	r3, [r7, #28]
 800568e:	4413      	add	r3, r2
 8005690:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005694:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005696:	68bb      	ldr	r3, [r7, #8]
 8005698:	6959      	ldr	r1, [r3, #20]
 800569a:	68bb      	ldr	r3, [r7, #8]
 800569c:	689b      	ldr	r3, [r3, #8]
 800569e:	440b      	add	r3, r1
 80056a0:	1e59      	subs	r1, r3, #1
 80056a2:	68bb      	ldr	r3, [r7, #8]
 80056a4:	689b      	ldr	r3, [r3, #8]
 80056a6:	fbb1 f3f3 	udiv	r3, r1, r3
 80056aa:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80056ac:	4b9d      	ldr	r3, [pc, #628]	; (8005924 <USB_EPStartXfer+0x370>)
 80056ae:	400b      	ands	r3, r1
 80056b0:	69b9      	ldr	r1, [r7, #24]
 80056b2:	0148      	lsls	r0, r1, #5
 80056b4:	69f9      	ldr	r1, [r7, #28]
 80056b6:	4401      	add	r1, r0
 80056b8:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80056bc:	4313      	orrs	r3, r2
 80056be:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80056c0:	69bb      	ldr	r3, [r7, #24]
 80056c2:	015a      	lsls	r2, r3, #5
 80056c4:	69fb      	ldr	r3, [r7, #28]
 80056c6:	4413      	add	r3, r2
 80056c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056cc:	691a      	ldr	r2, [r3, #16]
 80056ce:	68bb      	ldr	r3, [r7, #8]
 80056d0:	695b      	ldr	r3, [r3, #20]
 80056d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80056d6:	69b9      	ldr	r1, [r7, #24]
 80056d8:	0148      	lsls	r0, r1, #5
 80056da:	69f9      	ldr	r1, [r7, #28]
 80056dc:	4401      	add	r1, r0
 80056de:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80056e2:	4313      	orrs	r3, r2
 80056e4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80056e6:	68bb      	ldr	r3, [r7, #8]
 80056e8:	78db      	ldrb	r3, [r3, #3]
 80056ea:	2b01      	cmp	r3, #1
 80056ec:	d11f      	bne.n	800572e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80056ee:	69bb      	ldr	r3, [r7, #24]
 80056f0:	015a      	lsls	r2, r3, #5
 80056f2:	69fb      	ldr	r3, [r7, #28]
 80056f4:	4413      	add	r3, r2
 80056f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056fa:	691b      	ldr	r3, [r3, #16]
 80056fc:	69ba      	ldr	r2, [r7, #24]
 80056fe:	0151      	lsls	r1, r2, #5
 8005700:	69fa      	ldr	r2, [r7, #28]
 8005702:	440a      	add	r2, r1
 8005704:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005708:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800570c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800570e:	69bb      	ldr	r3, [r7, #24]
 8005710:	015a      	lsls	r2, r3, #5
 8005712:	69fb      	ldr	r3, [r7, #28]
 8005714:	4413      	add	r3, r2
 8005716:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800571a:	691b      	ldr	r3, [r3, #16]
 800571c:	69ba      	ldr	r2, [r7, #24]
 800571e:	0151      	lsls	r1, r2, #5
 8005720:	69fa      	ldr	r2, [r7, #28]
 8005722:	440a      	add	r2, r1
 8005724:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005728:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800572c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800572e:	79fb      	ldrb	r3, [r7, #7]
 8005730:	2b01      	cmp	r3, #1
 8005732:	d14b      	bne.n	80057cc <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005734:	68bb      	ldr	r3, [r7, #8]
 8005736:	691b      	ldr	r3, [r3, #16]
 8005738:	2b00      	cmp	r3, #0
 800573a:	d009      	beq.n	8005750 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800573c:	69bb      	ldr	r3, [r7, #24]
 800573e:	015a      	lsls	r2, r3, #5
 8005740:	69fb      	ldr	r3, [r7, #28]
 8005742:	4413      	add	r3, r2
 8005744:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005748:	461a      	mov	r2, r3
 800574a:	68bb      	ldr	r3, [r7, #8]
 800574c:	691b      	ldr	r3, [r3, #16]
 800574e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005750:	68bb      	ldr	r3, [r7, #8]
 8005752:	78db      	ldrb	r3, [r3, #3]
 8005754:	2b01      	cmp	r3, #1
 8005756:	d128      	bne.n	80057aa <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005758:	69fb      	ldr	r3, [r7, #28]
 800575a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800575e:	689b      	ldr	r3, [r3, #8]
 8005760:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005764:	2b00      	cmp	r3, #0
 8005766:	d110      	bne.n	800578a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005768:	69bb      	ldr	r3, [r7, #24]
 800576a:	015a      	lsls	r2, r3, #5
 800576c:	69fb      	ldr	r3, [r7, #28]
 800576e:	4413      	add	r3, r2
 8005770:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	69ba      	ldr	r2, [r7, #24]
 8005778:	0151      	lsls	r1, r2, #5
 800577a:	69fa      	ldr	r2, [r7, #28]
 800577c:	440a      	add	r2, r1
 800577e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005782:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005786:	6013      	str	r3, [r2, #0]
 8005788:	e00f      	b.n	80057aa <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800578a:	69bb      	ldr	r3, [r7, #24]
 800578c:	015a      	lsls	r2, r3, #5
 800578e:	69fb      	ldr	r3, [r7, #28]
 8005790:	4413      	add	r3, r2
 8005792:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	69ba      	ldr	r2, [r7, #24]
 800579a:	0151      	lsls	r1, r2, #5
 800579c:	69fa      	ldr	r2, [r7, #28]
 800579e:	440a      	add	r2, r1
 80057a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80057a8:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80057aa:	69bb      	ldr	r3, [r7, #24]
 80057ac:	015a      	lsls	r2, r3, #5
 80057ae:	69fb      	ldr	r3, [r7, #28]
 80057b0:	4413      	add	r3, r2
 80057b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	69ba      	ldr	r2, [r7, #24]
 80057ba:	0151      	lsls	r1, r2, #5
 80057bc:	69fa      	ldr	r2, [r7, #28]
 80057be:	440a      	add	r2, r1
 80057c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057c4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80057c8:	6013      	str	r3, [r2, #0]
 80057ca:	e12f      	b.n	8005a2c <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80057cc:	69bb      	ldr	r3, [r7, #24]
 80057ce:	015a      	lsls	r2, r3, #5
 80057d0:	69fb      	ldr	r3, [r7, #28]
 80057d2:	4413      	add	r3, r2
 80057d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	69ba      	ldr	r2, [r7, #24]
 80057dc:	0151      	lsls	r1, r2, #5
 80057de:	69fa      	ldr	r2, [r7, #28]
 80057e0:	440a      	add	r2, r1
 80057e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057e6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80057ea:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80057ec:	68bb      	ldr	r3, [r7, #8]
 80057ee:	78db      	ldrb	r3, [r3, #3]
 80057f0:	2b01      	cmp	r3, #1
 80057f2:	d015      	beq.n	8005820 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80057f4:	68bb      	ldr	r3, [r7, #8]
 80057f6:	695b      	ldr	r3, [r3, #20]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	f000 8117 	beq.w	8005a2c <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80057fe:	69fb      	ldr	r3, [r7, #28]
 8005800:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005804:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005806:	68bb      	ldr	r3, [r7, #8]
 8005808:	781b      	ldrb	r3, [r3, #0]
 800580a:	f003 030f 	and.w	r3, r3, #15
 800580e:	2101      	movs	r1, #1
 8005810:	fa01 f303 	lsl.w	r3, r1, r3
 8005814:	69f9      	ldr	r1, [r7, #28]
 8005816:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800581a:	4313      	orrs	r3, r2
 800581c:	634b      	str	r3, [r1, #52]	; 0x34
 800581e:	e105      	b.n	8005a2c <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005820:	69fb      	ldr	r3, [r7, #28]
 8005822:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005826:	689b      	ldr	r3, [r3, #8]
 8005828:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800582c:	2b00      	cmp	r3, #0
 800582e:	d110      	bne.n	8005852 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005830:	69bb      	ldr	r3, [r7, #24]
 8005832:	015a      	lsls	r2, r3, #5
 8005834:	69fb      	ldr	r3, [r7, #28]
 8005836:	4413      	add	r3, r2
 8005838:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	69ba      	ldr	r2, [r7, #24]
 8005840:	0151      	lsls	r1, r2, #5
 8005842:	69fa      	ldr	r2, [r7, #28]
 8005844:	440a      	add	r2, r1
 8005846:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800584a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800584e:	6013      	str	r3, [r2, #0]
 8005850:	e00f      	b.n	8005872 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005852:	69bb      	ldr	r3, [r7, #24]
 8005854:	015a      	lsls	r2, r3, #5
 8005856:	69fb      	ldr	r3, [r7, #28]
 8005858:	4413      	add	r3, r2
 800585a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	69ba      	ldr	r2, [r7, #24]
 8005862:	0151      	lsls	r1, r2, #5
 8005864:	69fa      	ldr	r2, [r7, #28]
 8005866:	440a      	add	r2, r1
 8005868:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800586c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005870:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005872:	68bb      	ldr	r3, [r7, #8]
 8005874:	68d9      	ldr	r1, [r3, #12]
 8005876:	68bb      	ldr	r3, [r7, #8]
 8005878:	781a      	ldrb	r2, [r3, #0]
 800587a:	68bb      	ldr	r3, [r7, #8]
 800587c:	695b      	ldr	r3, [r3, #20]
 800587e:	b298      	uxth	r0, r3
 8005880:	79fb      	ldrb	r3, [r7, #7]
 8005882:	9300      	str	r3, [sp, #0]
 8005884:	4603      	mov	r3, r0
 8005886:	68f8      	ldr	r0, [r7, #12]
 8005888:	f000 fa2b 	bl	8005ce2 <USB_WritePacket>
 800588c:	e0ce      	b.n	8005a2c <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800588e:	69bb      	ldr	r3, [r7, #24]
 8005890:	015a      	lsls	r2, r3, #5
 8005892:	69fb      	ldr	r3, [r7, #28]
 8005894:	4413      	add	r3, r2
 8005896:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800589a:	691b      	ldr	r3, [r3, #16]
 800589c:	69ba      	ldr	r2, [r7, #24]
 800589e:	0151      	lsls	r1, r2, #5
 80058a0:	69fa      	ldr	r2, [r7, #28]
 80058a2:	440a      	add	r2, r1
 80058a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80058a8:	0cdb      	lsrs	r3, r3, #19
 80058aa:	04db      	lsls	r3, r3, #19
 80058ac:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80058ae:	69bb      	ldr	r3, [r7, #24]
 80058b0:	015a      	lsls	r2, r3, #5
 80058b2:	69fb      	ldr	r3, [r7, #28]
 80058b4:	4413      	add	r3, r2
 80058b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058ba:	691b      	ldr	r3, [r3, #16]
 80058bc:	69ba      	ldr	r2, [r7, #24]
 80058be:	0151      	lsls	r1, r2, #5
 80058c0:	69fa      	ldr	r2, [r7, #28]
 80058c2:	440a      	add	r2, r1
 80058c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80058c8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80058cc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80058d0:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80058d2:	68bb      	ldr	r3, [r7, #8]
 80058d4:	695b      	ldr	r3, [r3, #20]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d126      	bne.n	8005928 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80058da:	69bb      	ldr	r3, [r7, #24]
 80058dc:	015a      	lsls	r2, r3, #5
 80058de:	69fb      	ldr	r3, [r7, #28]
 80058e0:	4413      	add	r3, r2
 80058e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058e6:	691a      	ldr	r2, [r3, #16]
 80058e8:	68bb      	ldr	r3, [r7, #8]
 80058ea:	689b      	ldr	r3, [r3, #8]
 80058ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80058f0:	69b9      	ldr	r1, [r7, #24]
 80058f2:	0148      	lsls	r0, r1, #5
 80058f4:	69f9      	ldr	r1, [r7, #28]
 80058f6:	4401      	add	r1, r0
 80058f8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80058fc:	4313      	orrs	r3, r2
 80058fe:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005900:	69bb      	ldr	r3, [r7, #24]
 8005902:	015a      	lsls	r2, r3, #5
 8005904:	69fb      	ldr	r3, [r7, #28]
 8005906:	4413      	add	r3, r2
 8005908:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800590c:	691b      	ldr	r3, [r3, #16]
 800590e:	69ba      	ldr	r2, [r7, #24]
 8005910:	0151      	lsls	r1, r2, #5
 8005912:	69fa      	ldr	r2, [r7, #28]
 8005914:	440a      	add	r2, r1
 8005916:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800591a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800591e:	6113      	str	r3, [r2, #16]
 8005920:	e036      	b.n	8005990 <USB_EPStartXfer+0x3dc>
 8005922:	bf00      	nop
 8005924:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005928:	68bb      	ldr	r3, [r7, #8]
 800592a:	695a      	ldr	r2, [r3, #20]
 800592c:	68bb      	ldr	r3, [r7, #8]
 800592e:	689b      	ldr	r3, [r3, #8]
 8005930:	4413      	add	r3, r2
 8005932:	1e5a      	subs	r2, r3, #1
 8005934:	68bb      	ldr	r3, [r7, #8]
 8005936:	689b      	ldr	r3, [r3, #8]
 8005938:	fbb2 f3f3 	udiv	r3, r2, r3
 800593c:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800593e:	69bb      	ldr	r3, [r7, #24]
 8005940:	015a      	lsls	r2, r3, #5
 8005942:	69fb      	ldr	r3, [r7, #28]
 8005944:	4413      	add	r3, r2
 8005946:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800594a:	691a      	ldr	r2, [r3, #16]
 800594c:	8afb      	ldrh	r3, [r7, #22]
 800594e:	04d9      	lsls	r1, r3, #19
 8005950:	4b39      	ldr	r3, [pc, #228]	; (8005a38 <USB_EPStartXfer+0x484>)
 8005952:	400b      	ands	r3, r1
 8005954:	69b9      	ldr	r1, [r7, #24]
 8005956:	0148      	lsls	r0, r1, #5
 8005958:	69f9      	ldr	r1, [r7, #28]
 800595a:	4401      	add	r1, r0
 800595c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005960:	4313      	orrs	r3, r2
 8005962:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8005964:	69bb      	ldr	r3, [r7, #24]
 8005966:	015a      	lsls	r2, r3, #5
 8005968:	69fb      	ldr	r3, [r7, #28]
 800596a:	4413      	add	r3, r2
 800596c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005970:	691a      	ldr	r2, [r3, #16]
 8005972:	68bb      	ldr	r3, [r7, #8]
 8005974:	689b      	ldr	r3, [r3, #8]
 8005976:	8af9      	ldrh	r1, [r7, #22]
 8005978:	fb01 f303 	mul.w	r3, r1, r3
 800597c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005980:	69b9      	ldr	r1, [r7, #24]
 8005982:	0148      	lsls	r0, r1, #5
 8005984:	69f9      	ldr	r1, [r7, #28]
 8005986:	4401      	add	r1, r0
 8005988:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800598c:	4313      	orrs	r3, r2
 800598e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005990:	79fb      	ldrb	r3, [r7, #7]
 8005992:	2b01      	cmp	r3, #1
 8005994:	d10d      	bne.n	80059b2 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005996:	68bb      	ldr	r3, [r7, #8]
 8005998:	68db      	ldr	r3, [r3, #12]
 800599a:	2b00      	cmp	r3, #0
 800599c:	d009      	beq.n	80059b2 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800599e:	68bb      	ldr	r3, [r7, #8]
 80059a0:	68d9      	ldr	r1, [r3, #12]
 80059a2:	69bb      	ldr	r3, [r7, #24]
 80059a4:	015a      	lsls	r2, r3, #5
 80059a6:	69fb      	ldr	r3, [r7, #28]
 80059a8:	4413      	add	r3, r2
 80059aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059ae:	460a      	mov	r2, r1
 80059b0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80059b2:	68bb      	ldr	r3, [r7, #8]
 80059b4:	78db      	ldrb	r3, [r3, #3]
 80059b6:	2b01      	cmp	r3, #1
 80059b8:	d128      	bne.n	8005a0c <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80059ba:	69fb      	ldr	r3, [r7, #28]
 80059bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059c0:	689b      	ldr	r3, [r3, #8]
 80059c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d110      	bne.n	80059ec <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80059ca:	69bb      	ldr	r3, [r7, #24]
 80059cc:	015a      	lsls	r2, r3, #5
 80059ce:	69fb      	ldr	r3, [r7, #28]
 80059d0:	4413      	add	r3, r2
 80059d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	69ba      	ldr	r2, [r7, #24]
 80059da:	0151      	lsls	r1, r2, #5
 80059dc:	69fa      	ldr	r2, [r7, #28]
 80059de:	440a      	add	r2, r1
 80059e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80059e4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80059e8:	6013      	str	r3, [r2, #0]
 80059ea:	e00f      	b.n	8005a0c <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80059ec:	69bb      	ldr	r3, [r7, #24]
 80059ee:	015a      	lsls	r2, r3, #5
 80059f0:	69fb      	ldr	r3, [r7, #28]
 80059f2:	4413      	add	r3, r2
 80059f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	69ba      	ldr	r2, [r7, #24]
 80059fc:	0151      	lsls	r1, r2, #5
 80059fe:	69fa      	ldr	r2, [r7, #28]
 8005a00:	440a      	add	r2, r1
 8005a02:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a0a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005a0c:	69bb      	ldr	r3, [r7, #24]
 8005a0e:	015a      	lsls	r2, r3, #5
 8005a10:	69fb      	ldr	r3, [r7, #28]
 8005a12:	4413      	add	r3, r2
 8005a14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	69ba      	ldr	r2, [r7, #24]
 8005a1c:	0151      	lsls	r1, r2, #5
 8005a1e:	69fa      	ldr	r2, [r7, #28]
 8005a20:	440a      	add	r2, r1
 8005a22:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a26:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005a2a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005a2c:	2300      	movs	r3, #0
}
 8005a2e:	4618      	mov	r0, r3
 8005a30:	3720      	adds	r7, #32
 8005a32:	46bd      	mov	sp, r7
 8005a34:	bd80      	pop	{r7, pc}
 8005a36:	bf00      	nop
 8005a38:	1ff80000 	.word	0x1ff80000

08005a3c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005a3c:	b480      	push	{r7}
 8005a3e:	b087      	sub	sp, #28
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	60f8      	str	r0, [r7, #12]
 8005a44:	60b9      	str	r1, [r7, #8]
 8005a46:	4613      	mov	r3, r2
 8005a48:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8005a4e:	68bb      	ldr	r3, [r7, #8]
 8005a50:	781b      	ldrb	r3, [r3, #0]
 8005a52:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005a54:	68bb      	ldr	r3, [r7, #8]
 8005a56:	785b      	ldrb	r3, [r3, #1]
 8005a58:	2b01      	cmp	r3, #1
 8005a5a:	f040 80cd 	bne.w	8005bf8 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005a5e:	68bb      	ldr	r3, [r7, #8]
 8005a60:	695b      	ldr	r3, [r3, #20]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d132      	bne.n	8005acc <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005a66:	693b      	ldr	r3, [r7, #16]
 8005a68:	015a      	lsls	r2, r3, #5
 8005a6a:	697b      	ldr	r3, [r7, #20]
 8005a6c:	4413      	add	r3, r2
 8005a6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a72:	691b      	ldr	r3, [r3, #16]
 8005a74:	693a      	ldr	r2, [r7, #16]
 8005a76:	0151      	lsls	r1, r2, #5
 8005a78:	697a      	ldr	r2, [r7, #20]
 8005a7a:	440a      	add	r2, r1
 8005a7c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a80:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005a84:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005a88:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005a8a:	693b      	ldr	r3, [r7, #16]
 8005a8c:	015a      	lsls	r2, r3, #5
 8005a8e:	697b      	ldr	r3, [r7, #20]
 8005a90:	4413      	add	r3, r2
 8005a92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a96:	691b      	ldr	r3, [r3, #16]
 8005a98:	693a      	ldr	r2, [r7, #16]
 8005a9a:	0151      	lsls	r1, r2, #5
 8005a9c:	697a      	ldr	r2, [r7, #20]
 8005a9e:	440a      	add	r2, r1
 8005aa0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005aa4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005aa8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005aaa:	693b      	ldr	r3, [r7, #16]
 8005aac:	015a      	lsls	r2, r3, #5
 8005aae:	697b      	ldr	r3, [r7, #20]
 8005ab0:	4413      	add	r3, r2
 8005ab2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ab6:	691b      	ldr	r3, [r3, #16]
 8005ab8:	693a      	ldr	r2, [r7, #16]
 8005aba:	0151      	lsls	r1, r2, #5
 8005abc:	697a      	ldr	r2, [r7, #20]
 8005abe:	440a      	add	r2, r1
 8005ac0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ac4:	0cdb      	lsrs	r3, r3, #19
 8005ac6:	04db      	lsls	r3, r3, #19
 8005ac8:	6113      	str	r3, [r2, #16]
 8005aca:	e04e      	b.n	8005b6a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005acc:	693b      	ldr	r3, [r7, #16]
 8005ace:	015a      	lsls	r2, r3, #5
 8005ad0:	697b      	ldr	r3, [r7, #20]
 8005ad2:	4413      	add	r3, r2
 8005ad4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ad8:	691b      	ldr	r3, [r3, #16]
 8005ada:	693a      	ldr	r2, [r7, #16]
 8005adc:	0151      	lsls	r1, r2, #5
 8005ade:	697a      	ldr	r2, [r7, #20]
 8005ae0:	440a      	add	r2, r1
 8005ae2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ae6:	0cdb      	lsrs	r3, r3, #19
 8005ae8:	04db      	lsls	r3, r3, #19
 8005aea:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005aec:	693b      	ldr	r3, [r7, #16]
 8005aee:	015a      	lsls	r2, r3, #5
 8005af0:	697b      	ldr	r3, [r7, #20]
 8005af2:	4413      	add	r3, r2
 8005af4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005af8:	691b      	ldr	r3, [r3, #16]
 8005afa:	693a      	ldr	r2, [r7, #16]
 8005afc:	0151      	lsls	r1, r2, #5
 8005afe:	697a      	ldr	r2, [r7, #20]
 8005b00:	440a      	add	r2, r1
 8005b02:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b06:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005b0a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005b0e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8005b10:	68bb      	ldr	r3, [r7, #8]
 8005b12:	695a      	ldr	r2, [r3, #20]
 8005b14:	68bb      	ldr	r3, [r7, #8]
 8005b16:	689b      	ldr	r3, [r3, #8]
 8005b18:	429a      	cmp	r2, r3
 8005b1a:	d903      	bls.n	8005b24 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8005b1c:	68bb      	ldr	r3, [r7, #8]
 8005b1e:	689a      	ldr	r2, [r3, #8]
 8005b20:	68bb      	ldr	r3, [r7, #8]
 8005b22:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005b24:	693b      	ldr	r3, [r7, #16]
 8005b26:	015a      	lsls	r2, r3, #5
 8005b28:	697b      	ldr	r3, [r7, #20]
 8005b2a:	4413      	add	r3, r2
 8005b2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b30:	691b      	ldr	r3, [r3, #16]
 8005b32:	693a      	ldr	r2, [r7, #16]
 8005b34:	0151      	lsls	r1, r2, #5
 8005b36:	697a      	ldr	r2, [r7, #20]
 8005b38:	440a      	add	r2, r1
 8005b3a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b3e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005b42:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005b44:	693b      	ldr	r3, [r7, #16]
 8005b46:	015a      	lsls	r2, r3, #5
 8005b48:	697b      	ldr	r3, [r7, #20]
 8005b4a:	4413      	add	r3, r2
 8005b4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b50:	691a      	ldr	r2, [r3, #16]
 8005b52:	68bb      	ldr	r3, [r7, #8]
 8005b54:	695b      	ldr	r3, [r3, #20]
 8005b56:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005b5a:	6939      	ldr	r1, [r7, #16]
 8005b5c:	0148      	lsls	r0, r1, #5
 8005b5e:	6979      	ldr	r1, [r7, #20]
 8005b60:	4401      	add	r1, r0
 8005b62:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005b66:	4313      	orrs	r3, r2
 8005b68:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005b6a:	79fb      	ldrb	r3, [r7, #7]
 8005b6c:	2b01      	cmp	r3, #1
 8005b6e:	d11e      	bne.n	8005bae <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005b70:	68bb      	ldr	r3, [r7, #8]
 8005b72:	691b      	ldr	r3, [r3, #16]
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d009      	beq.n	8005b8c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005b78:	693b      	ldr	r3, [r7, #16]
 8005b7a:	015a      	lsls	r2, r3, #5
 8005b7c:	697b      	ldr	r3, [r7, #20]
 8005b7e:	4413      	add	r3, r2
 8005b80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b84:	461a      	mov	r2, r3
 8005b86:	68bb      	ldr	r3, [r7, #8]
 8005b88:	691b      	ldr	r3, [r3, #16]
 8005b8a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005b8c:	693b      	ldr	r3, [r7, #16]
 8005b8e:	015a      	lsls	r2, r3, #5
 8005b90:	697b      	ldr	r3, [r7, #20]
 8005b92:	4413      	add	r3, r2
 8005b94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	693a      	ldr	r2, [r7, #16]
 8005b9c:	0151      	lsls	r1, r2, #5
 8005b9e:	697a      	ldr	r2, [r7, #20]
 8005ba0:	440a      	add	r2, r1
 8005ba2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ba6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005baa:	6013      	str	r3, [r2, #0]
 8005bac:	e092      	b.n	8005cd4 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005bae:	693b      	ldr	r3, [r7, #16]
 8005bb0:	015a      	lsls	r2, r3, #5
 8005bb2:	697b      	ldr	r3, [r7, #20]
 8005bb4:	4413      	add	r3, r2
 8005bb6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	693a      	ldr	r2, [r7, #16]
 8005bbe:	0151      	lsls	r1, r2, #5
 8005bc0:	697a      	ldr	r2, [r7, #20]
 8005bc2:	440a      	add	r2, r1
 8005bc4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005bc8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005bcc:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8005bce:	68bb      	ldr	r3, [r7, #8]
 8005bd0:	695b      	ldr	r3, [r3, #20]
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d07e      	beq.n	8005cd4 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005bd6:	697b      	ldr	r3, [r7, #20]
 8005bd8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bdc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005bde:	68bb      	ldr	r3, [r7, #8]
 8005be0:	781b      	ldrb	r3, [r3, #0]
 8005be2:	f003 030f 	and.w	r3, r3, #15
 8005be6:	2101      	movs	r1, #1
 8005be8:	fa01 f303 	lsl.w	r3, r1, r3
 8005bec:	6979      	ldr	r1, [r7, #20]
 8005bee:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005bf2:	4313      	orrs	r3, r2
 8005bf4:	634b      	str	r3, [r1, #52]	; 0x34
 8005bf6:	e06d      	b.n	8005cd4 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005bf8:	693b      	ldr	r3, [r7, #16]
 8005bfa:	015a      	lsls	r2, r3, #5
 8005bfc:	697b      	ldr	r3, [r7, #20]
 8005bfe:	4413      	add	r3, r2
 8005c00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c04:	691b      	ldr	r3, [r3, #16]
 8005c06:	693a      	ldr	r2, [r7, #16]
 8005c08:	0151      	lsls	r1, r2, #5
 8005c0a:	697a      	ldr	r2, [r7, #20]
 8005c0c:	440a      	add	r2, r1
 8005c0e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c12:	0cdb      	lsrs	r3, r3, #19
 8005c14:	04db      	lsls	r3, r3, #19
 8005c16:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005c18:	693b      	ldr	r3, [r7, #16]
 8005c1a:	015a      	lsls	r2, r3, #5
 8005c1c:	697b      	ldr	r3, [r7, #20]
 8005c1e:	4413      	add	r3, r2
 8005c20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c24:	691b      	ldr	r3, [r3, #16]
 8005c26:	693a      	ldr	r2, [r7, #16]
 8005c28:	0151      	lsls	r1, r2, #5
 8005c2a:	697a      	ldr	r2, [r7, #20]
 8005c2c:	440a      	add	r2, r1
 8005c2e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c32:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005c36:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005c3a:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8005c3c:	68bb      	ldr	r3, [r7, #8]
 8005c3e:	695b      	ldr	r3, [r3, #20]
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d003      	beq.n	8005c4c <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8005c44:	68bb      	ldr	r3, [r7, #8]
 8005c46:	689a      	ldr	r2, [r3, #8]
 8005c48:	68bb      	ldr	r3, [r7, #8]
 8005c4a:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005c4c:	693b      	ldr	r3, [r7, #16]
 8005c4e:	015a      	lsls	r2, r3, #5
 8005c50:	697b      	ldr	r3, [r7, #20]
 8005c52:	4413      	add	r3, r2
 8005c54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c58:	691b      	ldr	r3, [r3, #16]
 8005c5a:	693a      	ldr	r2, [r7, #16]
 8005c5c:	0151      	lsls	r1, r2, #5
 8005c5e:	697a      	ldr	r2, [r7, #20]
 8005c60:	440a      	add	r2, r1
 8005c62:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c66:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005c6a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8005c6c:	693b      	ldr	r3, [r7, #16]
 8005c6e:	015a      	lsls	r2, r3, #5
 8005c70:	697b      	ldr	r3, [r7, #20]
 8005c72:	4413      	add	r3, r2
 8005c74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c78:	691a      	ldr	r2, [r3, #16]
 8005c7a:	68bb      	ldr	r3, [r7, #8]
 8005c7c:	689b      	ldr	r3, [r3, #8]
 8005c7e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005c82:	6939      	ldr	r1, [r7, #16]
 8005c84:	0148      	lsls	r0, r1, #5
 8005c86:	6979      	ldr	r1, [r7, #20]
 8005c88:	4401      	add	r1, r0
 8005c8a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005c8e:	4313      	orrs	r3, r2
 8005c90:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8005c92:	79fb      	ldrb	r3, [r7, #7]
 8005c94:	2b01      	cmp	r3, #1
 8005c96:	d10d      	bne.n	8005cb4 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005c98:	68bb      	ldr	r3, [r7, #8]
 8005c9a:	68db      	ldr	r3, [r3, #12]
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d009      	beq.n	8005cb4 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005ca0:	68bb      	ldr	r3, [r7, #8]
 8005ca2:	68d9      	ldr	r1, [r3, #12]
 8005ca4:	693b      	ldr	r3, [r7, #16]
 8005ca6:	015a      	lsls	r2, r3, #5
 8005ca8:	697b      	ldr	r3, [r7, #20]
 8005caa:	4413      	add	r3, r2
 8005cac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cb0:	460a      	mov	r2, r1
 8005cb2:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005cb4:	693b      	ldr	r3, [r7, #16]
 8005cb6:	015a      	lsls	r2, r3, #5
 8005cb8:	697b      	ldr	r3, [r7, #20]
 8005cba:	4413      	add	r3, r2
 8005cbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	693a      	ldr	r2, [r7, #16]
 8005cc4:	0151      	lsls	r1, r2, #5
 8005cc6:	697a      	ldr	r2, [r7, #20]
 8005cc8:	440a      	add	r2, r1
 8005cca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005cce:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005cd2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005cd4:	2300      	movs	r3, #0
}
 8005cd6:	4618      	mov	r0, r3
 8005cd8:	371c      	adds	r7, #28
 8005cda:	46bd      	mov	sp, r7
 8005cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce0:	4770      	bx	lr

08005ce2 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005ce2:	b480      	push	{r7}
 8005ce4:	b089      	sub	sp, #36	; 0x24
 8005ce6:	af00      	add	r7, sp, #0
 8005ce8:	60f8      	str	r0, [r7, #12]
 8005cea:	60b9      	str	r1, [r7, #8]
 8005cec:	4611      	mov	r1, r2
 8005cee:	461a      	mov	r2, r3
 8005cf0:	460b      	mov	r3, r1
 8005cf2:	71fb      	strb	r3, [r7, #7]
 8005cf4:	4613      	mov	r3, r2
 8005cf6:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005cfc:	68bb      	ldr	r3, [r7, #8]
 8005cfe:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005d00:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d123      	bne.n	8005d50 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005d08:	88bb      	ldrh	r3, [r7, #4]
 8005d0a:	3303      	adds	r3, #3
 8005d0c:	089b      	lsrs	r3, r3, #2
 8005d0e:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005d10:	2300      	movs	r3, #0
 8005d12:	61bb      	str	r3, [r7, #24]
 8005d14:	e018      	b.n	8005d48 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005d16:	79fb      	ldrb	r3, [r7, #7]
 8005d18:	031a      	lsls	r2, r3, #12
 8005d1a:	697b      	ldr	r3, [r7, #20]
 8005d1c:	4413      	add	r3, r2
 8005d1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d22:	461a      	mov	r2, r3
 8005d24:	69fb      	ldr	r3, [r7, #28]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005d2a:	69fb      	ldr	r3, [r7, #28]
 8005d2c:	3301      	adds	r3, #1
 8005d2e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005d30:	69fb      	ldr	r3, [r7, #28]
 8005d32:	3301      	adds	r3, #1
 8005d34:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005d36:	69fb      	ldr	r3, [r7, #28]
 8005d38:	3301      	adds	r3, #1
 8005d3a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005d3c:	69fb      	ldr	r3, [r7, #28]
 8005d3e:	3301      	adds	r3, #1
 8005d40:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005d42:	69bb      	ldr	r3, [r7, #24]
 8005d44:	3301      	adds	r3, #1
 8005d46:	61bb      	str	r3, [r7, #24]
 8005d48:	69ba      	ldr	r2, [r7, #24]
 8005d4a:	693b      	ldr	r3, [r7, #16]
 8005d4c:	429a      	cmp	r2, r3
 8005d4e:	d3e2      	bcc.n	8005d16 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005d50:	2300      	movs	r3, #0
}
 8005d52:	4618      	mov	r0, r3
 8005d54:	3724      	adds	r7, #36	; 0x24
 8005d56:	46bd      	mov	sp, r7
 8005d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5c:	4770      	bx	lr

08005d5e <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005d5e:	b480      	push	{r7}
 8005d60:	b08b      	sub	sp, #44	; 0x2c
 8005d62:	af00      	add	r7, sp, #0
 8005d64:	60f8      	str	r0, [r7, #12]
 8005d66:	60b9      	str	r1, [r7, #8]
 8005d68:	4613      	mov	r3, r2
 8005d6a:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005d70:	68bb      	ldr	r3, [r7, #8]
 8005d72:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005d74:	88fb      	ldrh	r3, [r7, #6]
 8005d76:	089b      	lsrs	r3, r3, #2
 8005d78:	b29b      	uxth	r3, r3
 8005d7a:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005d7c:	88fb      	ldrh	r3, [r7, #6]
 8005d7e:	f003 0303 	and.w	r3, r3, #3
 8005d82:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005d84:	2300      	movs	r3, #0
 8005d86:	623b      	str	r3, [r7, #32]
 8005d88:	e014      	b.n	8005db4 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005d8a:	69bb      	ldr	r3, [r7, #24]
 8005d8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d90:	681a      	ldr	r2, [r3, #0]
 8005d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d94:	601a      	str	r2, [r3, #0]
    pDest++;
 8005d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d98:	3301      	adds	r3, #1
 8005d9a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d9e:	3301      	adds	r3, #1
 8005da0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005da4:	3301      	adds	r3, #1
 8005da6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005daa:	3301      	adds	r3, #1
 8005dac:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005dae:	6a3b      	ldr	r3, [r7, #32]
 8005db0:	3301      	adds	r3, #1
 8005db2:	623b      	str	r3, [r7, #32]
 8005db4:	6a3a      	ldr	r2, [r7, #32]
 8005db6:	697b      	ldr	r3, [r7, #20]
 8005db8:	429a      	cmp	r2, r3
 8005dba:	d3e6      	bcc.n	8005d8a <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005dbc:	8bfb      	ldrh	r3, [r7, #30]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d01e      	beq.n	8005e00 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005dc2:	2300      	movs	r3, #0
 8005dc4:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005dc6:	69bb      	ldr	r3, [r7, #24]
 8005dc8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005dcc:	461a      	mov	r2, r3
 8005dce:	f107 0310 	add.w	r3, r7, #16
 8005dd2:	6812      	ldr	r2, [r2, #0]
 8005dd4:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005dd6:	693a      	ldr	r2, [r7, #16]
 8005dd8:	6a3b      	ldr	r3, [r7, #32]
 8005dda:	b2db      	uxtb	r3, r3
 8005ddc:	00db      	lsls	r3, r3, #3
 8005dde:	fa22 f303 	lsr.w	r3, r2, r3
 8005de2:	b2da      	uxtb	r2, r3
 8005de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005de6:	701a      	strb	r2, [r3, #0]
      i++;
 8005de8:	6a3b      	ldr	r3, [r7, #32]
 8005dea:	3301      	adds	r3, #1
 8005dec:	623b      	str	r3, [r7, #32]
      pDest++;
 8005dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005df0:	3301      	adds	r3, #1
 8005df2:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005df4:	8bfb      	ldrh	r3, [r7, #30]
 8005df6:	3b01      	subs	r3, #1
 8005df8:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005dfa:	8bfb      	ldrh	r3, [r7, #30]
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d1ea      	bne.n	8005dd6 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005e02:	4618      	mov	r0, r3
 8005e04:	372c      	adds	r7, #44	; 0x2c
 8005e06:	46bd      	mov	sp, r7
 8005e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0c:	4770      	bx	lr

08005e0e <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005e0e:	b480      	push	{r7}
 8005e10:	b085      	sub	sp, #20
 8005e12:	af00      	add	r7, sp, #0
 8005e14:	6078      	str	r0, [r7, #4]
 8005e16:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005e1c:	683b      	ldr	r3, [r7, #0]
 8005e1e:	781b      	ldrb	r3, [r3, #0]
 8005e20:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005e22:	683b      	ldr	r3, [r7, #0]
 8005e24:	785b      	ldrb	r3, [r3, #1]
 8005e26:	2b01      	cmp	r3, #1
 8005e28:	d12c      	bne.n	8005e84 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005e2a:	68bb      	ldr	r3, [r7, #8]
 8005e2c:	015a      	lsls	r2, r3, #5
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	4413      	add	r3, r2
 8005e32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	db12      	blt.n	8005e62 <USB_EPSetStall+0x54>
 8005e3c:	68bb      	ldr	r3, [r7, #8]
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d00f      	beq.n	8005e62 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005e42:	68bb      	ldr	r3, [r7, #8]
 8005e44:	015a      	lsls	r2, r3, #5
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	4413      	add	r3, r2
 8005e4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	68ba      	ldr	r2, [r7, #8]
 8005e52:	0151      	lsls	r1, r2, #5
 8005e54:	68fa      	ldr	r2, [r7, #12]
 8005e56:	440a      	add	r2, r1
 8005e58:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e5c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005e60:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005e62:	68bb      	ldr	r3, [r7, #8]
 8005e64:	015a      	lsls	r2, r3, #5
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	4413      	add	r3, r2
 8005e6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	68ba      	ldr	r2, [r7, #8]
 8005e72:	0151      	lsls	r1, r2, #5
 8005e74:	68fa      	ldr	r2, [r7, #12]
 8005e76:	440a      	add	r2, r1
 8005e78:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e7c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005e80:	6013      	str	r3, [r2, #0]
 8005e82:	e02b      	b.n	8005edc <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005e84:	68bb      	ldr	r3, [r7, #8]
 8005e86:	015a      	lsls	r2, r3, #5
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	4413      	add	r3, r2
 8005e8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	db12      	blt.n	8005ebc <USB_EPSetStall+0xae>
 8005e96:	68bb      	ldr	r3, [r7, #8]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d00f      	beq.n	8005ebc <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005e9c:	68bb      	ldr	r3, [r7, #8]
 8005e9e:	015a      	lsls	r2, r3, #5
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	4413      	add	r3, r2
 8005ea4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	68ba      	ldr	r2, [r7, #8]
 8005eac:	0151      	lsls	r1, r2, #5
 8005eae:	68fa      	ldr	r2, [r7, #12]
 8005eb0:	440a      	add	r2, r1
 8005eb2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005eb6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005eba:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005ebc:	68bb      	ldr	r3, [r7, #8]
 8005ebe:	015a      	lsls	r2, r3, #5
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	4413      	add	r3, r2
 8005ec4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	68ba      	ldr	r2, [r7, #8]
 8005ecc:	0151      	lsls	r1, r2, #5
 8005ece:	68fa      	ldr	r2, [r7, #12]
 8005ed0:	440a      	add	r2, r1
 8005ed2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ed6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005eda:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005edc:	2300      	movs	r3, #0
}
 8005ede:	4618      	mov	r0, r3
 8005ee0:	3714      	adds	r7, #20
 8005ee2:	46bd      	mov	sp, r7
 8005ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee8:	4770      	bx	lr

08005eea <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005eea:	b480      	push	{r7}
 8005eec:	b085      	sub	sp, #20
 8005eee:	af00      	add	r7, sp, #0
 8005ef0:	6078      	str	r0, [r7, #4]
 8005ef2:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005ef8:	683b      	ldr	r3, [r7, #0]
 8005efa:	781b      	ldrb	r3, [r3, #0]
 8005efc:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005efe:	683b      	ldr	r3, [r7, #0]
 8005f00:	785b      	ldrb	r3, [r3, #1]
 8005f02:	2b01      	cmp	r3, #1
 8005f04:	d128      	bne.n	8005f58 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005f06:	68bb      	ldr	r3, [r7, #8]
 8005f08:	015a      	lsls	r2, r3, #5
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	4413      	add	r3, r2
 8005f0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	68ba      	ldr	r2, [r7, #8]
 8005f16:	0151      	lsls	r1, r2, #5
 8005f18:	68fa      	ldr	r2, [r7, #12]
 8005f1a:	440a      	add	r2, r1
 8005f1c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f20:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005f24:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005f26:	683b      	ldr	r3, [r7, #0]
 8005f28:	78db      	ldrb	r3, [r3, #3]
 8005f2a:	2b03      	cmp	r3, #3
 8005f2c:	d003      	beq.n	8005f36 <USB_EPClearStall+0x4c>
 8005f2e:	683b      	ldr	r3, [r7, #0]
 8005f30:	78db      	ldrb	r3, [r3, #3]
 8005f32:	2b02      	cmp	r3, #2
 8005f34:	d138      	bne.n	8005fa8 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005f36:	68bb      	ldr	r3, [r7, #8]
 8005f38:	015a      	lsls	r2, r3, #5
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	4413      	add	r3, r2
 8005f3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	68ba      	ldr	r2, [r7, #8]
 8005f46:	0151      	lsls	r1, r2, #5
 8005f48:	68fa      	ldr	r2, [r7, #12]
 8005f4a:	440a      	add	r2, r1
 8005f4c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f54:	6013      	str	r3, [r2, #0]
 8005f56:	e027      	b.n	8005fa8 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005f58:	68bb      	ldr	r3, [r7, #8]
 8005f5a:	015a      	lsls	r2, r3, #5
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	4413      	add	r3, r2
 8005f60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	68ba      	ldr	r2, [r7, #8]
 8005f68:	0151      	lsls	r1, r2, #5
 8005f6a:	68fa      	ldr	r2, [r7, #12]
 8005f6c:	440a      	add	r2, r1
 8005f6e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f72:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005f76:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005f78:	683b      	ldr	r3, [r7, #0]
 8005f7a:	78db      	ldrb	r3, [r3, #3]
 8005f7c:	2b03      	cmp	r3, #3
 8005f7e:	d003      	beq.n	8005f88 <USB_EPClearStall+0x9e>
 8005f80:	683b      	ldr	r3, [r7, #0]
 8005f82:	78db      	ldrb	r3, [r3, #3]
 8005f84:	2b02      	cmp	r3, #2
 8005f86:	d10f      	bne.n	8005fa8 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005f88:	68bb      	ldr	r3, [r7, #8]
 8005f8a:	015a      	lsls	r2, r3, #5
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	4413      	add	r3, r2
 8005f90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	68ba      	ldr	r2, [r7, #8]
 8005f98:	0151      	lsls	r1, r2, #5
 8005f9a:	68fa      	ldr	r2, [r7, #12]
 8005f9c:	440a      	add	r2, r1
 8005f9e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005fa2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005fa6:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005fa8:	2300      	movs	r3, #0
}
 8005faa:	4618      	mov	r0, r3
 8005fac:	3714      	adds	r7, #20
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb4:	4770      	bx	lr

08005fb6 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005fb6:	b480      	push	{r7}
 8005fb8:	b085      	sub	sp, #20
 8005fba:	af00      	add	r7, sp, #0
 8005fbc:	6078      	str	r0, [r7, #4]
 8005fbe:	460b      	mov	r3, r1
 8005fc0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	68fa      	ldr	r2, [r7, #12]
 8005fd0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005fd4:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005fd8:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fe0:	681a      	ldr	r2, [r3, #0]
 8005fe2:	78fb      	ldrb	r3, [r7, #3]
 8005fe4:	011b      	lsls	r3, r3, #4
 8005fe6:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8005fea:	68f9      	ldr	r1, [r7, #12]
 8005fec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005ff0:	4313      	orrs	r3, r2
 8005ff2:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005ff4:	2300      	movs	r3, #0
}
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	3714      	adds	r7, #20
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006000:	4770      	bx	lr

08006002 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006002:	b480      	push	{r7}
 8006004:	b085      	sub	sp, #20
 8006006:	af00      	add	r7, sp, #0
 8006008:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	68fa      	ldr	r2, [r7, #12]
 8006018:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800601c:	f023 0303 	bic.w	r3, r3, #3
 8006020:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006028:	685b      	ldr	r3, [r3, #4]
 800602a:	68fa      	ldr	r2, [r7, #12]
 800602c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006030:	f023 0302 	bic.w	r3, r3, #2
 8006034:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006036:	2300      	movs	r3, #0
}
 8006038:	4618      	mov	r0, r3
 800603a:	3714      	adds	r7, #20
 800603c:	46bd      	mov	sp, r7
 800603e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006042:	4770      	bx	lr

08006044 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006044:	b480      	push	{r7}
 8006046:	b085      	sub	sp, #20
 8006048:	af00      	add	r7, sp, #0
 800604a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	68fa      	ldr	r2, [r7, #12]
 800605a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800605e:	f023 0303 	bic.w	r3, r3, #3
 8006062:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800606a:	685b      	ldr	r3, [r3, #4]
 800606c:	68fa      	ldr	r2, [r7, #12]
 800606e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006072:	f043 0302 	orr.w	r3, r3, #2
 8006076:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006078:	2300      	movs	r3, #0
}
 800607a:	4618      	mov	r0, r3
 800607c:	3714      	adds	r7, #20
 800607e:	46bd      	mov	sp, r7
 8006080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006084:	4770      	bx	lr

08006086 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006086:	b480      	push	{r7}
 8006088:	b085      	sub	sp, #20
 800608a:	af00      	add	r7, sp, #0
 800608c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	695b      	ldr	r3, [r3, #20]
 8006092:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	699b      	ldr	r3, [r3, #24]
 8006098:	68fa      	ldr	r2, [r7, #12]
 800609a:	4013      	ands	r3, r2
 800609c:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800609e:	68fb      	ldr	r3, [r7, #12]
}
 80060a0:	4618      	mov	r0, r3
 80060a2:	3714      	adds	r7, #20
 80060a4:	46bd      	mov	sp, r7
 80060a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060aa:	4770      	bx	lr

080060ac <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80060ac:	b480      	push	{r7}
 80060ae:	b085      	sub	sp, #20
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060be:	699b      	ldr	r3, [r3, #24]
 80060c0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060c8:	69db      	ldr	r3, [r3, #28]
 80060ca:	68ba      	ldr	r2, [r7, #8]
 80060cc:	4013      	ands	r3, r2
 80060ce:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80060d0:	68bb      	ldr	r3, [r7, #8]
 80060d2:	0c1b      	lsrs	r3, r3, #16
}
 80060d4:	4618      	mov	r0, r3
 80060d6:	3714      	adds	r7, #20
 80060d8:	46bd      	mov	sp, r7
 80060da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060de:	4770      	bx	lr

080060e0 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80060e0:	b480      	push	{r7}
 80060e2:	b085      	sub	sp, #20
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060f2:	699b      	ldr	r3, [r3, #24]
 80060f4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060fc:	69db      	ldr	r3, [r3, #28]
 80060fe:	68ba      	ldr	r2, [r7, #8]
 8006100:	4013      	ands	r3, r2
 8006102:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006104:	68bb      	ldr	r3, [r7, #8]
 8006106:	b29b      	uxth	r3, r3
}
 8006108:	4618      	mov	r0, r3
 800610a:	3714      	adds	r7, #20
 800610c:	46bd      	mov	sp, r7
 800610e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006112:	4770      	bx	lr

08006114 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006114:	b480      	push	{r7}
 8006116:	b085      	sub	sp, #20
 8006118:	af00      	add	r7, sp, #0
 800611a:	6078      	str	r0, [r7, #4]
 800611c:	460b      	mov	r3, r1
 800611e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006124:	78fb      	ldrb	r3, [r7, #3]
 8006126:	015a      	lsls	r2, r3, #5
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	4413      	add	r3, r2
 800612c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006130:	689b      	ldr	r3, [r3, #8]
 8006132:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800613a:	695b      	ldr	r3, [r3, #20]
 800613c:	68ba      	ldr	r2, [r7, #8]
 800613e:	4013      	ands	r3, r2
 8006140:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006142:	68bb      	ldr	r3, [r7, #8]
}
 8006144:	4618      	mov	r0, r3
 8006146:	3714      	adds	r7, #20
 8006148:	46bd      	mov	sp, r7
 800614a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614e:	4770      	bx	lr

08006150 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006150:	b480      	push	{r7}
 8006152:	b087      	sub	sp, #28
 8006154:	af00      	add	r7, sp, #0
 8006156:	6078      	str	r0, [r7, #4]
 8006158:	460b      	mov	r3, r1
 800615a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006160:	697b      	ldr	r3, [r7, #20]
 8006162:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006166:	691b      	ldr	r3, [r3, #16]
 8006168:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800616a:	697b      	ldr	r3, [r7, #20]
 800616c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006170:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006172:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006174:	78fb      	ldrb	r3, [r7, #3]
 8006176:	f003 030f 	and.w	r3, r3, #15
 800617a:	68fa      	ldr	r2, [r7, #12]
 800617c:	fa22 f303 	lsr.w	r3, r2, r3
 8006180:	01db      	lsls	r3, r3, #7
 8006182:	b2db      	uxtb	r3, r3
 8006184:	693a      	ldr	r2, [r7, #16]
 8006186:	4313      	orrs	r3, r2
 8006188:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800618a:	78fb      	ldrb	r3, [r7, #3]
 800618c:	015a      	lsls	r2, r3, #5
 800618e:	697b      	ldr	r3, [r7, #20]
 8006190:	4413      	add	r3, r2
 8006192:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006196:	689b      	ldr	r3, [r3, #8]
 8006198:	693a      	ldr	r2, [r7, #16]
 800619a:	4013      	ands	r3, r2
 800619c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800619e:	68bb      	ldr	r3, [r7, #8]
}
 80061a0:	4618      	mov	r0, r3
 80061a2:	371c      	adds	r7, #28
 80061a4:	46bd      	mov	sp, r7
 80061a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061aa:	4770      	bx	lr

080061ac <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80061ac:	b480      	push	{r7}
 80061ae:	b083      	sub	sp, #12
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	695b      	ldr	r3, [r3, #20]
 80061b8:	f003 0301 	and.w	r3, r3, #1
}
 80061bc:	4618      	mov	r0, r3
 80061be:	370c      	adds	r7, #12
 80061c0:	46bd      	mov	sp, r7
 80061c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c6:	4770      	bx	lr

080061c8 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80061c8:	b480      	push	{r7}
 80061ca:	b085      	sub	sp, #20
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	68fa      	ldr	r2, [r7, #12]
 80061de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80061e2:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80061e6:	f023 0307 	bic.w	r3, r3, #7
 80061ea:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061f2:	685b      	ldr	r3, [r3, #4]
 80061f4:	68fa      	ldr	r2, [r7, #12]
 80061f6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80061fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80061fe:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006200:	2300      	movs	r3, #0
}
 8006202:	4618      	mov	r0, r3
 8006204:	3714      	adds	r7, #20
 8006206:	46bd      	mov	sp, r7
 8006208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620c:	4770      	bx	lr
	...

08006210 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8006210:	b480      	push	{r7}
 8006212:	b087      	sub	sp, #28
 8006214:	af00      	add	r7, sp, #0
 8006216:	60f8      	str	r0, [r7, #12]
 8006218:	460b      	mov	r3, r1
 800621a:	607a      	str	r2, [r7, #4]
 800621c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	333c      	adds	r3, #60	; 0x3c
 8006226:	3304      	adds	r3, #4
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800622c:	693b      	ldr	r3, [r7, #16]
 800622e:	4a26      	ldr	r2, [pc, #152]	; (80062c8 <USB_EP0_OutStart+0xb8>)
 8006230:	4293      	cmp	r3, r2
 8006232:	d90a      	bls.n	800624a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006234:	697b      	ldr	r3, [r7, #20]
 8006236:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006240:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006244:	d101      	bne.n	800624a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8006246:	2300      	movs	r3, #0
 8006248:	e037      	b.n	80062ba <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800624a:	697b      	ldr	r3, [r7, #20]
 800624c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006250:	461a      	mov	r2, r3
 8006252:	2300      	movs	r3, #0
 8006254:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006256:	697b      	ldr	r3, [r7, #20]
 8006258:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800625c:	691b      	ldr	r3, [r3, #16]
 800625e:	697a      	ldr	r2, [r7, #20]
 8006260:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006264:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006268:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800626a:	697b      	ldr	r3, [r7, #20]
 800626c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006270:	691b      	ldr	r3, [r3, #16]
 8006272:	697a      	ldr	r2, [r7, #20]
 8006274:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006278:	f043 0318 	orr.w	r3, r3, #24
 800627c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800627e:	697b      	ldr	r3, [r7, #20]
 8006280:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006284:	691b      	ldr	r3, [r3, #16]
 8006286:	697a      	ldr	r2, [r7, #20]
 8006288:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800628c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8006290:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8006292:	7afb      	ldrb	r3, [r7, #11]
 8006294:	2b01      	cmp	r3, #1
 8006296:	d10f      	bne.n	80062b8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006298:	697b      	ldr	r3, [r7, #20]
 800629a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800629e:	461a      	mov	r2, r3
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80062a4:	697b      	ldr	r3, [r7, #20]
 80062a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	697a      	ldr	r2, [r7, #20]
 80062ae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80062b2:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80062b6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80062b8:	2300      	movs	r3, #0
}
 80062ba:	4618      	mov	r0, r3
 80062bc:	371c      	adds	r7, #28
 80062be:	46bd      	mov	sp, r7
 80062c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c4:	4770      	bx	lr
 80062c6:	bf00      	nop
 80062c8:	4f54300a 	.word	0x4f54300a

080062cc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80062cc:	b480      	push	{r7}
 80062ce:	b085      	sub	sp, #20
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80062d4:	2300      	movs	r3, #0
 80062d6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	3301      	adds	r3, #1
 80062dc:	60fb      	str	r3, [r7, #12]
 80062de:	4a13      	ldr	r2, [pc, #76]	; (800632c <USB_CoreReset+0x60>)
 80062e0:	4293      	cmp	r3, r2
 80062e2:	d901      	bls.n	80062e8 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 80062e4:	2303      	movs	r3, #3
 80062e6:	e01a      	b.n	800631e <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	691b      	ldr	r3, [r3, #16]
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	daf3      	bge.n	80062d8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80062f0:	2300      	movs	r3, #0
 80062f2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	691b      	ldr	r3, [r3, #16]
 80062f8:	f043 0201 	orr.w	r2, r3, #1
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	3301      	adds	r3, #1
 8006304:	60fb      	str	r3, [r7, #12]
 8006306:	4a09      	ldr	r2, [pc, #36]	; (800632c <USB_CoreReset+0x60>)
 8006308:	4293      	cmp	r3, r2
 800630a:	d901      	bls.n	8006310 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 800630c:	2303      	movs	r3, #3
 800630e:	e006      	b.n	800631e <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	691b      	ldr	r3, [r3, #16]
 8006314:	f003 0301 	and.w	r3, r3, #1
 8006318:	2b01      	cmp	r3, #1
 800631a:	d0f1      	beq.n	8006300 <USB_CoreReset+0x34>

  return HAL_OK;
 800631c:	2300      	movs	r3, #0
}
 800631e:	4618      	mov	r0, r3
 8006320:	3714      	adds	r7, #20
 8006322:	46bd      	mov	sp, r7
 8006324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006328:	4770      	bx	lr
 800632a:	bf00      	nop
 800632c:	00030d40 	.word	0x00030d40

08006330 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006330:	b580      	push	{r7, lr}
 8006332:	b084      	sub	sp, #16
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
 8006338:	460b      	mov	r3, r1
 800633a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800633c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006340:	f002 f952 	bl	80085e8 <USBD_static_malloc>
 8006344:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	2b00      	cmp	r3, #0
 800634a:	d105      	bne.n	8006358 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	2200      	movs	r2, #0
 8006350:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8006354:	2302      	movs	r3, #2
 8006356:	e066      	b.n	8006426 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	68fa      	ldr	r2, [r7, #12]
 800635c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	7c1b      	ldrb	r3, [r3, #16]
 8006364:	2b00      	cmp	r3, #0
 8006366:	d119      	bne.n	800639c <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006368:	f44f 7300 	mov.w	r3, #512	; 0x200
 800636c:	2202      	movs	r2, #2
 800636e:	2181      	movs	r1, #129	; 0x81
 8006370:	6878      	ldr	r0, [r7, #4]
 8006372:	f002 f816 	bl	80083a2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	2201      	movs	r2, #1
 800637a:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800637c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006380:	2202      	movs	r2, #2
 8006382:	2101      	movs	r1, #1
 8006384:	6878      	ldr	r0, [r7, #4]
 8006386:	f002 f80c 	bl	80083a2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	2201      	movs	r2, #1
 800638e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	2210      	movs	r2, #16
 8006396:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800639a:	e016      	b.n	80063ca <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800639c:	2340      	movs	r3, #64	; 0x40
 800639e:	2202      	movs	r2, #2
 80063a0:	2181      	movs	r1, #129	; 0x81
 80063a2:	6878      	ldr	r0, [r7, #4]
 80063a4:	f001 fffd 	bl	80083a2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	2201      	movs	r2, #1
 80063ac:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80063ae:	2340      	movs	r3, #64	; 0x40
 80063b0:	2202      	movs	r2, #2
 80063b2:	2101      	movs	r1, #1
 80063b4:	6878      	ldr	r0, [r7, #4]
 80063b6:	f001 fff4 	bl	80083a2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	2201      	movs	r2, #1
 80063be:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	2210      	movs	r2, #16
 80063c6:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80063ca:	2308      	movs	r3, #8
 80063cc:	2203      	movs	r2, #3
 80063ce:	2182      	movs	r1, #130	; 0x82
 80063d0:	6878      	ldr	r0, [r7, #4]
 80063d2:	f001 ffe6 	bl	80083a2 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	2201      	movs	r2, #1
 80063da:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	2200      	movs	r2, #0
 80063ec:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	2200      	movs	r2, #0
 80063f4:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	7c1b      	ldrb	r3, [r3, #16]
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d109      	bne.n	8006414 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006406:	f44f 7300 	mov.w	r3, #512	; 0x200
 800640a:	2101      	movs	r1, #1
 800640c:	6878      	ldr	r0, [r7, #4]
 800640e:	f002 f8b7 	bl	8008580 <USBD_LL_PrepareReceive>
 8006412:	e007      	b.n	8006424 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800641a:	2340      	movs	r3, #64	; 0x40
 800641c:	2101      	movs	r1, #1
 800641e:	6878      	ldr	r0, [r7, #4]
 8006420:	f002 f8ae 	bl	8008580 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006424:	2300      	movs	r3, #0
}
 8006426:	4618      	mov	r0, r3
 8006428:	3710      	adds	r7, #16
 800642a:	46bd      	mov	sp, r7
 800642c:	bd80      	pop	{r7, pc}

0800642e <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800642e:	b580      	push	{r7, lr}
 8006430:	b082      	sub	sp, #8
 8006432:	af00      	add	r7, sp, #0
 8006434:	6078      	str	r0, [r7, #4]
 8006436:	460b      	mov	r3, r1
 8006438:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800643a:	2181      	movs	r1, #129	; 0x81
 800643c:	6878      	ldr	r0, [r7, #4]
 800643e:	f001 ffd6 	bl	80083ee <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	2200      	movs	r2, #0
 8006446:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8006448:	2101      	movs	r1, #1
 800644a:	6878      	ldr	r0, [r7, #4]
 800644c:	f001 ffcf 	bl	80083ee <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	2200      	movs	r2, #0
 8006454:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8006458:	2182      	movs	r1, #130	; 0x82
 800645a:	6878      	ldr	r0, [r7, #4]
 800645c:	f001 ffc7 	bl	80083ee <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	2200      	movs	r2, #0
 8006464:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	2200      	movs	r2, #0
 800646c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006476:	2b00      	cmp	r3, #0
 8006478:	d00e      	beq.n	8006498 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006480:	685b      	ldr	r3, [r3, #4]
 8006482:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800648a:	4618      	mov	r0, r3
 800648c:	f002 f8ba 	bl	8008604 <USBD_static_free>
    pdev->pClassData = NULL;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	2200      	movs	r2, #0
 8006494:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006498:	2300      	movs	r3, #0
}
 800649a:	4618      	mov	r0, r3
 800649c:	3708      	adds	r7, #8
 800649e:	46bd      	mov	sp, r7
 80064a0:	bd80      	pop	{r7, pc}
	...

080064a4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80064a4:	b580      	push	{r7, lr}
 80064a6:	b086      	sub	sp, #24
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	6078      	str	r0, [r7, #4]
 80064ac:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80064b4:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80064b6:	2300      	movs	r3, #0
 80064b8:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80064ba:	2300      	movs	r3, #0
 80064bc:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80064be:	2300      	movs	r3, #0
 80064c0:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80064c2:	693b      	ldr	r3, [r7, #16]
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d101      	bne.n	80064cc <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 80064c8:	2303      	movs	r3, #3
 80064ca:	e0af      	b.n	800662c <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80064cc:	683b      	ldr	r3, [r7, #0]
 80064ce:	781b      	ldrb	r3, [r3, #0]
 80064d0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d03f      	beq.n	8006558 <USBD_CDC_Setup+0xb4>
 80064d8:	2b20      	cmp	r3, #32
 80064da:	f040 809f 	bne.w	800661c <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80064de:	683b      	ldr	r3, [r7, #0]
 80064e0:	88db      	ldrh	r3, [r3, #6]
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d02e      	beq.n	8006544 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80064e6:	683b      	ldr	r3, [r7, #0]
 80064e8:	781b      	ldrb	r3, [r3, #0]
 80064ea:	b25b      	sxtb	r3, r3
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	da16      	bge.n	800651e <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80064f6:	689b      	ldr	r3, [r3, #8]
 80064f8:	683a      	ldr	r2, [r7, #0]
 80064fa:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 80064fc:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80064fe:	683a      	ldr	r2, [r7, #0]
 8006500:	88d2      	ldrh	r2, [r2, #6]
 8006502:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8006504:	683b      	ldr	r3, [r7, #0]
 8006506:	88db      	ldrh	r3, [r3, #6]
 8006508:	2b07      	cmp	r3, #7
 800650a:	bf28      	it	cs
 800650c:	2307      	movcs	r3, #7
 800650e:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8006510:	693b      	ldr	r3, [r7, #16]
 8006512:	89fa      	ldrh	r2, [r7, #14]
 8006514:	4619      	mov	r1, r3
 8006516:	6878      	ldr	r0, [r7, #4]
 8006518:	f001 fb19 	bl	8007b4e <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800651c:	e085      	b.n	800662a <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800651e:	683b      	ldr	r3, [r7, #0]
 8006520:	785a      	ldrb	r2, [r3, #1]
 8006522:	693b      	ldr	r3, [r7, #16]
 8006524:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8006528:	683b      	ldr	r3, [r7, #0]
 800652a:	88db      	ldrh	r3, [r3, #6]
 800652c:	b2da      	uxtb	r2, r3
 800652e:	693b      	ldr	r3, [r7, #16]
 8006530:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8006534:	6939      	ldr	r1, [r7, #16]
 8006536:	683b      	ldr	r3, [r7, #0]
 8006538:	88db      	ldrh	r3, [r3, #6]
 800653a:	461a      	mov	r2, r3
 800653c:	6878      	ldr	r0, [r7, #4]
 800653e:	f001 fb32 	bl	8007ba6 <USBD_CtlPrepareRx>
      break;
 8006542:	e072      	b.n	800662a <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800654a:	689b      	ldr	r3, [r3, #8]
 800654c:	683a      	ldr	r2, [r7, #0]
 800654e:	7850      	ldrb	r0, [r2, #1]
 8006550:	2200      	movs	r2, #0
 8006552:	6839      	ldr	r1, [r7, #0]
 8006554:	4798      	blx	r3
      break;
 8006556:	e068      	b.n	800662a <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006558:	683b      	ldr	r3, [r7, #0]
 800655a:	785b      	ldrb	r3, [r3, #1]
 800655c:	2b0b      	cmp	r3, #11
 800655e:	d852      	bhi.n	8006606 <USBD_CDC_Setup+0x162>
 8006560:	a201      	add	r2, pc, #4	; (adr r2, 8006568 <USBD_CDC_Setup+0xc4>)
 8006562:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006566:	bf00      	nop
 8006568:	08006599 	.word	0x08006599
 800656c:	08006615 	.word	0x08006615
 8006570:	08006607 	.word	0x08006607
 8006574:	08006607 	.word	0x08006607
 8006578:	08006607 	.word	0x08006607
 800657c:	08006607 	.word	0x08006607
 8006580:	08006607 	.word	0x08006607
 8006584:	08006607 	.word	0x08006607
 8006588:	08006607 	.word	0x08006607
 800658c:	08006607 	.word	0x08006607
 8006590:	080065c3 	.word	0x080065c3
 8006594:	080065ed 	.word	0x080065ed
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800659e:	b2db      	uxtb	r3, r3
 80065a0:	2b03      	cmp	r3, #3
 80065a2:	d107      	bne.n	80065b4 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80065a4:	f107 030a 	add.w	r3, r7, #10
 80065a8:	2202      	movs	r2, #2
 80065aa:	4619      	mov	r1, r3
 80065ac:	6878      	ldr	r0, [r7, #4]
 80065ae:	f001 face 	bl	8007b4e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80065b2:	e032      	b.n	800661a <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 80065b4:	6839      	ldr	r1, [r7, #0]
 80065b6:	6878      	ldr	r0, [r7, #4]
 80065b8:	f001 fa58 	bl	8007a6c <USBD_CtlError>
            ret = USBD_FAIL;
 80065bc:	2303      	movs	r3, #3
 80065be:	75fb      	strb	r3, [r7, #23]
          break;
 80065c0:	e02b      	b.n	800661a <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80065c8:	b2db      	uxtb	r3, r3
 80065ca:	2b03      	cmp	r3, #3
 80065cc:	d107      	bne.n	80065de <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80065ce:	f107 030d 	add.w	r3, r7, #13
 80065d2:	2201      	movs	r2, #1
 80065d4:	4619      	mov	r1, r3
 80065d6:	6878      	ldr	r0, [r7, #4]
 80065d8:	f001 fab9 	bl	8007b4e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80065dc:	e01d      	b.n	800661a <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 80065de:	6839      	ldr	r1, [r7, #0]
 80065e0:	6878      	ldr	r0, [r7, #4]
 80065e2:	f001 fa43 	bl	8007a6c <USBD_CtlError>
            ret = USBD_FAIL;
 80065e6:	2303      	movs	r3, #3
 80065e8:	75fb      	strb	r3, [r7, #23]
          break;
 80065ea:	e016      	b.n	800661a <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80065f2:	b2db      	uxtb	r3, r3
 80065f4:	2b03      	cmp	r3, #3
 80065f6:	d00f      	beq.n	8006618 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 80065f8:	6839      	ldr	r1, [r7, #0]
 80065fa:	6878      	ldr	r0, [r7, #4]
 80065fc:	f001 fa36 	bl	8007a6c <USBD_CtlError>
            ret = USBD_FAIL;
 8006600:	2303      	movs	r3, #3
 8006602:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006604:	e008      	b.n	8006618 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006606:	6839      	ldr	r1, [r7, #0]
 8006608:	6878      	ldr	r0, [r7, #4]
 800660a:	f001 fa2f 	bl	8007a6c <USBD_CtlError>
          ret = USBD_FAIL;
 800660e:	2303      	movs	r3, #3
 8006610:	75fb      	strb	r3, [r7, #23]
          break;
 8006612:	e002      	b.n	800661a <USBD_CDC_Setup+0x176>
          break;
 8006614:	bf00      	nop
 8006616:	e008      	b.n	800662a <USBD_CDC_Setup+0x186>
          break;
 8006618:	bf00      	nop
      }
      break;
 800661a:	e006      	b.n	800662a <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800661c:	6839      	ldr	r1, [r7, #0]
 800661e:	6878      	ldr	r0, [r7, #4]
 8006620:	f001 fa24 	bl	8007a6c <USBD_CtlError>
      ret = USBD_FAIL;
 8006624:	2303      	movs	r3, #3
 8006626:	75fb      	strb	r3, [r7, #23]
      break;
 8006628:	bf00      	nop
  }

  return (uint8_t)ret;
 800662a:	7dfb      	ldrb	r3, [r7, #23]
}
 800662c:	4618      	mov	r0, r3
 800662e:	3718      	adds	r7, #24
 8006630:	46bd      	mov	sp, r7
 8006632:	bd80      	pop	{r7, pc}

08006634 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006634:	b580      	push	{r7, lr}
 8006636:	b084      	sub	sp, #16
 8006638:	af00      	add	r7, sp, #0
 800663a:	6078      	str	r0, [r7, #4]
 800663c:	460b      	mov	r3, r1
 800663e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006646:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800664e:	2b00      	cmp	r3, #0
 8006650:	d101      	bne.n	8006656 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006652:	2303      	movs	r3, #3
 8006654:	e04f      	b.n	80066f6 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800665c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800665e:	78fa      	ldrb	r2, [r7, #3]
 8006660:	6879      	ldr	r1, [r7, #4]
 8006662:	4613      	mov	r3, r2
 8006664:	009b      	lsls	r3, r3, #2
 8006666:	4413      	add	r3, r2
 8006668:	009b      	lsls	r3, r3, #2
 800666a:	440b      	add	r3, r1
 800666c:	3318      	adds	r3, #24
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	2b00      	cmp	r3, #0
 8006672:	d029      	beq.n	80066c8 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8006674:	78fa      	ldrb	r2, [r7, #3]
 8006676:	6879      	ldr	r1, [r7, #4]
 8006678:	4613      	mov	r3, r2
 800667a:	009b      	lsls	r3, r3, #2
 800667c:	4413      	add	r3, r2
 800667e:	009b      	lsls	r3, r3, #2
 8006680:	440b      	add	r3, r1
 8006682:	3318      	adds	r3, #24
 8006684:	681a      	ldr	r2, [r3, #0]
 8006686:	78f9      	ldrb	r1, [r7, #3]
 8006688:	68f8      	ldr	r0, [r7, #12]
 800668a:	460b      	mov	r3, r1
 800668c:	00db      	lsls	r3, r3, #3
 800668e:	1a5b      	subs	r3, r3, r1
 8006690:	009b      	lsls	r3, r3, #2
 8006692:	4403      	add	r3, r0
 8006694:	3344      	adds	r3, #68	; 0x44
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	fbb2 f1f3 	udiv	r1, r2, r3
 800669c:	fb03 f301 	mul.w	r3, r3, r1
 80066a0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d110      	bne.n	80066c8 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 80066a6:	78fa      	ldrb	r2, [r7, #3]
 80066a8:	6879      	ldr	r1, [r7, #4]
 80066aa:	4613      	mov	r3, r2
 80066ac:	009b      	lsls	r3, r3, #2
 80066ae:	4413      	add	r3, r2
 80066b0:	009b      	lsls	r3, r3, #2
 80066b2:	440b      	add	r3, r1
 80066b4:	3318      	adds	r3, #24
 80066b6:	2200      	movs	r2, #0
 80066b8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80066ba:	78f9      	ldrb	r1, [r7, #3]
 80066bc:	2300      	movs	r3, #0
 80066be:	2200      	movs	r2, #0
 80066c0:	6878      	ldr	r0, [r7, #4]
 80066c2:	f001 ff3c 	bl	800853e <USBD_LL_Transmit>
 80066c6:	e015      	b.n	80066f4 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 80066c8:	68bb      	ldr	r3, [r7, #8]
 80066ca:	2200      	movs	r2, #0
 80066cc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80066d6:	691b      	ldr	r3, [r3, #16]
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d00b      	beq.n	80066f4 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80066e2:	691b      	ldr	r3, [r3, #16]
 80066e4:	68ba      	ldr	r2, [r7, #8]
 80066e6:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80066ea:	68ba      	ldr	r2, [r7, #8]
 80066ec:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80066f0:	78fa      	ldrb	r2, [r7, #3]
 80066f2:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80066f4:	2300      	movs	r3, #0
}
 80066f6:	4618      	mov	r0, r3
 80066f8:	3710      	adds	r7, #16
 80066fa:	46bd      	mov	sp, r7
 80066fc:	bd80      	pop	{r7, pc}

080066fe <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80066fe:	b580      	push	{r7, lr}
 8006700:	b084      	sub	sp, #16
 8006702:	af00      	add	r7, sp, #0
 8006704:	6078      	str	r0, [r7, #4]
 8006706:	460b      	mov	r3, r1
 8006708:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006710:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006718:	2b00      	cmp	r3, #0
 800671a:	d101      	bne.n	8006720 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800671c:	2303      	movs	r3, #3
 800671e:	e015      	b.n	800674c <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006720:	78fb      	ldrb	r3, [r7, #3]
 8006722:	4619      	mov	r1, r3
 8006724:	6878      	ldr	r0, [r7, #4]
 8006726:	f001 ff4c 	bl	80085c2 <USBD_LL_GetRxDataSize>
 800672a:	4602      	mov	r2, r0
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006738:	68db      	ldr	r3, [r3, #12]
 800673a:	68fa      	ldr	r2, [r7, #12]
 800673c:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006740:	68fa      	ldr	r2, [r7, #12]
 8006742:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006746:	4611      	mov	r1, r2
 8006748:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800674a:	2300      	movs	r3, #0
}
 800674c:	4618      	mov	r0, r3
 800674e:	3710      	adds	r7, #16
 8006750:	46bd      	mov	sp, r7
 8006752:	bd80      	pop	{r7, pc}

08006754 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006754:	b580      	push	{r7, lr}
 8006756:	b084      	sub	sp, #16
 8006758:	af00      	add	r7, sp, #0
 800675a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006762:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	2b00      	cmp	r3, #0
 8006768:	d101      	bne.n	800676e <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800676a:	2303      	movs	r3, #3
 800676c:	e01b      	b.n	80067a6 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006774:	2b00      	cmp	r3, #0
 8006776:	d015      	beq.n	80067a4 <USBD_CDC_EP0_RxReady+0x50>
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800677e:	2bff      	cmp	r3, #255	; 0xff
 8006780:	d010      	beq.n	80067a4 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006788:	689b      	ldr	r3, [r3, #8]
 800678a:	68fa      	ldr	r2, [r7, #12]
 800678c:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8006790:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8006792:	68fa      	ldr	r2, [r7, #12]
 8006794:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006798:	b292      	uxth	r2, r2
 800679a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	22ff      	movs	r2, #255	; 0xff
 80067a0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80067a4:	2300      	movs	r3, #0
}
 80067a6:	4618      	mov	r0, r3
 80067a8:	3710      	adds	r7, #16
 80067aa:	46bd      	mov	sp, r7
 80067ac:	bd80      	pop	{r7, pc}
	...

080067b0 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80067b0:	b480      	push	{r7}
 80067b2:	b083      	sub	sp, #12
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2243      	movs	r2, #67	; 0x43
 80067bc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 80067be:	4b03      	ldr	r3, [pc, #12]	; (80067cc <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80067c0:	4618      	mov	r0, r3
 80067c2:	370c      	adds	r7, #12
 80067c4:	46bd      	mov	sp, r7
 80067c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ca:	4770      	bx	lr
 80067cc:	20000094 	.word	0x20000094

080067d0 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80067d0:	b480      	push	{r7}
 80067d2:	b083      	sub	sp, #12
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	2243      	movs	r2, #67	; 0x43
 80067dc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 80067de:	4b03      	ldr	r3, [pc, #12]	; (80067ec <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80067e0:	4618      	mov	r0, r3
 80067e2:	370c      	adds	r7, #12
 80067e4:	46bd      	mov	sp, r7
 80067e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ea:	4770      	bx	lr
 80067ec:	20000050 	.word	0x20000050

080067f0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80067f0:	b480      	push	{r7}
 80067f2:	b083      	sub	sp, #12
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	2243      	movs	r2, #67	; 0x43
 80067fc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 80067fe:	4b03      	ldr	r3, [pc, #12]	; (800680c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8006800:	4618      	mov	r0, r3
 8006802:	370c      	adds	r7, #12
 8006804:	46bd      	mov	sp, r7
 8006806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680a:	4770      	bx	lr
 800680c:	200000d8 	.word	0x200000d8

08006810 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006810:	b480      	push	{r7}
 8006812:	b083      	sub	sp, #12
 8006814:	af00      	add	r7, sp, #0
 8006816:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	220a      	movs	r2, #10
 800681c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800681e:	4b03      	ldr	r3, [pc, #12]	; (800682c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006820:	4618      	mov	r0, r3
 8006822:	370c      	adds	r7, #12
 8006824:	46bd      	mov	sp, r7
 8006826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682a:	4770      	bx	lr
 800682c:	2000000c 	.word	0x2000000c

08006830 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006830:	b480      	push	{r7}
 8006832:	b083      	sub	sp, #12
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
 8006838:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800683a:	683b      	ldr	r3, [r7, #0]
 800683c:	2b00      	cmp	r3, #0
 800683e:	d101      	bne.n	8006844 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006840:	2303      	movs	r3, #3
 8006842:	e004      	b.n	800684e <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	683a      	ldr	r2, [r7, #0]
 8006848:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800684c:	2300      	movs	r3, #0
}
 800684e:	4618      	mov	r0, r3
 8006850:	370c      	adds	r7, #12
 8006852:	46bd      	mov	sp, r7
 8006854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006858:	4770      	bx	lr

0800685a <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800685a:	b480      	push	{r7}
 800685c:	b087      	sub	sp, #28
 800685e:	af00      	add	r7, sp, #0
 8006860:	60f8      	str	r0, [r7, #12]
 8006862:	60b9      	str	r1, [r7, #8]
 8006864:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800686c:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800686e:	697b      	ldr	r3, [r7, #20]
 8006870:	2b00      	cmp	r3, #0
 8006872:	d101      	bne.n	8006878 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8006874:	2303      	movs	r3, #3
 8006876:	e008      	b.n	800688a <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8006878:	697b      	ldr	r3, [r7, #20]
 800687a:	68ba      	ldr	r2, [r7, #8]
 800687c:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006880:	697b      	ldr	r3, [r7, #20]
 8006882:	687a      	ldr	r2, [r7, #4]
 8006884:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8006888:	2300      	movs	r3, #0
}
 800688a:	4618      	mov	r0, r3
 800688c:	371c      	adds	r7, #28
 800688e:	46bd      	mov	sp, r7
 8006890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006894:	4770      	bx	lr

08006896 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006896:	b480      	push	{r7}
 8006898:	b085      	sub	sp, #20
 800689a:	af00      	add	r7, sp, #0
 800689c:	6078      	str	r0, [r7, #4]
 800689e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80068a6:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d101      	bne.n	80068b2 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 80068ae:	2303      	movs	r3, #3
 80068b0:	e004      	b.n	80068bc <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	683a      	ldr	r2, [r7, #0]
 80068b6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80068ba:	2300      	movs	r3, #0
}
 80068bc:	4618      	mov	r0, r3
 80068be:	3714      	adds	r7, #20
 80068c0:	46bd      	mov	sp, r7
 80068c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c6:	4770      	bx	lr

080068c8 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80068c8:	b580      	push	{r7, lr}
 80068ca:	b084      	sub	sp, #16
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80068d6:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 80068d8:	2301      	movs	r3, #1
 80068da:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d101      	bne.n	80068ea <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80068e6:	2303      	movs	r3, #3
 80068e8:	e01a      	b.n	8006920 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 80068ea:	68bb      	ldr	r3, [r7, #8]
 80068ec:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d114      	bne.n	800691e <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80068f4:	68bb      	ldr	r3, [r7, #8]
 80068f6:	2201      	movs	r2, #1
 80068f8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80068fc:	68bb      	ldr	r3, [r7, #8]
 80068fe:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8006906:	68bb      	ldr	r3, [r7, #8]
 8006908:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800690c:	68bb      	ldr	r3, [r7, #8]
 800690e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8006912:	2181      	movs	r1, #129	; 0x81
 8006914:	6878      	ldr	r0, [r7, #4]
 8006916:	f001 fe12 	bl	800853e <USBD_LL_Transmit>

    ret = USBD_OK;
 800691a:	2300      	movs	r3, #0
 800691c:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800691e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006920:	4618      	mov	r0, r3
 8006922:	3710      	adds	r7, #16
 8006924:	46bd      	mov	sp, r7
 8006926:	bd80      	pop	{r7, pc}

08006928 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006928:	b580      	push	{r7, lr}
 800692a:	b084      	sub	sp, #16
 800692c:	af00      	add	r7, sp, #0
 800692e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006936:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800693e:	2b00      	cmp	r3, #0
 8006940:	d101      	bne.n	8006946 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8006942:	2303      	movs	r3, #3
 8006944:	e016      	b.n	8006974 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	7c1b      	ldrb	r3, [r3, #16]
 800694a:	2b00      	cmp	r3, #0
 800694c:	d109      	bne.n	8006962 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006954:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006958:	2101      	movs	r1, #1
 800695a:	6878      	ldr	r0, [r7, #4]
 800695c:	f001 fe10 	bl	8008580 <USBD_LL_PrepareReceive>
 8006960:	e007      	b.n	8006972 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006968:	2340      	movs	r3, #64	; 0x40
 800696a:	2101      	movs	r1, #1
 800696c:	6878      	ldr	r0, [r7, #4]
 800696e:	f001 fe07 	bl	8008580 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006972:	2300      	movs	r3, #0
}
 8006974:	4618      	mov	r0, r3
 8006976:	3710      	adds	r7, #16
 8006978:	46bd      	mov	sp, r7
 800697a:	bd80      	pop	{r7, pc}

0800697c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800697c:	b580      	push	{r7, lr}
 800697e:	b086      	sub	sp, #24
 8006980:	af00      	add	r7, sp, #0
 8006982:	60f8      	str	r0, [r7, #12]
 8006984:	60b9      	str	r1, [r7, #8]
 8006986:	4613      	mov	r3, r2
 8006988:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	2b00      	cmp	r3, #0
 800698e:	d101      	bne.n	8006994 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006990:	2303      	movs	r3, #3
 8006992:	e01f      	b.n	80069d4 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	2200      	movs	r2, #0
 8006998:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	2200      	movs	r2, #0
 80069a0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	2200      	movs	r2, #0
 80069a8:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80069ac:	68bb      	ldr	r3, [r7, #8]
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d003      	beq.n	80069ba <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	68ba      	ldr	r2, [r7, #8]
 80069b6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	2201      	movs	r2, #1
 80069be:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	79fa      	ldrb	r2, [r7, #7]
 80069c6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80069c8:	68f8      	ldr	r0, [r7, #12]
 80069ca:	f001 fc83 	bl	80082d4 <USBD_LL_Init>
 80069ce:	4603      	mov	r3, r0
 80069d0:	75fb      	strb	r3, [r7, #23]

  return ret;
 80069d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80069d4:	4618      	mov	r0, r3
 80069d6:	3718      	adds	r7, #24
 80069d8:	46bd      	mov	sp, r7
 80069da:	bd80      	pop	{r7, pc}

080069dc <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80069dc:	b580      	push	{r7, lr}
 80069de:	b084      	sub	sp, #16
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	6078      	str	r0, [r7, #4]
 80069e4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80069e6:	2300      	movs	r3, #0
 80069e8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80069ea:	683b      	ldr	r3, [r7, #0]
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d101      	bne.n	80069f4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 80069f0:	2303      	movs	r3, #3
 80069f2:	e016      	b.n	8006a22 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	683a      	ldr	r2, [r7, #0]
 80069f8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d00b      	beq.n	8006a20 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a10:	f107 020e 	add.w	r2, r7, #14
 8006a14:	4610      	mov	r0, r2
 8006a16:	4798      	blx	r3
 8006a18:	4602      	mov	r2, r0
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8006a20:	2300      	movs	r3, #0
}
 8006a22:	4618      	mov	r0, r3
 8006a24:	3710      	adds	r7, #16
 8006a26:	46bd      	mov	sp, r7
 8006a28:	bd80      	pop	{r7, pc}

08006a2a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006a2a:	b580      	push	{r7, lr}
 8006a2c:	b082      	sub	sp, #8
 8006a2e:	af00      	add	r7, sp, #0
 8006a30:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006a32:	6878      	ldr	r0, [r7, #4]
 8006a34:	f001 fc9a 	bl	800836c <USBD_LL_Start>
 8006a38:	4603      	mov	r3, r0
}
 8006a3a:	4618      	mov	r0, r3
 8006a3c:	3708      	adds	r7, #8
 8006a3e:	46bd      	mov	sp, r7
 8006a40:	bd80      	pop	{r7, pc}

08006a42 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8006a42:	b480      	push	{r7}
 8006a44:	b083      	sub	sp, #12
 8006a46:	af00      	add	r7, sp, #0
 8006a48:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006a4a:	2300      	movs	r3, #0
}
 8006a4c:	4618      	mov	r0, r3
 8006a4e:	370c      	adds	r7, #12
 8006a50:	46bd      	mov	sp, r7
 8006a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a56:	4770      	bx	lr

08006a58 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006a58:	b580      	push	{r7, lr}
 8006a5a:	b084      	sub	sp, #16
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	6078      	str	r0, [r7, #4]
 8006a60:	460b      	mov	r3, r1
 8006a62:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006a64:	2303      	movs	r3, #3
 8006a66:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d009      	beq.n	8006a86 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	78fa      	ldrb	r2, [r7, #3]
 8006a7c:	4611      	mov	r1, r2
 8006a7e:	6878      	ldr	r0, [r7, #4]
 8006a80:	4798      	blx	r3
 8006a82:	4603      	mov	r3, r0
 8006a84:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8006a86:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a88:	4618      	mov	r0, r3
 8006a8a:	3710      	adds	r7, #16
 8006a8c:	46bd      	mov	sp, r7
 8006a8e:	bd80      	pop	{r7, pc}

08006a90 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006a90:	b580      	push	{r7, lr}
 8006a92:	b082      	sub	sp, #8
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	6078      	str	r0, [r7, #4]
 8006a98:	460b      	mov	r3, r1
 8006a9a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d007      	beq.n	8006ab6 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006aac:	685b      	ldr	r3, [r3, #4]
 8006aae:	78fa      	ldrb	r2, [r7, #3]
 8006ab0:	4611      	mov	r1, r2
 8006ab2:	6878      	ldr	r0, [r7, #4]
 8006ab4:	4798      	blx	r3
  }

  return USBD_OK;
 8006ab6:	2300      	movs	r3, #0
}
 8006ab8:	4618      	mov	r0, r3
 8006aba:	3708      	adds	r7, #8
 8006abc:	46bd      	mov	sp, r7
 8006abe:	bd80      	pop	{r7, pc}

08006ac0 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006ac0:	b580      	push	{r7, lr}
 8006ac2:	b084      	sub	sp, #16
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	6078      	str	r0, [r7, #4]
 8006ac8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006ad0:	6839      	ldr	r1, [r7, #0]
 8006ad2:	4618      	mov	r0, r3
 8006ad4:	f000 ff90 	bl	80079f8 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	2201      	movs	r2, #1
 8006adc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8006ae6:	461a      	mov	r2, r3
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006af4:	f003 031f 	and.w	r3, r3, #31
 8006af8:	2b02      	cmp	r3, #2
 8006afa:	d01a      	beq.n	8006b32 <USBD_LL_SetupStage+0x72>
 8006afc:	2b02      	cmp	r3, #2
 8006afe:	d822      	bhi.n	8006b46 <USBD_LL_SetupStage+0x86>
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d002      	beq.n	8006b0a <USBD_LL_SetupStage+0x4a>
 8006b04:	2b01      	cmp	r3, #1
 8006b06:	d00a      	beq.n	8006b1e <USBD_LL_SetupStage+0x5e>
 8006b08:	e01d      	b.n	8006b46 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006b10:	4619      	mov	r1, r3
 8006b12:	6878      	ldr	r0, [r7, #4]
 8006b14:	f000 fa62 	bl	8006fdc <USBD_StdDevReq>
 8006b18:	4603      	mov	r3, r0
 8006b1a:	73fb      	strb	r3, [r7, #15]
      break;
 8006b1c:	e020      	b.n	8006b60 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006b24:	4619      	mov	r1, r3
 8006b26:	6878      	ldr	r0, [r7, #4]
 8006b28:	f000 fac6 	bl	80070b8 <USBD_StdItfReq>
 8006b2c:	4603      	mov	r3, r0
 8006b2e:	73fb      	strb	r3, [r7, #15]
      break;
 8006b30:	e016      	b.n	8006b60 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006b38:	4619      	mov	r1, r3
 8006b3a:	6878      	ldr	r0, [r7, #4]
 8006b3c:	f000 fb05 	bl	800714a <USBD_StdEPReq>
 8006b40:	4603      	mov	r3, r0
 8006b42:	73fb      	strb	r3, [r7, #15]
      break;
 8006b44:	e00c      	b.n	8006b60 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006b4c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006b50:	b2db      	uxtb	r3, r3
 8006b52:	4619      	mov	r1, r3
 8006b54:	6878      	ldr	r0, [r7, #4]
 8006b56:	f001 fc69 	bl	800842c <USBD_LL_StallEP>
 8006b5a:	4603      	mov	r3, r0
 8006b5c:	73fb      	strb	r3, [r7, #15]
      break;
 8006b5e:	bf00      	nop
  }

  return ret;
 8006b60:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b62:	4618      	mov	r0, r3
 8006b64:	3710      	adds	r7, #16
 8006b66:	46bd      	mov	sp, r7
 8006b68:	bd80      	pop	{r7, pc}

08006b6a <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006b6a:	b580      	push	{r7, lr}
 8006b6c:	b086      	sub	sp, #24
 8006b6e:	af00      	add	r7, sp, #0
 8006b70:	60f8      	str	r0, [r7, #12]
 8006b72:	460b      	mov	r3, r1
 8006b74:	607a      	str	r2, [r7, #4]
 8006b76:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8006b78:	7afb      	ldrb	r3, [r7, #11]
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d138      	bne.n	8006bf0 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006b84:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006b8c:	2b03      	cmp	r3, #3
 8006b8e:	d14a      	bne.n	8006c26 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8006b90:	693b      	ldr	r3, [r7, #16]
 8006b92:	689a      	ldr	r2, [r3, #8]
 8006b94:	693b      	ldr	r3, [r7, #16]
 8006b96:	68db      	ldr	r3, [r3, #12]
 8006b98:	429a      	cmp	r2, r3
 8006b9a:	d913      	bls.n	8006bc4 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006b9c:	693b      	ldr	r3, [r7, #16]
 8006b9e:	689a      	ldr	r2, [r3, #8]
 8006ba0:	693b      	ldr	r3, [r7, #16]
 8006ba2:	68db      	ldr	r3, [r3, #12]
 8006ba4:	1ad2      	subs	r2, r2, r3
 8006ba6:	693b      	ldr	r3, [r7, #16]
 8006ba8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006baa:	693b      	ldr	r3, [r7, #16]
 8006bac:	68da      	ldr	r2, [r3, #12]
 8006bae:	693b      	ldr	r3, [r7, #16]
 8006bb0:	689b      	ldr	r3, [r3, #8]
 8006bb2:	4293      	cmp	r3, r2
 8006bb4:	bf28      	it	cs
 8006bb6:	4613      	movcs	r3, r2
 8006bb8:	461a      	mov	r2, r3
 8006bba:	6879      	ldr	r1, [r7, #4]
 8006bbc:	68f8      	ldr	r0, [r7, #12]
 8006bbe:	f001 f80f 	bl	8007be0 <USBD_CtlContinueRx>
 8006bc2:	e030      	b.n	8006c26 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006bca:	b2db      	uxtb	r3, r3
 8006bcc:	2b03      	cmp	r3, #3
 8006bce:	d10b      	bne.n	8006be8 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006bd6:	691b      	ldr	r3, [r3, #16]
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d005      	beq.n	8006be8 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006be2:	691b      	ldr	r3, [r3, #16]
 8006be4:	68f8      	ldr	r0, [r7, #12]
 8006be6:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006be8:	68f8      	ldr	r0, [r7, #12]
 8006bea:	f001 f80a 	bl	8007c02 <USBD_CtlSendStatus>
 8006bee:	e01a      	b.n	8006c26 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006bf6:	b2db      	uxtb	r3, r3
 8006bf8:	2b03      	cmp	r3, #3
 8006bfa:	d114      	bne.n	8006c26 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c02:	699b      	ldr	r3, [r3, #24]
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d00e      	beq.n	8006c26 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c0e:	699b      	ldr	r3, [r3, #24]
 8006c10:	7afa      	ldrb	r2, [r7, #11]
 8006c12:	4611      	mov	r1, r2
 8006c14:	68f8      	ldr	r0, [r7, #12]
 8006c16:	4798      	blx	r3
 8006c18:	4603      	mov	r3, r0
 8006c1a:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8006c1c:	7dfb      	ldrb	r3, [r7, #23]
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d001      	beq.n	8006c26 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8006c22:	7dfb      	ldrb	r3, [r7, #23]
 8006c24:	e000      	b.n	8006c28 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8006c26:	2300      	movs	r3, #0
}
 8006c28:	4618      	mov	r0, r3
 8006c2a:	3718      	adds	r7, #24
 8006c2c:	46bd      	mov	sp, r7
 8006c2e:	bd80      	pop	{r7, pc}

08006c30 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006c30:	b580      	push	{r7, lr}
 8006c32:	b086      	sub	sp, #24
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	60f8      	str	r0, [r7, #12]
 8006c38:	460b      	mov	r3, r1
 8006c3a:	607a      	str	r2, [r7, #4]
 8006c3c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8006c3e:	7afb      	ldrb	r3, [r7, #11]
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d16b      	bne.n	8006d1c <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	3314      	adds	r3, #20
 8006c48:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006c50:	2b02      	cmp	r3, #2
 8006c52:	d156      	bne.n	8006d02 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8006c54:	693b      	ldr	r3, [r7, #16]
 8006c56:	689a      	ldr	r2, [r3, #8]
 8006c58:	693b      	ldr	r3, [r7, #16]
 8006c5a:	68db      	ldr	r3, [r3, #12]
 8006c5c:	429a      	cmp	r2, r3
 8006c5e:	d914      	bls.n	8006c8a <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006c60:	693b      	ldr	r3, [r7, #16]
 8006c62:	689a      	ldr	r2, [r3, #8]
 8006c64:	693b      	ldr	r3, [r7, #16]
 8006c66:	68db      	ldr	r3, [r3, #12]
 8006c68:	1ad2      	subs	r2, r2, r3
 8006c6a:	693b      	ldr	r3, [r7, #16]
 8006c6c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006c6e:	693b      	ldr	r3, [r7, #16]
 8006c70:	689b      	ldr	r3, [r3, #8]
 8006c72:	461a      	mov	r2, r3
 8006c74:	6879      	ldr	r1, [r7, #4]
 8006c76:	68f8      	ldr	r0, [r7, #12]
 8006c78:	f000 ff84 	bl	8007b84 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006c7c:	2300      	movs	r3, #0
 8006c7e:	2200      	movs	r2, #0
 8006c80:	2100      	movs	r1, #0
 8006c82:	68f8      	ldr	r0, [r7, #12]
 8006c84:	f001 fc7c 	bl	8008580 <USBD_LL_PrepareReceive>
 8006c88:	e03b      	b.n	8006d02 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006c8a:	693b      	ldr	r3, [r7, #16]
 8006c8c:	68da      	ldr	r2, [r3, #12]
 8006c8e:	693b      	ldr	r3, [r7, #16]
 8006c90:	689b      	ldr	r3, [r3, #8]
 8006c92:	429a      	cmp	r2, r3
 8006c94:	d11c      	bne.n	8006cd0 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006c96:	693b      	ldr	r3, [r7, #16]
 8006c98:	685a      	ldr	r2, [r3, #4]
 8006c9a:	693b      	ldr	r3, [r7, #16]
 8006c9c:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006c9e:	429a      	cmp	r2, r3
 8006ca0:	d316      	bcc.n	8006cd0 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006ca2:	693b      	ldr	r3, [r7, #16]
 8006ca4:	685a      	ldr	r2, [r3, #4]
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006cac:	429a      	cmp	r2, r3
 8006cae:	d20f      	bcs.n	8006cd0 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006cb0:	2200      	movs	r2, #0
 8006cb2:	2100      	movs	r1, #0
 8006cb4:	68f8      	ldr	r0, [r7, #12]
 8006cb6:	f000 ff65 	bl	8007b84 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	2200      	movs	r2, #0
 8006cbe:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006cc2:	2300      	movs	r3, #0
 8006cc4:	2200      	movs	r2, #0
 8006cc6:	2100      	movs	r1, #0
 8006cc8:	68f8      	ldr	r0, [r7, #12]
 8006cca:	f001 fc59 	bl	8008580 <USBD_LL_PrepareReceive>
 8006cce:	e018      	b.n	8006d02 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006cd6:	b2db      	uxtb	r3, r3
 8006cd8:	2b03      	cmp	r3, #3
 8006cda:	d10b      	bne.n	8006cf4 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ce2:	68db      	ldr	r3, [r3, #12]
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d005      	beq.n	8006cf4 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006cee:	68db      	ldr	r3, [r3, #12]
 8006cf0:	68f8      	ldr	r0, [r7, #12]
 8006cf2:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006cf4:	2180      	movs	r1, #128	; 0x80
 8006cf6:	68f8      	ldr	r0, [r7, #12]
 8006cf8:	f001 fb98 	bl	800842c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006cfc:	68f8      	ldr	r0, [r7, #12]
 8006cfe:	f000 ff93 	bl	8007c28 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006d08:	2b01      	cmp	r3, #1
 8006d0a:	d122      	bne.n	8006d52 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8006d0c:	68f8      	ldr	r0, [r7, #12]
 8006d0e:	f7ff fe98 	bl	8006a42 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	2200      	movs	r2, #0
 8006d16:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006d1a:	e01a      	b.n	8006d52 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d22:	b2db      	uxtb	r3, r3
 8006d24:	2b03      	cmp	r3, #3
 8006d26:	d114      	bne.n	8006d52 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d2e:	695b      	ldr	r3, [r3, #20]
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d00e      	beq.n	8006d52 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d3a:	695b      	ldr	r3, [r3, #20]
 8006d3c:	7afa      	ldrb	r2, [r7, #11]
 8006d3e:	4611      	mov	r1, r2
 8006d40:	68f8      	ldr	r0, [r7, #12]
 8006d42:	4798      	blx	r3
 8006d44:	4603      	mov	r3, r0
 8006d46:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8006d48:	7dfb      	ldrb	r3, [r7, #23]
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d001      	beq.n	8006d52 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8006d4e:	7dfb      	ldrb	r3, [r7, #23]
 8006d50:	e000      	b.n	8006d54 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8006d52:	2300      	movs	r3, #0
}
 8006d54:	4618      	mov	r0, r3
 8006d56:	3718      	adds	r7, #24
 8006d58:	46bd      	mov	sp, r7
 8006d5a:	bd80      	pop	{r7, pc}

08006d5c <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006d5c:	b580      	push	{r7, lr}
 8006d5e:	b082      	sub	sp, #8
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	2201      	movs	r2, #1
 8006d68:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	2200      	movs	r2, #0
 8006d70:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	2200      	movs	r2, #0
 8006d78:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	2200      	movs	r2, #0
 8006d7e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d101      	bne.n	8006d90 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8006d8c:	2303      	movs	r3, #3
 8006d8e:	e02f      	b.n	8006df0 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d00f      	beq.n	8006dba <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006da0:	685b      	ldr	r3, [r3, #4]
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d009      	beq.n	8006dba <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006dac:	685b      	ldr	r3, [r3, #4]
 8006dae:	687a      	ldr	r2, [r7, #4]
 8006db0:	6852      	ldr	r2, [r2, #4]
 8006db2:	b2d2      	uxtb	r2, r2
 8006db4:	4611      	mov	r1, r2
 8006db6:	6878      	ldr	r0, [r7, #4]
 8006db8:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006dba:	2340      	movs	r3, #64	; 0x40
 8006dbc:	2200      	movs	r2, #0
 8006dbe:	2100      	movs	r1, #0
 8006dc0:	6878      	ldr	r0, [r7, #4]
 8006dc2:	f001 faee 	bl	80083a2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	2201      	movs	r2, #1
 8006dca:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	2240      	movs	r2, #64	; 0x40
 8006dd2:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006dd6:	2340      	movs	r3, #64	; 0x40
 8006dd8:	2200      	movs	r2, #0
 8006dda:	2180      	movs	r1, #128	; 0x80
 8006ddc:	6878      	ldr	r0, [r7, #4]
 8006dde:	f001 fae0 	bl	80083a2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	2201      	movs	r2, #1
 8006de6:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	2240      	movs	r2, #64	; 0x40
 8006dec:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8006dee:	2300      	movs	r3, #0
}
 8006df0:	4618      	mov	r0, r3
 8006df2:	3708      	adds	r7, #8
 8006df4:	46bd      	mov	sp, r7
 8006df6:	bd80      	pop	{r7, pc}

08006df8 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006df8:	b480      	push	{r7}
 8006dfa:	b083      	sub	sp, #12
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	6078      	str	r0, [r7, #4]
 8006e00:	460b      	mov	r3, r1
 8006e02:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	78fa      	ldrb	r2, [r7, #3]
 8006e08:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006e0a:	2300      	movs	r3, #0
}
 8006e0c:	4618      	mov	r0, r3
 8006e0e:	370c      	adds	r7, #12
 8006e10:	46bd      	mov	sp, r7
 8006e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e16:	4770      	bx	lr

08006e18 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006e18:	b480      	push	{r7}
 8006e1a:	b083      	sub	sp, #12
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e26:	b2da      	uxtb	r2, r3
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	2204      	movs	r2, #4
 8006e32:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006e36:	2300      	movs	r3, #0
}
 8006e38:	4618      	mov	r0, r3
 8006e3a:	370c      	adds	r7, #12
 8006e3c:	46bd      	mov	sp, r7
 8006e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e42:	4770      	bx	lr

08006e44 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006e44:	b480      	push	{r7}
 8006e46:	b083      	sub	sp, #12
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e52:	b2db      	uxtb	r3, r3
 8006e54:	2b04      	cmp	r3, #4
 8006e56:	d106      	bne.n	8006e66 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8006e5e:	b2da      	uxtb	r2, r3
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006e66:	2300      	movs	r3, #0
}
 8006e68:	4618      	mov	r0, r3
 8006e6a:	370c      	adds	r7, #12
 8006e6c:	46bd      	mov	sp, r7
 8006e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e72:	4770      	bx	lr

08006e74 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006e74:	b580      	push	{r7, lr}
 8006e76:	b082      	sub	sp, #8
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d101      	bne.n	8006e8a <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8006e86:	2303      	movs	r3, #3
 8006e88:	e012      	b.n	8006eb0 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e90:	b2db      	uxtb	r3, r3
 8006e92:	2b03      	cmp	r3, #3
 8006e94:	d10b      	bne.n	8006eae <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e9c:	69db      	ldr	r3, [r3, #28]
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d005      	beq.n	8006eae <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ea8:	69db      	ldr	r3, [r3, #28]
 8006eaa:	6878      	ldr	r0, [r7, #4]
 8006eac:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006eae:	2300      	movs	r3, #0
}
 8006eb0:	4618      	mov	r0, r3
 8006eb2:	3708      	adds	r7, #8
 8006eb4:	46bd      	mov	sp, r7
 8006eb6:	bd80      	pop	{r7, pc}

08006eb8 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006eb8:	b580      	push	{r7, lr}
 8006eba:	b082      	sub	sp, #8
 8006ebc:	af00      	add	r7, sp, #0
 8006ebe:	6078      	str	r0, [r7, #4]
 8006ec0:	460b      	mov	r3, r1
 8006ec2:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d101      	bne.n	8006ed2 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8006ece:	2303      	movs	r3, #3
 8006ed0:	e014      	b.n	8006efc <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ed8:	b2db      	uxtb	r3, r3
 8006eda:	2b03      	cmp	r3, #3
 8006edc:	d10d      	bne.n	8006efa <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ee4:	6a1b      	ldr	r3, [r3, #32]
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d007      	beq.n	8006efa <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ef0:	6a1b      	ldr	r3, [r3, #32]
 8006ef2:	78fa      	ldrb	r2, [r7, #3]
 8006ef4:	4611      	mov	r1, r2
 8006ef6:	6878      	ldr	r0, [r7, #4]
 8006ef8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006efa:	2300      	movs	r3, #0
}
 8006efc:	4618      	mov	r0, r3
 8006efe:	3708      	adds	r7, #8
 8006f00:	46bd      	mov	sp, r7
 8006f02:	bd80      	pop	{r7, pc}

08006f04 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006f04:	b580      	push	{r7, lr}
 8006f06:	b082      	sub	sp, #8
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	6078      	str	r0, [r7, #4]
 8006f0c:	460b      	mov	r3, r1
 8006f0e:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d101      	bne.n	8006f1e <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8006f1a:	2303      	movs	r3, #3
 8006f1c:	e014      	b.n	8006f48 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f24:	b2db      	uxtb	r3, r3
 8006f26:	2b03      	cmp	r3, #3
 8006f28:	d10d      	bne.n	8006f46 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d007      	beq.n	8006f46 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f3e:	78fa      	ldrb	r2, [r7, #3]
 8006f40:	4611      	mov	r1, r2
 8006f42:	6878      	ldr	r0, [r7, #4]
 8006f44:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006f46:	2300      	movs	r3, #0
}
 8006f48:	4618      	mov	r0, r3
 8006f4a:	3708      	adds	r7, #8
 8006f4c:	46bd      	mov	sp, r7
 8006f4e:	bd80      	pop	{r7, pc}

08006f50 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006f50:	b480      	push	{r7}
 8006f52:	b083      	sub	sp, #12
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006f58:	2300      	movs	r3, #0
}
 8006f5a:	4618      	mov	r0, r3
 8006f5c:	370c      	adds	r7, #12
 8006f5e:	46bd      	mov	sp, r7
 8006f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f64:	4770      	bx	lr

08006f66 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006f66:	b580      	push	{r7, lr}
 8006f68:	b082      	sub	sp, #8
 8006f6a:	af00      	add	r7, sp, #0
 8006f6c:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	2201      	movs	r2, #1
 8006f72:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d009      	beq.n	8006f94 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f86:	685b      	ldr	r3, [r3, #4]
 8006f88:	687a      	ldr	r2, [r7, #4]
 8006f8a:	6852      	ldr	r2, [r2, #4]
 8006f8c:	b2d2      	uxtb	r2, r2
 8006f8e:	4611      	mov	r1, r2
 8006f90:	6878      	ldr	r0, [r7, #4]
 8006f92:	4798      	blx	r3
  }

  return USBD_OK;
 8006f94:	2300      	movs	r3, #0
}
 8006f96:	4618      	mov	r0, r3
 8006f98:	3708      	adds	r7, #8
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	bd80      	pop	{r7, pc}

08006f9e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006f9e:	b480      	push	{r7}
 8006fa0:	b087      	sub	sp, #28
 8006fa2:	af00      	add	r7, sp, #0
 8006fa4:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006faa:	697b      	ldr	r3, [r7, #20]
 8006fac:	781b      	ldrb	r3, [r3, #0]
 8006fae:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006fb0:	697b      	ldr	r3, [r7, #20]
 8006fb2:	3301      	adds	r3, #1
 8006fb4:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006fb6:	697b      	ldr	r3, [r7, #20]
 8006fb8:	781b      	ldrb	r3, [r3, #0]
 8006fba:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006fbc:	8a3b      	ldrh	r3, [r7, #16]
 8006fbe:	021b      	lsls	r3, r3, #8
 8006fc0:	b21a      	sxth	r2, r3
 8006fc2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006fc6:	4313      	orrs	r3, r2
 8006fc8:	b21b      	sxth	r3, r3
 8006fca:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006fcc:	89fb      	ldrh	r3, [r7, #14]
}
 8006fce:	4618      	mov	r0, r3
 8006fd0:	371c      	adds	r7, #28
 8006fd2:	46bd      	mov	sp, r7
 8006fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd8:	4770      	bx	lr
	...

08006fdc <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006fdc:	b580      	push	{r7, lr}
 8006fde:	b084      	sub	sp, #16
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	6078      	str	r0, [r7, #4]
 8006fe4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006fe6:	2300      	movs	r3, #0
 8006fe8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006fea:	683b      	ldr	r3, [r7, #0]
 8006fec:	781b      	ldrb	r3, [r3, #0]
 8006fee:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006ff2:	2b40      	cmp	r3, #64	; 0x40
 8006ff4:	d005      	beq.n	8007002 <USBD_StdDevReq+0x26>
 8006ff6:	2b40      	cmp	r3, #64	; 0x40
 8006ff8:	d853      	bhi.n	80070a2 <USBD_StdDevReq+0xc6>
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d00b      	beq.n	8007016 <USBD_StdDevReq+0x3a>
 8006ffe:	2b20      	cmp	r3, #32
 8007000:	d14f      	bne.n	80070a2 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007008:	689b      	ldr	r3, [r3, #8]
 800700a:	6839      	ldr	r1, [r7, #0]
 800700c:	6878      	ldr	r0, [r7, #4]
 800700e:	4798      	blx	r3
 8007010:	4603      	mov	r3, r0
 8007012:	73fb      	strb	r3, [r7, #15]
      break;
 8007014:	e04a      	b.n	80070ac <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007016:	683b      	ldr	r3, [r7, #0]
 8007018:	785b      	ldrb	r3, [r3, #1]
 800701a:	2b09      	cmp	r3, #9
 800701c:	d83b      	bhi.n	8007096 <USBD_StdDevReq+0xba>
 800701e:	a201      	add	r2, pc, #4	; (adr r2, 8007024 <USBD_StdDevReq+0x48>)
 8007020:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007024:	08007079 	.word	0x08007079
 8007028:	0800708d 	.word	0x0800708d
 800702c:	08007097 	.word	0x08007097
 8007030:	08007083 	.word	0x08007083
 8007034:	08007097 	.word	0x08007097
 8007038:	08007057 	.word	0x08007057
 800703c:	0800704d 	.word	0x0800704d
 8007040:	08007097 	.word	0x08007097
 8007044:	0800706f 	.word	0x0800706f
 8007048:	08007061 	.word	0x08007061
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800704c:	6839      	ldr	r1, [r7, #0]
 800704e:	6878      	ldr	r0, [r7, #4]
 8007050:	f000 f9de 	bl	8007410 <USBD_GetDescriptor>
          break;
 8007054:	e024      	b.n	80070a0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007056:	6839      	ldr	r1, [r7, #0]
 8007058:	6878      	ldr	r0, [r7, #4]
 800705a:	f000 fb43 	bl	80076e4 <USBD_SetAddress>
          break;
 800705e:	e01f      	b.n	80070a0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007060:	6839      	ldr	r1, [r7, #0]
 8007062:	6878      	ldr	r0, [r7, #4]
 8007064:	f000 fb82 	bl	800776c <USBD_SetConfig>
 8007068:	4603      	mov	r3, r0
 800706a:	73fb      	strb	r3, [r7, #15]
          break;
 800706c:	e018      	b.n	80070a0 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800706e:	6839      	ldr	r1, [r7, #0]
 8007070:	6878      	ldr	r0, [r7, #4]
 8007072:	f000 fc21 	bl	80078b8 <USBD_GetConfig>
          break;
 8007076:	e013      	b.n	80070a0 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007078:	6839      	ldr	r1, [r7, #0]
 800707a:	6878      	ldr	r0, [r7, #4]
 800707c:	f000 fc52 	bl	8007924 <USBD_GetStatus>
          break;
 8007080:	e00e      	b.n	80070a0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007082:	6839      	ldr	r1, [r7, #0]
 8007084:	6878      	ldr	r0, [r7, #4]
 8007086:	f000 fc81 	bl	800798c <USBD_SetFeature>
          break;
 800708a:	e009      	b.n	80070a0 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800708c:	6839      	ldr	r1, [r7, #0]
 800708e:	6878      	ldr	r0, [r7, #4]
 8007090:	f000 fc90 	bl	80079b4 <USBD_ClrFeature>
          break;
 8007094:	e004      	b.n	80070a0 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8007096:	6839      	ldr	r1, [r7, #0]
 8007098:	6878      	ldr	r0, [r7, #4]
 800709a:	f000 fce7 	bl	8007a6c <USBD_CtlError>
          break;
 800709e:	bf00      	nop
      }
      break;
 80070a0:	e004      	b.n	80070ac <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 80070a2:	6839      	ldr	r1, [r7, #0]
 80070a4:	6878      	ldr	r0, [r7, #4]
 80070a6:	f000 fce1 	bl	8007a6c <USBD_CtlError>
      break;
 80070aa:	bf00      	nop
  }

  return ret;
 80070ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80070ae:	4618      	mov	r0, r3
 80070b0:	3710      	adds	r7, #16
 80070b2:	46bd      	mov	sp, r7
 80070b4:	bd80      	pop	{r7, pc}
 80070b6:	bf00      	nop

080070b8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80070b8:	b580      	push	{r7, lr}
 80070ba:	b084      	sub	sp, #16
 80070bc:	af00      	add	r7, sp, #0
 80070be:	6078      	str	r0, [r7, #4]
 80070c0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80070c2:	2300      	movs	r3, #0
 80070c4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80070c6:	683b      	ldr	r3, [r7, #0]
 80070c8:	781b      	ldrb	r3, [r3, #0]
 80070ca:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80070ce:	2b40      	cmp	r3, #64	; 0x40
 80070d0:	d005      	beq.n	80070de <USBD_StdItfReq+0x26>
 80070d2:	2b40      	cmp	r3, #64	; 0x40
 80070d4:	d82f      	bhi.n	8007136 <USBD_StdItfReq+0x7e>
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d001      	beq.n	80070de <USBD_StdItfReq+0x26>
 80070da:	2b20      	cmp	r3, #32
 80070dc:	d12b      	bne.n	8007136 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80070e4:	b2db      	uxtb	r3, r3
 80070e6:	3b01      	subs	r3, #1
 80070e8:	2b02      	cmp	r3, #2
 80070ea:	d81d      	bhi.n	8007128 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80070ec:	683b      	ldr	r3, [r7, #0]
 80070ee:	889b      	ldrh	r3, [r3, #4]
 80070f0:	b2db      	uxtb	r3, r3
 80070f2:	2b01      	cmp	r3, #1
 80070f4:	d813      	bhi.n	800711e <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070fc:	689b      	ldr	r3, [r3, #8]
 80070fe:	6839      	ldr	r1, [r7, #0]
 8007100:	6878      	ldr	r0, [r7, #4]
 8007102:	4798      	blx	r3
 8007104:	4603      	mov	r3, r0
 8007106:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007108:	683b      	ldr	r3, [r7, #0]
 800710a:	88db      	ldrh	r3, [r3, #6]
 800710c:	2b00      	cmp	r3, #0
 800710e:	d110      	bne.n	8007132 <USBD_StdItfReq+0x7a>
 8007110:	7bfb      	ldrb	r3, [r7, #15]
 8007112:	2b00      	cmp	r3, #0
 8007114:	d10d      	bne.n	8007132 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007116:	6878      	ldr	r0, [r7, #4]
 8007118:	f000 fd73 	bl	8007c02 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800711c:	e009      	b.n	8007132 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800711e:	6839      	ldr	r1, [r7, #0]
 8007120:	6878      	ldr	r0, [r7, #4]
 8007122:	f000 fca3 	bl	8007a6c <USBD_CtlError>
          break;
 8007126:	e004      	b.n	8007132 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8007128:	6839      	ldr	r1, [r7, #0]
 800712a:	6878      	ldr	r0, [r7, #4]
 800712c:	f000 fc9e 	bl	8007a6c <USBD_CtlError>
          break;
 8007130:	e000      	b.n	8007134 <USBD_StdItfReq+0x7c>
          break;
 8007132:	bf00      	nop
      }
      break;
 8007134:	e004      	b.n	8007140 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8007136:	6839      	ldr	r1, [r7, #0]
 8007138:	6878      	ldr	r0, [r7, #4]
 800713a:	f000 fc97 	bl	8007a6c <USBD_CtlError>
      break;
 800713e:	bf00      	nop
  }

  return ret;
 8007140:	7bfb      	ldrb	r3, [r7, #15]
}
 8007142:	4618      	mov	r0, r3
 8007144:	3710      	adds	r7, #16
 8007146:	46bd      	mov	sp, r7
 8007148:	bd80      	pop	{r7, pc}

0800714a <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800714a:	b580      	push	{r7, lr}
 800714c:	b084      	sub	sp, #16
 800714e:	af00      	add	r7, sp, #0
 8007150:	6078      	str	r0, [r7, #4]
 8007152:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8007154:	2300      	movs	r3, #0
 8007156:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8007158:	683b      	ldr	r3, [r7, #0]
 800715a:	889b      	ldrh	r3, [r3, #4]
 800715c:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800715e:	683b      	ldr	r3, [r7, #0]
 8007160:	781b      	ldrb	r3, [r3, #0]
 8007162:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007166:	2b40      	cmp	r3, #64	; 0x40
 8007168:	d007      	beq.n	800717a <USBD_StdEPReq+0x30>
 800716a:	2b40      	cmp	r3, #64	; 0x40
 800716c:	f200 8145 	bhi.w	80073fa <USBD_StdEPReq+0x2b0>
 8007170:	2b00      	cmp	r3, #0
 8007172:	d00c      	beq.n	800718e <USBD_StdEPReq+0x44>
 8007174:	2b20      	cmp	r3, #32
 8007176:	f040 8140 	bne.w	80073fa <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007180:	689b      	ldr	r3, [r3, #8]
 8007182:	6839      	ldr	r1, [r7, #0]
 8007184:	6878      	ldr	r0, [r7, #4]
 8007186:	4798      	blx	r3
 8007188:	4603      	mov	r3, r0
 800718a:	73fb      	strb	r3, [r7, #15]
      break;
 800718c:	e13a      	b.n	8007404 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800718e:	683b      	ldr	r3, [r7, #0]
 8007190:	785b      	ldrb	r3, [r3, #1]
 8007192:	2b03      	cmp	r3, #3
 8007194:	d007      	beq.n	80071a6 <USBD_StdEPReq+0x5c>
 8007196:	2b03      	cmp	r3, #3
 8007198:	f300 8129 	bgt.w	80073ee <USBD_StdEPReq+0x2a4>
 800719c:	2b00      	cmp	r3, #0
 800719e:	d07f      	beq.n	80072a0 <USBD_StdEPReq+0x156>
 80071a0:	2b01      	cmp	r3, #1
 80071a2:	d03c      	beq.n	800721e <USBD_StdEPReq+0xd4>
 80071a4:	e123      	b.n	80073ee <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80071ac:	b2db      	uxtb	r3, r3
 80071ae:	2b02      	cmp	r3, #2
 80071b0:	d002      	beq.n	80071b8 <USBD_StdEPReq+0x6e>
 80071b2:	2b03      	cmp	r3, #3
 80071b4:	d016      	beq.n	80071e4 <USBD_StdEPReq+0x9a>
 80071b6:	e02c      	b.n	8007212 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80071b8:	7bbb      	ldrb	r3, [r7, #14]
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d00d      	beq.n	80071da <USBD_StdEPReq+0x90>
 80071be:	7bbb      	ldrb	r3, [r7, #14]
 80071c0:	2b80      	cmp	r3, #128	; 0x80
 80071c2:	d00a      	beq.n	80071da <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80071c4:	7bbb      	ldrb	r3, [r7, #14]
 80071c6:	4619      	mov	r1, r3
 80071c8:	6878      	ldr	r0, [r7, #4]
 80071ca:	f001 f92f 	bl	800842c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80071ce:	2180      	movs	r1, #128	; 0x80
 80071d0:	6878      	ldr	r0, [r7, #4]
 80071d2:	f001 f92b 	bl	800842c <USBD_LL_StallEP>
 80071d6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80071d8:	e020      	b.n	800721c <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 80071da:	6839      	ldr	r1, [r7, #0]
 80071dc:	6878      	ldr	r0, [r7, #4]
 80071de:	f000 fc45 	bl	8007a6c <USBD_CtlError>
              break;
 80071e2:	e01b      	b.n	800721c <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80071e4:	683b      	ldr	r3, [r7, #0]
 80071e6:	885b      	ldrh	r3, [r3, #2]
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d10e      	bne.n	800720a <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80071ec:	7bbb      	ldrb	r3, [r7, #14]
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d00b      	beq.n	800720a <USBD_StdEPReq+0xc0>
 80071f2:	7bbb      	ldrb	r3, [r7, #14]
 80071f4:	2b80      	cmp	r3, #128	; 0x80
 80071f6:	d008      	beq.n	800720a <USBD_StdEPReq+0xc0>
 80071f8:	683b      	ldr	r3, [r7, #0]
 80071fa:	88db      	ldrh	r3, [r3, #6]
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d104      	bne.n	800720a <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007200:	7bbb      	ldrb	r3, [r7, #14]
 8007202:	4619      	mov	r1, r3
 8007204:	6878      	ldr	r0, [r7, #4]
 8007206:	f001 f911 	bl	800842c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800720a:	6878      	ldr	r0, [r7, #4]
 800720c:	f000 fcf9 	bl	8007c02 <USBD_CtlSendStatus>

              break;
 8007210:	e004      	b.n	800721c <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8007212:	6839      	ldr	r1, [r7, #0]
 8007214:	6878      	ldr	r0, [r7, #4]
 8007216:	f000 fc29 	bl	8007a6c <USBD_CtlError>
              break;
 800721a:	bf00      	nop
          }
          break;
 800721c:	e0ec      	b.n	80073f8 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007224:	b2db      	uxtb	r3, r3
 8007226:	2b02      	cmp	r3, #2
 8007228:	d002      	beq.n	8007230 <USBD_StdEPReq+0xe6>
 800722a:	2b03      	cmp	r3, #3
 800722c:	d016      	beq.n	800725c <USBD_StdEPReq+0x112>
 800722e:	e030      	b.n	8007292 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007230:	7bbb      	ldrb	r3, [r7, #14]
 8007232:	2b00      	cmp	r3, #0
 8007234:	d00d      	beq.n	8007252 <USBD_StdEPReq+0x108>
 8007236:	7bbb      	ldrb	r3, [r7, #14]
 8007238:	2b80      	cmp	r3, #128	; 0x80
 800723a:	d00a      	beq.n	8007252 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800723c:	7bbb      	ldrb	r3, [r7, #14]
 800723e:	4619      	mov	r1, r3
 8007240:	6878      	ldr	r0, [r7, #4]
 8007242:	f001 f8f3 	bl	800842c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007246:	2180      	movs	r1, #128	; 0x80
 8007248:	6878      	ldr	r0, [r7, #4]
 800724a:	f001 f8ef 	bl	800842c <USBD_LL_StallEP>
 800724e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007250:	e025      	b.n	800729e <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8007252:	6839      	ldr	r1, [r7, #0]
 8007254:	6878      	ldr	r0, [r7, #4]
 8007256:	f000 fc09 	bl	8007a6c <USBD_CtlError>
              break;
 800725a:	e020      	b.n	800729e <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800725c:	683b      	ldr	r3, [r7, #0]
 800725e:	885b      	ldrh	r3, [r3, #2]
 8007260:	2b00      	cmp	r3, #0
 8007262:	d11b      	bne.n	800729c <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007264:	7bbb      	ldrb	r3, [r7, #14]
 8007266:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800726a:	2b00      	cmp	r3, #0
 800726c:	d004      	beq.n	8007278 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800726e:	7bbb      	ldrb	r3, [r7, #14]
 8007270:	4619      	mov	r1, r3
 8007272:	6878      	ldr	r0, [r7, #4]
 8007274:	f001 f8f9 	bl	800846a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007278:	6878      	ldr	r0, [r7, #4]
 800727a:	f000 fcc2 	bl	8007c02 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007284:	689b      	ldr	r3, [r3, #8]
 8007286:	6839      	ldr	r1, [r7, #0]
 8007288:	6878      	ldr	r0, [r7, #4]
 800728a:	4798      	blx	r3
 800728c:	4603      	mov	r3, r0
 800728e:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8007290:	e004      	b.n	800729c <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8007292:	6839      	ldr	r1, [r7, #0]
 8007294:	6878      	ldr	r0, [r7, #4]
 8007296:	f000 fbe9 	bl	8007a6c <USBD_CtlError>
              break;
 800729a:	e000      	b.n	800729e <USBD_StdEPReq+0x154>
              break;
 800729c:	bf00      	nop
          }
          break;
 800729e:	e0ab      	b.n	80073f8 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80072a6:	b2db      	uxtb	r3, r3
 80072a8:	2b02      	cmp	r3, #2
 80072aa:	d002      	beq.n	80072b2 <USBD_StdEPReq+0x168>
 80072ac:	2b03      	cmp	r3, #3
 80072ae:	d032      	beq.n	8007316 <USBD_StdEPReq+0x1cc>
 80072b0:	e097      	b.n	80073e2 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80072b2:	7bbb      	ldrb	r3, [r7, #14]
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d007      	beq.n	80072c8 <USBD_StdEPReq+0x17e>
 80072b8:	7bbb      	ldrb	r3, [r7, #14]
 80072ba:	2b80      	cmp	r3, #128	; 0x80
 80072bc:	d004      	beq.n	80072c8 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 80072be:	6839      	ldr	r1, [r7, #0]
 80072c0:	6878      	ldr	r0, [r7, #4]
 80072c2:	f000 fbd3 	bl	8007a6c <USBD_CtlError>
                break;
 80072c6:	e091      	b.n	80073ec <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80072c8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	da0b      	bge.n	80072e8 <USBD_StdEPReq+0x19e>
 80072d0:	7bbb      	ldrb	r3, [r7, #14]
 80072d2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80072d6:	4613      	mov	r3, r2
 80072d8:	009b      	lsls	r3, r3, #2
 80072da:	4413      	add	r3, r2
 80072dc:	009b      	lsls	r3, r3, #2
 80072de:	3310      	adds	r3, #16
 80072e0:	687a      	ldr	r2, [r7, #4]
 80072e2:	4413      	add	r3, r2
 80072e4:	3304      	adds	r3, #4
 80072e6:	e00b      	b.n	8007300 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80072e8:	7bbb      	ldrb	r3, [r7, #14]
 80072ea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80072ee:	4613      	mov	r3, r2
 80072f0:	009b      	lsls	r3, r3, #2
 80072f2:	4413      	add	r3, r2
 80072f4:	009b      	lsls	r3, r3, #2
 80072f6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80072fa:	687a      	ldr	r2, [r7, #4]
 80072fc:	4413      	add	r3, r2
 80072fe:	3304      	adds	r3, #4
 8007300:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007302:	68bb      	ldr	r3, [r7, #8]
 8007304:	2200      	movs	r2, #0
 8007306:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007308:	68bb      	ldr	r3, [r7, #8]
 800730a:	2202      	movs	r2, #2
 800730c:	4619      	mov	r1, r3
 800730e:	6878      	ldr	r0, [r7, #4]
 8007310:	f000 fc1d 	bl	8007b4e <USBD_CtlSendData>
              break;
 8007314:	e06a      	b.n	80073ec <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007316:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800731a:	2b00      	cmp	r3, #0
 800731c:	da11      	bge.n	8007342 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800731e:	7bbb      	ldrb	r3, [r7, #14]
 8007320:	f003 020f 	and.w	r2, r3, #15
 8007324:	6879      	ldr	r1, [r7, #4]
 8007326:	4613      	mov	r3, r2
 8007328:	009b      	lsls	r3, r3, #2
 800732a:	4413      	add	r3, r2
 800732c:	009b      	lsls	r3, r3, #2
 800732e:	440b      	add	r3, r1
 8007330:	3324      	adds	r3, #36	; 0x24
 8007332:	881b      	ldrh	r3, [r3, #0]
 8007334:	2b00      	cmp	r3, #0
 8007336:	d117      	bne.n	8007368 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8007338:	6839      	ldr	r1, [r7, #0]
 800733a:	6878      	ldr	r0, [r7, #4]
 800733c:	f000 fb96 	bl	8007a6c <USBD_CtlError>
                  break;
 8007340:	e054      	b.n	80073ec <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007342:	7bbb      	ldrb	r3, [r7, #14]
 8007344:	f003 020f 	and.w	r2, r3, #15
 8007348:	6879      	ldr	r1, [r7, #4]
 800734a:	4613      	mov	r3, r2
 800734c:	009b      	lsls	r3, r3, #2
 800734e:	4413      	add	r3, r2
 8007350:	009b      	lsls	r3, r3, #2
 8007352:	440b      	add	r3, r1
 8007354:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007358:	881b      	ldrh	r3, [r3, #0]
 800735a:	2b00      	cmp	r3, #0
 800735c:	d104      	bne.n	8007368 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800735e:	6839      	ldr	r1, [r7, #0]
 8007360:	6878      	ldr	r0, [r7, #4]
 8007362:	f000 fb83 	bl	8007a6c <USBD_CtlError>
                  break;
 8007366:	e041      	b.n	80073ec <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007368:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800736c:	2b00      	cmp	r3, #0
 800736e:	da0b      	bge.n	8007388 <USBD_StdEPReq+0x23e>
 8007370:	7bbb      	ldrb	r3, [r7, #14]
 8007372:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007376:	4613      	mov	r3, r2
 8007378:	009b      	lsls	r3, r3, #2
 800737a:	4413      	add	r3, r2
 800737c:	009b      	lsls	r3, r3, #2
 800737e:	3310      	adds	r3, #16
 8007380:	687a      	ldr	r2, [r7, #4]
 8007382:	4413      	add	r3, r2
 8007384:	3304      	adds	r3, #4
 8007386:	e00b      	b.n	80073a0 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007388:	7bbb      	ldrb	r3, [r7, #14]
 800738a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800738e:	4613      	mov	r3, r2
 8007390:	009b      	lsls	r3, r3, #2
 8007392:	4413      	add	r3, r2
 8007394:	009b      	lsls	r3, r3, #2
 8007396:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800739a:	687a      	ldr	r2, [r7, #4]
 800739c:	4413      	add	r3, r2
 800739e:	3304      	adds	r3, #4
 80073a0:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80073a2:	7bbb      	ldrb	r3, [r7, #14]
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d002      	beq.n	80073ae <USBD_StdEPReq+0x264>
 80073a8:	7bbb      	ldrb	r3, [r7, #14]
 80073aa:	2b80      	cmp	r3, #128	; 0x80
 80073ac:	d103      	bne.n	80073b6 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 80073ae:	68bb      	ldr	r3, [r7, #8]
 80073b0:	2200      	movs	r2, #0
 80073b2:	601a      	str	r2, [r3, #0]
 80073b4:	e00e      	b.n	80073d4 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80073b6:	7bbb      	ldrb	r3, [r7, #14]
 80073b8:	4619      	mov	r1, r3
 80073ba:	6878      	ldr	r0, [r7, #4]
 80073bc:	f001 f874 	bl	80084a8 <USBD_LL_IsStallEP>
 80073c0:	4603      	mov	r3, r0
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d003      	beq.n	80073ce <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 80073c6:	68bb      	ldr	r3, [r7, #8]
 80073c8:	2201      	movs	r2, #1
 80073ca:	601a      	str	r2, [r3, #0]
 80073cc:	e002      	b.n	80073d4 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 80073ce:	68bb      	ldr	r3, [r7, #8]
 80073d0:	2200      	movs	r2, #0
 80073d2:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80073d4:	68bb      	ldr	r3, [r7, #8]
 80073d6:	2202      	movs	r2, #2
 80073d8:	4619      	mov	r1, r3
 80073da:	6878      	ldr	r0, [r7, #4]
 80073dc:	f000 fbb7 	bl	8007b4e <USBD_CtlSendData>
              break;
 80073e0:	e004      	b.n	80073ec <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 80073e2:	6839      	ldr	r1, [r7, #0]
 80073e4:	6878      	ldr	r0, [r7, #4]
 80073e6:	f000 fb41 	bl	8007a6c <USBD_CtlError>
              break;
 80073ea:	bf00      	nop
          }
          break;
 80073ec:	e004      	b.n	80073f8 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 80073ee:	6839      	ldr	r1, [r7, #0]
 80073f0:	6878      	ldr	r0, [r7, #4]
 80073f2:	f000 fb3b 	bl	8007a6c <USBD_CtlError>
          break;
 80073f6:	bf00      	nop
      }
      break;
 80073f8:	e004      	b.n	8007404 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 80073fa:	6839      	ldr	r1, [r7, #0]
 80073fc:	6878      	ldr	r0, [r7, #4]
 80073fe:	f000 fb35 	bl	8007a6c <USBD_CtlError>
      break;
 8007402:	bf00      	nop
  }

  return ret;
 8007404:	7bfb      	ldrb	r3, [r7, #15]
}
 8007406:	4618      	mov	r0, r3
 8007408:	3710      	adds	r7, #16
 800740a:	46bd      	mov	sp, r7
 800740c:	bd80      	pop	{r7, pc}
	...

08007410 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007410:	b580      	push	{r7, lr}
 8007412:	b084      	sub	sp, #16
 8007414:	af00      	add	r7, sp, #0
 8007416:	6078      	str	r0, [r7, #4]
 8007418:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800741a:	2300      	movs	r3, #0
 800741c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800741e:	2300      	movs	r3, #0
 8007420:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007422:	2300      	movs	r3, #0
 8007424:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007426:	683b      	ldr	r3, [r7, #0]
 8007428:	885b      	ldrh	r3, [r3, #2]
 800742a:	0a1b      	lsrs	r3, r3, #8
 800742c:	b29b      	uxth	r3, r3
 800742e:	3b01      	subs	r3, #1
 8007430:	2b06      	cmp	r3, #6
 8007432:	f200 8128 	bhi.w	8007686 <USBD_GetDescriptor+0x276>
 8007436:	a201      	add	r2, pc, #4	; (adr r2, 800743c <USBD_GetDescriptor+0x2c>)
 8007438:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800743c:	08007459 	.word	0x08007459
 8007440:	08007471 	.word	0x08007471
 8007444:	080074b1 	.word	0x080074b1
 8007448:	08007687 	.word	0x08007687
 800744c:	08007687 	.word	0x08007687
 8007450:	08007627 	.word	0x08007627
 8007454:	08007653 	.word	0x08007653
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	687a      	ldr	r2, [r7, #4]
 8007462:	7c12      	ldrb	r2, [r2, #16]
 8007464:	f107 0108 	add.w	r1, r7, #8
 8007468:	4610      	mov	r0, r2
 800746a:	4798      	blx	r3
 800746c:	60f8      	str	r0, [r7, #12]
      break;
 800746e:	e112      	b.n	8007696 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	7c1b      	ldrb	r3, [r3, #16]
 8007474:	2b00      	cmp	r3, #0
 8007476:	d10d      	bne.n	8007494 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800747e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007480:	f107 0208 	add.w	r2, r7, #8
 8007484:	4610      	mov	r0, r2
 8007486:	4798      	blx	r3
 8007488:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	3301      	adds	r3, #1
 800748e:	2202      	movs	r2, #2
 8007490:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007492:	e100      	b.n	8007696 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800749a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800749c:	f107 0208 	add.w	r2, r7, #8
 80074a0:	4610      	mov	r0, r2
 80074a2:	4798      	blx	r3
 80074a4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	3301      	adds	r3, #1
 80074aa:	2202      	movs	r2, #2
 80074ac:	701a      	strb	r2, [r3, #0]
      break;
 80074ae:	e0f2      	b.n	8007696 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80074b0:	683b      	ldr	r3, [r7, #0]
 80074b2:	885b      	ldrh	r3, [r3, #2]
 80074b4:	b2db      	uxtb	r3, r3
 80074b6:	2b05      	cmp	r3, #5
 80074b8:	f200 80ac 	bhi.w	8007614 <USBD_GetDescriptor+0x204>
 80074bc:	a201      	add	r2, pc, #4	; (adr r2, 80074c4 <USBD_GetDescriptor+0xb4>)
 80074be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074c2:	bf00      	nop
 80074c4:	080074dd 	.word	0x080074dd
 80074c8:	08007511 	.word	0x08007511
 80074cc:	08007545 	.word	0x08007545
 80074d0:	08007579 	.word	0x08007579
 80074d4:	080075ad 	.word	0x080075ad
 80074d8:	080075e1 	.word	0x080075e1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80074e2:	685b      	ldr	r3, [r3, #4]
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d00b      	beq.n	8007500 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80074ee:	685b      	ldr	r3, [r3, #4]
 80074f0:	687a      	ldr	r2, [r7, #4]
 80074f2:	7c12      	ldrb	r2, [r2, #16]
 80074f4:	f107 0108 	add.w	r1, r7, #8
 80074f8:	4610      	mov	r0, r2
 80074fa:	4798      	blx	r3
 80074fc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80074fe:	e091      	b.n	8007624 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007500:	6839      	ldr	r1, [r7, #0]
 8007502:	6878      	ldr	r0, [r7, #4]
 8007504:	f000 fab2 	bl	8007a6c <USBD_CtlError>
            err++;
 8007508:	7afb      	ldrb	r3, [r7, #11]
 800750a:	3301      	adds	r3, #1
 800750c:	72fb      	strb	r3, [r7, #11]
          break;
 800750e:	e089      	b.n	8007624 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007516:	689b      	ldr	r3, [r3, #8]
 8007518:	2b00      	cmp	r3, #0
 800751a:	d00b      	beq.n	8007534 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007522:	689b      	ldr	r3, [r3, #8]
 8007524:	687a      	ldr	r2, [r7, #4]
 8007526:	7c12      	ldrb	r2, [r2, #16]
 8007528:	f107 0108 	add.w	r1, r7, #8
 800752c:	4610      	mov	r0, r2
 800752e:	4798      	blx	r3
 8007530:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007532:	e077      	b.n	8007624 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007534:	6839      	ldr	r1, [r7, #0]
 8007536:	6878      	ldr	r0, [r7, #4]
 8007538:	f000 fa98 	bl	8007a6c <USBD_CtlError>
            err++;
 800753c:	7afb      	ldrb	r3, [r7, #11]
 800753e:	3301      	adds	r3, #1
 8007540:	72fb      	strb	r3, [r7, #11]
          break;
 8007542:	e06f      	b.n	8007624 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800754a:	68db      	ldr	r3, [r3, #12]
 800754c:	2b00      	cmp	r3, #0
 800754e:	d00b      	beq.n	8007568 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007556:	68db      	ldr	r3, [r3, #12]
 8007558:	687a      	ldr	r2, [r7, #4]
 800755a:	7c12      	ldrb	r2, [r2, #16]
 800755c:	f107 0108 	add.w	r1, r7, #8
 8007560:	4610      	mov	r0, r2
 8007562:	4798      	blx	r3
 8007564:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007566:	e05d      	b.n	8007624 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007568:	6839      	ldr	r1, [r7, #0]
 800756a:	6878      	ldr	r0, [r7, #4]
 800756c:	f000 fa7e 	bl	8007a6c <USBD_CtlError>
            err++;
 8007570:	7afb      	ldrb	r3, [r7, #11]
 8007572:	3301      	adds	r3, #1
 8007574:	72fb      	strb	r3, [r7, #11]
          break;
 8007576:	e055      	b.n	8007624 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800757e:	691b      	ldr	r3, [r3, #16]
 8007580:	2b00      	cmp	r3, #0
 8007582:	d00b      	beq.n	800759c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800758a:	691b      	ldr	r3, [r3, #16]
 800758c:	687a      	ldr	r2, [r7, #4]
 800758e:	7c12      	ldrb	r2, [r2, #16]
 8007590:	f107 0108 	add.w	r1, r7, #8
 8007594:	4610      	mov	r0, r2
 8007596:	4798      	blx	r3
 8007598:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800759a:	e043      	b.n	8007624 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800759c:	6839      	ldr	r1, [r7, #0]
 800759e:	6878      	ldr	r0, [r7, #4]
 80075a0:	f000 fa64 	bl	8007a6c <USBD_CtlError>
            err++;
 80075a4:	7afb      	ldrb	r3, [r7, #11]
 80075a6:	3301      	adds	r3, #1
 80075a8:	72fb      	strb	r3, [r7, #11]
          break;
 80075aa:	e03b      	b.n	8007624 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80075b2:	695b      	ldr	r3, [r3, #20]
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d00b      	beq.n	80075d0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80075be:	695b      	ldr	r3, [r3, #20]
 80075c0:	687a      	ldr	r2, [r7, #4]
 80075c2:	7c12      	ldrb	r2, [r2, #16]
 80075c4:	f107 0108 	add.w	r1, r7, #8
 80075c8:	4610      	mov	r0, r2
 80075ca:	4798      	blx	r3
 80075cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80075ce:	e029      	b.n	8007624 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80075d0:	6839      	ldr	r1, [r7, #0]
 80075d2:	6878      	ldr	r0, [r7, #4]
 80075d4:	f000 fa4a 	bl	8007a6c <USBD_CtlError>
            err++;
 80075d8:	7afb      	ldrb	r3, [r7, #11]
 80075da:	3301      	adds	r3, #1
 80075dc:	72fb      	strb	r3, [r7, #11]
          break;
 80075de:	e021      	b.n	8007624 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80075e6:	699b      	ldr	r3, [r3, #24]
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d00b      	beq.n	8007604 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80075f2:	699b      	ldr	r3, [r3, #24]
 80075f4:	687a      	ldr	r2, [r7, #4]
 80075f6:	7c12      	ldrb	r2, [r2, #16]
 80075f8:	f107 0108 	add.w	r1, r7, #8
 80075fc:	4610      	mov	r0, r2
 80075fe:	4798      	blx	r3
 8007600:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007602:	e00f      	b.n	8007624 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007604:	6839      	ldr	r1, [r7, #0]
 8007606:	6878      	ldr	r0, [r7, #4]
 8007608:	f000 fa30 	bl	8007a6c <USBD_CtlError>
            err++;
 800760c:	7afb      	ldrb	r3, [r7, #11]
 800760e:	3301      	adds	r3, #1
 8007610:	72fb      	strb	r3, [r7, #11]
          break;
 8007612:	e007      	b.n	8007624 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007614:	6839      	ldr	r1, [r7, #0]
 8007616:	6878      	ldr	r0, [r7, #4]
 8007618:	f000 fa28 	bl	8007a6c <USBD_CtlError>
          err++;
 800761c:	7afb      	ldrb	r3, [r7, #11]
 800761e:	3301      	adds	r3, #1
 8007620:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8007622:	bf00      	nop
      }
      break;
 8007624:	e037      	b.n	8007696 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	7c1b      	ldrb	r3, [r3, #16]
 800762a:	2b00      	cmp	r3, #0
 800762c:	d109      	bne.n	8007642 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007634:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007636:	f107 0208 	add.w	r2, r7, #8
 800763a:	4610      	mov	r0, r2
 800763c:	4798      	blx	r3
 800763e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007640:	e029      	b.n	8007696 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007642:	6839      	ldr	r1, [r7, #0]
 8007644:	6878      	ldr	r0, [r7, #4]
 8007646:	f000 fa11 	bl	8007a6c <USBD_CtlError>
        err++;
 800764a:	7afb      	ldrb	r3, [r7, #11]
 800764c:	3301      	adds	r3, #1
 800764e:	72fb      	strb	r3, [r7, #11]
      break;
 8007650:	e021      	b.n	8007696 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	7c1b      	ldrb	r3, [r3, #16]
 8007656:	2b00      	cmp	r3, #0
 8007658:	d10d      	bne.n	8007676 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007662:	f107 0208 	add.w	r2, r7, #8
 8007666:	4610      	mov	r0, r2
 8007668:	4798      	blx	r3
 800766a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	3301      	adds	r3, #1
 8007670:	2207      	movs	r2, #7
 8007672:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007674:	e00f      	b.n	8007696 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007676:	6839      	ldr	r1, [r7, #0]
 8007678:	6878      	ldr	r0, [r7, #4]
 800767a:	f000 f9f7 	bl	8007a6c <USBD_CtlError>
        err++;
 800767e:	7afb      	ldrb	r3, [r7, #11]
 8007680:	3301      	adds	r3, #1
 8007682:	72fb      	strb	r3, [r7, #11]
      break;
 8007684:	e007      	b.n	8007696 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007686:	6839      	ldr	r1, [r7, #0]
 8007688:	6878      	ldr	r0, [r7, #4]
 800768a:	f000 f9ef 	bl	8007a6c <USBD_CtlError>
      err++;
 800768e:	7afb      	ldrb	r3, [r7, #11]
 8007690:	3301      	adds	r3, #1
 8007692:	72fb      	strb	r3, [r7, #11]
      break;
 8007694:	bf00      	nop
  }

  if (err != 0U)
 8007696:	7afb      	ldrb	r3, [r7, #11]
 8007698:	2b00      	cmp	r3, #0
 800769a:	d11e      	bne.n	80076da <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800769c:	683b      	ldr	r3, [r7, #0]
 800769e:	88db      	ldrh	r3, [r3, #6]
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d016      	beq.n	80076d2 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80076a4:	893b      	ldrh	r3, [r7, #8]
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d00e      	beq.n	80076c8 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80076aa:	683b      	ldr	r3, [r7, #0]
 80076ac:	88da      	ldrh	r2, [r3, #6]
 80076ae:	893b      	ldrh	r3, [r7, #8]
 80076b0:	4293      	cmp	r3, r2
 80076b2:	bf28      	it	cs
 80076b4:	4613      	movcs	r3, r2
 80076b6:	b29b      	uxth	r3, r3
 80076b8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80076ba:	893b      	ldrh	r3, [r7, #8]
 80076bc:	461a      	mov	r2, r3
 80076be:	68f9      	ldr	r1, [r7, #12]
 80076c0:	6878      	ldr	r0, [r7, #4]
 80076c2:	f000 fa44 	bl	8007b4e <USBD_CtlSendData>
 80076c6:	e009      	b.n	80076dc <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80076c8:	6839      	ldr	r1, [r7, #0]
 80076ca:	6878      	ldr	r0, [r7, #4]
 80076cc:	f000 f9ce 	bl	8007a6c <USBD_CtlError>
 80076d0:	e004      	b.n	80076dc <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80076d2:	6878      	ldr	r0, [r7, #4]
 80076d4:	f000 fa95 	bl	8007c02 <USBD_CtlSendStatus>
 80076d8:	e000      	b.n	80076dc <USBD_GetDescriptor+0x2cc>
    return;
 80076da:	bf00      	nop
  }
}
 80076dc:	3710      	adds	r7, #16
 80076de:	46bd      	mov	sp, r7
 80076e0:	bd80      	pop	{r7, pc}
 80076e2:	bf00      	nop

080076e4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80076e4:	b580      	push	{r7, lr}
 80076e6:	b084      	sub	sp, #16
 80076e8:	af00      	add	r7, sp, #0
 80076ea:	6078      	str	r0, [r7, #4]
 80076ec:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80076ee:	683b      	ldr	r3, [r7, #0]
 80076f0:	889b      	ldrh	r3, [r3, #4]
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d131      	bne.n	800775a <USBD_SetAddress+0x76>
 80076f6:	683b      	ldr	r3, [r7, #0]
 80076f8:	88db      	ldrh	r3, [r3, #6]
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d12d      	bne.n	800775a <USBD_SetAddress+0x76>
 80076fe:	683b      	ldr	r3, [r7, #0]
 8007700:	885b      	ldrh	r3, [r3, #2]
 8007702:	2b7f      	cmp	r3, #127	; 0x7f
 8007704:	d829      	bhi.n	800775a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007706:	683b      	ldr	r3, [r7, #0]
 8007708:	885b      	ldrh	r3, [r3, #2]
 800770a:	b2db      	uxtb	r3, r3
 800770c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007710:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007718:	b2db      	uxtb	r3, r3
 800771a:	2b03      	cmp	r3, #3
 800771c:	d104      	bne.n	8007728 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800771e:	6839      	ldr	r1, [r7, #0]
 8007720:	6878      	ldr	r0, [r7, #4]
 8007722:	f000 f9a3 	bl	8007a6c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007726:	e01d      	b.n	8007764 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	7bfa      	ldrb	r2, [r7, #15]
 800772c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007730:	7bfb      	ldrb	r3, [r7, #15]
 8007732:	4619      	mov	r1, r3
 8007734:	6878      	ldr	r0, [r7, #4]
 8007736:	f000 fee3 	bl	8008500 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800773a:	6878      	ldr	r0, [r7, #4]
 800773c:	f000 fa61 	bl	8007c02 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007740:	7bfb      	ldrb	r3, [r7, #15]
 8007742:	2b00      	cmp	r3, #0
 8007744:	d004      	beq.n	8007750 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	2202      	movs	r2, #2
 800774a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800774e:	e009      	b.n	8007764 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	2201      	movs	r2, #1
 8007754:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007758:	e004      	b.n	8007764 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800775a:	6839      	ldr	r1, [r7, #0]
 800775c:	6878      	ldr	r0, [r7, #4]
 800775e:	f000 f985 	bl	8007a6c <USBD_CtlError>
  }
}
 8007762:	bf00      	nop
 8007764:	bf00      	nop
 8007766:	3710      	adds	r7, #16
 8007768:	46bd      	mov	sp, r7
 800776a:	bd80      	pop	{r7, pc}

0800776c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800776c:	b580      	push	{r7, lr}
 800776e:	b084      	sub	sp, #16
 8007770:	af00      	add	r7, sp, #0
 8007772:	6078      	str	r0, [r7, #4]
 8007774:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007776:	2300      	movs	r3, #0
 8007778:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800777a:	683b      	ldr	r3, [r7, #0]
 800777c:	885b      	ldrh	r3, [r3, #2]
 800777e:	b2da      	uxtb	r2, r3
 8007780:	4b4c      	ldr	r3, [pc, #304]	; (80078b4 <USBD_SetConfig+0x148>)
 8007782:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007784:	4b4b      	ldr	r3, [pc, #300]	; (80078b4 <USBD_SetConfig+0x148>)
 8007786:	781b      	ldrb	r3, [r3, #0]
 8007788:	2b01      	cmp	r3, #1
 800778a:	d905      	bls.n	8007798 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800778c:	6839      	ldr	r1, [r7, #0]
 800778e:	6878      	ldr	r0, [r7, #4]
 8007790:	f000 f96c 	bl	8007a6c <USBD_CtlError>
    return USBD_FAIL;
 8007794:	2303      	movs	r3, #3
 8007796:	e088      	b.n	80078aa <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800779e:	b2db      	uxtb	r3, r3
 80077a0:	2b02      	cmp	r3, #2
 80077a2:	d002      	beq.n	80077aa <USBD_SetConfig+0x3e>
 80077a4:	2b03      	cmp	r3, #3
 80077a6:	d025      	beq.n	80077f4 <USBD_SetConfig+0x88>
 80077a8:	e071      	b.n	800788e <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80077aa:	4b42      	ldr	r3, [pc, #264]	; (80078b4 <USBD_SetConfig+0x148>)
 80077ac:	781b      	ldrb	r3, [r3, #0]
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d01c      	beq.n	80077ec <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 80077b2:	4b40      	ldr	r3, [pc, #256]	; (80078b4 <USBD_SetConfig+0x148>)
 80077b4:	781b      	ldrb	r3, [r3, #0]
 80077b6:	461a      	mov	r2, r3
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80077bc:	4b3d      	ldr	r3, [pc, #244]	; (80078b4 <USBD_SetConfig+0x148>)
 80077be:	781b      	ldrb	r3, [r3, #0]
 80077c0:	4619      	mov	r1, r3
 80077c2:	6878      	ldr	r0, [r7, #4]
 80077c4:	f7ff f948 	bl	8006a58 <USBD_SetClassConfig>
 80077c8:	4603      	mov	r3, r0
 80077ca:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80077cc:	7bfb      	ldrb	r3, [r7, #15]
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d004      	beq.n	80077dc <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 80077d2:	6839      	ldr	r1, [r7, #0]
 80077d4:	6878      	ldr	r0, [r7, #4]
 80077d6:	f000 f949 	bl	8007a6c <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80077da:	e065      	b.n	80078a8 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80077dc:	6878      	ldr	r0, [r7, #4]
 80077de:	f000 fa10 	bl	8007c02 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	2203      	movs	r2, #3
 80077e6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80077ea:	e05d      	b.n	80078a8 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80077ec:	6878      	ldr	r0, [r7, #4]
 80077ee:	f000 fa08 	bl	8007c02 <USBD_CtlSendStatus>
      break;
 80077f2:	e059      	b.n	80078a8 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80077f4:	4b2f      	ldr	r3, [pc, #188]	; (80078b4 <USBD_SetConfig+0x148>)
 80077f6:	781b      	ldrb	r3, [r3, #0]
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d112      	bne.n	8007822 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	2202      	movs	r2, #2
 8007800:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8007804:	4b2b      	ldr	r3, [pc, #172]	; (80078b4 <USBD_SetConfig+0x148>)
 8007806:	781b      	ldrb	r3, [r3, #0]
 8007808:	461a      	mov	r2, r3
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800780e:	4b29      	ldr	r3, [pc, #164]	; (80078b4 <USBD_SetConfig+0x148>)
 8007810:	781b      	ldrb	r3, [r3, #0]
 8007812:	4619      	mov	r1, r3
 8007814:	6878      	ldr	r0, [r7, #4]
 8007816:	f7ff f93b 	bl	8006a90 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800781a:	6878      	ldr	r0, [r7, #4]
 800781c:	f000 f9f1 	bl	8007c02 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007820:	e042      	b.n	80078a8 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8007822:	4b24      	ldr	r3, [pc, #144]	; (80078b4 <USBD_SetConfig+0x148>)
 8007824:	781b      	ldrb	r3, [r3, #0]
 8007826:	461a      	mov	r2, r3
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	685b      	ldr	r3, [r3, #4]
 800782c:	429a      	cmp	r2, r3
 800782e:	d02a      	beq.n	8007886 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	685b      	ldr	r3, [r3, #4]
 8007834:	b2db      	uxtb	r3, r3
 8007836:	4619      	mov	r1, r3
 8007838:	6878      	ldr	r0, [r7, #4]
 800783a:	f7ff f929 	bl	8006a90 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800783e:	4b1d      	ldr	r3, [pc, #116]	; (80078b4 <USBD_SetConfig+0x148>)
 8007840:	781b      	ldrb	r3, [r3, #0]
 8007842:	461a      	mov	r2, r3
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007848:	4b1a      	ldr	r3, [pc, #104]	; (80078b4 <USBD_SetConfig+0x148>)
 800784a:	781b      	ldrb	r3, [r3, #0]
 800784c:	4619      	mov	r1, r3
 800784e:	6878      	ldr	r0, [r7, #4]
 8007850:	f7ff f902 	bl	8006a58 <USBD_SetClassConfig>
 8007854:	4603      	mov	r3, r0
 8007856:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007858:	7bfb      	ldrb	r3, [r7, #15]
 800785a:	2b00      	cmp	r3, #0
 800785c:	d00f      	beq.n	800787e <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800785e:	6839      	ldr	r1, [r7, #0]
 8007860:	6878      	ldr	r0, [r7, #4]
 8007862:	f000 f903 	bl	8007a6c <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	685b      	ldr	r3, [r3, #4]
 800786a:	b2db      	uxtb	r3, r3
 800786c:	4619      	mov	r1, r3
 800786e:	6878      	ldr	r0, [r7, #4]
 8007870:	f7ff f90e 	bl	8006a90 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	2202      	movs	r2, #2
 8007878:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800787c:	e014      	b.n	80078a8 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800787e:	6878      	ldr	r0, [r7, #4]
 8007880:	f000 f9bf 	bl	8007c02 <USBD_CtlSendStatus>
      break;
 8007884:	e010      	b.n	80078a8 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8007886:	6878      	ldr	r0, [r7, #4]
 8007888:	f000 f9bb 	bl	8007c02 <USBD_CtlSendStatus>
      break;
 800788c:	e00c      	b.n	80078a8 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800788e:	6839      	ldr	r1, [r7, #0]
 8007890:	6878      	ldr	r0, [r7, #4]
 8007892:	f000 f8eb 	bl	8007a6c <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007896:	4b07      	ldr	r3, [pc, #28]	; (80078b4 <USBD_SetConfig+0x148>)
 8007898:	781b      	ldrb	r3, [r3, #0]
 800789a:	4619      	mov	r1, r3
 800789c:	6878      	ldr	r0, [r7, #4]
 800789e:	f7ff f8f7 	bl	8006a90 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80078a2:	2303      	movs	r3, #3
 80078a4:	73fb      	strb	r3, [r7, #15]
      break;
 80078a6:	bf00      	nop
  }

  return ret;
 80078a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80078aa:	4618      	mov	r0, r3
 80078ac:	3710      	adds	r7, #16
 80078ae:	46bd      	mov	sp, r7
 80078b0:	bd80      	pop	{r7, pc}
 80078b2:	bf00      	nop
 80078b4:	20000374 	.word	0x20000374

080078b8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80078b8:	b580      	push	{r7, lr}
 80078ba:	b082      	sub	sp, #8
 80078bc:	af00      	add	r7, sp, #0
 80078be:	6078      	str	r0, [r7, #4]
 80078c0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80078c2:	683b      	ldr	r3, [r7, #0]
 80078c4:	88db      	ldrh	r3, [r3, #6]
 80078c6:	2b01      	cmp	r3, #1
 80078c8:	d004      	beq.n	80078d4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80078ca:	6839      	ldr	r1, [r7, #0]
 80078cc:	6878      	ldr	r0, [r7, #4]
 80078ce:	f000 f8cd 	bl	8007a6c <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80078d2:	e023      	b.n	800791c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80078da:	b2db      	uxtb	r3, r3
 80078dc:	2b02      	cmp	r3, #2
 80078de:	dc02      	bgt.n	80078e6 <USBD_GetConfig+0x2e>
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	dc03      	bgt.n	80078ec <USBD_GetConfig+0x34>
 80078e4:	e015      	b.n	8007912 <USBD_GetConfig+0x5a>
 80078e6:	2b03      	cmp	r3, #3
 80078e8:	d00b      	beq.n	8007902 <USBD_GetConfig+0x4a>
 80078ea:	e012      	b.n	8007912 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	2200      	movs	r2, #0
 80078f0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	3308      	adds	r3, #8
 80078f6:	2201      	movs	r2, #1
 80078f8:	4619      	mov	r1, r3
 80078fa:	6878      	ldr	r0, [r7, #4]
 80078fc:	f000 f927 	bl	8007b4e <USBD_CtlSendData>
        break;
 8007900:	e00c      	b.n	800791c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	3304      	adds	r3, #4
 8007906:	2201      	movs	r2, #1
 8007908:	4619      	mov	r1, r3
 800790a:	6878      	ldr	r0, [r7, #4]
 800790c:	f000 f91f 	bl	8007b4e <USBD_CtlSendData>
        break;
 8007910:	e004      	b.n	800791c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8007912:	6839      	ldr	r1, [r7, #0]
 8007914:	6878      	ldr	r0, [r7, #4]
 8007916:	f000 f8a9 	bl	8007a6c <USBD_CtlError>
        break;
 800791a:	bf00      	nop
}
 800791c:	bf00      	nop
 800791e:	3708      	adds	r7, #8
 8007920:	46bd      	mov	sp, r7
 8007922:	bd80      	pop	{r7, pc}

08007924 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007924:	b580      	push	{r7, lr}
 8007926:	b082      	sub	sp, #8
 8007928:	af00      	add	r7, sp, #0
 800792a:	6078      	str	r0, [r7, #4]
 800792c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007934:	b2db      	uxtb	r3, r3
 8007936:	3b01      	subs	r3, #1
 8007938:	2b02      	cmp	r3, #2
 800793a:	d81e      	bhi.n	800797a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800793c:	683b      	ldr	r3, [r7, #0]
 800793e:	88db      	ldrh	r3, [r3, #6]
 8007940:	2b02      	cmp	r3, #2
 8007942:	d004      	beq.n	800794e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007944:	6839      	ldr	r1, [r7, #0]
 8007946:	6878      	ldr	r0, [r7, #4]
 8007948:	f000 f890 	bl	8007a6c <USBD_CtlError>
        break;
 800794c:	e01a      	b.n	8007984 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	2201      	movs	r2, #1
 8007952:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800795a:	2b00      	cmp	r3, #0
 800795c:	d005      	beq.n	800796a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	68db      	ldr	r3, [r3, #12]
 8007962:	f043 0202 	orr.w	r2, r3, #2
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	330c      	adds	r3, #12
 800796e:	2202      	movs	r2, #2
 8007970:	4619      	mov	r1, r3
 8007972:	6878      	ldr	r0, [r7, #4]
 8007974:	f000 f8eb 	bl	8007b4e <USBD_CtlSendData>
      break;
 8007978:	e004      	b.n	8007984 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800797a:	6839      	ldr	r1, [r7, #0]
 800797c:	6878      	ldr	r0, [r7, #4]
 800797e:	f000 f875 	bl	8007a6c <USBD_CtlError>
      break;
 8007982:	bf00      	nop
  }
}
 8007984:	bf00      	nop
 8007986:	3708      	adds	r7, #8
 8007988:	46bd      	mov	sp, r7
 800798a:	bd80      	pop	{r7, pc}

0800798c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800798c:	b580      	push	{r7, lr}
 800798e:	b082      	sub	sp, #8
 8007990:	af00      	add	r7, sp, #0
 8007992:	6078      	str	r0, [r7, #4]
 8007994:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007996:	683b      	ldr	r3, [r7, #0]
 8007998:	885b      	ldrh	r3, [r3, #2]
 800799a:	2b01      	cmp	r3, #1
 800799c:	d106      	bne.n	80079ac <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	2201      	movs	r2, #1
 80079a2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80079a6:	6878      	ldr	r0, [r7, #4]
 80079a8:	f000 f92b 	bl	8007c02 <USBD_CtlSendStatus>
  }
}
 80079ac:	bf00      	nop
 80079ae:	3708      	adds	r7, #8
 80079b0:	46bd      	mov	sp, r7
 80079b2:	bd80      	pop	{r7, pc}

080079b4 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80079b4:	b580      	push	{r7, lr}
 80079b6:	b082      	sub	sp, #8
 80079b8:	af00      	add	r7, sp, #0
 80079ba:	6078      	str	r0, [r7, #4]
 80079bc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80079c4:	b2db      	uxtb	r3, r3
 80079c6:	3b01      	subs	r3, #1
 80079c8:	2b02      	cmp	r3, #2
 80079ca:	d80b      	bhi.n	80079e4 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80079cc:	683b      	ldr	r3, [r7, #0]
 80079ce:	885b      	ldrh	r3, [r3, #2]
 80079d0:	2b01      	cmp	r3, #1
 80079d2:	d10c      	bne.n	80079ee <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	2200      	movs	r2, #0
 80079d8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80079dc:	6878      	ldr	r0, [r7, #4]
 80079de:	f000 f910 	bl	8007c02 <USBD_CtlSendStatus>
      }
      break;
 80079e2:	e004      	b.n	80079ee <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80079e4:	6839      	ldr	r1, [r7, #0]
 80079e6:	6878      	ldr	r0, [r7, #4]
 80079e8:	f000 f840 	bl	8007a6c <USBD_CtlError>
      break;
 80079ec:	e000      	b.n	80079f0 <USBD_ClrFeature+0x3c>
      break;
 80079ee:	bf00      	nop
  }
}
 80079f0:	bf00      	nop
 80079f2:	3708      	adds	r7, #8
 80079f4:	46bd      	mov	sp, r7
 80079f6:	bd80      	pop	{r7, pc}

080079f8 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80079f8:	b580      	push	{r7, lr}
 80079fa:	b084      	sub	sp, #16
 80079fc:	af00      	add	r7, sp, #0
 80079fe:	6078      	str	r0, [r7, #4]
 8007a00:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007a02:	683b      	ldr	r3, [r7, #0]
 8007a04:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	781a      	ldrb	r2, [r3, #0]
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	3301      	adds	r3, #1
 8007a12:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	781a      	ldrb	r2, [r3, #0]
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	3301      	adds	r3, #1
 8007a20:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007a22:	68f8      	ldr	r0, [r7, #12]
 8007a24:	f7ff fabb 	bl	8006f9e <SWAPBYTE>
 8007a28:	4603      	mov	r3, r0
 8007a2a:	461a      	mov	r2, r3
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	3301      	adds	r3, #1
 8007a34:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	3301      	adds	r3, #1
 8007a3a:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007a3c:	68f8      	ldr	r0, [r7, #12]
 8007a3e:	f7ff faae 	bl	8006f9e <SWAPBYTE>
 8007a42:	4603      	mov	r3, r0
 8007a44:	461a      	mov	r2, r3
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	3301      	adds	r3, #1
 8007a4e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	3301      	adds	r3, #1
 8007a54:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007a56:	68f8      	ldr	r0, [r7, #12]
 8007a58:	f7ff faa1 	bl	8006f9e <SWAPBYTE>
 8007a5c:	4603      	mov	r3, r0
 8007a5e:	461a      	mov	r2, r3
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	80da      	strh	r2, [r3, #6]
}
 8007a64:	bf00      	nop
 8007a66:	3710      	adds	r7, #16
 8007a68:	46bd      	mov	sp, r7
 8007a6a:	bd80      	pop	{r7, pc}

08007a6c <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007a6c:	b580      	push	{r7, lr}
 8007a6e:	b082      	sub	sp, #8
 8007a70:	af00      	add	r7, sp, #0
 8007a72:	6078      	str	r0, [r7, #4]
 8007a74:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007a76:	2180      	movs	r1, #128	; 0x80
 8007a78:	6878      	ldr	r0, [r7, #4]
 8007a7a:	f000 fcd7 	bl	800842c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007a7e:	2100      	movs	r1, #0
 8007a80:	6878      	ldr	r0, [r7, #4]
 8007a82:	f000 fcd3 	bl	800842c <USBD_LL_StallEP>
}
 8007a86:	bf00      	nop
 8007a88:	3708      	adds	r7, #8
 8007a8a:	46bd      	mov	sp, r7
 8007a8c:	bd80      	pop	{r7, pc}

08007a8e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007a8e:	b580      	push	{r7, lr}
 8007a90:	b086      	sub	sp, #24
 8007a92:	af00      	add	r7, sp, #0
 8007a94:	60f8      	str	r0, [r7, #12]
 8007a96:	60b9      	str	r1, [r7, #8]
 8007a98:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007a9a:	2300      	movs	r3, #0
 8007a9c:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d036      	beq.n	8007b12 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8007aa8:	6938      	ldr	r0, [r7, #16]
 8007aaa:	f000 f836 	bl	8007b1a <USBD_GetLen>
 8007aae:	4603      	mov	r3, r0
 8007ab0:	3301      	adds	r3, #1
 8007ab2:	b29b      	uxth	r3, r3
 8007ab4:	005b      	lsls	r3, r3, #1
 8007ab6:	b29a      	uxth	r2, r3
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007abc:	7dfb      	ldrb	r3, [r7, #23]
 8007abe:	68ba      	ldr	r2, [r7, #8]
 8007ac0:	4413      	add	r3, r2
 8007ac2:	687a      	ldr	r2, [r7, #4]
 8007ac4:	7812      	ldrb	r2, [r2, #0]
 8007ac6:	701a      	strb	r2, [r3, #0]
  idx++;
 8007ac8:	7dfb      	ldrb	r3, [r7, #23]
 8007aca:	3301      	adds	r3, #1
 8007acc:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007ace:	7dfb      	ldrb	r3, [r7, #23]
 8007ad0:	68ba      	ldr	r2, [r7, #8]
 8007ad2:	4413      	add	r3, r2
 8007ad4:	2203      	movs	r2, #3
 8007ad6:	701a      	strb	r2, [r3, #0]
  idx++;
 8007ad8:	7dfb      	ldrb	r3, [r7, #23]
 8007ada:	3301      	adds	r3, #1
 8007adc:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007ade:	e013      	b.n	8007b08 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8007ae0:	7dfb      	ldrb	r3, [r7, #23]
 8007ae2:	68ba      	ldr	r2, [r7, #8]
 8007ae4:	4413      	add	r3, r2
 8007ae6:	693a      	ldr	r2, [r7, #16]
 8007ae8:	7812      	ldrb	r2, [r2, #0]
 8007aea:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007aec:	693b      	ldr	r3, [r7, #16]
 8007aee:	3301      	adds	r3, #1
 8007af0:	613b      	str	r3, [r7, #16]
    idx++;
 8007af2:	7dfb      	ldrb	r3, [r7, #23]
 8007af4:	3301      	adds	r3, #1
 8007af6:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007af8:	7dfb      	ldrb	r3, [r7, #23]
 8007afa:	68ba      	ldr	r2, [r7, #8]
 8007afc:	4413      	add	r3, r2
 8007afe:	2200      	movs	r2, #0
 8007b00:	701a      	strb	r2, [r3, #0]
    idx++;
 8007b02:	7dfb      	ldrb	r3, [r7, #23]
 8007b04:	3301      	adds	r3, #1
 8007b06:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007b08:	693b      	ldr	r3, [r7, #16]
 8007b0a:	781b      	ldrb	r3, [r3, #0]
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d1e7      	bne.n	8007ae0 <USBD_GetString+0x52>
 8007b10:	e000      	b.n	8007b14 <USBD_GetString+0x86>
    return;
 8007b12:	bf00      	nop
  }
}
 8007b14:	3718      	adds	r7, #24
 8007b16:	46bd      	mov	sp, r7
 8007b18:	bd80      	pop	{r7, pc}

08007b1a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007b1a:	b480      	push	{r7}
 8007b1c:	b085      	sub	sp, #20
 8007b1e:	af00      	add	r7, sp, #0
 8007b20:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007b22:	2300      	movs	r3, #0
 8007b24:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007b2a:	e005      	b.n	8007b38 <USBD_GetLen+0x1e>
  {
    len++;
 8007b2c:	7bfb      	ldrb	r3, [r7, #15]
 8007b2e:	3301      	adds	r3, #1
 8007b30:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007b32:	68bb      	ldr	r3, [r7, #8]
 8007b34:	3301      	adds	r3, #1
 8007b36:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007b38:	68bb      	ldr	r3, [r7, #8]
 8007b3a:	781b      	ldrb	r3, [r3, #0]
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d1f5      	bne.n	8007b2c <USBD_GetLen+0x12>
  }

  return len;
 8007b40:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b42:	4618      	mov	r0, r3
 8007b44:	3714      	adds	r7, #20
 8007b46:	46bd      	mov	sp, r7
 8007b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b4c:	4770      	bx	lr

08007b4e <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007b4e:	b580      	push	{r7, lr}
 8007b50:	b084      	sub	sp, #16
 8007b52:	af00      	add	r7, sp, #0
 8007b54:	60f8      	str	r0, [r7, #12]
 8007b56:	60b9      	str	r1, [r7, #8]
 8007b58:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	2202      	movs	r2, #2
 8007b5e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	687a      	ldr	r2, [r7, #4]
 8007b66:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	687a      	ldr	r2, [r7, #4]
 8007b6c:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	68ba      	ldr	r2, [r7, #8]
 8007b72:	2100      	movs	r1, #0
 8007b74:	68f8      	ldr	r0, [r7, #12]
 8007b76:	f000 fce2 	bl	800853e <USBD_LL_Transmit>

  return USBD_OK;
 8007b7a:	2300      	movs	r3, #0
}
 8007b7c:	4618      	mov	r0, r3
 8007b7e:	3710      	adds	r7, #16
 8007b80:	46bd      	mov	sp, r7
 8007b82:	bd80      	pop	{r7, pc}

08007b84 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007b84:	b580      	push	{r7, lr}
 8007b86:	b084      	sub	sp, #16
 8007b88:	af00      	add	r7, sp, #0
 8007b8a:	60f8      	str	r0, [r7, #12]
 8007b8c:	60b9      	str	r1, [r7, #8]
 8007b8e:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	68ba      	ldr	r2, [r7, #8]
 8007b94:	2100      	movs	r1, #0
 8007b96:	68f8      	ldr	r0, [r7, #12]
 8007b98:	f000 fcd1 	bl	800853e <USBD_LL_Transmit>

  return USBD_OK;
 8007b9c:	2300      	movs	r3, #0
}
 8007b9e:	4618      	mov	r0, r3
 8007ba0:	3710      	adds	r7, #16
 8007ba2:	46bd      	mov	sp, r7
 8007ba4:	bd80      	pop	{r7, pc}

08007ba6 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8007ba6:	b580      	push	{r7, lr}
 8007ba8:	b084      	sub	sp, #16
 8007baa:	af00      	add	r7, sp, #0
 8007bac:	60f8      	str	r0, [r7, #12]
 8007bae:	60b9      	str	r1, [r7, #8]
 8007bb0:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	2203      	movs	r2, #3
 8007bb6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	687a      	ldr	r2, [r7, #4]
 8007bbe:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	687a      	ldr	r2, [r7, #4]
 8007bc6:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	68ba      	ldr	r2, [r7, #8]
 8007bce:	2100      	movs	r1, #0
 8007bd0:	68f8      	ldr	r0, [r7, #12]
 8007bd2:	f000 fcd5 	bl	8008580 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007bd6:	2300      	movs	r3, #0
}
 8007bd8:	4618      	mov	r0, r3
 8007bda:	3710      	adds	r7, #16
 8007bdc:	46bd      	mov	sp, r7
 8007bde:	bd80      	pop	{r7, pc}

08007be0 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007be0:	b580      	push	{r7, lr}
 8007be2:	b084      	sub	sp, #16
 8007be4:	af00      	add	r7, sp, #0
 8007be6:	60f8      	str	r0, [r7, #12]
 8007be8:	60b9      	str	r1, [r7, #8]
 8007bea:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	68ba      	ldr	r2, [r7, #8]
 8007bf0:	2100      	movs	r1, #0
 8007bf2:	68f8      	ldr	r0, [r7, #12]
 8007bf4:	f000 fcc4 	bl	8008580 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007bf8:	2300      	movs	r3, #0
}
 8007bfa:	4618      	mov	r0, r3
 8007bfc:	3710      	adds	r7, #16
 8007bfe:	46bd      	mov	sp, r7
 8007c00:	bd80      	pop	{r7, pc}

08007c02 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007c02:	b580      	push	{r7, lr}
 8007c04:	b082      	sub	sp, #8
 8007c06:	af00      	add	r7, sp, #0
 8007c08:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	2204      	movs	r2, #4
 8007c0e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007c12:	2300      	movs	r3, #0
 8007c14:	2200      	movs	r2, #0
 8007c16:	2100      	movs	r1, #0
 8007c18:	6878      	ldr	r0, [r7, #4]
 8007c1a:	f000 fc90 	bl	800853e <USBD_LL_Transmit>

  return USBD_OK;
 8007c1e:	2300      	movs	r3, #0
}
 8007c20:	4618      	mov	r0, r3
 8007c22:	3708      	adds	r7, #8
 8007c24:	46bd      	mov	sp, r7
 8007c26:	bd80      	pop	{r7, pc}

08007c28 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007c28:	b580      	push	{r7, lr}
 8007c2a:	b082      	sub	sp, #8
 8007c2c:	af00      	add	r7, sp, #0
 8007c2e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	2205      	movs	r2, #5
 8007c34:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007c38:	2300      	movs	r3, #0
 8007c3a:	2200      	movs	r2, #0
 8007c3c:	2100      	movs	r1, #0
 8007c3e:	6878      	ldr	r0, [r7, #4]
 8007c40:	f000 fc9e 	bl	8008580 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007c44:	2300      	movs	r3, #0
}
 8007c46:	4618      	mov	r0, r3
 8007c48:	3708      	adds	r7, #8
 8007c4a:	46bd      	mov	sp, r7
 8007c4c:	bd80      	pop	{r7, pc}
	...

08007c50 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007c50:	b580      	push	{r7, lr}
 8007c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007c54:	2200      	movs	r2, #0
 8007c56:	4912      	ldr	r1, [pc, #72]	; (8007ca0 <MX_USB_DEVICE_Init+0x50>)
 8007c58:	4812      	ldr	r0, [pc, #72]	; (8007ca4 <MX_USB_DEVICE_Init+0x54>)
 8007c5a:	f7fe fe8f 	bl	800697c <USBD_Init>
 8007c5e:	4603      	mov	r3, r0
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d001      	beq.n	8007c68 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007c64:	f7f9 fc44 	bl	80014f0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007c68:	490f      	ldr	r1, [pc, #60]	; (8007ca8 <MX_USB_DEVICE_Init+0x58>)
 8007c6a:	480e      	ldr	r0, [pc, #56]	; (8007ca4 <MX_USB_DEVICE_Init+0x54>)
 8007c6c:	f7fe feb6 	bl	80069dc <USBD_RegisterClass>
 8007c70:	4603      	mov	r3, r0
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d001      	beq.n	8007c7a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007c76:	f7f9 fc3b 	bl	80014f0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007c7a:	490c      	ldr	r1, [pc, #48]	; (8007cac <MX_USB_DEVICE_Init+0x5c>)
 8007c7c:	4809      	ldr	r0, [pc, #36]	; (8007ca4 <MX_USB_DEVICE_Init+0x54>)
 8007c7e:	f7fe fdd7 	bl	8006830 <USBD_CDC_RegisterInterface>
 8007c82:	4603      	mov	r3, r0
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d001      	beq.n	8007c8c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007c88:	f7f9 fc32 	bl	80014f0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007c8c:	4805      	ldr	r0, [pc, #20]	; (8007ca4 <MX_USB_DEVICE_Init+0x54>)
 8007c8e:	f7fe fecc 	bl	8006a2a <USBD_Start>
 8007c92:	4603      	mov	r3, r0
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d001      	beq.n	8007c9c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007c98:	f7f9 fc2a 	bl	80014f0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007c9c:	bf00      	nop
 8007c9e:	bd80      	pop	{r7, pc}
 8007ca0:	20000130 	.word	0x20000130
 8007ca4:	20000604 	.word	0x20000604
 8007ca8:	20000018 	.word	0x20000018
 8007cac:	2000011c 	.word	0x2000011c

08007cb0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007cb0:	b580      	push	{r7, lr}
 8007cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007cb4:	2200      	movs	r2, #0
 8007cb6:	4905      	ldr	r1, [pc, #20]	; (8007ccc <CDC_Init_FS+0x1c>)
 8007cb8:	4805      	ldr	r0, [pc, #20]	; (8007cd0 <CDC_Init_FS+0x20>)
 8007cba:	f7fe fdce 	bl	800685a <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007cbe:	4905      	ldr	r1, [pc, #20]	; (8007cd4 <CDC_Init_FS+0x24>)
 8007cc0:	4803      	ldr	r0, [pc, #12]	; (8007cd0 <CDC_Init_FS+0x20>)
 8007cc2:	f7fe fde8 	bl	8006896 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8007cc6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007cc8:	4618      	mov	r0, r3
 8007cca:	bd80      	pop	{r7, pc}
 8007ccc:	200010d4 	.word	0x200010d4
 8007cd0:	20000604 	.word	0x20000604
 8007cd4:	200008d4 	.word	0x200008d4

08007cd8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007cd8:	b480      	push	{r7}
 8007cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007cdc:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007cde:	4618      	mov	r0, r3
 8007ce0:	46bd      	mov	sp, r7
 8007ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce6:	4770      	bx	lr

08007ce8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007ce8:	b480      	push	{r7}
 8007cea:	b083      	sub	sp, #12
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	4603      	mov	r3, r0
 8007cf0:	6039      	str	r1, [r7, #0]
 8007cf2:	71fb      	strb	r3, [r7, #7]
 8007cf4:	4613      	mov	r3, r2
 8007cf6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007cf8:	79fb      	ldrb	r3, [r7, #7]
 8007cfa:	2b23      	cmp	r3, #35	; 0x23
 8007cfc:	d84a      	bhi.n	8007d94 <CDC_Control_FS+0xac>
 8007cfe:	a201      	add	r2, pc, #4	; (adr r2, 8007d04 <CDC_Control_FS+0x1c>)
 8007d00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d04:	08007d95 	.word	0x08007d95
 8007d08:	08007d95 	.word	0x08007d95
 8007d0c:	08007d95 	.word	0x08007d95
 8007d10:	08007d95 	.word	0x08007d95
 8007d14:	08007d95 	.word	0x08007d95
 8007d18:	08007d95 	.word	0x08007d95
 8007d1c:	08007d95 	.word	0x08007d95
 8007d20:	08007d95 	.word	0x08007d95
 8007d24:	08007d95 	.word	0x08007d95
 8007d28:	08007d95 	.word	0x08007d95
 8007d2c:	08007d95 	.word	0x08007d95
 8007d30:	08007d95 	.word	0x08007d95
 8007d34:	08007d95 	.word	0x08007d95
 8007d38:	08007d95 	.word	0x08007d95
 8007d3c:	08007d95 	.word	0x08007d95
 8007d40:	08007d95 	.word	0x08007d95
 8007d44:	08007d95 	.word	0x08007d95
 8007d48:	08007d95 	.word	0x08007d95
 8007d4c:	08007d95 	.word	0x08007d95
 8007d50:	08007d95 	.word	0x08007d95
 8007d54:	08007d95 	.word	0x08007d95
 8007d58:	08007d95 	.word	0x08007d95
 8007d5c:	08007d95 	.word	0x08007d95
 8007d60:	08007d95 	.word	0x08007d95
 8007d64:	08007d95 	.word	0x08007d95
 8007d68:	08007d95 	.word	0x08007d95
 8007d6c:	08007d95 	.word	0x08007d95
 8007d70:	08007d95 	.word	0x08007d95
 8007d74:	08007d95 	.word	0x08007d95
 8007d78:	08007d95 	.word	0x08007d95
 8007d7c:	08007d95 	.word	0x08007d95
 8007d80:	08007d95 	.word	0x08007d95
 8007d84:	08007d95 	.word	0x08007d95
 8007d88:	08007d95 	.word	0x08007d95
 8007d8c:	08007d95 	.word	0x08007d95
 8007d90:	08007d95 	.word	0x08007d95
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007d94:	bf00      	nop
  }

  return (USBD_OK);
 8007d96:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007d98:	4618      	mov	r0, r3
 8007d9a:	370c      	adds	r7, #12
 8007d9c:	46bd      	mov	sp, r7
 8007d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da2:	4770      	bx	lr

08007da4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007da4:	b580      	push	{r7, lr}
 8007da6:	b082      	sub	sp, #8
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	6078      	str	r0, [r7, #4]
 8007dac:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007dae:	6879      	ldr	r1, [r7, #4]
 8007db0:	4805      	ldr	r0, [pc, #20]	; (8007dc8 <CDC_Receive_FS+0x24>)
 8007db2:	f7fe fd70 	bl	8006896 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8007db6:	4804      	ldr	r0, [pc, #16]	; (8007dc8 <CDC_Receive_FS+0x24>)
 8007db8:	f7fe fdb6 	bl	8006928 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8007dbc:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007dbe:	4618      	mov	r0, r3
 8007dc0:	3708      	adds	r7, #8
 8007dc2:	46bd      	mov	sp, r7
 8007dc4:	bd80      	pop	{r7, pc}
 8007dc6:	bf00      	nop
 8007dc8:	20000604 	.word	0x20000604

08007dcc <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8007dcc:	b580      	push	{r7, lr}
 8007dce:	b084      	sub	sp, #16
 8007dd0:	af00      	add	r7, sp, #0
 8007dd2:	6078      	str	r0, [r7, #4]
 8007dd4:	460b      	mov	r3, r1
 8007dd6:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8007dd8:	2300      	movs	r3, #0
 8007dda:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8007ddc:	4b0d      	ldr	r3, [pc, #52]	; (8007e14 <CDC_Transmit_FS+0x48>)
 8007dde:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007de2:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8007de4:	68bb      	ldr	r3, [r7, #8]
 8007de6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d001      	beq.n	8007df2 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8007dee:	2301      	movs	r3, #1
 8007df0:	e00b      	b.n	8007e0a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8007df2:	887b      	ldrh	r3, [r7, #2]
 8007df4:	461a      	mov	r2, r3
 8007df6:	6879      	ldr	r1, [r7, #4]
 8007df8:	4806      	ldr	r0, [pc, #24]	; (8007e14 <CDC_Transmit_FS+0x48>)
 8007dfa:	f7fe fd2e 	bl	800685a <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8007dfe:	4805      	ldr	r0, [pc, #20]	; (8007e14 <CDC_Transmit_FS+0x48>)
 8007e00:	f7fe fd62 	bl	80068c8 <USBD_CDC_TransmitPacket>
 8007e04:	4603      	mov	r3, r0
 8007e06:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8007e08:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e0a:	4618      	mov	r0, r3
 8007e0c:	3710      	adds	r7, #16
 8007e0e:	46bd      	mov	sp, r7
 8007e10:	bd80      	pop	{r7, pc}
 8007e12:	bf00      	nop
 8007e14:	20000604 	.word	0x20000604

08007e18 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8007e18:	b480      	push	{r7}
 8007e1a:	b087      	sub	sp, #28
 8007e1c:	af00      	add	r7, sp, #0
 8007e1e:	60f8      	str	r0, [r7, #12]
 8007e20:	60b9      	str	r1, [r7, #8]
 8007e22:	4613      	mov	r3, r2
 8007e24:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8007e26:	2300      	movs	r3, #0
 8007e28:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8007e2a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007e2e:	4618      	mov	r0, r3
 8007e30:	371c      	adds	r7, #28
 8007e32:	46bd      	mov	sp, r7
 8007e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e38:	4770      	bx	lr
	...

08007e3c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007e3c:	b480      	push	{r7}
 8007e3e:	b083      	sub	sp, #12
 8007e40:	af00      	add	r7, sp, #0
 8007e42:	4603      	mov	r3, r0
 8007e44:	6039      	str	r1, [r7, #0]
 8007e46:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007e48:	683b      	ldr	r3, [r7, #0]
 8007e4a:	2212      	movs	r2, #18
 8007e4c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007e4e:	4b03      	ldr	r3, [pc, #12]	; (8007e5c <USBD_FS_DeviceDescriptor+0x20>)
}
 8007e50:	4618      	mov	r0, r3
 8007e52:	370c      	adds	r7, #12
 8007e54:	46bd      	mov	sp, r7
 8007e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e5a:	4770      	bx	lr
 8007e5c:	2000014c 	.word	0x2000014c

08007e60 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007e60:	b480      	push	{r7}
 8007e62:	b083      	sub	sp, #12
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	4603      	mov	r3, r0
 8007e68:	6039      	str	r1, [r7, #0]
 8007e6a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007e6c:	683b      	ldr	r3, [r7, #0]
 8007e6e:	2204      	movs	r2, #4
 8007e70:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007e72:	4b03      	ldr	r3, [pc, #12]	; (8007e80 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007e74:	4618      	mov	r0, r3
 8007e76:	370c      	adds	r7, #12
 8007e78:	46bd      	mov	sp, r7
 8007e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e7e:	4770      	bx	lr
 8007e80:	20000160 	.word	0x20000160

08007e84 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007e84:	b580      	push	{r7, lr}
 8007e86:	b082      	sub	sp, #8
 8007e88:	af00      	add	r7, sp, #0
 8007e8a:	4603      	mov	r3, r0
 8007e8c:	6039      	str	r1, [r7, #0]
 8007e8e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007e90:	79fb      	ldrb	r3, [r7, #7]
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d105      	bne.n	8007ea2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007e96:	683a      	ldr	r2, [r7, #0]
 8007e98:	4907      	ldr	r1, [pc, #28]	; (8007eb8 <USBD_FS_ProductStrDescriptor+0x34>)
 8007e9a:	4808      	ldr	r0, [pc, #32]	; (8007ebc <USBD_FS_ProductStrDescriptor+0x38>)
 8007e9c:	f7ff fdf7 	bl	8007a8e <USBD_GetString>
 8007ea0:	e004      	b.n	8007eac <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007ea2:	683a      	ldr	r2, [r7, #0]
 8007ea4:	4904      	ldr	r1, [pc, #16]	; (8007eb8 <USBD_FS_ProductStrDescriptor+0x34>)
 8007ea6:	4805      	ldr	r0, [pc, #20]	; (8007ebc <USBD_FS_ProductStrDescriptor+0x38>)
 8007ea8:	f7ff fdf1 	bl	8007a8e <USBD_GetString>
  }
  return USBD_StrDesc;
 8007eac:	4b02      	ldr	r3, [pc, #8]	; (8007eb8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007eae:	4618      	mov	r0, r3
 8007eb0:	3708      	adds	r7, #8
 8007eb2:	46bd      	mov	sp, r7
 8007eb4:	bd80      	pop	{r7, pc}
 8007eb6:	bf00      	nop
 8007eb8:	200018d4 	.word	0x200018d4
 8007ebc:	0800cf4c 	.word	0x0800cf4c

08007ec0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007ec0:	b580      	push	{r7, lr}
 8007ec2:	b082      	sub	sp, #8
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	4603      	mov	r3, r0
 8007ec8:	6039      	str	r1, [r7, #0]
 8007eca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007ecc:	683a      	ldr	r2, [r7, #0]
 8007ece:	4904      	ldr	r1, [pc, #16]	; (8007ee0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007ed0:	4804      	ldr	r0, [pc, #16]	; (8007ee4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007ed2:	f7ff fddc 	bl	8007a8e <USBD_GetString>
  return USBD_StrDesc;
 8007ed6:	4b02      	ldr	r3, [pc, #8]	; (8007ee0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007ed8:	4618      	mov	r0, r3
 8007eda:	3708      	adds	r7, #8
 8007edc:	46bd      	mov	sp, r7
 8007ede:	bd80      	pop	{r7, pc}
 8007ee0:	200018d4 	.word	0x200018d4
 8007ee4:	0800cf64 	.word	0x0800cf64

08007ee8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007ee8:	b580      	push	{r7, lr}
 8007eea:	b082      	sub	sp, #8
 8007eec:	af00      	add	r7, sp, #0
 8007eee:	4603      	mov	r3, r0
 8007ef0:	6039      	str	r1, [r7, #0]
 8007ef2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007ef4:	683b      	ldr	r3, [r7, #0]
 8007ef6:	221a      	movs	r2, #26
 8007ef8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007efa:	f000 f843 	bl	8007f84 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007efe:	4b02      	ldr	r3, [pc, #8]	; (8007f08 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007f00:	4618      	mov	r0, r3
 8007f02:	3708      	adds	r7, #8
 8007f04:	46bd      	mov	sp, r7
 8007f06:	bd80      	pop	{r7, pc}
 8007f08:	20000164 	.word	0x20000164

08007f0c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007f0c:	b580      	push	{r7, lr}
 8007f0e:	b082      	sub	sp, #8
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	4603      	mov	r3, r0
 8007f14:	6039      	str	r1, [r7, #0]
 8007f16:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007f18:	79fb      	ldrb	r3, [r7, #7]
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d105      	bne.n	8007f2a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007f1e:	683a      	ldr	r2, [r7, #0]
 8007f20:	4907      	ldr	r1, [pc, #28]	; (8007f40 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007f22:	4808      	ldr	r0, [pc, #32]	; (8007f44 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007f24:	f7ff fdb3 	bl	8007a8e <USBD_GetString>
 8007f28:	e004      	b.n	8007f34 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007f2a:	683a      	ldr	r2, [r7, #0]
 8007f2c:	4904      	ldr	r1, [pc, #16]	; (8007f40 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007f2e:	4805      	ldr	r0, [pc, #20]	; (8007f44 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007f30:	f7ff fdad 	bl	8007a8e <USBD_GetString>
  }
  return USBD_StrDesc;
 8007f34:	4b02      	ldr	r3, [pc, #8]	; (8007f40 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007f36:	4618      	mov	r0, r3
 8007f38:	3708      	adds	r7, #8
 8007f3a:	46bd      	mov	sp, r7
 8007f3c:	bd80      	pop	{r7, pc}
 8007f3e:	bf00      	nop
 8007f40:	200018d4 	.word	0x200018d4
 8007f44:	0800cf78 	.word	0x0800cf78

08007f48 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007f48:	b580      	push	{r7, lr}
 8007f4a:	b082      	sub	sp, #8
 8007f4c:	af00      	add	r7, sp, #0
 8007f4e:	4603      	mov	r3, r0
 8007f50:	6039      	str	r1, [r7, #0]
 8007f52:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007f54:	79fb      	ldrb	r3, [r7, #7]
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d105      	bne.n	8007f66 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007f5a:	683a      	ldr	r2, [r7, #0]
 8007f5c:	4907      	ldr	r1, [pc, #28]	; (8007f7c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007f5e:	4808      	ldr	r0, [pc, #32]	; (8007f80 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007f60:	f7ff fd95 	bl	8007a8e <USBD_GetString>
 8007f64:	e004      	b.n	8007f70 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007f66:	683a      	ldr	r2, [r7, #0]
 8007f68:	4904      	ldr	r1, [pc, #16]	; (8007f7c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007f6a:	4805      	ldr	r0, [pc, #20]	; (8007f80 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007f6c:	f7ff fd8f 	bl	8007a8e <USBD_GetString>
  }
  return USBD_StrDesc;
 8007f70:	4b02      	ldr	r3, [pc, #8]	; (8007f7c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007f72:	4618      	mov	r0, r3
 8007f74:	3708      	adds	r7, #8
 8007f76:	46bd      	mov	sp, r7
 8007f78:	bd80      	pop	{r7, pc}
 8007f7a:	bf00      	nop
 8007f7c:	200018d4 	.word	0x200018d4
 8007f80:	0800cf84 	.word	0x0800cf84

08007f84 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007f84:	b580      	push	{r7, lr}
 8007f86:	b084      	sub	sp, #16
 8007f88:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007f8a:	4b0f      	ldr	r3, [pc, #60]	; (8007fc8 <Get_SerialNum+0x44>)
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007f90:	4b0e      	ldr	r3, [pc, #56]	; (8007fcc <Get_SerialNum+0x48>)
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007f96:	4b0e      	ldr	r3, [pc, #56]	; (8007fd0 <Get_SerialNum+0x4c>)
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007f9c:	68fa      	ldr	r2, [r7, #12]
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	4413      	add	r3, r2
 8007fa2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d009      	beq.n	8007fbe <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007faa:	2208      	movs	r2, #8
 8007fac:	4909      	ldr	r1, [pc, #36]	; (8007fd4 <Get_SerialNum+0x50>)
 8007fae:	68f8      	ldr	r0, [r7, #12]
 8007fb0:	f000 f814 	bl	8007fdc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007fb4:	2204      	movs	r2, #4
 8007fb6:	4908      	ldr	r1, [pc, #32]	; (8007fd8 <Get_SerialNum+0x54>)
 8007fb8:	68b8      	ldr	r0, [r7, #8]
 8007fba:	f000 f80f 	bl	8007fdc <IntToUnicode>
  }
}
 8007fbe:	bf00      	nop
 8007fc0:	3710      	adds	r7, #16
 8007fc2:	46bd      	mov	sp, r7
 8007fc4:	bd80      	pop	{r7, pc}
 8007fc6:	bf00      	nop
 8007fc8:	1fff7a10 	.word	0x1fff7a10
 8007fcc:	1fff7a14 	.word	0x1fff7a14
 8007fd0:	1fff7a18 	.word	0x1fff7a18
 8007fd4:	20000166 	.word	0x20000166
 8007fd8:	20000176 	.word	0x20000176

08007fdc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007fdc:	b480      	push	{r7}
 8007fde:	b087      	sub	sp, #28
 8007fe0:	af00      	add	r7, sp, #0
 8007fe2:	60f8      	str	r0, [r7, #12]
 8007fe4:	60b9      	str	r1, [r7, #8]
 8007fe6:	4613      	mov	r3, r2
 8007fe8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007fea:	2300      	movs	r3, #0
 8007fec:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007fee:	2300      	movs	r3, #0
 8007ff0:	75fb      	strb	r3, [r7, #23]
 8007ff2:	e027      	b.n	8008044 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	0f1b      	lsrs	r3, r3, #28
 8007ff8:	2b09      	cmp	r3, #9
 8007ffa:	d80b      	bhi.n	8008014 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	0f1b      	lsrs	r3, r3, #28
 8008000:	b2da      	uxtb	r2, r3
 8008002:	7dfb      	ldrb	r3, [r7, #23]
 8008004:	005b      	lsls	r3, r3, #1
 8008006:	4619      	mov	r1, r3
 8008008:	68bb      	ldr	r3, [r7, #8]
 800800a:	440b      	add	r3, r1
 800800c:	3230      	adds	r2, #48	; 0x30
 800800e:	b2d2      	uxtb	r2, r2
 8008010:	701a      	strb	r2, [r3, #0]
 8008012:	e00a      	b.n	800802a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	0f1b      	lsrs	r3, r3, #28
 8008018:	b2da      	uxtb	r2, r3
 800801a:	7dfb      	ldrb	r3, [r7, #23]
 800801c:	005b      	lsls	r3, r3, #1
 800801e:	4619      	mov	r1, r3
 8008020:	68bb      	ldr	r3, [r7, #8]
 8008022:	440b      	add	r3, r1
 8008024:	3237      	adds	r2, #55	; 0x37
 8008026:	b2d2      	uxtb	r2, r2
 8008028:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	011b      	lsls	r3, r3, #4
 800802e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008030:	7dfb      	ldrb	r3, [r7, #23]
 8008032:	005b      	lsls	r3, r3, #1
 8008034:	3301      	adds	r3, #1
 8008036:	68ba      	ldr	r2, [r7, #8]
 8008038:	4413      	add	r3, r2
 800803a:	2200      	movs	r2, #0
 800803c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800803e:	7dfb      	ldrb	r3, [r7, #23]
 8008040:	3301      	adds	r3, #1
 8008042:	75fb      	strb	r3, [r7, #23]
 8008044:	7dfa      	ldrb	r2, [r7, #23]
 8008046:	79fb      	ldrb	r3, [r7, #7]
 8008048:	429a      	cmp	r2, r3
 800804a:	d3d3      	bcc.n	8007ff4 <IntToUnicode+0x18>
  }
}
 800804c:	bf00      	nop
 800804e:	bf00      	nop
 8008050:	371c      	adds	r7, #28
 8008052:	46bd      	mov	sp, r7
 8008054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008058:	4770      	bx	lr
	...

0800805c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800805c:	b580      	push	{r7, lr}
 800805e:	b08a      	sub	sp, #40	; 0x28
 8008060:	af00      	add	r7, sp, #0
 8008062:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008064:	f107 0314 	add.w	r3, r7, #20
 8008068:	2200      	movs	r2, #0
 800806a:	601a      	str	r2, [r3, #0]
 800806c:	605a      	str	r2, [r3, #4]
 800806e:	609a      	str	r2, [r3, #8]
 8008070:	60da      	str	r2, [r3, #12]
 8008072:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800807c:	d13a      	bne.n	80080f4 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800807e:	2300      	movs	r3, #0
 8008080:	613b      	str	r3, [r7, #16]
 8008082:	4b1e      	ldr	r3, [pc, #120]	; (80080fc <HAL_PCD_MspInit+0xa0>)
 8008084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008086:	4a1d      	ldr	r2, [pc, #116]	; (80080fc <HAL_PCD_MspInit+0xa0>)
 8008088:	f043 0301 	orr.w	r3, r3, #1
 800808c:	6313      	str	r3, [r2, #48]	; 0x30
 800808e:	4b1b      	ldr	r3, [pc, #108]	; (80080fc <HAL_PCD_MspInit+0xa0>)
 8008090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008092:	f003 0301 	and.w	r3, r3, #1
 8008096:	613b      	str	r3, [r7, #16]
 8008098:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800809a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800809e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80080a0:	2302      	movs	r3, #2
 80080a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80080a4:	2300      	movs	r3, #0
 80080a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80080a8:	2303      	movs	r3, #3
 80080aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80080ac:	230a      	movs	r3, #10
 80080ae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80080b0:	f107 0314 	add.w	r3, r7, #20
 80080b4:	4619      	mov	r1, r3
 80080b6:	4812      	ldr	r0, [pc, #72]	; (8008100 <HAL_PCD_MspInit+0xa4>)
 80080b8:	f7f9 fd76 	bl	8001ba8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80080bc:	4b0f      	ldr	r3, [pc, #60]	; (80080fc <HAL_PCD_MspInit+0xa0>)
 80080be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080c0:	4a0e      	ldr	r2, [pc, #56]	; (80080fc <HAL_PCD_MspInit+0xa0>)
 80080c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80080c6:	6353      	str	r3, [r2, #52]	; 0x34
 80080c8:	2300      	movs	r3, #0
 80080ca:	60fb      	str	r3, [r7, #12]
 80080cc:	4b0b      	ldr	r3, [pc, #44]	; (80080fc <HAL_PCD_MspInit+0xa0>)
 80080ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80080d0:	4a0a      	ldr	r2, [pc, #40]	; (80080fc <HAL_PCD_MspInit+0xa0>)
 80080d2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80080d6:	6453      	str	r3, [r2, #68]	; 0x44
 80080d8:	4b08      	ldr	r3, [pc, #32]	; (80080fc <HAL_PCD_MspInit+0xa0>)
 80080da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80080dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80080e0:	60fb      	str	r3, [r7, #12]
 80080e2:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80080e4:	2200      	movs	r2, #0
 80080e6:	2100      	movs	r1, #0
 80080e8:	2043      	movs	r0, #67	; 0x43
 80080ea:	f7f9 fd26 	bl	8001b3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80080ee:	2043      	movs	r0, #67	; 0x43
 80080f0:	f7f9 fd3f 	bl	8001b72 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80080f4:	bf00      	nop
 80080f6:	3728      	adds	r7, #40	; 0x28
 80080f8:	46bd      	mov	sp, r7
 80080fa:	bd80      	pop	{r7, pc}
 80080fc:	40023800 	.word	0x40023800
 8008100:	40020000 	.word	0x40020000

08008104 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008104:	b580      	push	{r7, lr}
 8008106:	b082      	sub	sp, #8
 8008108:	af00      	add	r7, sp, #0
 800810a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008118:	4619      	mov	r1, r3
 800811a:	4610      	mov	r0, r2
 800811c:	f7fe fcd0 	bl	8006ac0 <USBD_LL_SetupStage>
}
 8008120:	bf00      	nop
 8008122:	3708      	adds	r7, #8
 8008124:	46bd      	mov	sp, r7
 8008126:	bd80      	pop	{r7, pc}

08008128 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008128:	b580      	push	{r7, lr}
 800812a:	b082      	sub	sp, #8
 800812c:	af00      	add	r7, sp, #0
 800812e:	6078      	str	r0, [r7, #4]
 8008130:	460b      	mov	r3, r1
 8008132:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800813a:	78fa      	ldrb	r2, [r7, #3]
 800813c:	6879      	ldr	r1, [r7, #4]
 800813e:	4613      	mov	r3, r2
 8008140:	00db      	lsls	r3, r3, #3
 8008142:	1a9b      	subs	r3, r3, r2
 8008144:	009b      	lsls	r3, r3, #2
 8008146:	440b      	add	r3, r1
 8008148:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800814c:	681a      	ldr	r2, [r3, #0]
 800814e:	78fb      	ldrb	r3, [r7, #3]
 8008150:	4619      	mov	r1, r3
 8008152:	f7fe fd0a 	bl	8006b6a <USBD_LL_DataOutStage>
}
 8008156:	bf00      	nop
 8008158:	3708      	adds	r7, #8
 800815a:	46bd      	mov	sp, r7
 800815c:	bd80      	pop	{r7, pc}

0800815e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800815e:	b580      	push	{r7, lr}
 8008160:	b082      	sub	sp, #8
 8008162:	af00      	add	r7, sp, #0
 8008164:	6078      	str	r0, [r7, #4]
 8008166:	460b      	mov	r3, r1
 8008168:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8008170:	78fa      	ldrb	r2, [r7, #3]
 8008172:	6879      	ldr	r1, [r7, #4]
 8008174:	4613      	mov	r3, r2
 8008176:	00db      	lsls	r3, r3, #3
 8008178:	1a9b      	subs	r3, r3, r2
 800817a:	009b      	lsls	r3, r3, #2
 800817c:	440b      	add	r3, r1
 800817e:	3348      	adds	r3, #72	; 0x48
 8008180:	681a      	ldr	r2, [r3, #0]
 8008182:	78fb      	ldrb	r3, [r7, #3]
 8008184:	4619      	mov	r1, r3
 8008186:	f7fe fd53 	bl	8006c30 <USBD_LL_DataInStage>
}
 800818a:	bf00      	nop
 800818c:	3708      	adds	r7, #8
 800818e:	46bd      	mov	sp, r7
 8008190:	bd80      	pop	{r7, pc}

08008192 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008192:	b580      	push	{r7, lr}
 8008194:	b082      	sub	sp, #8
 8008196:	af00      	add	r7, sp, #0
 8008198:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80081a0:	4618      	mov	r0, r3
 80081a2:	f7fe fe67 	bl	8006e74 <USBD_LL_SOF>
}
 80081a6:	bf00      	nop
 80081a8:	3708      	adds	r7, #8
 80081aa:	46bd      	mov	sp, r7
 80081ac:	bd80      	pop	{r7, pc}

080081ae <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80081ae:	b580      	push	{r7, lr}
 80081b0:	b084      	sub	sp, #16
 80081b2:	af00      	add	r7, sp, #0
 80081b4:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80081b6:	2301      	movs	r3, #1
 80081b8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	68db      	ldr	r3, [r3, #12]
 80081be:	2b02      	cmp	r3, #2
 80081c0:	d001      	beq.n	80081c6 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80081c2:	f7f9 f995 	bl	80014f0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80081cc:	7bfa      	ldrb	r2, [r7, #15]
 80081ce:	4611      	mov	r1, r2
 80081d0:	4618      	mov	r0, r3
 80081d2:	f7fe fe11 	bl	8006df8 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80081dc:	4618      	mov	r0, r3
 80081de:	f7fe fdbd 	bl	8006d5c <USBD_LL_Reset>
}
 80081e2:	bf00      	nop
 80081e4:	3710      	adds	r7, #16
 80081e6:	46bd      	mov	sp, r7
 80081e8:	bd80      	pop	{r7, pc}
	...

080081ec <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80081ec:	b580      	push	{r7, lr}
 80081ee:	b082      	sub	sp, #8
 80081f0:	af00      	add	r7, sp, #0
 80081f2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80081fa:	4618      	mov	r0, r3
 80081fc:	f7fe fe0c 	bl	8006e18 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	687a      	ldr	r2, [r7, #4]
 800820c:	6812      	ldr	r2, [r2, #0]
 800820e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008212:	f043 0301 	orr.w	r3, r3, #1
 8008216:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	6a1b      	ldr	r3, [r3, #32]
 800821c:	2b00      	cmp	r3, #0
 800821e:	d005      	beq.n	800822c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008220:	4b04      	ldr	r3, [pc, #16]	; (8008234 <HAL_PCD_SuspendCallback+0x48>)
 8008222:	691b      	ldr	r3, [r3, #16]
 8008224:	4a03      	ldr	r2, [pc, #12]	; (8008234 <HAL_PCD_SuspendCallback+0x48>)
 8008226:	f043 0306 	orr.w	r3, r3, #6
 800822a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800822c:	bf00      	nop
 800822e:	3708      	adds	r7, #8
 8008230:	46bd      	mov	sp, r7
 8008232:	bd80      	pop	{r7, pc}
 8008234:	e000ed00 	.word	0xe000ed00

08008238 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008238:	b580      	push	{r7, lr}
 800823a:	b082      	sub	sp, #8
 800823c:	af00      	add	r7, sp, #0
 800823e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008246:	4618      	mov	r0, r3
 8008248:	f7fe fdfc 	bl	8006e44 <USBD_LL_Resume>
}
 800824c:	bf00      	nop
 800824e:	3708      	adds	r7, #8
 8008250:	46bd      	mov	sp, r7
 8008252:	bd80      	pop	{r7, pc}

08008254 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008254:	b580      	push	{r7, lr}
 8008256:	b082      	sub	sp, #8
 8008258:	af00      	add	r7, sp, #0
 800825a:	6078      	str	r0, [r7, #4]
 800825c:	460b      	mov	r3, r1
 800825e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008266:	78fa      	ldrb	r2, [r7, #3]
 8008268:	4611      	mov	r1, r2
 800826a:	4618      	mov	r0, r3
 800826c:	f7fe fe4a 	bl	8006f04 <USBD_LL_IsoOUTIncomplete>
}
 8008270:	bf00      	nop
 8008272:	3708      	adds	r7, #8
 8008274:	46bd      	mov	sp, r7
 8008276:	bd80      	pop	{r7, pc}

08008278 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008278:	b580      	push	{r7, lr}
 800827a:	b082      	sub	sp, #8
 800827c:	af00      	add	r7, sp, #0
 800827e:	6078      	str	r0, [r7, #4]
 8008280:	460b      	mov	r3, r1
 8008282:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800828a:	78fa      	ldrb	r2, [r7, #3]
 800828c:	4611      	mov	r1, r2
 800828e:	4618      	mov	r0, r3
 8008290:	f7fe fe12 	bl	8006eb8 <USBD_LL_IsoINIncomplete>
}
 8008294:	bf00      	nop
 8008296:	3708      	adds	r7, #8
 8008298:	46bd      	mov	sp, r7
 800829a:	bd80      	pop	{r7, pc}

0800829c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800829c:	b580      	push	{r7, lr}
 800829e:	b082      	sub	sp, #8
 80082a0:	af00      	add	r7, sp, #0
 80082a2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80082aa:	4618      	mov	r0, r3
 80082ac:	f7fe fe50 	bl	8006f50 <USBD_LL_DevConnected>
}
 80082b0:	bf00      	nop
 80082b2:	3708      	adds	r7, #8
 80082b4:	46bd      	mov	sp, r7
 80082b6:	bd80      	pop	{r7, pc}

080082b8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80082b8:	b580      	push	{r7, lr}
 80082ba:	b082      	sub	sp, #8
 80082bc:	af00      	add	r7, sp, #0
 80082be:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80082c6:	4618      	mov	r0, r3
 80082c8:	f7fe fe4d 	bl	8006f66 <USBD_LL_DevDisconnected>
}
 80082cc:	bf00      	nop
 80082ce:	3708      	adds	r7, #8
 80082d0:	46bd      	mov	sp, r7
 80082d2:	bd80      	pop	{r7, pc}

080082d4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80082d4:	b580      	push	{r7, lr}
 80082d6:	b082      	sub	sp, #8
 80082d8:	af00      	add	r7, sp, #0
 80082da:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	781b      	ldrb	r3, [r3, #0]
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d13c      	bne.n	800835e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80082e4:	4a20      	ldr	r2, [pc, #128]	; (8008368 <USBD_LL_Init+0x94>)
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	4a1e      	ldr	r2, [pc, #120]	; (8008368 <USBD_LL_Init+0x94>)
 80082f0:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80082f4:	4b1c      	ldr	r3, [pc, #112]	; (8008368 <USBD_LL_Init+0x94>)
 80082f6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80082fa:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80082fc:	4b1a      	ldr	r3, [pc, #104]	; (8008368 <USBD_LL_Init+0x94>)
 80082fe:	2204      	movs	r2, #4
 8008300:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8008302:	4b19      	ldr	r3, [pc, #100]	; (8008368 <USBD_LL_Init+0x94>)
 8008304:	2202      	movs	r2, #2
 8008306:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008308:	4b17      	ldr	r3, [pc, #92]	; (8008368 <USBD_LL_Init+0x94>)
 800830a:	2200      	movs	r2, #0
 800830c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800830e:	4b16      	ldr	r3, [pc, #88]	; (8008368 <USBD_LL_Init+0x94>)
 8008310:	2202      	movs	r2, #2
 8008312:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008314:	4b14      	ldr	r3, [pc, #80]	; (8008368 <USBD_LL_Init+0x94>)
 8008316:	2200      	movs	r2, #0
 8008318:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800831a:	4b13      	ldr	r3, [pc, #76]	; (8008368 <USBD_LL_Init+0x94>)
 800831c:	2200      	movs	r2, #0
 800831e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008320:	4b11      	ldr	r3, [pc, #68]	; (8008368 <USBD_LL_Init+0x94>)
 8008322:	2200      	movs	r2, #0
 8008324:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8008326:	4b10      	ldr	r3, [pc, #64]	; (8008368 <USBD_LL_Init+0x94>)
 8008328:	2200      	movs	r2, #0
 800832a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800832c:	4b0e      	ldr	r3, [pc, #56]	; (8008368 <USBD_LL_Init+0x94>)
 800832e:	2200      	movs	r2, #0
 8008330:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8008332:	480d      	ldr	r0, [pc, #52]	; (8008368 <USBD_LL_Init+0x94>)
 8008334:	f7fa fecb 	bl	80030ce <HAL_PCD_Init>
 8008338:	4603      	mov	r3, r0
 800833a:	2b00      	cmp	r3, #0
 800833c:	d001      	beq.n	8008342 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800833e:	f7f9 f8d7 	bl	80014f0 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8008342:	2180      	movs	r1, #128	; 0x80
 8008344:	4808      	ldr	r0, [pc, #32]	; (8008368 <USBD_LL_Init+0x94>)
 8008346:	f7fc f828 	bl	800439a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800834a:	2240      	movs	r2, #64	; 0x40
 800834c:	2100      	movs	r1, #0
 800834e:	4806      	ldr	r0, [pc, #24]	; (8008368 <USBD_LL_Init+0x94>)
 8008350:	f7fb ffdc 	bl	800430c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008354:	2280      	movs	r2, #128	; 0x80
 8008356:	2101      	movs	r1, #1
 8008358:	4803      	ldr	r0, [pc, #12]	; (8008368 <USBD_LL_Init+0x94>)
 800835a:	f7fb ffd7 	bl	800430c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800835e:	2300      	movs	r3, #0
}
 8008360:	4618      	mov	r0, r3
 8008362:	3708      	adds	r7, #8
 8008364:	46bd      	mov	sp, r7
 8008366:	bd80      	pop	{r7, pc}
 8008368:	20001ad4 	.word	0x20001ad4

0800836c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800836c:	b580      	push	{r7, lr}
 800836e:	b084      	sub	sp, #16
 8008370:	af00      	add	r7, sp, #0
 8008372:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008374:	2300      	movs	r3, #0
 8008376:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008378:	2300      	movs	r3, #0
 800837a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008382:	4618      	mov	r0, r3
 8008384:	f7fa ffc0 	bl	8003308 <HAL_PCD_Start>
 8008388:	4603      	mov	r3, r0
 800838a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800838c:	7bfb      	ldrb	r3, [r7, #15]
 800838e:	4618      	mov	r0, r3
 8008390:	f000 f942 	bl	8008618 <USBD_Get_USB_Status>
 8008394:	4603      	mov	r3, r0
 8008396:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008398:	7bbb      	ldrb	r3, [r7, #14]
}
 800839a:	4618      	mov	r0, r3
 800839c:	3710      	adds	r7, #16
 800839e:	46bd      	mov	sp, r7
 80083a0:	bd80      	pop	{r7, pc}

080083a2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80083a2:	b580      	push	{r7, lr}
 80083a4:	b084      	sub	sp, #16
 80083a6:	af00      	add	r7, sp, #0
 80083a8:	6078      	str	r0, [r7, #4]
 80083aa:	4608      	mov	r0, r1
 80083ac:	4611      	mov	r1, r2
 80083ae:	461a      	mov	r2, r3
 80083b0:	4603      	mov	r3, r0
 80083b2:	70fb      	strb	r3, [r7, #3]
 80083b4:	460b      	mov	r3, r1
 80083b6:	70bb      	strb	r3, [r7, #2]
 80083b8:	4613      	mov	r3, r2
 80083ba:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80083bc:	2300      	movs	r3, #0
 80083be:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80083c0:	2300      	movs	r3, #0
 80083c2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80083ca:	78bb      	ldrb	r3, [r7, #2]
 80083cc:	883a      	ldrh	r2, [r7, #0]
 80083ce:	78f9      	ldrb	r1, [r7, #3]
 80083d0:	f7fb fba4 	bl	8003b1c <HAL_PCD_EP_Open>
 80083d4:	4603      	mov	r3, r0
 80083d6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80083d8:	7bfb      	ldrb	r3, [r7, #15]
 80083da:	4618      	mov	r0, r3
 80083dc:	f000 f91c 	bl	8008618 <USBD_Get_USB_Status>
 80083e0:	4603      	mov	r3, r0
 80083e2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80083e4:	7bbb      	ldrb	r3, [r7, #14]
}
 80083e6:	4618      	mov	r0, r3
 80083e8:	3710      	adds	r7, #16
 80083ea:	46bd      	mov	sp, r7
 80083ec:	bd80      	pop	{r7, pc}

080083ee <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80083ee:	b580      	push	{r7, lr}
 80083f0:	b084      	sub	sp, #16
 80083f2:	af00      	add	r7, sp, #0
 80083f4:	6078      	str	r0, [r7, #4]
 80083f6:	460b      	mov	r3, r1
 80083f8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80083fa:	2300      	movs	r3, #0
 80083fc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80083fe:	2300      	movs	r3, #0
 8008400:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008408:	78fa      	ldrb	r2, [r7, #3]
 800840a:	4611      	mov	r1, r2
 800840c:	4618      	mov	r0, r3
 800840e:	f7fb fbed 	bl	8003bec <HAL_PCD_EP_Close>
 8008412:	4603      	mov	r3, r0
 8008414:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008416:	7bfb      	ldrb	r3, [r7, #15]
 8008418:	4618      	mov	r0, r3
 800841a:	f000 f8fd 	bl	8008618 <USBD_Get_USB_Status>
 800841e:	4603      	mov	r3, r0
 8008420:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008422:	7bbb      	ldrb	r3, [r7, #14]
}
 8008424:	4618      	mov	r0, r3
 8008426:	3710      	adds	r7, #16
 8008428:	46bd      	mov	sp, r7
 800842a:	bd80      	pop	{r7, pc}

0800842c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800842c:	b580      	push	{r7, lr}
 800842e:	b084      	sub	sp, #16
 8008430:	af00      	add	r7, sp, #0
 8008432:	6078      	str	r0, [r7, #4]
 8008434:	460b      	mov	r3, r1
 8008436:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008438:	2300      	movs	r3, #0
 800843a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800843c:	2300      	movs	r3, #0
 800843e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008446:	78fa      	ldrb	r2, [r7, #3]
 8008448:	4611      	mov	r1, r2
 800844a:	4618      	mov	r0, r3
 800844c:	f7fb fcc5 	bl	8003dda <HAL_PCD_EP_SetStall>
 8008450:	4603      	mov	r3, r0
 8008452:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008454:	7bfb      	ldrb	r3, [r7, #15]
 8008456:	4618      	mov	r0, r3
 8008458:	f000 f8de 	bl	8008618 <USBD_Get_USB_Status>
 800845c:	4603      	mov	r3, r0
 800845e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008460:	7bbb      	ldrb	r3, [r7, #14]
}
 8008462:	4618      	mov	r0, r3
 8008464:	3710      	adds	r7, #16
 8008466:	46bd      	mov	sp, r7
 8008468:	bd80      	pop	{r7, pc}

0800846a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800846a:	b580      	push	{r7, lr}
 800846c:	b084      	sub	sp, #16
 800846e:	af00      	add	r7, sp, #0
 8008470:	6078      	str	r0, [r7, #4]
 8008472:	460b      	mov	r3, r1
 8008474:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008476:	2300      	movs	r3, #0
 8008478:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800847a:	2300      	movs	r3, #0
 800847c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008484:	78fa      	ldrb	r2, [r7, #3]
 8008486:	4611      	mov	r1, r2
 8008488:	4618      	mov	r0, r3
 800848a:	f7fb fd0a 	bl	8003ea2 <HAL_PCD_EP_ClrStall>
 800848e:	4603      	mov	r3, r0
 8008490:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008492:	7bfb      	ldrb	r3, [r7, #15]
 8008494:	4618      	mov	r0, r3
 8008496:	f000 f8bf 	bl	8008618 <USBD_Get_USB_Status>
 800849a:	4603      	mov	r3, r0
 800849c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800849e:	7bbb      	ldrb	r3, [r7, #14]
}
 80084a0:	4618      	mov	r0, r3
 80084a2:	3710      	adds	r7, #16
 80084a4:	46bd      	mov	sp, r7
 80084a6:	bd80      	pop	{r7, pc}

080084a8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80084a8:	b480      	push	{r7}
 80084aa:	b085      	sub	sp, #20
 80084ac:	af00      	add	r7, sp, #0
 80084ae:	6078      	str	r0, [r7, #4]
 80084b0:	460b      	mov	r3, r1
 80084b2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80084ba:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80084bc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	da0b      	bge.n	80084dc <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80084c4:	78fb      	ldrb	r3, [r7, #3]
 80084c6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80084ca:	68f9      	ldr	r1, [r7, #12]
 80084cc:	4613      	mov	r3, r2
 80084ce:	00db      	lsls	r3, r3, #3
 80084d0:	1a9b      	subs	r3, r3, r2
 80084d2:	009b      	lsls	r3, r3, #2
 80084d4:	440b      	add	r3, r1
 80084d6:	333e      	adds	r3, #62	; 0x3e
 80084d8:	781b      	ldrb	r3, [r3, #0]
 80084da:	e00b      	b.n	80084f4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80084dc:	78fb      	ldrb	r3, [r7, #3]
 80084de:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80084e2:	68f9      	ldr	r1, [r7, #12]
 80084e4:	4613      	mov	r3, r2
 80084e6:	00db      	lsls	r3, r3, #3
 80084e8:	1a9b      	subs	r3, r3, r2
 80084ea:	009b      	lsls	r3, r3, #2
 80084ec:	440b      	add	r3, r1
 80084ee:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80084f2:	781b      	ldrb	r3, [r3, #0]
  }
}
 80084f4:	4618      	mov	r0, r3
 80084f6:	3714      	adds	r7, #20
 80084f8:	46bd      	mov	sp, r7
 80084fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084fe:	4770      	bx	lr

08008500 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008500:	b580      	push	{r7, lr}
 8008502:	b084      	sub	sp, #16
 8008504:	af00      	add	r7, sp, #0
 8008506:	6078      	str	r0, [r7, #4]
 8008508:	460b      	mov	r3, r1
 800850a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800850c:	2300      	movs	r3, #0
 800850e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008510:	2300      	movs	r3, #0
 8008512:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800851a:	78fa      	ldrb	r2, [r7, #3]
 800851c:	4611      	mov	r1, r2
 800851e:	4618      	mov	r0, r3
 8008520:	f7fb fad7 	bl	8003ad2 <HAL_PCD_SetAddress>
 8008524:	4603      	mov	r3, r0
 8008526:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008528:	7bfb      	ldrb	r3, [r7, #15]
 800852a:	4618      	mov	r0, r3
 800852c:	f000 f874 	bl	8008618 <USBD_Get_USB_Status>
 8008530:	4603      	mov	r3, r0
 8008532:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008534:	7bbb      	ldrb	r3, [r7, #14]
}
 8008536:	4618      	mov	r0, r3
 8008538:	3710      	adds	r7, #16
 800853a:	46bd      	mov	sp, r7
 800853c:	bd80      	pop	{r7, pc}

0800853e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800853e:	b580      	push	{r7, lr}
 8008540:	b086      	sub	sp, #24
 8008542:	af00      	add	r7, sp, #0
 8008544:	60f8      	str	r0, [r7, #12]
 8008546:	607a      	str	r2, [r7, #4]
 8008548:	603b      	str	r3, [r7, #0]
 800854a:	460b      	mov	r3, r1
 800854c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800854e:	2300      	movs	r3, #0
 8008550:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008552:	2300      	movs	r3, #0
 8008554:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800855c:	7af9      	ldrb	r1, [r7, #11]
 800855e:	683b      	ldr	r3, [r7, #0]
 8008560:	687a      	ldr	r2, [r7, #4]
 8008562:	f7fb fbf0 	bl	8003d46 <HAL_PCD_EP_Transmit>
 8008566:	4603      	mov	r3, r0
 8008568:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800856a:	7dfb      	ldrb	r3, [r7, #23]
 800856c:	4618      	mov	r0, r3
 800856e:	f000 f853 	bl	8008618 <USBD_Get_USB_Status>
 8008572:	4603      	mov	r3, r0
 8008574:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008576:	7dbb      	ldrb	r3, [r7, #22]
}
 8008578:	4618      	mov	r0, r3
 800857a:	3718      	adds	r7, #24
 800857c:	46bd      	mov	sp, r7
 800857e:	bd80      	pop	{r7, pc}

08008580 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008580:	b580      	push	{r7, lr}
 8008582:	b086      	sub	sp, #24
 8008584:	af00      	add	r7, sp, #0
 8008586:	60f8      	str	r0, [r7, #12]
 8008588:	607a      	str	r2, [r7, #4]
 800858a:	603b      	str	r3, [r7, #0]
 800858c:	460b      	mov	r3, r1
 800858e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008590:	2300      	movs	r3, #0
 8008592:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008594:	2300      	movs	r3, #0
 8008596:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800859e:	7af9      	ldrb	r1, [r7, #11]
 80085a0:	683b      	ldr	r3, [r7, #0]
 80085a2:	687a      	ldr	r2, [r7, #4]
 80085a4:	f7fb fb6c 	bl	8003c80 <HAL_PCD_EP_Receive>
 80085a8:	4603      	mov	r3, r0
 80085aa:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80085ac:	7dfb      	ldrb	r3, [r7, #23]
 80085ae:	4618      	mov	r0, r3
 80085b0:	f000 f832 	bl	8008618 <USBD_Get_USB_Status>
 80085b4:	4603      	mov	r3, r0
 80085b6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80085b8:	7dbb      	ldrb	r3, [r7, #22]
}
 80085ba:	4618      	mov	r0, r3
 80085bc:	3718      	adds	r7, #24
 80085be:	46bd      	mov	sp, r7
 80085c0:	bd80      	pop	{r7, pc}

080085c2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80085c2:	b580      	push	{r7, lr}
 80085c4:	b082      	sub	sp, #8
 80085c6:	af00      	add	r7, sp, #0
 80085c8:	6078      	str	r0, [r7, #4]
 80085ca:	460b      	mov	r3, r1
 80085cc:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80085d4:	78fa      	ldrb	r2, [r7, #3]
 80085d6:	4611      	mov	r1, r2
 80085d8:	4618      	mov	r0, r3
 80085da:	f7fb fb9c 	bl	8003d16 <HAL_PCD_EP_GetRxCount>
 80085de:	4603      	mov	r3, r0
}
 80085e0:	4618      	mov	r0, r3
 80085e2:	3708      	adds	r7, #8
 80085e4:	46bd      	mov	sp, r7
 80085e6:	bd80      	pop	{r7, pc}

080085e8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80085e8:	b480      	push	{r7}
 80085ea:	b083      	sub	sp, #12
 80085ec:	af00      	add	r7, sp, #0
 80085ee:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80085f0:	4b03      	ldr	r3, [pc, #12]	; (8008600 <USBD_static_malloc+0x18>)
}
 80085f2:	4618      	mov	r0, r3
 80085f4:	370c      	adds	r7, #12
 80085f6:	46bd      	mov	sp, r7
 80085f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085fc:	4770      	bx	lr
 80085fe:	bf00      	nop
 8008600:	20000378 	.word	0x20000378

08008604 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008604:	b480      	push	{r7}
 8008606:	b083      	sub	sp, #12
 8008608:	af00      	add	r7, sp, #0
 800860a:	6078      	str	r0, [r7, #4]

}
 800860c:	bf00      	nop
 800860e:	370c      	adds	r7, #12
 8008610:	46bd      	mov	sp, r7
 8008612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008616:	4770      	bx	lr

08008618 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008618:	b480      	push	{r7}
 800861a:	b085      	sub	sp, #20
 800861c:	af00      	add	r7, sp, #0
 800861e:	4603      	mov	r3, r0
 8008620:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008622:	2300      	movs	r3, #0
 8008624:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008626:	79fb      	ldrb	r3, [r7, #7]
 8008628:	2b03      	cmp	r3, #3
 800862a:	d817      	bhi.n	800865c <USBD_Get_USB_Status+0x44>
 800862c:	a201      	add	r2, pc, #4	; (adr r2, 8008634 <USBD_Get_USB_Status+0x1c>)
 800862e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008632:	bf00      	nop
 8008634:	08008645 	.word	0x08008645
 8008638:	0800864b 	.word	0x0800864b
 800863c:	08008651 	.word	0x08008651
 8008640:	08008657 	.word	0x08008657
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008644:	2300      	movs	r3, #0
 8008646:	73fb      	strb	r3, [r7, #15]
    break;
 8008648:	e00b      	b.n	8008662 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800864a:	2303      	movs	r3, #3
 800864c:	73fb      	strb	r3, [r7, #15]
    break;
 800864e:	e008      	b.n	8008662 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008650:	2301      	movs	r3, #1
 8008652:	73fb      	strb	r3, [r7, #15]
    break;
 8008654:	e005      	b.n	8008662 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008656:	2303      	movs	r3, #3
 8008658:	73fb      	strb	r3, [r7, #15]
    break;
 800865a:	e002      	b.n	8008662 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800865c:	2303      	movs	r3, #3
 800865e:	73fb      	strb	r3, [r7, #15]
    break;
 8008660:	bf00      	nop
  }
  return usb_status;
 8008662:	7bfb      	ldrb	r3, [r7, #15]
}
 8008664:	4618      	mov	r0, r3
 8008666:	3714      	adds	r7, #20
 8008668:	46bd      	mov	sp, r7
 800866a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800866e:	4770      	bx	lr

08008670 <__errno>:
 8008670:	4b01      	ldr	r3, [pc, #4]	; (8008678 <__errno+0x8>)
 8008672:	6818      	ldr	r0, [r3, #0]
 8008674:	4770      	bx	lr
 8008676:	bf00      	nop
 8008678:	20000180 	.word	0x20000180

0800867c <__libc_init_array>:
 800867c:	b570      	push	{r4, r5, r6, lr}
 800867e:	4d0d      	ldr	r5, [pc, #52]	; (80086b4 <__libc_init_array+0x38>)
 8008680:	4c0d      	ldr	r4, [pc, #52]	; (80086b8 <__libc_init_array+0x3c>)
 8008682:	1b64      	subs	r4, r4, r5
 8008684:	10a4      	asrs	r4, r4, #2
 8008686:	2600      	movs	r6, #0
 8008688:	42a6      	cmp	r6, r4
 800868a:	d109      	bne.n	80086a0 <__libc_init_array+0x24>
 800868c:	4d0b      	ldr	r5, [pc, #44]	; (80086bc <__libc_init_array+0x40>)
 800868e:	4c0c      	ldr	r4, [pc, #48]	; (80086c0 <__libc_init_array+0x44>)
 8008690:	f004 fc46 	bl	800cf20 <_init>
 8008694:	1b64      	subs	r4, r4, r5
 8008696:	10a4      	asrs	r4, r4, #2
 8008698:	2600      	movs	r6, #0
 800869a:	42a6      	cmp	r6, r4
 800869c:	d105      	bne.n	80086aa <__libc_init_array+0x2e>
 800869e:	bd70      	pop	{r4, r5, r6, pc}
 80086a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80086a4:	4798      	blx	r3
 80086a6:	3601      	adds	r6, #1
 80086a8:	e7ee      	b.n	8008688 <__libc_init_array+0xc>
 80086aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80086ae:	4798      	blx	r3
 80086b0:	3601      	adds	r6, #1
 80086b2:	e7f2      	b.n	800869a <__libc_init_array+0x1e>
 80086b4:	0800d46c 	.word	0x0800d46c
 80086b8:	0800d46c 	.word	0x0800d46c
 80086bc:	0800d46c 	.word	0x0800d46c
 80086c0:	0800d470 	.word	0x0800d470

080086c4 <memset>:
 80086c4:	4402      	add	r2, r0
 80086c6:	4603      	mov	r3, r0
 80086c8:	4293      	cmp	r3, r2
 80086ca:	d100      	bne.n	80086ce <memset+0xa>
 80086cc:	4770      	bx	lr
 80086ce:	f803 1b01 	strb.w	r1, [r3], #1
 80086d2:	e7f9      	b.n	80086c8 <memset+0x4>

080086d4 <__cvt>:
 80086d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80086d8:	ec55 4b10 	vmov	r4, r5, d0
 80086dc:	2d00      	cmp	r5, #0
 80086de:	460e      	mov	r6, r1
 80086e0:	4619      	mov	r1, r3
 80086e2:	462b      	mov	r3, r5
 80086e4:	bfbb      	ittet	lt
 80086e6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80086ea:	461d      	movlt	r5, r3
 80086ec:	2300      	movge	r3, #0
 80086ee:	232d      	movlt	r3, #45	; 0x2d
 80086f0:	700b      	strb	r3, [r1, #0]
 80086f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80086f4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80086f8:	4691      	mov	r9, r2
 80086fa:	f023 0820 	bic.w	r8, r3, #32
 80086fe:	bfbc      	itt	lt
 8008700:	4622      	movlt	r2, r4
 8008702:	4614      	movlt	r4, r2
 8008704:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008708:	d005      	beq.n	8008716 <__cvt+0x42>
 800870a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800870e:	d100      	bne.n	8008712 <__cvt+0x3e>
 8008710:	3601      	adds	r6, #1
 8008712:	2102      	movs	r1, #2
 8008714:	e000      	b.n	8008718 <__cvt+0x44>
 8008716:	2103      	movs	r1, #3
 8008718:	ab03      	add	r3, sp, #12
 800871a:	9301      	str	r3, [sp, #4]
 800871c:	ab02      	add	r3, sp, #8
 800871e:	9300      	str	r3, [sp, #0]
 8008720:	ec45 4b10 	vmov	d0, r4, r5
 8008724:	4653      	mov	r3, sl
 8008726:	4632      	mov	r2, r6
 8008728:	f001 fdb6 	bl	800a298 <_dtoa_r>
 800872c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008730:	4607      	mov	r7, r0
 8008732:	d102      	bne.n	800873a <__cvt+0x66>
 8008734:	f019 0f01 	tst.w	r9, #1
 8008738:	d022      	beq.n	8008780 <__cvt+0xac>
 800873a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800873e:	eb07 0906 	add.w	r9, r7, r6
 8008742:	d110      	bne.n	8008766 <__cvt+0x92>
 8008744:	783b      	ldrb	r3, [r7, #0]
 8008746:	2b30      	cmp	r3, #48	; 0x30
 8008748:	d10a      	bne.n	8008760 <__cvt+0x8c>
 800874a:	2200      	movs	r2, #0
 800874c:	2300      	movs	r3, #0
 800874e:	4620      	mov	r0, r4
 8008750:	4629      	mov	r1, r5
 8008752:	f7f8 f9c1 	bl	8000ad8 <__aeabi_dcmpeq>
 8008756:	b918      	cbnz	r0, 8008760 <__cvt+0x8c>
 8008758:	f1c6 0601 	rsb	r6, r6, #1
 800875c:	f8ca 6000 	str.w	r6, [sl]
 8008760:	f8da 3000 	ldr.w	r3, [sl]
 8008764:	4499      	add	r9, r3
 8008766:	2200      	movs	r2, #0
 8008768:	2300      	movs	r3, #0
 800876a:	4620      	mov	r0, r4
 800876c:	4629      	mov	r1, r5
 800876e:	f7f8 f9b3 	bl	8000ad8 <__aeabi_dcmpeq>
 8008772:	b108      	cbz	r0, 8008778 <__cvt+0xa4>
 8008774:	f8cd 900c 	str.w	r9, [sp, #12]
 8008778:	2230      	movs	r2, #48	; 0x30
 800877a:	9b03      	ldr	r3, [sp, #12]
 800877c:	454b      	cmp	r3, r9
 800877e:	d307      	bcc.n	8008790 <__cvt+0xbc>
 8008780:	9b03      	ldr	r3, [sp, #12]
 8008782:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008784:	1bdb      	subs	r3, r3, r7
 8008786:	4638      	mov	r0, r7
 8008788:	6013      	str	r3, [r2, #0]
 800878a:	b004      	add	sp, #16
 800878c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008790:	1c59      	adds	r1, r3, #1
 8008792:	9103      	str	r1, [sp, #12]
 8008794:	701a      	strb	r2, [r3, #0]
 8008796:	e7f0      	b.n	800877a <__cvt+0xa6>

08008798 <__exponent>:
 8008798:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800879a:	4603      	mov	r3, r0
 800879c:	2900      	cmp	r1, #0
 800879e:	bfb8      	it	lt
 80087a0:	4249      	neglt	r1, r1
 80087a2:	f803 2b02 	strb.w	r2, [r3], #2
 80087a6:	bfb4      	ite	lt
 80087a8:	222d      	movlt	r2, #45	; 0x2d
 80087aa:	222b      	movge	r2, #43	; 0x2b
 80087ac:	2909      	cmp	r1, #9
 80087ae:	7042      	strb	r2, [r0, #1]
 80087b0:	dd2a      	ble.n	8008808 <__exponent+0x70>
 80087b2:	f10d 0407 	add.w	r4, sp, #7
 80087b6:	46a4      	mov	ip, r4
 80087b8:	270a      	movs	r7, #10
 80087ba:	46a6      	mov	lr, r4
 80087bc:	460a      	mov	r2, r1
 80087be:	fb91 f6f7 	sdiv	r6, r1, r7
 80087c2:	fb07 1516 	mls	r5, r7, r6, r1
 80087c6:	3530      	adds	r5, #48	; 0x30
 80087c8:	2a63      	cmp	r2, #99	; 0x63
 80087ca:	f104 34ff 	add.w	r4, r4, #4294967295
 80087ce:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80087d2:	4631      	mov	r1, r6
 80087d4:	dcf1      	bgt.n	80087ba <__exponent+0x22>
 80087d6:	3130      	adds	r1, #48	; 0x30
 80087d8:	f1ae 0502 	sub.w	r5, lr, #2
 80087dc:	f804 1c01 	strb.w	r1, [r4, #-1]
 80087e0:	1c44      	adds	r4, r0, #1
 80087e2:	4629      	mov	r1, r5
 80087e4:	4561      	cmp	r1, ip
 80087e6:	d30a      	bcc.n	80087fe <__exponent+0x66>
 80087e8:	f10d 0209 	add.w	r2, sp, #9
 80087ec:	eba2 020e 	sub.w	r2, r2, lr
 80087f0:	4565      	cmp	r5, ip
 80087f2:	bf88      	it	hi
 80087f4:	2200      	movhi	r2, #0
 80087f6:	4413      	add	r3, r2
 80087f8:	1a18      	subs	r0, r3, r0
 80087fa:	b003      	add	sp, #12
 80087fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80087fe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008802:	f804 2f01 	strb.w	r2, [r4, #1]!
 8008806:	e7ed      	b.n	80087e4 <__exponent+0x4c>
 8008808:	2330      	movs	r3, #48	; 0x30
 800880a:	3130      	adds	r1, #48	; 0x30
 800880c:	7083      	strb	r3, [r0, #2]
 800880e:	70c1      	strb	r1, [r0, #3]
 8008810:	1d03      	adds	r3, r0, #4
 8008812:	e7f1      	b.n	80087f8 <__exponent+0x60>

08008814 <_printf_float>:
 8008814:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008818:	ed2d 8b02 	vpush	{d8}
 800881c:	b08d      	sub	sp, #52	; 0x34
 800881e:	460c      	mov	r4, r1
 8008820:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8008824:	4616      	mov	r6, r2
 8008826:	461f      	mov	r7, r3
 8008828:	4605      	mov	r5, r0
 800882a:	f002 fe91 	bl	800b550 <_localeconv_r>
 800882e:	f8d0 a000 	ldr.w	sl, [r0]
 8008832:	4650      	mov	r0, sl
 8008834:	f7f7 fcd4 	bl	80001e0 <strlen>
 8008838:	2300      	movs	r3, #0
 800883a:	930a      	str	r3, [sp, #40]	; 0x28
 800883c:	6823      	ldr	r3, [r4, #0]
 800883e:	9305      	str	r3, [sp, #20]
 8008840:	f8d8 3000 	ldr.w	r3, [r8]
 8008844:	f894 b018 	ldrb.w	fp, [r4, #24]
 8008848:	3307      	adds	r3, #7
 800884a:	f023 0307 	bic.w	r3, r3, #7
 800884e:	f103 0208 	add.w	r2, r3, #8
 8008852:	f8c8 2000 	str.w	r2, [r8]
 8008856:	e9d3 2300 	ldrd	r2, r3, [r3]
 800885a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800885e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8008862:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008866:	9307      	str	r3, [sp, #28]
 8008868:	f8cd 8018 	str.w	r8, [sp, #24]
 800886c:	ee08 0a10 	vmov	s16, r0
 8008870:	4b9f      	ldr	r3, [pc, #636]	; (8008af0 <_printf_float+0x2dc>)
 8008872:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008876:	f04f 32ff 	mov.w	r2, #4294967295
 800887a:	f7f8 f95f 	bl	8000b3c <__aeabi_dcmpun>
 800887e:	bb88      	cbnz	r0, 80088e4 <_printf_float+0xd0>
 8008880:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008884:	4b9a      	ldr	r3, [pc, #616]	; (8008af0 <_printf_float+0x2dc>)
 8008886:	f04f 32ff 	mov.w	r2, #4294967295
 800888a:	f7f8 f939 	bl	8000b00 <__aeabi_dcmple>
 800888e:	bb48      	cbnz	r0, 80088e4 <_printf_float+0xd0>
 8008890:	2200      	movs	r2, #0
 8008892:	2300      	movs	r3, #0
 8008894:	4640      	mov	r0, r8
 8008896:	4649      	mov	r1, r9
 8008898:	f7f8 f928 	bl	8000aec <__aeabi_dcmplt>
 800889c:	b110      	cbz	r0, 80088a4 <_printf_float+0x90>
 800889e:	232d      	movs	r3, #45	; 0x2d
 80088a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80088a4:	4b93      	ldr	r3, [pc, #588]	; (8008af4 <_printf_float+0x2e0>)
 80088a6:	4894      	ldr	r0, [pc, #592]	; (8008af8 <_printf_float+0x2e4>)
 80088a8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80088ac:	bf94      	ite	ls
 80088ae:	4698      	movls	r8, r3
 80088b0:	4680      	movhi	r8, r0
 80088b2:	2303      	movs	r3, #3
 80088b4:	6123      	str	r3, [r4, #16]
 80088b6:	9b05      	ldr	r3, [sp, #20]
 80088b8:	f023 0204 	bic.w	r2, r3, #4
 80088bc:	6022      	str	r2, [r4, #0]
 80088be:	f04f 0900 	mov.w	r9, #0
 80088c2:	9700      	str	r7, [sp, #0]
 80088c4:	4633      	mov	r3, r6
 80088c6:	aa0b      	add	r2, sp, #44	; 0x2c
 80088c8:	4621      	mov	r1, r4
 80088ca:	4628      	mov	r0, r5
 80088cc:	f000 f9d8 	bl	8008c80 <_printf_common>
 80088d0:	3001      	adds	r0, #1
 80088d2:	f040 8090 	bne.w	80089f6 <_printf_float+0x1e2>
 80088d6:	f04f 30ff 	mov.w	r0, #4294967295
 80088da:	b00d      	add	sp, #52	; 0x34
 80088dc:	ecbd 8b02 	vpop	{d8}
 80088e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088e4:	4642      	mov	r2, r8
 80088e6:	464b      	mov	r3, r9
 80088e8:	4640      	mov	r0, r8
 80088ea:	4649      	mov	r1, r9
 80088ec:	f7f8 f926 	bl	8000b3c <__aeabi_dcmpun>
 80088f0:	b140      	cbz	r0, 8008904 <_printf_float+0xf0>
 80088f2:	464b      	mov	r3, r9
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	bfbc      	itt	lt
 80088f8:	232d      	movlt	r3, #45	; 0x2d
 80088fa:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80088fe:	487f      	ldr	r0, [pc, #508]	; (8008afc <_printf_float+0x2e8>)
 8008900:	4b7f      	ldr	r3, [pc, #508]	; (8008b00 <_printf_float+0x2ec>)
 8008902:	e7d1      	b.n	80088a8 <_printf_float+0x94>
 8008904:	6863      	ldr	r3, [r4, #4]
 8008906:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800890a:	9206      	str	r2, [sp, #24]
 800890c:	1c5a      	adds	r2, r3, #1
 800890e:	d13f      	bne.n	8008990 <_printf_float+0x17c>
 8008910:	2306      	movs	r3, #6
 8008912:	6063      	str	r3, [r4, #4]
 8008914:	9b05      	ldr	r3, [sp, #20]
 8008916:	6861      	ldr	r1, [r4, #4]
 8008918:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800891c:	2300      	movs	r3, #0
 800891e:	9303      	str	r3, [sp, #12]
 8008920:	ab0a      	add	r3, sp, #40	; 0x28
 8008922:	e9cd b301 	strd	fp, r3, [sp, #4]
 8008926:	ab09      	add	r3, sp, #36	; 0x24
 8008928:	ec49 8b10 	vmov	d0, r8, r9
 800892c:	9300      	str	r3, [sp, #0]
 800892e:	6022      	str	r2, [r4, #0]
 8008930:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008934:	4628      	mov	r0, r5
 8008936:	f7ff fecd 	bl	80086d4 <__cvt>
 800893a:	9b06      	ldr	r3, [sp, #24]
 800893c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800893e:	2b47      	cmp	r3, #71	; 0x47
 8008940:	4680      	mov	r8, r0
 8008942:	d108      	bne.n	8008956 <_printf_float+0x142>
 8008944:	1cc8      	adds	r0, r1, #3
 8008946:	db02      	blt.n	800894e <_printf_float+0x13a>
 8008948:	6863      	ldr	r3, [r4, #4]
 800894a:	4299      	cmp	r1, r3
 800894c:	dd41      	ble.n	80089d2 <_printf_float+0x1be>
 800894e:	f1ab 0b02 	sub.w	fp, fp, #2
 8008952:	fa5f fb8b 	uxtb.w	fp, fp
 8008956:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800895a:	d820      	bhi.n	800899e <_printf_float+0x18a>
 800895c:	3901      	subs	r1, #1
 800895e:	465a      	mov	r2, fp
 8008960:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008964:	9109      	str	r1, [sp, #36]	; 0x24
 8008966:	f7ff ff17 	bl	8008798 <__exponent>
 800896a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800896c:	1813      	adds	r3, r2, r0
 800896e:	2a01      	cmp	r2, #1
 8008970:	4681      	mov	r9, r0
 8008972:	6123      	str	r3, [r4, #16]
 8008974:	dc02      	bgt.n	800897c <_printf_float+0x168>
 8008976:	6822      	ldr	r2, [r4, #0]
 8008978:	07d2      	lsls	r2, r2, #31
 800897a:	d501      	bpl.n	8008980 <_printf_float+0x16c>
 800897c:	3301      	adds	r3, #1
 800897e:	6123      	str	r3, [r4, #16]
 8008980:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008984:	2b00      	cmp	r3, #0
 8008986:	d09c      	beq.n	80088c2 <_printf_float+0xae>
 8008988:	232d      	movs	r3, #45	; 0x2d
 800898a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800898e:	e798      	b.n	80088c2 <_printf_float+0xae>
 8008990:	9a06      	ldr	r2, [sp, #24]
 8008992:	2a47      	cmp	r2, #71	; 0x47
 8008994:	d1be      	bne.n	8008914 <_printf_float+0x100>
 8008996:	2b00      	cmp	r3, #0
 8008998:	d1bc      	bne.n	8008914 <_printf_float+0x100>
 800899a:	2301      	movs	r3, #1
 800899c:	e7b9      	b.n	8008912 <_printf_float+0xfe>
 800899e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80089a2:	d118      	bne.n	80089d6 <_printf_float+0x1c2>
 80089a4:	2900      	cmp	r1, #0
 80089a6:	6863      	ldr	r3, [r4, #4]
 80089a8:	dd0b      	ble.n	80089c2 <_printf_float+0x1ae>
 80089aa:	6121      	str	r1, [r4, #16]
 80089ac:	b913      	cbnz	r3, 80089b4 <_printf_float+0x1a0>
 80089ae:	6822      	ldr	r2, [r4, #0]
 80089b0:	07d0      	lsls	r0, r2, #31
 80089b2:	d502      	bpl.n	80089ba <_printf_float+0x1a6>
 80089b4:	3301      	adds	r3, #1
 80089b6:	440b      	add	r3, r1
 80089b8:	6123      	str	r3, [r4, #16]
 80089ba:	65a1      	str	r1, [r4, #88]	; 0x58
 80089bc:	f04f 0900 	mov.w	r9, #0
 80089c0:	e7de      	b.n	8008980 <_printf_float+0x16c>
 80089c2:	b913      	cbnz	r3, 80089ca <_printf_float+0x1b6>
 80089c4:	6822      	ldr	r2, [r4, #0]
 80089c6:	07d2      	lsls	r2, r2, #31
 80089c8:	d501      	bpl.n	80089ce <_printf_float+0x1ba>
 80089ca:	3302      	adds	r3, #2
 80089cc:	e7f4      	b.n	80089b8 <_printf_float+0x1a4>
 80089ce:	2301      	movs	r3, #1
 80089d0:	e7f2      	b.n	80089b8 <_printf_float+0x1a4>
 80089d2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80089d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80089d8:	4299      	cmp	r1, r3
 80089da:	db05      	blt.n	80089e8 <_printf_float+0x1d4>
 80089dc:	6823      	ldr	r3, [r4, #0]
 80089de:	6121      	str	r1, [r4, #16]
 80089e0:	07d8      	lsls	r0, r3, #31
 80089e2:	d5ea      	bpl.n	80089ba <_printf_float+0x1a6>
 80089e4:	1c4b      	adds	r3, r1, #1
 80089e6:	e7e7      	b.n	80089b8 <_printf_float+0x1a4>
 80089e8:	2900      	cmp	r1, #0
 80089ea:	bfd4      	ite	le
 80089ec:	f1c1 0202 	rsble	r2, r1, #2
 80089f0:	2201      	movgt	r2, #1
 80089f2:	4413      	add	r3, r2
 80089f4:	e7e0      	b.n	80089b8 <_printf_float+0x1a4>
 80089f6:	6823      	ldr	r3, [r4, #0]
 80089f8:	055a      	lsls	r2, r3, #21
 80089fa:	d407      	bmi.n	8008a0c <_printf_float+0x1f8>
 80089fc:	6923      	ldr	r3, [r4, #16]
 80089fe:	4642      	mov	r2, r8
 8008a00:	4631      	mov	r1, r6
 8008a02:	4628      	mov	r0, r5
 8008a04:	47b8      	blx	r7
 8008a06:	3001      	adds	r0, #1
 8008a08:	d12c      	bne.n	8008a64 <_printf_float+0x250>
 8008a0a:	e764      	b.n	80088d6 <_printf_float+0xc2>
 8008a0c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008a10:	f240 80e0 	bls.w	8008bd4 <_printf_float+0x3c0>
 8008a14:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008a18:	2200      	movs	r2, #0
 8008a1a:	2300      	movs	r3, #0
 8008a1c:	f7f8 f85c 	bl	8000ad8 <__aeabi_dcmpeq>
 8008a20:	2800      	cmp	r0, #0
 8008a22:	d034      	beq.n	8008a8e <_printf_float+0x27a>
 8008a24:	4a37      	ldr	r2, [pc, #220]	; (8008b04 <_printf_float+0x2f0>)
 8008a26:	2301      	movs	r3, #1
 8008a28:	4631      	mov	r1, r6
 8008a2a:	4628      	mov	r0, r5
 8008a2c:	47b8      	blx	r7
 8008a2e:	3001      	adds	r0, #1
 8008a30:	f43f af51 	beq.w	80088d6 <_printf_float+0xc2>
 8008a34:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008a38:	429a      	cmp	r2, r3
 8008a3a:	db02      	blt.n	8008a42 <_printf_float+0x22e>
 8008a3c:	6823      	ldr	r3, [r4, #0]
 8008a3e:	07d8      	lsls	r0, r3, #31
 8008a40:	d510      	bpl.n	8008a64 <_printf_float+0x250>
 8008a42:	ee18 3a10 	vmov	r3, s16
 8008a46:	4652      	mov	r2, sl
 8008a48:	4631      	mov	r1, r6
 8008a4a:	4628      	mov	r0, r5
 8008a4c:	47b8      	blx	r7
 8008a4e:	3001      	adds	r0, #1
 8008a50:	f43f af41 	beq.w	80088d6 <_printf_float+0xc2>
 8008a54:	f04f 0800 	mov.w	r8, #0
 8008a58:	f104 091a 	add.w	r9, r4, #26
 8008a5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a5e:	3b01      	subs	r3, #1
 8008a60:	4543      	cmp	r3, r8
 8008a62:	dc09      	bgt.n	8008a78 <_printf_float+0x264>
 8008a64:	6823      	ldr	r3, [r4, #0]
 8008a66:	079b      	lsls	r3, r3, #30
 8008a68:	f100 8105 	bmi.w	8008c76 <_printf_float+0x462>
 8008a6c:	68e0      	ldr	r0, [r4, #12]
 8008a6e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008a70:	4298      	cmp	r0, r3
 8008a72:	bfb8      	it	lt
 8008a74:	4618      	movlt	r0, r3
 8008a76:	e730      	b.n	80088da <_printf_float+0xc6>
 8008a78:	2301      	movs	r3, #1
 8008a7a:	464a      	mov	r2, r9
 8008a7c:	4631      	mov	r1, r6
 8008a7e:	4628      	mov	r0, r5
 8008a80:	47b8      	blx	r7
 8008a82:	3001      	adds	r0, #1
 8008a84:	f43f af27 	beq.w	80088d6 <_printf_float+0xc2>
 8008a88:	f108 0801 	add.w	r8, r8, #1
 8008a8c:	e7e6      	b.n	8008a5c <_printf_float+0x248>
 8008a8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	dc39      	bgt.n	8008b08 <_printf_float+0x2f4>
 8008a94:	4a1b      	ldr	r2, [pc, #108]	; (8008b04 <_printf_float+0x2f0>)
 8008a96:	2301      	movs	r3, #1
 8008a98:	4631      	mov	r1, r6
 8008a9a:	4628      	mov	r0, r5
 8008a9c:	47b8      	blx	r7
 8008a9e:	3001      	adds	r0, #1
 8008aa0:	f43f af19 	beq.w	80088d6 <_printf_float+0xc2>
 8008aa4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008aa8:	4313      	orrs	r3, r2
 8008aaa:	d102      	bne.n	8008ab2 <_printf_float+0x29e>
 8008aac:	6823      	ldr	r3, [r4, #0]
 8008aae:	07d9      	lsls	r1, r3, #31
 8008ab0:	d5d8      	bpl.n	8008a64 <_printf_float+0x250>
 8008ab2:	ee18 3a10 	vmov	r3, s16
 8008ab6:	4652      	mov	r2, sl
 8008ab8:	4631      	mov	r1, r6
 8008aba:	4628      	mov	r0, r5
 8008abc:	47b8      	blx	r7
 8008abe:	3001      	adds	r0, #1
 8008ac0:	f43f af09 	beq.w	80088d6 <_printf_float+0xc2>
 8008ac4:	f04f 0900 	mov.w	r9, #0
 8008ac8:	f104 0a1a 	add.w	sl, r4, #26
 8008acc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ace:	425b      	negs	r3, r3
 8008ad0:	454b      	cmp	r3, r9
 8008ad2:	dc01      	bgt.n	8008ad8 <_printf_float+0x2c4>
 8008ad4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008ad6:	e792      	b.n	80089fe <_printf_float+0x1ea>
 8008ad8:	2301      	movs	r3, #1
 8008ada:	4652      	mov	r2, sl
 8008adc:	4631      	mov	r1, r6
 8008ade:	4628      	mov	r0, r5
 8008ae0:	47b8      	blx	r7
 8008ae2:	3001      	adds	r0, #1
 8008ae4:	f43f aef7 	beq.w	80088d6 <_printf_float+0xc2>
 8008ae8:	f109 0901 	add.w	r9, r9, #1
 8008aec:	e7ee      	b.n	8008acc <_printf_float+0x2b8>
 8008aee:	bf00      	nop
 8008af0:	7fefffff 	.word	0x7fefffff
 8008af4:	0800cfb0 	.word	0x0800cfb0
 8008af8:	0800cfb4 	.word	0x0800cfb4
 8008afc:	0800cfbc 	.word	0x0800cfbc
 8008b00:	0800cfb8 	.word	0x0800cfb8
 8008b04:	0800cfc0 	.word	0x0800cfc0
 8008b08:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008b0a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008b0c:	429a      	cmp	r2, r3
 8008b0e:	bfa8      	it	ge
 8008b10:	461a      	movge	r2, r3
 8008b12:	2a00      	cmp	r2, #0
 8008b14:	4691      	mov	r9, r2
 8008b16:	dc37      	bgt.n	8008b88 <_printf_float+0x374>
 8008b18:	f04f 0b00 	mov.w	fp, #0
 8008b1c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008b20:	f104 021a 	add.w	r2, r4, #26
 8008b24:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008b26:	9305      	str	r3, [sp, #20]
 8008b28:	eba3 0309 	sub.w	r3, r3, r9
 8008b2c:	455b      	cmp	r3, fp
 8008b2e:	dc33      	bgt.n	8008b98 <_printf_float+0x384>
 8008b30:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008b34:	429a      	cmp	r2, r3
 8008b36:	db3b      	blt.n	8008bb0 <_printf_float+0x39c>
 8008b38:	6823      	ldr	r3, [r4, #0]
 8008b3a:	07da      	lsls	r2, r3, #31
 8008b3c:	d438      	bmi.n	8008bb0 <_printf_float+0x39c>
 8008b3e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008b40:	9b05      	ldr	r3, [sp, #20]
 8008b42:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008b44:	1ad3      	subs	r3, r2, r3
 8008b46:	eba2 0901 	sub.w	r9, r2, r1
 8008b4a:	4599      	cmp	r9, r3
 8008b4c:	bfa8      	it	ge
 8008b4e:	4699      	movge	r9, r3
 8008b50:	f1b9 0f00 	cmp.w	r9, #0
 8008b54:	dc35      	bgt.n	8008bc2 <_printf_float+0x3ae>
 8008b56:	f04f 0800 	mov.w	r8, #0
 8008b5a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008b5e:	f104 0a1a 	add.w	sl, r4, #26
 8008b62:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008b66:	1a9b      	subs	r3, r3, r2
 8008b68:	eba3 0309 	sub.w	r3, r3, r9
 8008b6c:	4543      	cmp	r3, r8
 8008b6e:	f77f af79 	ble.w	8008a64 <_printf_float+0x250>
 8008b72:	2301      	movs	r3, #1
 8008b74:	4652      	mov	r2, sl
 8008b76:	4631      	mov	r1, r6
 8008b78:	4628      	mov	r0, r5
 8008b7a:	47b8      	blx	r7
 8008b7c:	3001      	adds	r0, #1
 8008b7e:	f43f aeaa 	beq.w	80088d6 <_printf_float+0xc2>
 8008b82:	f108 0801 	add.w	r8, r8, #1
 8008b86:	e7ec      	b.n	8008b62 <_printf_float+0x34e>
 8008b88:	4613      	mov	r3, r2
 8008b8a:	4631      	mov	r1, r6
 8008b8c:	4642      	mov	r2, r8
 8008b8e:	4628      	mov	r0, r5
 8008b90:	47b8      	blx	r7
 8008b92:	3001      	adds	r0, #1
 8008b94:	d1c0      	bne.n	8008b18 <_printf_float+0x304>
 8008b96:	e69e      	b.n	80088d6 <_printf_float+0xc2>
 8008b98:	2301      	movs	r3, #1
 8008b9a:	4631      	mov	r1, r6
 8008b9c:	4628      	mov	r0, r5
 8008b9e:	9205      	str	r2, [sp, #20]
 8008ba0:	47b8      	blx	r7
 8008ba2:	3001      	adds	r0, #1
 8008ba4:	f43f ae97 	beq.w	80088d6 <_printf_float+0xc2>
 8008ba8:	9a05      	ldr	r2, [sp, #20]
 8008baa:	f10b 0b01 	add.w	fp, fp, #1
 8008bae:	e7b9      	b.n	8008b24 <_printf_float+0x310>
 8008bb0:	ee18 3a10 	vmov	r3, s16
 8008bb4:	4652      	mov	r2, sl
 8008bb6:	4631      	mov	r1, r6
 8008bb8:	4628      	mov	r0, r5
 8008bba:	47b8      	blx	r7
 8008bbc:	3001      	adds	r0, #1
 8008bbe:	d1be      	bne.n	8008b3e <_printf_float+0x32a>
 8008bc0:	e689      	b.n	80088d6 <_printf_float+0xc2>
 8008bc2:	9a05      	ldr	r2, [sp, #20]
 8008bc4:	464b      	mov	r3, r9
 8008bc6:	4442      	add	r2, r8
 8008bc8:	4631      	mov	r1, r6
 8008bca:	4628      	mov	r0, r5
 8008bcc:	47b8      	blx	r7
 8008bce:	3001      	adds	r0, #1
 8008bd0:	d1c1      	bne.n	8008b56 <_printf_float+0x342>
 8008bd2:	e680      	b.n	80088d6 <_printf_float+0xc2>
 8008bd4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008bd6:	2a01      	cmp	r2, #1
 8008bd8:	dc01      	bgt.n	8008bde <_printf_float+0x3ca>
 8008bda:	07db      	lsls	r3, r3, #31
 8008bdc:	d538      	bpl.n	8008c50 <_printf_float+0x43c>
 8008bde:	2301      	movs	r3, #1
 8008be0:	4642      	mov	r2, r8
 8008be2:	4631      	mov	r1, r6
 8008be4:	4628      	mov	r0, r5
 8008be6:	47b8      	blx	r7
 8008be8:	3001      	adds	r0, #1
 8008bea:	f43f ae74 	beq.w	80088d6 <_printf_float+0xc2>
 8008bee:	ee18 3a10 	vmov	r3, s16
 8008bf2:	4652      	mov	r2, sl
 8008bf4:	4631      	mov	r1, r6
 8008bf6:	4628      	mov	r0, r5
 8008bf8:	47b8      	blx	r7
 8008bfa:	3001      	adds	r0, #1
 8008bfc:	f43f ae6b 	beq.w	80088d6 <_printf_float+0xc2>
 8008c00:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008c04:	2200      	movs	r2, #0
 8008c06:	2300      	movs	r3, #0
 8008c08:	f7f7 ff66 	bl	8000ad8 <__aeabi_dcmpeq>
 8008c0c:	b9d8      	cbnz	r0, 8008c46 <_printf_float+0x432>
 8008c0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008c10:	f108 0201 	add.w	r2, r8, #1
 8008c14:	3b01      	subs	r3, #1
 8008c16:	4631      	mov	r1, r6
 8008c18:	4628      	mov	r0, r5
 8008c1a:	47b8      	blx	r7
 8008c1c:	3001      	adds	r0, #1
 8008c1e:	d10e      	bne.n	8008c3e <_printf_float+0x42a>
 8008c20:	e659      	b.n	80088d6 <_printf_float+0xc2>
 8008c22:	2301      	movs	r3, #1
 8008c24:	4652      	mov	r2, sl
 8008c26:	4631      	mov	r1, r6
 8008c28:	4628      	mov	r0, r5
 8008c2a:	47b8      	blx	r7
 8008c2c:	3001      	adds	r0, #1
 8008c2e:	f43f ae52 	beq.w	80088d6 <_printf_float+0xc2>
 8008c32:	f108 0801 	add.w	r8, r8, #1
 8008c36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008c38:	3b01      	subs	r3, #1
 8008c3a:	4543      	cmp	r3, r8
 8008c3c:	dcf1      	bgt.n	8008c22 <_printf_float+0x40e>
 8008c3e:	464b      	mov	r3, r9
 8008c40:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008c44:	e6dc      	b.n	8008a00 <_printf_float+0x1ec>
 8008c46:	f04f 0800 	mov.w	r8, #0
 8008c4a:	f104 0a1a 	add.w	sl, r4, #26
 8008c4e:	e7f2      	b.n	8008c36 <_printf_float+0x422>
 8008c50:	2301      	movs	r3, #1
 8008c52:	4642      	mov	r2, r8
 8008c54:	e7df      	b.n	8008c16 <_printf_float+0x402>
 8008c56:	2301      	movs	r3, #1
 8008c58:	464a      	mov	r2, r9
 8008c5a:	4631      	mov	r1, r6
 8008c5c:	4628      	mov	r0, r5
 8008c5e:	47b8      	blx	r7
 8008c60:	3001      	adds	r0, #1
 8008c62:	f43f ae38 	beq.w	80088d6 <_printf_float+0xc2>
 8008c66:	f108 0801 	add.w	r8, r8, #1
 8008c6a:	68e3      	ldr	r3, [r4, #12]
 8008c6c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008c6e:	1a5b      	subs	r3, r3, r1
 8008c70:	4543      	cmp	r3, r8
 8008c72:	dcf0      	bgt.n	8008c56 <_printf_float+0x442>
 8008c74:	e6fa      	b.n	8008a6c <_printf_float+0x258>
 8008c76:	f04f 0800 	mov.w	r8, #0
 8008c7a:	f104 0919 	add.w	r9, r4, #25
 8008c7e:	e7f4      	b.n	8008c6a <_printf_float+0x456>

08008c80 <_printf_common>:
 8008c80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c84:	4616      	mov	r6, r2
 8008c86:	4699      	mov	r9, r3
 8008c88:	688a      	ldr	r2, [r1, #8]
 8008c8a:	690b      	ldr	r3, [r1, #16]
 8008c8c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008c90:	4293      	cmp	r3, r2
 8008c92:	bfb8      	it	lt
 8008c94:	4613      	movlt	r3, r2
 8008c96:	6033      	str	r3, [r6, #0]
 8008c98:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008c9c:	4607      	mov	r7, r0
 8008c9e:	460c      	mov	r4, r1
 8008ca0:	b10a      	cbz	r2, 8008ca6 <_printf_common+0x26>
 8008ca2:	3301      	adds	r3, #1
 8008ca4:	6033      	str	r3, [r6, #0]
 8008ca6:	6823      	ldr	r3, [r4, #0]
 8008ca8:	0699      	lsls	r1, r3, #26
 8008caa:	bf42      	ittt	mi
 8008cac:	6833      	ldrmi	r3, [r6, #0]
 8008cae:	3302      	addmi	r3, #2
 8008cb0:	6033      	strmi	r3, [r6, #0]
 8008cb2:	6825      	ldr	r5, [r4, #0]
 8008cb4:	f015 0506 	ands.w	r5, r5, #6
 8008cb8:	d106      	bne.n	8008cc8 <_printf_common+0x48>
 8008cba:	f104 0a19 	add.w	sl, r4, #25
 8008cbe:	68e3      	ldr	r3, [r4, #12]
 8008cc0:	6832      	ldr	r2, [r6, #0]
 8008cc2:	1a9b      	subs	r3, r3, r2
 8008cc4:	42ab      	cmp	r3, r5
 8008cc6:	dc26      	bgt.n	8008d16 <_printf_common+0x96>
 8008cc8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008ccc:	1e13      	subs	r3, r2, #0
 8008cce:	6822      	ldr	r2, [r4, #0]
 8008cd0:	bf18      	it	ne
 8008cd2:	2301      	movne	r3, #1
 8008cd4:	0692      	lsls	r2, r2, #26
 8008cd6:	d42b      	bmi.n	8008d30 <_printf_common+0xb0>
 8008cd8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008cdc:	4649      	mov	r1, r9
 8008cde:	4638      	mov	r0, r7
 8008ce0:	47c0      	blx	r8
 8008ce2:	3001      	adds	r0, #1
 8008ce4:	d01e      	beq.n	8008d24 <_printf_common+0xa4>
 8008ce6:	6823      	ldr	r3, [r4, #0]
 8008ce8:	68e5      	ldr	r5, [r4, #12]
 8008cea:	6832      	ldr	r2, [r6, #0]
 8008cec:	f003 0306 	and.w	r3, r3, #6
 8008cf0:	2b04      	cmp	r3, #4
 8008cf2:	bf08      	it	eq
 8008cf4:	1aad      	subeq	r5, r5, r2
 8008cf6:	68a3      	ldr	r3, [r4, #8]
 8008cf8:	6922      	ldr	r2, [r4, #16]
 8008cfa:	bf0c      	ite	eq
 8008cfc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008d00:	2500      	movne	r5, #0
 8008d02:	4293      	cmp	r3, r2
 8008d04:	bfc4      	itt	gt
 8008d06:	1a9b      	subgt	r3, r3, r2
 8008d08:	18ed      	addgt	r5, r5, r3
 8008d0a:	2600      	movs	r6, #0
 8008d0c:	341a      	adds	r4, #26
 8008d0e:	42b5      	cmp	r5, r6
 8008d10:	d11a      	bne.n	8008d48 <_printf_common+0xc8>
 8008d12:	2000      	movs	r0, #0
 8008d14:	e008      	b.n	8008d28 <_printf_common+0xa8>
 8008d16:	2301      	movs	r3, #1
 8008d18:	4652      	mov	r2, sl
 8008d1a:	4649      	mov	r1, r9
 8008d1c:	4638      	mov	r0, r7
 8008d1e:	47c0      	blx	r8
 8008d20:	3001      	adds	r0, #1
 8008d22:	d103      	bne.n	8008d2c <_printf_common+0xac>
 8008d24:	f04f 30ff 	mov.w	r0, #4294967295
 8008d28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d2c:	3501      	adds	r5, #1
 8008d2e:	e7c6      	b.n	8008cbe <_printf_common+0x3e>
 8008d30:	18e1      	adds	r1, r4, r3
 8008d32:	1c5a      	adds	r2, r3, #1
 8008d34:	2030      	movs	r0, #48	; 0x30
 8008d36:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008d3a:	4422      	add	r2, r4
 8008d3c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008d40:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008d44:	3302      	adds	r3, #2
 8008d46:	e7c7      	b.n	8008cd8 <_printf_common+0x58>
 8008d48:	2301      	movs	r3, #1
 8008d4a:	4622      	mov	r2, r4
 8008d4c:	4649      	mov	r1, r9
 8008d4e:	4638      	mov	r0, r7
 8008d50:	47c0      	blx	r8
 8008d52:	3001      	adds	r0, #1
 8008d54:	d0e6      	beq.n	8008d24 <_printf_common+0xa4>
 8008d56:	3601      	adds	r6, #1
 8008d58:	e7d9      	b.n	8008d0e <_printf_common+0x8e>
	...

08008d5c <_printf_i>:
 8008d5c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008d60:	460c      	mov	r4, r1
 8008d62:	4691      	mov	r9, r2
 8008d64:	7e27      	ldrb	r7, [r4, #24]
 8008d66:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008d68:	2f78      	cmp	r7, #120	; 0x78
 8008d6a:	4680      	mov	r8, r0
 8008d6c:	469a      	mov	sl, r3
 8008d6e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008d72:	d807      	bhi.n	8008d84 <_printf_i+0x28>
 8008d74:	2f62      	cmp	r7, #98	; 0x62
 8008d76:	d80a      	bhi.n	8008d8e <_printf_i+0x32>
 8008d78:	2f00      	cmp	r7, #0
 8008d7a:	f000 80d8 	beq.w	8008f2e <_printf_i+0x1d2>
 8008d7e:	2f58      	cmp	r7, #88	; 0x58
 8008d80:	f000 80a3 	beq.w	8008eca <_printf_i+0x16e>
 8008d84:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008d88:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008d8c:	e03a      	b.n	8008e04 <_printf_i+0xa8>
 8008d8e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008d92:	2b15      	cmp	r3, #21
 8008d94:	d8f6      	bhi.n	8008d84 <_printf_i+0x28>
 8008d96:	a001      	add	r0, pc, #4	; (adr r0, 8008d9c <_printf_i+0x40>)
 8008d98:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8008d9c:	08008df5 	.word	0x08008df5
 8008da0:	08008e09 	.word	0x08008e09
 8008da4:	08008d85 	.word	0x08008d85
 8008da8:	08008d85 	.word	0x08008d85
 8008dac:	08008d85 	.word	0x08008d85
 8008db0:	08008d85 	.word	0x08008d85
 8008db4:	08008e09 	.word	0x08008e09
 8008db8:	08008d85 	.word	0x08008d85
 8008dbc:	08008d85 	.word	0x08008d85
 8008dc0:	08008d85 	.word	0x08008d85
 8008dc4:	08008d85 	.word	0x08008d85
 8008dc8:	08008f15 	.word	0x08008f15
 8008dcc:	08008e39 	.word	0x08008e39
 8008dd0:	08008ef7 	.word	0x08008ef7
 8008dd4:	08008d85 	.word	0x08008d85
 8008dd8:	08008d85 	.word	0x08008d85
 8008ddc:	08008f37 	.word	0x08008f37
 8008de0:	08008d85 	.word	0x08008d85
 8008de4:	08008e39 	.word	0x08008e39
 8008de8:	08008d85 	.word	0x08008d85
 8008dec:	08008d85 	.word	0x08008d85
 8008df0:	08008eff 	.word	0x08008eff
 8008df4:	680b      	ldr	r3, [r1, #0]
 8008df6:	1d1a      	adds	r2, r3, #4
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	600a      	str	r2, [r1, #0]
 8008dfc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008e00:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008e04:	2301      	movs	r3, #1
 8008e06:	e0a3      	b.n	8008f50 <_printf_i+0x1f4>
 8008e08:	6825      	ldr	r5, [r4, #0]
 8008e0a:	6808      	ldr	r0, [r1, #0]
 8008e0c:	062e      	lsls	r6, r5, #24
 8008e0e:	f100 0304 	add.w	r3, r0, #4
 8008e12:	d50a      	bpl.n	8008e2a <_printf_i+0xce>
 8008e14:	6805      	ldr	r5, [r0, #0]
 8008e16:	600b      	str	r3, [r1, #0]
 8008e18:	2d00      	cmp	r5, #0
 8008e1a:	da03      	bge.n	8008e24 <_printf_i+0xc8>
 8008e1c:	232d      	movs	r3, #45	; 0x2d
 8008e1e:	426d      	negs	r5, r5
 8008e20:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008e24:	485e      	ldr	r0, [pc, #376]	; (8008fa0 <_printf_i+0x244>)
 8008e26:	230a      	movs	r3, #10
 8008e28:	e019      	b.n	8008e5e <_printf_i+0x102>
 8008e2a:	f015 0f40 	tst.w	r5, #64	; 0x40
 8008e2e:	6805      	ldr	r5, [r0, #0]
 8008e30:	600b      	str	r3, [r1, #0]
 8008e32:	bf18      	it	ne
 8008e34:	b22d      	sxthne	r5, r5
 8008e36:	e7ef      	b.n	8008e18 <_printf_i+0xbc>
 8008e38:	680b      	ldr	r3, [r1, #0]
 8008e3a:	6825      	ldr	r5, [r4, #0]
 8008e3c:	1d18      	adds	r0, r3, #4
 8008e3e:	6008      	str	r0, [r1, #0]
 8008e40:	0628      	lsls	r0, r5, #24
 8008e42:	d501      	bpl.n	8008e48 <_printf_i+0xec>
 8008e44:	681d      	ldr	r5, [r3, #0]
 8008e46:	e002      	b.n	8008e4e <_printf_i+0xf2>
 8008e48:	0669      	lsls	r1, r5, #25
 8008e4a:	d5fb      	bpl.n	8008e44 <_printf_i+0xe8>
 8008e4c:	881d      	ldrh	r5, [r3, #0]
 8008e4e:	4854      	ldr	r0, [pc, #336]	; (8008fa0 <_printf_i+0x244>)
 8008e50:	2f6f      	cmp	r7, #111	; 0x6f
 8008e52:	bf0c      	ite	eq
 8008e54:	2308      	moveq	r3, #8
 8008e56:	230a      	movne	r3, #10
 8008e58:	2100      	movs	r1, #0
 8008e5a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008e5e:	6866      	ldr	r6, [r4, #4]
 8008e60:	60a6      	str	r6, [r4, #8]
 8008e62:	2e00      	cmp	r6, #0
 8008e64:	bfa2      	ittt	ge
 8008e66:	6821      	ldrge	r1, [r4, #0]
 8008e68:	f021 0104 	bicge.w	r1, r1, #4
 8008e6c:	6021      	strge	r1, [r4, #0]
 8008e6e:	b90d      	cbnz	r5, 8008e74 <_printf_i+0x118>
 8008e70:	2e00      	cmp	r6, #0
 8008e72:	d04d      	beq.n	8008f10 <_printf_i+0x1b4>
 8008e74:	4616      	mov	r6, r2
 8008e76:	fbb5 f1f3 	udiv	r1, r5, r3
 8008e7a:	fb03 5711 	mls	r7, r3, r1, r5
 8008e7e:	5dc7      	ldrb	r7, [r0, r7]
 8008e80:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008e84:	462f      	mov	r7, r5
 8008e86:	42bb      	cmp	r3, r7
 8008e88:	460d      	mov	r5, r1
 8008e8a:	d9f4      	bls.n	8008e76 <_printf_i+0x11a>
 8008e8c:	2b08      	cmp	r3, #8
 8008e8e:	d10b      	bne.n	8008ea8 <_printf_i+0x14c>
 8008e90:	6823      	ldr	r3, [r4, #0]
 8008e92:	07df      	lsls	r7, r3, #31
 8008e94:	d508      	bpl.n	8008ea8 <_printf_i+0x14c>
 8008e96:	6923      	ldr	r3, [r4, #16]
 8008e98:	6861      	ldr	r1, [r4, #4]
 8008e9a:	4299      	cmp	r1, r3
 8008e9c:	bfde      	ittt	le
 8008e9e:	2330      	movle	r3, #48	; 0x30
 8008ea0:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008ea4:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008ea8:	1b92      	subs	r2, r2, r6
 8008eaa:	6122      	str	r2, [r4, #16]
 8008eac:	f8cd a000 	str.w	sl, [sp]
 8008eb0:	464b      	mov	r3, r9
 8008eb2:	aa03      	add	r2, sp, #12
 8008eb4:	4621      	mov	r1, r4
 8008eb6:	4640      	mov	r0, r8
 8008eb8:	f7ff fee2 	bl	8008c80 <_printf_common>
 8008ebc:	3001      	adds	r0, #1
 8008ebe:	d14c      	bne.n	8008f5a <_printf_i+0x1fe>
 8008ec0:	f04f 30ff 	mov.w	r0, #4294967295
 8008ec4:	b004      	add	sp, #16
 8008ec6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008eca:	4835      	ldr	r0, [pc, #212]	; (8008fa0 <_printf_i+0x244>)
 8008ecc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008ed0:	6823      	ldr	r3, [r4, #0]
 8008ed2:	680e      	ldr	r6, [r1, #0]
 8008ed4:	061f      	lsls	r7, r3, #24
 8008ed6:	f856 5b04 	ldr.w	r5, [r6], #4
 8008eda:	600e      	str	r6, [r1, #0]
 8008edc:	d514      	bpl.n	8008f08 <_printf_i+0x1ac>
 8008ede:	07d9      	lsls	r1, r3, #31
 8008ee0:	bf44      	itt	mi
 8008ee2:	f043 0320 	orrmi.w	r3, r3, #32
 8008ee6:	6023      	strmi	r3, [r4, #0]
 8008ee8:	b91d      	cbnz	r5, 8008ef2 <_printf_i+0x196>
 8008eea:	6823      	ldr	r3, [r4, #0]
 8008eec:	f023 0320 	bic.w	r3, r3, #32
 8008ef0:	6023      	str	r3, [r4, #0]
 8008ef2:	2310      	movs	r3, #16
 8008ef4:	e7b0      	b.n	8008e58 <_printf_i+0xfc>
 8008ef6:	6823      	ldr	r3, [r4, #0]
 8008ef8:	f043 0320 	orr.w	r3, r3, #32
 8008efc:	6023      	str	r3, [r4, #0]
 8008efe:	2378      	movs	r3, #120	; 0x78
 8008f00:	4828      	ldr	r0, [pc, #160]	; (8008fa4 <_printf_i+0x248>)
 8008f02:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008f06:	e7e3      	b.n	8008ed0 <_printf_i+0x174>
 8008f08:	065e      	lsls	r6, r3, #25
 8008f0a:	bf48      	it	mi
 8008f0c:	b2ad      	uxthmi	r5, r5
 8008f0e:	e7e6      	b.n	8008ede <_printf_i+0x182>
 8008f10:	4616      	mov	r6, r2
 8008f12:	e7bb      	b.n	8008e8c <_printf_i+0x130>
 8008f14:	680b      	ldr	r3, [r1, #0]
 8008f16:	6826      	ldr	r6, [r4, #0]
 8008f18:	6960      	ldr	r0, [r4, #20]
 8008f1a:	1d1d      	adds	r5, r3, #4
 8008f1c:	600d      	str	r5, [r1, #0]
 8008f1e:	0635      	lsls	r5, r6, #24
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	d501      	bpl.n	8008f28 <_printf_i+0x1cc>
 8008f24:	6018      	str	r0, [r3, #0]
 8008f26:	e002      	b.n	8008f2e <_printf_i+0x1d2>
 8008f28:	0671      	lsls	r1, r6, #25
 8008f2a:	d5fb      	bpl.n	8008f24 <_printf_i+0x1c8>
 8008f2c:	8018      	strh	r0, [r3, #0]
 8008f2e:	2300      	movs	r3, #0
 8008f30:	6123      	str	r3, [r4, #16]
 8008f32:	4616      	mov	r6, r2
 8008f34:	e7ba      	b.n	8008eac <_printf_i+0x150>
 8008f36:	680b      	ldr	r3, [r1, #0]
 8008f38:	1d1a      	adds	r2, r3, #4
 8008f3a:	600a      	str	r2, [r1, #0]
 8008f3c:	681e      	ldr	r6, [r3, #0]
 8008f3e:	6862      	ldr	r2, [r4, #4]
 8008f40:	2100      	movs	r1, #0
 8008f42:	4630      	mov	r0, r6
 8008f44:	f7f7 f954 	bl	80001f0 <memchr>
 8008f48:	b108      	cbz	r0, 8008f4e <_printf_i+0x1f2>
 8008f4a:	1b80      	subs	r0, r0, r6
 8008f4c:	6060      	str	r0, [r4, #4]
 8008f4e:	6863      	ldr	r3, [r4, #4]
 8008f50:	6123      	str	r3, [r4, #16]
 8008f52:	2300      	movs	r3, #0
 8008f54:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008f58:	e7a8      	b.n	8008eac <_printf_i+0x150>
 8008f5a:	6923      	ldr	r3, [r4, #16]
 8008f5c:	4632      	mov	r2, r6
 8008f5e:	4649      	mov	r1, r9
 8008f60:	4640      	mov	r0, r8
 8008f62:	47d0      	blx	sl
 8008f64:	3001      	adds	r0, #1
 8008f66:	d0ab      	beq.n	8008ec0 <_printf_i+0x164>
 8008f68:	6823      	ldr	r3, [r4, #0]
 8008f6a:	079b      	lsls	r3, r3, #30
 8008f6c:	d413      	bmi.n	8008f96 <_printf_i+0x23a>
 8008f6e:	68e0      	ldr	r0, [r4, #12]
 8008f70:	9b03      	ldr	r3, [sp, #12]
 8008f72:	4298      	cmp	r0, r3
 8008f74:	bfb8      	it	lt
 8008f76:	4618      	movlt	r0, r3
 8008f78:	e7a4      	b.n	8008ec4 <_printf_i+0x168>
 8008f7a:	2301      	movs	r3, #1
 8008f7c:	4632      	mov	r2, r6
 8008f7e:	4649      	mov	r1, r9
 8008f80:	4640      	mov	r0, r8
 8008f82:	47d0      	blx	sl
 8008f84:	3001      	adds	r0, #1
 8008f86:	d09b      	beq.n	8008ec0 <_printf_i+0x164>
 8008f88:	3501      	adds	r5, #1
 8008f8a:	68e3      	ldr	r3, [r4, #12]
 8008f8c:	9903      	ldr	r1, [sp, #12]
 8008f8e:	1a5b      	subs	r3, r3, r1
 8008f90:	42ab      	cmp	r3, r5
 8008f92:	dcf2      	bgt.n	8008f7a <_printf_i+0x21e>
 8008f94:	e7eb      	b.n	8008f6e <_printf_i+0x212>
 8008f96:	2500      	movs	r5, #0
 8008f98:	f104 0619 	add.w	r6, r4, #25
 8008f9c:	e7f5      	b.n	8008f8a <_printf_i+0x22e>
 8008f9e:	bf00      	nop
 8008fa0:	0800cfc2 	.word	0x0800cfc2
 8008fa4:	0800cfd3 	.word	0x0800cfd3

08008fa8 <_scanf_float>:
 8008fa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fac:	b087      	sub	sp, #28
 8008fae:	4617      	mov	r7, r2
 8008fb0:	9303      	str	r3, [sp, #12]
 8008fb2:	688b      	ldr	r3, [r1, #8]
 8008fb4:	1e5a      	subs	r2, r3, #1
 8008fb6:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8008fba:	bf83      	ittte	hi
 8008fbc:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8008fc0:	195b      	addhi	r3, r3, r5
 8008fc2:	9302      	strhi	r3, [sp, #8]
 8008fc4:	2300      	movls	r3, #0
 8008fc6:	bf86      	itte	hi
 8008fc8:	f240 135d 	movwhi	r3, #349	; 0x15d
 8008fcc:	608b      	strhi	r3, [r1, #8]
 8008fce:	9302      	strls	r3, [sp, #8]
 8008fd0:	680b      	ldr	r3, [r1, #0]
 8008fd2:	468b      	mov	fp, r1
 8008fd4:	2500      	movs	r5, #0
 8008fd6:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8008fda:	f84b 3b1c 	str.w	r3, [fp], #28
 8008fde:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8008fe2:	4680      	mov	r8, r0
 8008fe4:	460c      	mov	r4, r1
 8008fe6:	465e      	mov	r6, fp
 8008fe8:	46aa      	mov	sl, r5
 8008fea:	46a9      	mov	r9, r5
 8008fec:	9501      	str	r5, [sp, #4]
 8008fee:	68a2      	ldr	r2, [r4, #8]
 8008ff0:	b152      	cbz	r2, 8009008 <_scanf_float+0x60>
 8008ff2:	683b      	ldr	r3, [r7, #0]
 8008ff4:	781b      	ldrb	r3, [r3, #0]
 8008ff6:	2b4e      	cmp	r3, #78	; 0x4e
 8008ff8:	d864      	bhi.n	80090c4 <_scanf_float+0x11c>
 8008ffa:	2b40      	cmp	r3, #64	; 0x40
 8008ffc:	d83c      	bhi.n	8009078 <_scanf_float+0xd0>
 8008ffe:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8009002:	b2c8      	uxtb	r0, r1
 8009004:	280e      	cmp	r0, #14
 8009006:	d93a      	bls.n	800907e <_scanf_float+0xd6>
 8009008:	f1b9 0f00 	cmp.w	r9, #0
 800900c:	d003      	beq.n	8009016 <_scanf_float+0x6e>
 800900e:	6823      	ldr	r3, [r4, #0]
 8009010:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009014:	6023      	str	r3, [r4, #0]
 8009016:	f10a 3aff 	add.w	sl, sl, #4294967295
 800901a:	f1ba 0f01 	cmp.w	sl, #1
 800901e:	f200 8113 	bhi.w	8009248 <_scanf_float+0x2a0>
 8009022:	455e      	cmp	r6, fp
 8009024:	f200 8105 	bhi.w	8009232 <_scanf_float+0x28a>
 8009028:	2501      	movs	r5, #1
 800902a:	4628      	mov	r0, r5
 800902c:	b007      	add	sp, #28
 800902e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009032:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8009036:	2a0d      	cmp	r2, #13
 8009038:	d8e6      	bhi.n	8009008 <_scanf_float+0x60>
 800903a:	a101      	add	r1, pc, #4	; (adr r1, 8009040 <_scanf_float+0x98>)
 800903c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8009040:	0800917f 	.word	0x0800917f
 8009044:	08009009 	.word	0x08009009
 8009048:	08009009 	.word	0x08009009
 800904c:	08009009 	.word	0x08009009
 8009050:	080091df 	.word	0x080091df
 8009054:	080091b7 	.word	0x080091b7
 8009058:	08009009 	.word	0x08009009
 800905c:	08009009 	.word	0x08009009
 8009060:	0800918d 	.word	0x0800918d
 8009064:	08009009 	.word	0x08009009
 8009068:	08009009 	.word	0x08009009
 800906c:	08009009 	.word	0x08009009
 8009070:	08009009 	.word	0x08009009
 8009074:	08009145 	.word	0x08009145
 8009078:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800907c:	e7db      	b.n	8009036 <_scanf_float+0x8e>
 800907e:	290e      	cmp	r1, #14
 8009080:	d8c2      	bhi.n	8009008 <_scanf_float+0x60>
 8009082:	a001      	add	r0, pc, #4	; (adr r0, 8009088 <_scanf_float+0xe0>)
 8009084:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8009088:	08009137 	.word	0x08009137
 800908c:	08009009 	.word	0x08009009
 8009090:	08009137 	.word	0x08009137
 8009094:	080091cb 	.word	0x080091cb
 8009098:	08009009 	.word	0x08009009
 800909c:	080090e5 	.word	0x080090e5
 80090a0:	08009121 	.word	0x08009121
 80090a4:	08009121 	.word	0x08009121
 80090a8:	08009121 	.word	0x08009121
 80090ac:	08009121 	.word	0x08009121
 80090b0:	08009121 	.word	0x08009121
 80090b4:	08009121 	.word	0x08009121
 80090b8:	08009121 	.word	0x08009121
 80090bc:	08009121 	.word	0x08009121
 80090c0:	08009121 	.word	0x08009121
 80090c4:	2b6e      	cmp	r3, #110	; 0x6e
 80090c6:	d809      	bhi.n	80090dc <_scanf_float+0x134>
 80090c8:	2b60      	cmp	r3, #96	; 0x60
 80090ca:	d8b2      	bhi.n	8009032 <_scanf_float+0x8a>
 80090cc:	2b54      	cmp	r3, #84	; 0x54
 80090ce:	d077      	beq.n	80091c0 <_scanf_float+0x218>
 80090d0:	2b59      	cmp	r3, #89	; 0x59
 80090d2:	d199      	bne.n	8009008 <_scanf_float+0x60>
 80090d4:	2d07      	cmp	r5, #7
 80090d6:	d197      	bne.n	8009008 <_scanf_float+0x60>
 80090d8:	2508      	movs	r5, #8
 80090da:	e029      	b.n	8009130 <_scanf_float+0x188>
 80090dc:	2b74      	cmp	r3, #116	; 0x74
 80090de:	d06f      	beq.n	80091c0 <_scanf_float+0x218>
 80090e0:	2b79      	cmp	r3, #121	; 0x79
 80090e2:	e7f6      	b.n	80090d2 <_scanf_float+0x12a>
 80090e4:	6821      	ldr	r1, [r4, #0]
 80090e6:	05c8      	lsls	r0, r1, #23
 80090e8:	d51a      	bpl.n	8009120 <_scanf_float+0x178>
 80090ea:	9b02      	ldr	r3, [sp, #8]
 80090ec:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80090f0:	6021      	str	r1, [r4, #0]
 80090f2:	f109 0901 	add.w	r9, r9, #1
 80090f6:	b11b      	cbz	r3, 8009100 <_scanf_float+0x158>
 80090f8:	3b01      	subs	r3, #1
 80090fa:	3201      	adds	r2, #1
 80090fc:	9302      	str	r3, [sp, #8]
 80090fe:	60a2      	str	r2, [r4, #8]
 8009100:	68a3      	ldr	r3, [r4, #8]
 8009102:	3b01      	subs	r3, #1
 8009104:	60a3      	str	r3, [r4, #8]
 8009106:	6923      	ldr	r3, [r4, #16]
 8009108:	3301      	adds	r3, #1
 800910a:	6123      	str	r3, [r4, #16]
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	3b01      	subs	r3, #1
 8009110:	2b00      	cmp	r3, #0
 8009112:	607b      	str	r3, [r7, #4]
 8009114:	f340 8084 	ble.w	8009220 <_scanf_float+0x278>
 8009118:	683b      	ldr	r3, [r7, #0]
 800911a:	3301      	adds	r3, #1
 800911c:	603b      	str	r3, [r7, #0]
 800911e:	e766      	b.n	8008fee <_scanf_float+0x46>
 8009120:	eb1a 0f05 	cmn.w	sl, r5
 8009124:	f47f af70 	bne.w	8009008 <_scanf_float+0x60>
 8009128:	6822      	ldr	r2, [r4, #0]
 800912a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800912e:	6022      	str	r2, [r4, #0]
 8009130:	f806 3b01 	strb.w	r3, [r6], #1
 8009134:	e7e4      	b.n	8009100 <_scanf_float+0x158>
 8009136:	6822      	ldr	r2, [r4, #0]
 8009138:	0610      	lsls	r0, r2, #24
 800913a:	f57f af65 	bpl.w	8009008 <_scanf_float+0x60>
 800913e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009142:	e7f4      	b.n	800912e <_scanf_float+0x186>
 8009144:	f1ba 0f00 	cmp.w	sl, #0
 8009148:	d10e      	bne.n	8009168 <_scanf_float+0x1c0>
 800914a:	f1b9 0f00 	cmp.w	r9, #0
 800914e:	d10e      	bne.n	800916e <_scanf_float+0x1c6>
 8009150:	6822      	ldr	r2, [r4, #0]
 8009152:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8009156:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800915a:	d108      	bne.n	800916e <_scanf_float+0x1c6>
 800915c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009160:	6022      	str	r2, [r4, #0]
 8009162:	f04f 0a01 	mov.w	sl, #1
 8009166:	e7e3      	b.n	8009130 <_scanf_float+0x188>
 8009168:	f1ba 0f02 	cmp.w	sl, #2
 800916c:	d055      	beq.n	800921a <_scanf_float+0x272>
 800916e:	2d01      	cmp	r5, #1
 8009170:	d002      	beq.n	8009178 <_scanf_float+0x1d0>
 8009172:	2d04      	cmp	r5, #4
 8009174:	f47f af48 	bne.w	8009008 <_scanf_float+0x60>
 8009178:	3501      	adds	r5, #1
 800917a:	b2ed      	uxtb	r5, r5
 800917c:	e7d8      	b.n	8009130 <_scanf_float+0x188>
 800917e:	f1ba 0f01 	cmp.w	sl, #1
 8009182:	f47f af41 	bne.w	8009008 <_scanf_float+0x60>
 8009186:	f04f 0a02 	mov.w	sl, #2
 800918a:	e7d1      	b.n	8009130 <_scanf_float+0x188>
 800918c:	b97d      	cbnz	r5, 80091ae <_scanf_float+0x206>
 800918e:	f1b9 0f00 	cmp.w	r9, #0
 8009192:	f47f af3c 	bne.w	800900e <_scanf_float+0x66>
 8009196:	6822      	ldr	r2, [r4, #0]
 8009198:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800919c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80091a0:	f47f af39 	bne.w	8009016 <_scanf_float+0x6e>
 80091a4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80091a8:	6022      	str	r2, [r4, #0]
 80091aa:	2501      	movs	r5, #1
 80091ac:	e7c0      	b.n	8009130 <_scanf_float+0x188>
 80091ae:	2d03      	cmp	r5, #3
 80091b0:	d0e2      	beq.n	8009178 <_scanf_float+0x1d0>
 80091b2:	2d05      	cmp	r5, #5
 80091b4:	e7de      	b.n	8009174 <_scanf_float+0x1cc>
 80091b6:	2d02      	cmp	r5, #2
 80091b8:	f47f af26 	bne.w	8009008 <_scanf_float+0x60>
 80091bc:	2503      	movs	r5, #3
 80091be:	e7b7      	b.n	8009130 <_scanf_float+0x188>
 80091c0:	2d06      	cmp	r5, #6
 80091c2:	f47f af21 	bne.w	8009008 <_scanf_float+0x60>
 80091c6:	2507      	movs	r5, #7
 80091c8:	e7b2      	b.n	8009130 <_scanf_float+0x188>
 80091ca:	6822      	ldr	r2, [r4, #0]
 80091cc:	0591      	lsls	r1, r2, #22
 80091ce:	f57f af1b 	bpl.w	8009008 <_scanf_float+0x60>
 80091d2:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80091d6:	6022      	str	r2, [r4, #0]
 80091d8:	f8cd 9004 	str.w	r9, [sp, #4]
 80091dc:	e7a8      	b.n	8009130 <_scanf_float+0x188>
 80091de:	6822      	ldr	r2, [r4, #0]
 80091e0:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80091e4:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80091e8:	d006      	beq.n	80091f8 <_scanf_float+0x250>
 80091ea:	0550      	lsls	r0, r2, #21
 80091ec:	f57f af0c 	bpl.w	8009008 <_scanf_float+0x60>
 80091f0:	f1b9 0f00 	cmp.w	r9, #0
 80091f4:	f43f af0f 	beq.w	8009016 <_scanf_float+0x6e>
 80091f8:	0591      	lsls	r1, r2, #22
 80091fa:	bf58      	it	pl
 80091fc:	9901      	ldrpl	r1, [sp, #4]
 80091fe:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009202:	bf58      	it	pl
 8009204:	eba9 0101 	subpl.w	r1, r9, r1
 8009208:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800920c:	bf58      	it	pl
 800920e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8009212:	6022      	str	r2, [r4, #0]
 8009214:	f04f 0900 	mov.w	r9, #0
 8009218:	e78a      	b.n	8009130 <_scanf_float+0x188>
 800921a:	f04f 0a03 	mov.w	sl, #3
 800921e:	e787      	b.n	8009130 <_scanf_float+0x188>
 8009220:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8009224:	4639      	mov	r1, r7
 8009226:	4640      	mov	r0, r8
 8009228:	4798      	blx	r3
 800922a:	2800      	cmp	r0, #0
 800922c:	f43f aedf 	beq.w	8008fee <_scanf_float+0x46>
 8009230:	e6ea      	b.n	8009008 <_scanf_float+0x60>
 8009232:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009236:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800923a:	463a      	mov	r2, r7
 800923c:	4640      	mov	r0, r8
 800923e:	4798      	blx	r3
 8009240:	6923      	ldr	r3, [r4, #16]
 8009242:	3b01      	subs	r3, #1
 8009244:	6123      	str	r3, [r4, #16]
 8009246:	e6ec      	b.n	8009022 <_scanf_float+0x7a>
 8009248:	1e6b      	subs	r3, r5, #1
 800924a:	2b06      	cmp	r3, #6
 800924c:	d825      	bhi.n	800929a <_scanf_float+0x2f2>
 800924e:	2d02      	cmp	r5, #2
 8009250:	d836      	bhi.n	80092c0 <_scanf_float+0x318>
 8009252:	455e      	cmp	r6, fp
 8009254:	f67f aee8 	bls.w	8009028 <_scanf_float+0x80>
 8009258:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800925c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009260:	463a      	mov	r2, r7
 8009262:	4640      	mov	r0, r8
 8009264:	4798      	blx	r3
 8009266:	6923      	ldr	r3, [r4, #16]
 8009268:	3b01      	subs	r3, #1
 800926a:	6123      	str	r3, [r4, #16]
 800926c:	e7f1      	b.n	8009252 <_scanf_float+0x2aa>
 800926e:	9802      	ldr	r0, [sp, #8]
 8009270:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009274:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8009278:	9002      	str	r0, [sp, #8]
 800927a:	463a      	mov	r2, r7
 800927c:	4640      	mov	r0, r8
 800927e:	4798      	blx	r3
 8009280:	6923      	ldr	r3, [r4, #16]
 8009282:	3b01      	subs	r3, #1
 8009284:	6123      	str	r3, [r4, #16]
 8009286:	f10a 3aff 	add.w	sl, sl, #4294967295
 800928a:	fa5f fa8a 	uxtb.w	sl, sl
 800928e:	f1ba 0f02 	cmp.w	sl, #2
 8009292:	d1ec      	bne.n	800926e <_scanf_float+0x2c6>
 8009294:	3d03      	subs	r5, #3
 8009296:	b2ed      	uxtb	r5, r5
 8009298:	1b76      	subs	r6, r6, r5
 800929a:	6823      	ldr	r3, [r4, #0]
 800929c:	05da      	lsls	r2, r3, #23
 800929e:	d52f      	bpl.n	8009300 <_scanf_float+0x358>
 80092a0:	055b      	lsls	r3, r3, #21
 80092a2:	d510      	bpl.n	80092c6 <_scanf_float+0x31e>
 80092a4:	455e      	cmp	r6, fp
 80092a6:	f67f aebf 	bls.w	8009028 <_scanf_float+0x80>
 80092aa:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80092ae:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80092b2:	463a      	mov	r2, r7
 80092b4:	4640      	mov	r0, r8
 80092b6:	4798      	blx	r3
 80092b8:	6923      	ldr	r3, [r4, #16]
 80092ba:	3b01      	subs	r3, #1
 80092bc:	6123      	str	r3, [r4, #16]
 80092be:	e7f1      	b.n	80092a4 <_scanf_float+0x2fc>
 80092c0:	46aa      	mov	sl, r5
 80092c2:	9602      	str	r6, [sp, #8]
 80092c4:	e7df      	b.n	8009286 <_scanf_float+0x2de>
 80092c6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80092ca:	6923      	ldr	r3, [r4, #16]
 80092cc:	2965      	cmp	r1, #101	; 0x65
 80092ce:	f103 33ff 	add.w	r3, r3, #4294967295
 80092d2:	f106 35ff 	add.w	r5, r6, #4294967295
 80092d6:	6123      	str	r3, [r4, #16]
 80092d8:	d00c      	beq.n	80092f4 <_scanf_float+0x34c>
 80092da:	2945      	cmp	r1, #69	; 0x45
 80092dc:	d00a      	beq.n	80092f4 <_scanf_float+0x34c>
 80092de:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80092e2:	463a      	mov	r2, r7
 80092e4:	4640      	mov	r0, r8
 80092e6:	4798      	blx	r3
 80092e8:	6923      	ldr	r3, [r4, #16]
 80092ea:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80092ee:	3b01      	subs	r3, #1
 80092f0:	1eb5      	subs	r5, r6, #2
 80092f2:	6123      	str	r3, [r4, #16]
 80092f4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80092f8:	463a      	mov	r2, r7
 80092fa:	4640      	mov	r0, r8
 80092fc:	4798      	blx	r3
 80092fe:	462e      	mov	r6, r5
 8009300:	6825      	ldr	r5, [r4, #0]
 8009302:	f015 0510 	ands.w	r5, r5, #16
 8009306:	d158      	bne.n	80093ba <_scanf_float+0x412>
 8009308:	7035      	strb	r5, [r6, #0]
 800930a:	6823      	ldr	r3, [r4, #0]
 800930c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8009310:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009314:	d11c      	bne.n	8009350 <_scanf_float+0x3a8>
 8009316:	9b01      	ldr	r3, [sp, #4]
 8009318:	454b      	cmp	r3, r9
 800931a:	eba3 0209 	sub.w	r2, r3, r9
 800931e:	d124      	bne.n	800936a <_scanf_float+0x3c2>
 8009320:	2200      	movs	r2, #0
 8009322:	4659      	mov	r1, fp
 8009324:	4640      	mov	r0, r8
 8009326:	f000 fe9d 	bl	800a064 <_strtod_r>
 800932a:	9b03      	ldr	r3, [sp, #12]
 800932c:	6821      	ldr	r1, [r4, #0]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	f011 0f02 	tst.w	r1, #2
 8009334:	ec57 6b10 	vmov	r6, r7, d0
 8009338:	f103 0204 	add.w	r2, r3, #4
 800933c:	d020      	beq.n	8009380 <_scanf_float+0x3d8>
 800933e:	9903      	ldr	r1, [sp, #12]
 8009340:	600a      	str	r2, [r1, #0]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	e9c3 6700 	strd	r6, r7, [r3]
 8009348:	68e3      	ldr	r3, [r4, #12]
 800934a:	3301      	adds	r3, #1
 800934c:	60e3      	str	r3, [r4, #12]
 800934e:	e66c      	b.n	800902a <_scanf_float+0x82>
 8009350:	9b04      	ldr	r3, [sp, #16]
 8009352:	2b00      	cmp	r3, #0
 8009354:	d0e4      	beq.n	8009320 <_scanf_float+0x378>
 8009356:	9905      	ldr	r1, [sp, #20]
 8009358:	230a      	movs	r3, #10
 800935a:	462a      	mov	r2, r5
 800935c:	3101      	adds	r1, #1
 800935e:	4640      	mov	r0, r8
 8009360:	f000 ff0a 	bl	800a178 <_strtol_r>
 8009364:	9b04      	ldr	r3, [sp, #16]
 8009366:	9e05      	ldr	r6, [sp, #20]
 8009368:	1ac2      	subs	r2, r0, r3
 800936a:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800936e:	429e      	cmp	r6, r3
 8009370:	bf28      	it	cs
 8009372:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8009376:	4912      	ldr	r1, [pc, #72]	; (80093c0 <_scanf_float+0x418>)
 8009378:	4630      	mov	r0, r6
 800937a:	f000 f82b 	bl	80093d4 <siprintf>
 800937e:	e7cf      	b.n	8009320 <_scanf_float+0x378>
 8009380:	f011 0f04 	tst.w	r1, #4
 8009384:	9903      	ldr	r1, [sp, #12]
 8009386:	600a      	str	r2, [r1, #0]
 8009388:	d1db      	bne.n	8009342 <_scanf_float+0x39a>
 800938a:	f8d3 8000 	ldr.w	r8, [r3]
 800938e:	ee10 2a10 	vmov	r2, s0
 8009392:	ee10 0a10 	vmov	r0, s0
 8009396:	463b      	mov	r3, r7
 8009398:	4639      	mov	r1, r7
 800939a:	f7f7 fbcf 	bl	8000b3c <__aeabi_dcmpun>
 800939e:	b128      	cbz	r0, 80093ac <_scanf_float+0x404>
 80093a0:	4808      	ldr	r0, [pc, #32]	; (80093c4 <_scanf_float+0x41c>)
 80093a2:	f000 f811 	bl	80093c8 <nanf>
 80093a6:	ed88 0a00 	vstr	s0, [r8]
 80093aa:	e7cd      	b.n	8009348 <_scanf_float+0x3a0>
 80093ac:	4630      	mov	r0, r6
 80093ae:	4639      	mov	r1, r7
 80093b0:	f7f7 fc22 	bl	8000bf8 <__aeabi_d2f>
 80093b4:	f8c8 0000 	str.w	r0, [r8]
 80093b8:	e7c6      	b.n	8009348 <_scanf_float+0x3a0>
 80093ba:	2500      	movs	r5, #0
 80093bc:	e635      	b.n	800902a <_scanf_float+0x82>
 80093be:	bf00      	nop
 80093c0:	0800cfe4 	.word	0x0800cfe4
 80093c4:	0800d400 	.word	0x0800d400

080093c8 <nanf>:
 80093c8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80093d0 <nanf+0x8>
 80093cc:	4770      	bx	lr
 80093ce:	bf00      	nop
 80093d0:	7fc00000 	.word	0x7fc00000

080093d4 <siprintf>:
 80093d4:	b40e      	push	{r1, r2, r3}
 80093d6:	b500      	push	{lr}
 80093d8:	b09c      	sub	sp, #112	; 0x70
 80093da:	ab1d      	add	r3, sp, #116	; 0x74
 80093dc:	9002      	str	r0, [sp, #8]
 80093de:	9006      	str	r0, [sp, #24]
 80093e0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80093e4:	4809      	ldr	r0, [pc, #36]	; (800940c <siprintf+0x38>)
 80093e6:	9107      	str	r1, [sp, #28]
 80093e8:	9104      	str	r1, [sp, #16]
 80093ea:	4909      	ldr	r1, [pc, #36]	; (8009410 <siprintf+0x3c>)
 80093ec:	f853 2b04 	ldr.w	r2, [r3], #4
 80093f0:	9105      	str	r1, [sp, #20]
 80093f2:	6800      	ldr	r0, [r0, #0]
 80093f4:	9301      	str	r3, [sp, #4]
 80093f6:	a902      	add	r1, sp, #8
 80093f8:	f002 fea6 	bl	800c148 <_svfiprintf_r>
 80093fc:	9b02      	ldr	r3, [sp, #8]
 80093fe:	2200      	movs	r2, #0
 8009400:	701a      	strb	r2, [r3, #0]
 8009402:	b01c      	add	sp, #112	; 0x70
 8009404:	f85d eb04 	ldr.w	lr, [sp], #4
 8009408:	b003      	add	sp, #12
 800940a:	4770      	bx	lr
 800940c:	20000180 	.word	0x20000180
 8009410:	ffff0208 	.word	0xffff0208

08009414 <sulp>:
 8009414:	b570      	push	{r4, r5, r6, lr}
 8009416:	4604      	mov	r4, r0
 8009418:	460d      	mov	r5, r1
 800941a:	ec45 4b10 	vmov	d0, r4, r5
 800941e:	4616      	mov	r6, r2
 8009420:	f002 fc2e 	bl	800bc80 <__ulp>
 8009424:	ec51 0b10 	vmov	r0, r1, d0
 8009428:	b17e      	cbz	r6, 800944a <sulp+0x36>
 800942a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800942e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009432:	2b00      	cmp	r3, #0
 8009434:	dd09      	ble.n	800944a <sulp+0x36>
 8009436:	051b      	lsls	r3, r3, #20
 8009438:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800943c:	2400      	movs	r4, #0
 800943e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8009442:	4622      	mov	r2, r4
 8009444:	462b      	mov	r3, r5
 8009446:	f7f7 f8df 	bl	8000608 <__aeabi_dmul>
 800944a:	bd70      	pop	{r4, r5, r6, pc}
 800944c:	0000      	movs	r0, r0
	...

08009450 <_strtod_l>:
 8009450:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009454:	b0a3      	sub	sp, #140	; 0x8c
 8009456:	461f      	mov	r7, r3
 8009458:	2300      	movs	r3, #0
 800945a:	931e      	str	r3, [sp, #120]	; 0x78
 800945c:	4ba4      	ldr	r3, [pc, #656]	; (80096f0 <_strtod_l+0x2a0>)
 800945e:	9219      	str	r2, [sp, #100]	; 0x64
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	9307      	str	r3, [sp, #28]
 8009464:	4604      	mov	r4, r0
 8009466:	4618      	mov	r0, r3
 8009468:	4688      	mov	r8, r1
 800946a:	f7f6 feb9 	bl	80001e0 <strlen>
 800946e:	f04f 0a00 	mov.w	sl, #0
 8009472:	4605      	mov	r5, r0
 8009474:	f04f 0b00 	mov.w	fp, #0
 8009478:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800947c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800947e:	781a      	ldrb	r2, [r3, #0]
 8009480:	2a2b      	cmp	r2, #43	; 0x2b
 8009482:	d04c      	beq.n	800951e <_strtod_l+0xce>
 8009484:	d839      	bhi.n	80094fa <_strtod_l+0xaa>
 8009486:	2a0d      	cmp	r2, #13
 8009488:	d832      	bhi.n	80094f0 <_strtod_l+0xa0>
 800948a:	2a08      	cmp	r2, #8
 800948c:	d832      	bhi.n	80094f4 <_strtod_l+0xa4>
 800948e:	2a00      	cmp	r2, #0
 8009490:	d03c      	beq.n	800950c <_strtod_l+0xbc>
 8009492:	2300      	movs	r3, #0
 8009494:	930e      	str	r3, [sp, #56]	; 0x38
 8009496:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8009498:	7833      	ldrb	r3, [r6, #0]
 800949a:	2b30      	cmp	r3, #48	; 0x30
 800949c:	f040 80b4 	bne.w	8009608 <_strtod_l+0x1b8>
 80094a0:	7873      	ldrb	r3, [r6, #1]
 80094a2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80094a6:	2b58      	cmp	r3, #88	; 0x58
 80094a8:	d16c      	bne.n	8009584 <_strtod_l+0x134>
 80094aa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80094ac:	9301      	str	r3, [sp, #4]
 80094ae:	ab1e      	add	r3, sp, #120	; 0x78
 80094b0:	9702      	str	r7, [sp, #8]
 80094b2:	9300      	str	r3, [sp, #0]
 80094b4:	4a8f      	ldr	r2, [pc, #572]	; (80096f4 <_strtod_l+0x2a4>)
 80094b6:	ab1f      	add	r3, sp, #124	; 0x7c
 80094b8:	a91d      	add	r1, sp, #116	; 0x74
 80094ba:	4620      	mov	r0, r4
 80094bc:	f001 fd40 	bl	800af40 <__gethex>
 80094c0:	f010 0707 	ands.w	r7, r0, #7
 80094c4:	4605      	mov	r5, r0
 80094c6:	d005      	beq.n	80094d4 <_strtod_l+0x84>
 80094c8:	2f06      	cmp	r7, #6
 80094ca:	d12a      	bne.n	8009522 <_strtod_l+0xd2>
 80094cc:	3601      	adds	r6, #1
 80094ce:	2300      	movs	r3, #0
 80094d0:	961d      	str	r6, [sp, #116]	; 0x74
 80094d2:	930e      	str	r3, [sp, #56]	; 0x38
 80094d4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	f040 8596 	bne.w	800a008 <_strtod_l+0xbb8>
 80094dc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80094de:	b1db      	cbz	r3, 8009518 <_strtod_l+0xc8>
 80094e0:	4652      	mov	r2, sl
 80094e2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80094e6:	ec43 2b10 	vmov	d0, r2, r3
 80094ea:	b023      	add	sp, #140	; 0x8c
 80094ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094f0:	2a20      	cmp	r2, #32
 80094f2:	d1ce      	bne.n	8009492 <_strtod_l+0x42>
 80094f4:	3301      	adds	r3, #1
 80094f6:	931d      	str	r3, [sp, #116]	; 0x74
 80094f8:	e7c0      	b.n	800947c <_strtod_l+0x2c>
 80094fa:	2a2d      	cmp	r2, #45	; 0x2d
 80094fc:	d1c9      	bne.n	8009492 <_strtod_l+0x42>
 80094fe:	2201      	movs	r2, #1
 8009500:	920e      	str	r2, [sp, #56]	; 0x38
 8009502:	1c5a      	adds	r2, r3, #1
 8009504:	921d      	str	r2, [sp, #116]	; 0x74
 8009506:	785b      	ldrb	r3, [r3, #1]
 8009508:	2b00      	cmp	r3, #0
 800950a:	d1c4      	bne.n	8009496 <_strtod_l+0x46>
 800950c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800950e:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8009512:	2b00      	cmp	r3, #0
 8009514:	f040 8576 	bne.w	800a004 <_strtod_l+0xbb4>
 8009518:	4652      	mov	r2, sl
 800951a:	465b      	mov	r3, fp
 800951c:	e7e3      	b.n	80094e6 <_strtod_l+0x96>
 800951e:	2200      	movs	r2, #0
 8009520:	e7ee      	b.n	8009500 <_strtod_l+0xb0>
 8009522:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8009524:	b13a      	cbz	r2, 8009536 <_strtod_l+0xe6>
 8009526:	2135      	movs	r1, #53	; 0x35
 8009528:	a820      	add	r0, sp, #128	; 0x80
 800952a:	f002 fcb4 	bl	800be96 <__copybits>
 800952e:	991e      	ldr	r1, [sp, #120]	; 0x78
 8009530:	4620      	mov	r0, r4
 8009532:	f002 f879 	bl	800b628 <_Bfree>
 8009536:	3f01      	subs	r7, #1
 8009538:	2f05      	cmp	r7, #5
 800953a:	d807      	bhi.n	800954c <_strtod_l+0xfc>
 800953c:	e8df f007 	tbb	[pc, r7]
 8009540:	1d180b0e 	.word	0x1d180b0e
 8009544:	030e      	.short	0x030e
 8009546:	f04f 0b00 	mov.w	fp, #0
 800954a:	46da      	mov	sl, fp
 800954c:	0728      	lsls	r0, r5, #28
 800954e:	d5c1      	bpl.n	80094d4 <_strtod_l+0x84>
 8009550:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8009554:	e7be      	b.n	80094d4 <_strtod_l+0x84>
 8009556:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 800955a:	e7f7      	b.n	800954c <_strtod_l+0xfc>
 800955c:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 8009560:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8009562:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8009566:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800956a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800956e:	e7ed      	b.n	800954c <_strtod_l+0xfc>
 8009570:	f8df b184 	ldr.w	fp, [pc, #388]	; 80096f8 <_strtod_l+0x2a8>
 8009574:	f04f 0a00 	mov.w	sl, #0
 8009578:	e7e8      	b.n	800954c <_strtod_l+0xfc>
 800957a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800957e:	f04f 3aff 	mov.w	sl, #4294967295
 8009582:	e7e3      	b.n	800954c <_strtod_l+0xfc>
 8009584:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009586:	1c5a      	adds	r2, r3, #1
 8009588:	921d      	str	r2, [sp, #116]	; 0x74
 800958a:	785b      	ldrb	r3, [r3, #1]
 800958c:	2b30      	cmp	r3, #48	; 0x30
 800958e:	d0f9      	beq.n	8009584 <_strtod_l+0x134>
 8009590:	2b00      	cmp	r3, #0
 8009592:	d09f      	beq.n	80094d4 <_strtod_l+0x84>
 8009594:	2301      	movs	r3, #1
 8009596:	f04f 0900 	mov.w	r9, #0
 800959a:	9304      	str	r3, [sp, #16]
 800959c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800959e:	930a      	str	r3, [sp, #40]	; 0x28
 80095a0:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80095a4:	464f      	mov	r7, r9
 80095a6:	220a      	movs	r2, #10
 80095a8:	981d      	ldr	r0, [sp, #116]	; 0x74
 80095aa:	7806      	ldrb	r6, [r0, #0]
 80095ac:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80095b0:	b2d9      	uxtb	r1, r3
 80095b2:	2909      	cmp	r1, #9
 80095b4:	d92a      	bls.n	800960c <_strtod_l+0x1bc>
 80095b6:	9907      	ldr	r1, [sp, #28]
 80095b8:	462a      	mov	r2, r5
 80095ba:	f002 fedd 	bl	800c378 <strncmp>
 80095be:	b398      	cbz	r0, 8009628 <_strtod_l+0x1d8>
 80095c0:	2000      	movs	r0, #0
 80095c2:	4633      	mov	r3, r6
 80095c4:	463d      	mov	r5, r7
 80095c6:	9007      	str	r0, [sp, #28]
 80095c8:	4602      	mov	r2, r0
 80095ca:	2b65      	cmp	r3, #101	; 0x65
 80095cc:	d001      	beq.n	80095d2 <_strtod_l+0x182>
 80095ce:	2b45      	cmp	r3, #69	; 0x45
 80095d0:	d118      	bne.n	8009604 <_strtod_l+0x1b4>
 80095d2:	b91d      	cbnz	r5, 80095dc <_strtod_l+0x18c>
 80095d4:	9b04      	ldr	r3, [sp, #16]
 80095d6:	4303      	orrs	r3, r0
 80095d8:	d098      	beq.n	800950c <_strtod_l+0xbc>
 80095da:	2500      	movs	r5, #0
 80095dc:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 80095e0:	f108 0301 	add.w	r3, r8, #1
 80095e4:	931d      	str	r3, [sp, #116]	; 0x74
 80095e6:	f898 3001 	ldrb.w	r3, [r8, #1]
 80095ea:	2b2b      	cmp	r3, #43	; 0x2b
 80095ec:	d075      	beq.n	80096da <_strtod_l+0x28a>
 80095ee:	2b2d      	cmp	r3, #45	; 0x2d
 80095f0:	d07b      	beq.n	80096ea <_strtod_l+0x29a>
 80095f2:	f04f 0c00 	mov.w	ip, #0
 80095f6:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80095fa:	2909      	cmp	r1, #9
 80095fc:	f240 8082 	bls.w	8009704 <_strtod_l+0x2b4>
 8009600:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8009604:	2600      	movs	r6, #0
 8009606:	e09d      	b.n	8009744 <_strtod_l+0x2f4>
 8009608:	2300      	movs	r3, #0
 800960a:	e7c4      	b.n	8009596 <_strtod_l+0x146>
 800960c:	2f08      	cmp	r7, #8
 800960e:	bfd8      	it	le
 8009610:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8009612:	f100 0001 	add.w	r0, r0, #1
 8009616:	bfda      	itte	le
 8009618:	fb02 3301 	mlale	r3, r2, r1, r3
 800961c:	9309      	strle	r3, [sp, #36]	; 0x24
 800961e:	fb02 3909 	mlagt	r9, r2, r9, r3
 8009622:	3701      	adds	r7, #1
 8009624:	901d      	str	r0, [sp, #116]	; 0x74
 8009626:	e7bf      	b.n	80095a8 <_strtod_l+0x158>
 8009628:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800962a:	195a      	adds	r2, r3, r5
 800962c:	921d      	str	r2, [sp, #116]	; 0x74
 800962e:	5d5b      	ldrb	r3, [r3, r5]
 8009630:	2f00      	cmp	r7, #0
 8009632:	d037      	beq.n	80096a4 <_strtod_l+0x254>
 8009634:	9007      	str	r0, [sp, #28]
 8009636:	463d      	mov	r5, r7
 8009638:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800963c:	2a09      	cmp	r2, #9
 800963e:	d912      	bls.n	8009666 <_strtod_l+0x216>
 8009640:	2201      	movs	r2, #1
 8009642:	e7c2      	b.n	80095ca <_strtod_l+0x17a>
 8009644:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009646:	1c5a      	adds	r2, r3, #1
 8009648:	921d      	str	r2, [sp, #116]	; 0x74
 800964a:	785b      	ldrb	r3, [r3, #1]
 800964c:	3001      	adds	r0, #1
 800964e:	2b30      	cmp	r3, #48	; 0x30
 8009650:	d0f8      	beq.n	8009644 <_strtod_l+0x1f4>
 8009652:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8009656:	2a08      	cmp	r2, #8
 8009658:	f200 84db 	bhi.w	800a012 <_strtod_l+0xbc2>
 800965c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800965e:	9007      	str	r0, [sp, #28]
 8009660:	2000      	movs	r0, #0
 8009662:	920a      	str	r2, [sp, #40]	; 0x28
 8009664:	4605      	mov	r5, r0
 8009666:	3b30      	subs	r3, #48	; 0x30
 8009668:	f100 0201 	add.w	r2, r0, #1
 800966c:	d014      	beq.n	8009698 <_strtod_l+0x248>
 800966e:	9907      	ldr	r1, [sp, #28]
 8009670:	4411      	add	r1, r2
 8009672:	9107      	str	r1, [sp, #28]
 8009674:	462a      	mov	r2, r5
 8009676:	eb00 0e05 	add.w	lr, r0, r5
 800967a:	210a      	movs	r1, #10
 800967c:	4572      	cmp	r2, lr
 800967e:	d113      	bne.n	80096a8 <_strtod_l+0x258>
 8009680:	182a      	adds	r2, r5, r0
 8009682:	2a08      	cmp	r2, #8
 8009684:	f105 0501 	add.w	r5, r5, #1
 8009688:	4405      	add	r5, r0
 800968a:	dc1c      	bgt.n	80096c6 <_strtod_l+0x276>
 800968c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800968e:	220a      	movs	r2, #10
 8009690:	fb02 3301 	mla	r3, r2, r1, r3
 8009694:	9309      	str	r3, [sp, #36]	; 0x24
 8009696:	2200      	movs	r2, #0
 8009698:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800969a:	1c59      	adds	r1, r3, #1
 800969c:	911d      	str	r1, [sp, #116]	; 0x74
 800969e:	785b      	ldrb	r3, [r3, #1]
 80096a0:	4610      	mov	r0, r2
 80096a2:	e7c9      	b.n	8009638 <_strtod_l+0x1e8>
 80096a4:	4638      	mov	r0, r7
 80096a6:	e7d2      	b.n	800964e <_strtod_l+0x1fe>
 80096a8:	2a08      	cmp	r2, #8
 80096aa:	dc04      	bgt.n	80096b6 <_strtod_l+0x266>
 80096ac:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80096ae:	434e      	muls	r6, r1
 80096b0:	9609      	str	r6, [sp, #36]	; 0x24
 80096b2:	3201      	adds	r2, #1
 80096b4:	e7e2      	b.n	800967c <_strtod_l+0x22c>
 80096b6:	f102 0c01 	add.w	ip, r2, #1
 80096ba:	f1bc 0f10 	cmp.w	ip, #16
 80096be:	bfd8      	it	le
 80096c0:	fb01 f909 	mulle.w	r9, r1, r9
 80096c4:	e7f5      	b.n	80096b2 <_strtod_l+0x262>
 80096c6:	2d10      	cmp	r5, #16
 80096c8:	bfdc      	itt	le
 80096ca:	220a      	movle	r2, #10
 80096cc:	fb02 3909 	mlale	r9, r2, r9, r3
 80096d0:	e7e1      	b.n	8009696 <_strtod_l+0x246>
 80096d2:	2300      	movs	r3, #0
 80096d4:	9307      	str	r3, [sp, #28]
 80096d6:	2201      	movs	r2, #1
 80096d8:	e77c      	b.n	80095d4 <_strtod_l+0x184>
 80096da:	f04f 0c00 	mov.w	ip, #0
 80096de:	f108 0302 	add.w	r3, r8, #2
 80096e2:	931d      	str	r3, [sp, #116]	; 0x74
 80096e4:	f898 3002 	ldrb.w	r3, [r8, #2]
 80096e8:	e785      	b.n	80095f6 <_strtod_l+0x1a6>
 80096ea:	f04f 0c01 	mov.w	ip, #1
 80096ee:	e7f6      	b.n	80096de <_strtod_l+0x28e>
 80096f0:	0800d240 	.word	0x0800d240
 80096f4:	0800cfec 	.word	0x0800cfec
 80096f8:	7ff00000 	.word	0x7ff00000
 80096fc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80096fe:	1c59      	adds	r1, r3, #1
 8009700:	911d      	str	r1, [sp, #116]	; 0x74
 8009702:	785b      	ldrb	r3, [r3, #1]
 8009704:	2b30      	cmp	r3, #48	; 0x30
 8009706:	d0f9      	beq.n	80096fc <_strtod_l+0x2ac>
 8009708:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 800970c:	2908      	cmp	r1, #8
 800970e:	f63f af79 	bhi.w	8009604 <_strtod_l+0x1b4>
 8009712:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8009716:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009718:	9308      	str	r3, [sp, #32]
 800971a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800971c:	1c59      	adds	r1, r3, #1
 800971e:	911d      	str	r1, [sp, #116]	; 0x74
 8009720:	785b      	ldrb	r3, [r3, #1]
 8009722:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 8009726:	2e09      	cmp	r6, #9
 8009728:	d937      	bls.n	800979a <_strtod_l+0x34a>
 800972a:	9e08      	ldr	r6, [sp, #32]
 800972c:	1b89      	subs	r1, r1, r6
 800972e:	2908      	cmp	r1, #8
 8009730:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8009734:	dc02      	bgt.n	800973c <_strtod_l+0x2ec>
 8009736:	4576      	cmp	r6, lr
 8009738:	bfa8      	it	ge
 800973a:	4676      	movge	r6, lr
 800973c:	f1bc 0f00 	cmp.w	ip, #0
 8009740:	d000      	beq.n	8009744 <_strtod_l+0x2f4>
 8009742:	4276      	negs	r6, r6
 8009744:	2d00      	cmp	r5, #0
 8009746:	d14f      	bne.n	80097e8 <_strtod_l+0x398>
 8009748:	9904      	ldr	r1, [sp, #16]
 800974a:	4301      	orrs	r1, r0
 800974c:	f47f aec2 	bne.w	80094d4 <_strtod_l+0x84>
 8009750:	2a00      	cmp	r2, #0
 8009752:	f47f aedb 	bne.w	800950c <_strtod_l+0xbc>
 8009756:	2b69      	cmp	r3, #105	; 0x69
 8009758:	d027      	beq.n	80097aa <_strtod_l+0x35a>
 800975a:	dc24      	bgt.n	80097a6 <_strtod_l+0x356>
 800975c:	2b49      	cmp	r3, #73	; 0x49
 800975e:	d024      	beq.n	80097aa <_strtod_l+0x35a>
 8009760:	2b4e      	cmp	r3, #78	; 0x4e
 8009762:	f47f aed3 	bne.w	800950c <_strtod_l+0xbc>
 8009766:	499e      	ldr	r1, [pc, #632]	; (80099e0 <_strtod_l+0x590>)
 8009768:	a81d      	add	r0, sp, #116	; 0x74
 800976a:	f001 fe41 	bl	800b3f0 <__match>
 800976e:	2800      	cmp	r0, #0
 8009770:	f43f aecc 	beq.w	800950c <_strtod_l+0xbc>
 8009774:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009776:	781b      	ldrb	r3, [r3, #0]
 8009778:	2b28      	cmp	r3, #40	; 0x28
 800977a:	d12d      	bne.n	80097d8 <_strtod_l+0x388>
 800977c:	4999      	ldr	r1, [pc, #612]	; (80099e4 <_strtod_l+0x594>)
 800977e:	aa20      	add	r2, sp, #128	; 0x80
 8009780:	a81d      	add	r0, sp, #116	; 0x74
 8009782:	f001 fe49 	bl	800b418 <__hexnan>
 8009786:	2805      	cmp	r0, #5
 8009788:	d126      	bne.n	80097d8 <_strtod_l+0x388>
 800978a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800978c:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 8009790:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8009794:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8009798:	e69c      	b.n	80094d4 <_strtod_l+0x84>
 800979a:	210a      	movs	r1, #10
 800979c:	fb01 3e0e 	mla	lr, r1, lr, r3
 80097a0:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80097a4:	e7b9      	b.n	800971a <_strtod_l+0x2ca>
 80097a6:	2b6e      	cmp	r3, #110	; 0x6e
 80097a8:	e7db      	b.n	8009762 <_strtod_l+0x312>
 80097aa:	498f      	ldr	r1, [pc, #572]	; (80099e8 <_strtod_l+0x598>)
 80097ac:	a81d      	add	r0, sp, #116	; 0x74
 80097ae:	f001 fe1f 	bl	800b3f0 <__match>
 80097b2:	2800      	cmp	r0, #0
 80097b4:	f43f aeaa 	beq.w	800950c <_strtod_l+0xbc>
 80097b8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80097ba:	498c      	ldr	r1, [pc, #560]	; (80099ec <_strtod_l+0x59c>)
 80097bc:	3b01      	subs	r3, #1
 80097be:	a81d      	add	r0, sp, #116	; 0x74
 80097c0:	931d      	str	r3, [sp, #116]	; 0x74
 80097c2:	f001 fe15 	bl	800b3f0 <__match>
 80097c6:	b910      	cbnz	r0, 80097ce <_strtod_l+0x37e>
 80097c8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80097ca:	3301      	adds	r3, #1
 80097cc:	931d      	str	r3, [sp, #116]	; 0x74
 80097ce:	f8df b22c 	ldr.w	fp, [pc, #556]	; 80099fc <_strtod_l+0x5ac>
 80097d2:	f04f 0a00 	mov.w	sl, #0
 80097d6:	e67d      	b.n	80094d4 <_strtod_l+0x84>
 80097d8:	4885      	ldr	r0, [pc, #532]	; (80099f0 <_strtod_l+0x5a0>)
 80097da:	f002 fdb5 	bl	800c348 <nan>
 80097de:	ed8d 0b04 	vstr	d0, [sp, #16]
 80097e2:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 80097e6:	e675      	b.n	80094d4 <_strtod_l+0x84>
 80097e8:	9b07      	ldr	r3, [sp, #28]
 80097ea:	9809      	ldr	r0, [sp, #36]	; 0x24
 80097ec:	1af3      	subs	r3, r6, r3
 80097ee:	2f00      	cmp	r7, #0
 80097f0:	bf08      	it	eq
 80097f2:	462f      	moveq	r7, r5
 80097f4:	2d10      	cmp	r5, #16
 80097f6:	9308      	str	r3, [sp, #32]
 80097f8:	46a8      	mov	r8, r5
 80097fa:	bfa8      	it	ge
 80097fc:	f04f 0810 	movge.w	r8, #16
 8009800:	f7f6 fe88 	bl	8000514 <__aeabi_ui2d>
 8009804:	2d09      	cmp	r5, #9
 8009806:	4682      	mov	sl, r0
 8009808:	468b      	mov	fp, r1
 800980a:	dd13      	ble.n	8009834 <_strtod_l+0x3e4>
 800980c:	4b79      	ldr	r3, [pc, #484]	; (80099f4 <_strtod_l+0x5a4>)
 800980e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8009812:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8009816:	f7f6 fef7 	bl	8000608 <__aeabi_dmul>
 800981a:	4682      	mov	sl, r0
 800981c:	4648      	mov	r0, r9
 800981e:	468b      	mov	fp, r1
 8009820:	f7f6 fe78 	bl	8000514 <__aeabi_ui2d>
 8009824:	4602      	mov	r2, r0
 8009826:	460b      	mov	r3, r1
 8009828:	4650      	mov	r0, sl
 800982a:	4659      	mov	r1, fp
 800982c:	f7f6 fd36 	bl	800029c <__adddf3>
 8009830:	4682      	mov	sl, r0
 8009832:	468b      	mov	fp, r1
 8009834:	2d0f      	cmp	r5, #15
 8009836:	dc38      	bgt.n	80098aa <_strtod_l+0x45a>
 8009838:	9b08      	ldr	r3, [sp, #32]
 800983a:	2b00      	cmp	r3, #0
 800983c:	f43f ae4a 	beq.w	80094d4 <_strtod_l+0x84>
 8009840:	dd24      	ble.n	800988c <_strtod_l+0x43c>
 8009842:	2b16      	cmp	r3, #22
 8009844:	dc0b      	bgt.n	800985e <_strtod_l+0x40e>
 8009846:	4d6b      	ldr	r5, [pc, #428]	; (80099f4 <_strtod_l+0x5a4>)
 8009848:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 800984c:	e9d5 0100 	ldrd	r0, r1, [r5]
 8009850:	4652      	mov	r2, sl
 8009852:	465b      	mov	r3, fp
 8009854:	f7f6 fed8 	bl	8000608 <__aeabi_dmul>
 8009858:	4682      	mov	sl, r0
 800985a:	468b      	mov	fp, r1
 800985c:	e63a      	b.n	80094d4 <_strtod_l+0x84>
 800985e:	9a08      	ldr	r2, [sp, #32]
 8009860:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8009864:	4293      	cmp	r3, r2
 8009866:	db20      	blt.n	80098aa <_strtod_l+0x45a>
 8009868:	4c62      	ldr	r4, [pc, #392]	; (80099f4 <_strtod_l+0x5a4>)
 800986a:	f1c5 050f 	rsb	r5, r5, #15
 800986e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8009872:	4652      	mov	r2, sl
 8009874:	465b      	mov	r3, fp
 8009876:	e9d1 0100 	ldrd	r0, r1, [r1]
 800987a:	f7f6 fec5 	bl	8000608 <__aeabi_dmul>
 800987e:	9b08      	ldr	r3, [sp, #32]
 8009880:	1b5d      	subs	r5, r3, r5
 8009882:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8009886:	e9d4 2300 	ldrd	r2, r3, [r4]
 800988a:	e7e3      	b.n	8009854 <_strtod_l+0x404>
 800988c:	9b08      	ldr	r3, [sp, #32]
 800988e:	3316      	adds	r3, #22
 8009890:	db0b      	blt.n	80098aa <_strtod_l+0x45a>
 8009892:	9b07      	ldr	r3, [sp, #28]
 8009894:	4a57      	ldr	r2, [pc, #348]	; (80099f4 <_strtod_l+0x5a4>)
 8009896:	1b9e      	subs	r6, r3, r6
 8009898:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800989c:	e9d6 2300 	ldrd	r2, r3, [r6]
 80098a0:	4650      	mov	r0, sl
 80098a2:	4659      	mov	r1, fp
 80098a4:	f7f6 ffda 	bl	800085c <__aeabi_ddiv>
 80098a8:	e7d6      	b.n	8009858 <_strtod_l+0x408>
 80098aa:	9b08      	ldr	r3, [sp, #32]
 80098ac:	eba5 0808 	sub.w	r8, r5, r8
 80098b0:	4498      	add	r8, r3
 80098b2:	f1b8 0f00 	cmp.w	r8, #0
 80098b6:	dd71      	ble.n	800999c <_strtod_l+0x54c>
 80098b8:	f018 030f 	ands.w	r3, r8, #15
 80098bc:	d00a      	beq.n	80098d4 <_strtod_l+0x484>
 80098be:	494d      	ldr	r1, [pc, #308]	; (80099f4 <_strtod_l+0x5a4>)
 80098c0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80098c4:	4652      	mov	r2, sl
 80098c6:	465b      	mov	r3, fp
 80098c8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80098cc:	f7f6 fe9c 	bl	8000608 <__aeabi_dmul>
 80098d0:	4682      	mov	sl, r0
 80098d2:	468b      	mov	fp, r1
 80098d4:	f038 080f 	bics.w	r8, r8, #15
 80098d8:	d04d      	beq.n	8009976 <_strtod_l+0x526>
 80098da:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80098de:	dd22      	ble.n	8009926 <_strtod_l+0x4d6>
 80098e0:	2500      	movs	r5, #0
 80098e2:	462e      	mov	r6, r5
 80098e4:	9509      	str	r5, [sp, #36]	; 0x24
 80098e6:	9507      	str	r5, [sp, #28]
 80098e8:	2322      	movs	r3, #34	; 0x22
 80098ea:	f8df b110 	ldr.w	fp, [pc, #272]	; 80099fc <_strtod_l+0x5ac>
 80098ee:	6023      	str	r3, [r4, #0]
 80098f0:	f04f 0a00 	mov.w	sl, #0
 80098f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	f43f adec 	beq.w	80094d4 <_strtod_l+0x84>
 80098fc:	991e      	ldr	r1, [sp, #120]	; 0x78
 80098fe:	4620      	mov	r0, r4
 8009900:	f001 fe92 	bl	800b628 <_Bfree>
 8009904:	9907      	ldr	r1, [sp, #28]
 8009906:	4620      	mov	r0, r4
 8009908:	f001 fe8e 	bl	800b628 <_Bfree>
 800990c:	4631      	mov	r1, r6
 800990e:	4620      	mov	r0, r4
 8009910:	f001 fe8a 	bl	800b628 <_Bfree>
 8009914:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009916:	4620      	mov	r0, r4
 8009918:	f001 fe86 	bl	800b628 <_Bfree>
 800991c:	4629      	mov	r1, r5
 800991e:	4620      	mov	r0, r4
 8009920:	f001 fe82 	bl	800b628 <_Bfree>
 8009924:	e5d6      	b.n	80094d4 <_strtod_l+0x84>
 8009926:	2300      	movs	r3, #0
 8009928:	ea4f 1828 	mov.w	r8, r8, asr #4
 800992c:	4650      	mov	r0, sl
 800992e:	4659      	mov	r1, fp
 8009930:	4699      	mov	r9, r3
 8009932:	f1b8 0f01 	cmp.w	r8, #1
 8009936:	dc21      	bgt.n	800997c <_strtod_l+0x52c>
 8009938:	b10b      	cbz	r3, 800993e <_strtod_l+0x4ee>
 800993a:	4682      	mov	sl, r0
 800993c:	468b      	mov	fp, r1
 800993e:	4b2e      	ldr	r3, [pc, #184]	; (80099f8 <_strtod_l+0x5a8>)
 8009940:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8009944:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8009948:	4652      	mov	r2, sl
 800994a:	465b      	mov	r3, fp
 800994c:	e9d9 0100 	ldrd	r0, r1, [r9]
 8009950:	f7f6 fe5a 	bl	8000608 <__aeabi_dmul>
 8009954:	4b29      	ldr	r3, [pc, #164]	; (80099fc <_strtod_l+0x5ac>)
 8009956:	460a      	mov	r2, r1
 8009958:	400b      	ands	r3, r1
 800995a:	4929      	ldr	r1, [pc, #164]	; (8009a00 <_strtod_l+0x5b0>)
 800995c:	428b      	cmp	r3, r1
 800995e:	4682      	mov	sl, r0
 8009960:	d8be      	bhi.n	80098e0 <_strtod_l+0x490>
 8009962:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8009966:	428b      	cmp	r3, r1
 8009968:	bf86      	itte	hi
 800996a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8009a04 <_strtod_l+0x5b4>
 800996e:	f04f 3aff 	movhi.w	sl, #4294967295
 8009972:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8009976:	2300      	movs	r3, #0
 8009978:	9304      	str	r3, [sp, #16]
 800997a:	e081      	b.n	8009a80 <_strtod_l+0x630>
 800997c:	f018 0f01 	tst.w	r8, #1
 8009980:	d007      	beq.n	8009992 <_strtod_l+0x542>
 8009982:	4b1d      	ldr	r3, [pc, #116]	; (80099f8 <_strtod_l+0x5a8>)
 8009984:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8009988:	e9d3 2300 	ldrd	r2, r3, [r3]
 800998c:	f7f6 fe3c 	bl	8000608 <__aeabi_dmul>
 8009990:	2301      	movs	r3, #1
 8009992:	f109 0901 	add.w	r9, r9, #1
 8009996:	ea4f 0868 	mov.w	r8, r8, asr #1
 800999a:	e7ca      	b.n	8009932 <_strtod_l+0x4e2>
 800999c:	d0eb      	beq.n	8009976 <_strtod_l+0x526>
 800999e:	f1c8 0800 	rsb	r8, r8, #0
 80099a2:	f018 020f 	ands.w	r2, r8, #15
 80099a6:	d00a      	beq.n	80099be <_strtod_l+0x56e>
 80099a8:	4b12      	ldr	r3, [pc, #72]	; (80099f4 <_strtod_l+0x5a4>)
 80099aa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80099ae:	4650      	mov	r0, sl
 80099b0:	4659      	mov	r1, fp
 80099b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099b6:	f7f6 ff51 	bl	800085c <__aeabi_ddiv>
 80099ba:	4682      	mov	sl, r0
 80099bc:	468b      	mov	fp, r1
 80099be:	ea5f 1828 	movs.w	r8, r8, asr #4
 80099c2:	d0d8      	beq.n	8009976 <_strtod_l+0x526>
 80099c4:	f1b8 0f1f 	cmp.w	r8, #31
 80099c8:	dd1e      	ble.n	8009a08 <_strtod_l+0x5b8>
 80099ca:	2500      	movs	r5, #0
 80099cc:	462e      	mov	r6, r5
 80099ce:	9509      	str	r5, [sp, #36]	; 0x24
 80099d0:	9507      	str	r5, [sp, #28]
 80099d2:	2322      	movs	r3, #34	; 0x22
 80099d4:	f04f 0a00 	mov.w	sl, #0
 80099d8:	f04f 0b00 	mov.w	fp, #0
 80099dc:	6023      	str	r3, [r4, #0]
 80099de:	e789      	b.n	80098f4 <_strtod_l+0x4a4>
 80099e0:	0800cfbd 	.word	0x0800cfbd
 80099e4:	0800d000 	.word	0x0800d000
 80099e8:	0800cfb5 	.word	0x0800cfb5
 80099ec:	0800d144 	.word	0x0800d144
 80099f0:	0800d400 	.word	0x0800d400
 80099f4:	0800d2e0 	.word	0x0800d2e0
 80099f8:	0800d2b8 	.word	0x0800d2b8
 80099fc:	7ff00000 	.word	0x7ff00000
 8009a00:	7ca00000 	.word	0x7ca00000
 8009a04:	7fefffff 	.word	0x7fefffff
 8009a08:	f018 0310 	ands.w	r3, r8, #16
 8009a0c:	bf18      	it	ne
 8009a0e:	236a      	movne	r3, #106	; 0x6a
 8009a10:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 8009dc8 <_strtod_l+0x978>
 8009a14:	9304      	str	r3, [sp, #16]
 8009a16:	4650      	mov	r0, sl
 8009a18:	4659      	mov	r1, fp
 8009a1a:	2300      	movs	r3, #0
 8009a1c:	f018 0f01 	tst.w	r8, #1
 8009a20:	d004      	beq.n	8009a2c <_strtod_l+0x5dc>
 8009a22:	e9d9 2300 	ldrd	r2, r3, [r9]
 8009a26:	f7f6 fdef 	bl	8000608 <__aeabi_dmul>
 8009a2a:	2301      	movs	r3, #1
 8009a2c:	ea5f 0868 	movs.w	r8, r8, asr #1
 8009a30:	f109 0908 	add.w	r9, r9, #8
 8009a34:	d1f2      	bne.n	8009a1c <_strtod_l+0x5cc>
 8009a36:	b10b      	cbz	r3, 8009a3c <_strtod_l+0x5ec>
 8009a38:	4682      	mov	sl, r0
 8009a3a:	468b      	mov	fp, r1
 8009a3c:	9b04      	ldr	r3, [sp, #16]
 8009a3e:	b1bb      	cbz	r3, 8009a70 <_strtod_l+0x620>
 8009a40:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8009a44:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	4659      	mov	r1, fp
 8009a4c:	dd10      	ble.n	8009a70 <_strtod_l+0x620>
 8009a4e:	2b1f      	cmp	r3, #31
 8009a50:	f340 8128 	ble.w	8009ca4 <_strtod_l+0x854>
 8009a54:	2b34      	cmp	r3, #52	; 0x34
 8009a56:	bfde      	ittt	le
 8009a58:	3b20      	suble	r3, #32
 8009a5a:	f04f 32ff 	movle.w	r2, #4294967295
 8009a5e:	fa02 f303 	lslle.w	r3, r2, r3
 8009a62:	f04f 0a00 	mov.w	sl, #0
 8009a66:	bfcc      	ite	gt
 8009a68:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8009a6c:	ea03 0b01 	andle.w	fp, r3, r1
 8009a70:	2200      	movs	r2, #0
 8009a72:	2300      	movs	r3, #0
 8009a74:	4650      	mov	r0, sl
 8009a76:	4659      	mov	r1, fp
 8009a78:	f7f7 f82e 	bl	8000ad8 <__aeabi_dcmpeq>
 8009a7c:	2800      	cmp	r0, #0
 8009a7e:	d1a4      	bne.n	80099ca <_strtod_l+0x57a>
 8009a80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a82:	9300      	str	r3, [sp, #0]
 8009a84:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009a86:	462b      	mov	r3, r5
 8009a88:	463a      	mov	r2, r7
 8009a8a:	4620      	mov	r0, r4
 8009a8c:	f001 fe38 	bl	800b700 <__s2b>
 8009a90:	9009      	str	r0, [sp, #36]	; 0x24
 8009a92:	2800      	cmp	r0, #0
 8009a94:	f43f af24 	beq.w	80098e0 <_strtod_l+0x490>
 8009a98:	9b07      	ldr	r3, [sp, #28]
 8009a9a:	1b9e      	subs	r6, r3, r6
 8009a9c:	9b08      	ldr	r3, [sp, #32]
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	bfb4      	ite	lt
 8009aa2:	4633      	movlt	r3, r6
 8009aa4:	2300      	movge	r3, #0
 8009aa6:	9310      	str	r3, [sp, #64]	; 0x40
 8009aa8:	9b08      	ldr	r3, [sp, #32]
 8009aaa:	2500      	movs	r5, #0
 8009aac:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8009ab0:	9318      	str	r3, [sp, #96]	; 0x60
 8009ab2:	462e      	mov	r6, r5
 8009ab4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ab6:	4620      	mov	r0, r4
 8009ab8:	6859      	ldr	r1, [r3, #4]
 8009aba:	f001 fd75 	bl	800b5a8 <_Balloc>
 8009abe:	9007      	str	r0, [sp, #28]
 8009ac0:	2800      	cmp	r0, #0
 8009ac2:	f43f af11 	beq.w	80098e8 <_strtod_l+0x498>
 8009ac6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ac8:	691a      	ldr	r2, [r3, #16]
 8009aca:	3202      	adds	r2, #2
 8009acc:	f103 010c 	add.w	r1, r3, #12
 8009ad0:	0092      	lsls	r2, r2, #2
 8009ad2:	300c      	adds	r0, #12
 8009ad4:	f001 fd5a 	bl	800b58c <memcpy>
 8009ad8:	ec4b ab10 	vmov	d0, sl, fp
 8009adc:	aa20      	add	r2, sp, #128	; 0x80
 8009ade:	a91f      	add	r1, sp, #124	; 0x7c
 8009ae0:	4620      	mov	r0, r4
 8009ae2:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8009ae6:	f002 f947 	bl	800bd78 <__d2b>
 8009aea:	901e      	str	r0, [sp, #120]	; 0x78
 8009aec:	2800      	cmp	r0, #0
 8009aee:	f43f aefb 	beq.w	80098e8 <_strtod_l+0x498>
 8009af2:	2101      	movs	r1, #1
 8009af4:	4620      	mov	r0, r4
 8009af6:	f001 fe9d 	bl	800b834 <__i2b>
 8009afa:	4606      	mov	r6, r0
 8009afc:	2800      	cmp	r0, #0
 8009afe:	f43f aef3 	beq.w	80098e8 <_strtod_l+0x498>
 8009b02:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009b04:	9904      	ldr	r1, [sp, #16]
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	bfab      	itete	ge
 8009b0a:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 8009b0c:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 8009b0e:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 8009b10:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 8009b14:	bfac      	ite	ge
 8009b16:	eb03 0902 	addge.w	r9, r3, r2
 8009b1a:	1ad7      	sublt	r7, r2, r3
 8009b1c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8009b1e:	eba3 0801 	sub.w	r8, r3, r1
 8009b22:	4490      	add	r8, r2
 8009b24:	4ba3      	ldr	r3, [pc, #652]	; (8009db4 <_strtod_l+0x964>)
 8009b26:	f108 38ff 	add.w	r8, r8, #4294967295
 8009b2a:	4598      	cmp	r8, r3
 8009b2c:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8009b30:	f280 80cc 	bge.w	8009ccc <_strtod_l+0x87c>
 8009b34:	eba3 0308 	sub.w	r3, r3, r8
 8009b38:	2b1f      	cmp	r3, #31
 8009b3a:	eba2 0203 	sub.w	r2, r2, r3
 8009b3e:	f04f 0101 	mov.w	r1, #1
 8009b42:	f300 80b6 	bgt.w	8009cb2 <_strtod_l+0x862>
 8009b46:	fa01 f303 	lsl.w	r3, r1, r3
 8009b4a:	9311      	str	r3, [sp, #68]	; 0x44
 8009b4c:	2300      	movs	r3, #0
 8009b4e:	930c      	str	r3, [sp, #48]	; 0x30
 8009b50:	eb09 0802 	add.w	r8, r9, r2
 8009b54:	9b04      	ldr	r3, [sp, #16]
 8009b56:	45c1      	cmp	r9, r8
 8009b58:	4417      	add	r7, r2
 8009b5a:	441f      	add	r7, r3
 8009b5c:	464b      	mov	r3, r9
 8009b5e:	bfa8      	it	ge
 8009b60:	4643      	movge	r3, r8
 8009b62:	42bb      	cmp	r3, r7
 8009b64:	bfa8      	it	ge
 8009b66:	463b      	movge	r3, r7
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	bfc2      	ittt	gt
 8009b6c:	eba8 0803 	subgt.w	r8, r8, r3
 8009b70:	1aff      	subgt	r7, r7, r3
 8009b72:	eba9 0903 	subgt.w	r9, r9, r3
 8009b76:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	dd17      	ble.n	8009bac <_strtod_l+0x75c>
 8009b7c:	4631      	mov	r1, r6
 8009b7e:	461a      	mov	r2, r3
 8009b80:	4620      	mov	r0, r4
 8009b82:	f001 ff13 	bl	800b9ac <__pow5mult>
 8009b86:	4606      	mov	r6, r0
 8009b88:	2800      	cmp	r0, #0
 8009b8a:	f43f aead 	beq.w	80098e8 <_strtod_l+0x498>
 8009b8e:	4601      	mov	r1, r0
 8009b90:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8009b92:	4620      	mov	r0, r4
 8009b94:	f001 fe64 	bl	800b860 <__multiply>
 8009b98:	900f      	str	r0, [sp, #60]	; 0x3c
 8009b9a:	2800      	cmp	r0, #0
 8009b9c:	f43f aea4 	beq.w	80098e8 <_strtod_l+0x498>
 8009ba0:	991e      	ldr	r1, [sp, #120]	; 0x78
 8009ba2:	4620      	mov	r0, r4
 8009ba4:	f001 fd40 	bl	800b628 <_Bfree>
 8009ba8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009baa:	931e      	str	r3, [sp, #120]	; 0x78
 8009bac:	f1b8 0f00 	cmp.w	r8, #0
 8009bb0:	f300 8091 	bgt.w	8009cd6 <_strtod_l+0x886>
 8009bb4:	9b08      	ldr	r3, [sp, #32]
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	dd08      	ble.n	8009bcc <_strtod_l+0x77c>
 8009bba:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8009bbc:	9907      	ldr	r1, [sp, #28]
 8009bbe:	4620      	mov	r0, r4
 8009bc0:	f001 fef4 	bl	800b9ac <__pow5mult>
 8009bc4:	9007      	str	r0, [sp, #28]
 8009bc6:	2800      	cmp	r0, #0
 8009bc8:	f43f ae8e 	beq.w	80098e8 <_strtod_l+0x498>
 8009bcc:	2f00      	cmp	r7, #0
 8009bce:	dd08      	ble.n	8009be2 <_strtod_l+0x792>
 8009bd0:	9907      	ldr	r1, [sp, #28]
 8009bd2:	463a      	mov	r2, r7
 8009bd4:	4620      	mov	r0, r4
 8009bd6:	f001 ff43 	bl	800ba60 <__lshift>
 8009bda:	9007      	str	r0, [sp, #28]
 8009bdc:	2800      	cmp	r0, #0
 8009bde:	f43f ae83 	beq.w	80098e8 <_strtod_l+0x498>
 8009be2:	f1b9 0f00 	cmp.w	r9, #0
 8009be6:	dd08      	ble.n	8009bfa <_strtod_l+0x7aa>
 8009be8:	4631      	mov	r1, r6
 8009bea:	464a      	mov	r2, r9
 8009bec:	4620      	mov	r0, r4
 8009bee:	f001 ff37 	bl	800ba60 <__lshift>
 8009bf2:	4606      	mov	r6, r0
 8009bf4:	2800      	cmp	r0, #0
 8009bf6:	f43f ae77 	beq.w	80098e8 <_strtod_l+0x498>
 8009bfa:	9a07      	ldr	r2, [sp, #28]
 8009bfc:	991e      	ldr	r1, [sp, #120]	; 0x78
 8009bfe:	4620      	mov	r0, r4
 8009c00:	f001 ffb6 	bl	800bb70 <__mdiff>
 8009c04:	4605      	mov	r5, r0
 8009c06:	2800      	cmp	r0, #0
 8009c08:	f43f ae6e 	beq.w	80098e8 <_strtod_l+0x498>
 8009c0c:	68c3      	ldr	r3, [r0, #12]
 8009c0e:	930f      	str	r3, [sp, #60]	; 0x3c
 8009c10:	2300      	movs	r3, #0
 8009c12:	60c3      	str	r3, [r0, #12]
 8009c14:	4631      	mov	r1, r6
 8009c16:	f001 ff8f 	bl	800bb38 <__mcmp>
 8009c1a:	2800      	cmp	r0, #0
 8009c1c:	da65      	bge.n	8009cea <_strtod_l+0x89a>
 8009c1e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009c20:	ea53 030a 	orrs.w	r3, r3, sl
 8009c24:	f040 8087 	bne.w	8009d36 <_strtod_l+0x8e6>
 8009c28:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	f040 8082 	bne.w	8009d36 <_strtod_l+0x8e6>
 8009c32:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009c36:	0d1b      	lsrs	r3, r3, #20
 8009c38:	051b      	lsls	r3, r3, #20
 8009c3a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8009c3e:	d97a      	bls.n	8009d36 <_strtod_l+0x8e6>
 8009c40:	696b      	ldr	r3, [r5, #20]
 8009c42:	b913      	cbnz	r3, 8009c4a <_strtod_l+0x7fa>
 8009c44:	692b      	ldr	r3, [r5, #16]
 8009c46:	2b01      	cmp	r3, #1
 8009c48:	dd75      	ble.n	8009d36 <_strtod_l+0x8e6>
 8009c4a:	4629      	mov	r1, r5
 8009c4c:	2201      	movs	r2, #1
 8009c4e:	4620      	mov	r0, r4
 8009c50:	f001 ff06 	bl	800ba60 <__lshift>
 8009c54:	4631      	mov	r1, r6
 8009c56:	4605      	mov	r5, r0
 8009c58:	f001 ff6e 	bl	800bb38 <__mcmp>
 8009c5c:	2800      	cmp	r0, #0
 8009c5e:	dd6a      	ble.n	8009d36 <_strtod_l+0x8e6>
 8009c60:	9904      	ldr	r1, [sp, #16]
 8009c62:	4a55      	ldr	r2, [pc, #340]	; (8009db8 <_strtod_l+0x968>)
 8009c64:	465b      	mov	r3, fp
 8009c66:	2900      	cmp	r1, #0
 8009c68:	f000 8085 	beq.w	8009d76 <_strtod_l+0x926>
 8009c6c:	ea02 010b 	and.w	r1, r2, fp
 8009c70:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8009c74:	dc7f      	bgt.n	8009d76 <_strtod_l+0x926>
 8009c76:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8009c7a:	f77f aeaa 	ble.w	80099d2 <_strtod_l+0x582>
 8009c7e:	4a4f      	ldr	r2, [pc, #316]	; (8009dbc <_strtod_l+0x96c>)
 8009c80:	2300      	movs	r3, #0
 8009c82:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 8009c86:	4650      	mov	r0, sl
 8009c88:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 8009c8c:	4659      	mov	r1, fp
 8009c8e:	f7f6 fcbb 	bl	8000608 <__aeabi_dmul>
 8009c92:	460b      	mov	r3, r1
 8009c94:	4303      	orrs	r3, r0
 8009c96:	bf08      	it	eq
 8009c98:	2322      	moveq	r3, #34	; 0x22
 8009c9a:	4682      	mov	sl, r0
 8009c9c:	468b      	mov	fp, r1
 8009c9e:	bf08      	it	eq
 8009ca0:	6023      	streq	r3, [r4, #0]
 8009ca2:	e62b      	b.n	80098fc <_strtod_l+0x4ac>
 8009ca4:	f04f 32ff 	mov.w	r2, #4294967295
 8009ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8009cac:	ea03 0a0a 	and.w	sl, r3, sl
 8009cb0:	e6de      	b.n	8009a70 <_strtod_l+0x620>
 8009cb2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8009cb6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8009cba:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8009cbe:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8009cc2:	fa01 f308 	lsl.w	r3, r1, r8
 8009cc6:	930c      	str	r3, [sp, #48]	; 0x30
 8009cc8:	9111      	str	r1, [sp, #68]	; 0x44
 8009cca:	e741      	b.n	8009b50 <_strtod_l+0x700>
 8009ccc:	2300      	movs	r3, #0
 8009cce:	930c      	str	r3, [sp, #48]	; 0x30
 8009cd0:	2301      	movs	r3, #1
 8009cd2:	9311      	str	r3, [sp, #68]	; 0x44
 8009cd4:	e73c      	b.n	8009b50 <_strtod_l+0x700>
 8009cd6:	991e      	ldr	r1, [sp, #120]	; 0x78
 8009cd8:	4642      	mov	r2, r8
 8009cda:	4620      	mov	r0, r4
 8009cdc:	f001 fec0 	bl	800ba60 <__lshift>
 8009ce0:	901e      	str	r0, [sp, #120]	; 0x78
 8009ce2:	2800      	cmp	r0, #0
 8009ce4:	f47f af66 	bne.w	8009bb4 <_strtod_l+0x764>
 8009ce8:	e5fe      	b.n	80098e8 <_strtod_l+0x498>
 8009cea:	465f      	mov	r7, fp
 8009cec:	d16e      	bne.n	8009dcc <_strtod_l+0x97c>
 8009cee:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009cf0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009cf4:	b342      	cbz	r2, 8009d48 <_strtod_l+0x8f8>
 8009cf6:	4a32      	ldr	r2, [pc, #200]	; (8009dc0 <_strtod_l+0x970>)
 8009cf8:	4293      	cmp	r3, r2
 8009cfa:	d128      	bne.n	8009d4e <_strtod_l+0x8fe>
 8009cfc:	9b04      	ldr	r3, [sp, #16]
 8009cfe:	4650      	mov	r0, sl
 8009d00:	b1eb      	cbz	r3, 8009d3e <_strtod_l+0x8ee>
 8009d02:	4a2d      	ldr	r2, [pc, #180]	; (8009db8 <_strtod_l+0x968>)
 8009d04:	403a      	ands	r2, r7
 8009d06:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8009d0a:	f04f 31ff 	mov.w	r1, #4294967295
 8009d0e:	d819      	bhi.n	8009d44 <_strtod_l+0x8f4>
 8009d10:	0d12      	lsrs	r2, r2, #20
 8009d12:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8009d16:	fa01 f303 	lsl.w	r3, r1, r3
 8009d1a:	4298      	cmp	r0, r3
 8009d1c:	d117      	bne.n	8009d4e <_strtod_l+0x8fe>
 8009d1e:	4b29      	ldr	r3, [pc, #164]	; (8009dc4 <_strtod_l+0x974>)
 8009d20:	429f      	cmp	r7, r3
 8009d22:	d102      	bne.n	8009d2a <_strtod_l+0x8da>
 8009d24:	3001      	adds	r0, #1
 8009d26:	f43f addf 	beq.w	80098e8 <_strtod_l+0x498>
 8009d2a:	4b23      	ldr	r3, [pc, #140]	; (8009db8 <_strtod_l+0x968>)
 8009d2c:	403b      	ands	r3, r7
 8009d2e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8009d32:	f04f 0a00 	mov.w	sl, #0
 8009d36:	9b04      	ldr	r3, [sp, #16]
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d1a0      	bne.n	8009c7e <_strtod_l+0x82e>
 8009d3c:	e5de      	b.n	80098fc <_strtod_l+0x4ac>
 8009d3e:	f04f 33ff 	mov.w	r3, #4294967295
 8009d42:	e7ea      	b.n	8009d1a <_strtod_l+0x8ca>
 8009d44:	460b      	mov	r3, r1
 8009d46:	e7e8      	b.n	8009d1a <_strtod_l+0x8ca>
 8009d48:	ea53 030a 	orrs.w	r3, r3, sl
 8009d4c:	d088      	beq.n	8009c60 <_strtod_l+0x810>
 8009d4e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009d50:	b1db      	cbz	r3, 8009d8a <_strtod_l+0x93a>
 8009d52:	423b      	tst	r3, r7
 8009d54:	d0ef      	beq.n	8009d36 <_strtod_l+0x8e6>
 8009d56:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009d58:	9a04      	ldr	r2, [sp, #16]
 8009d5a:	4650      	mov	r0, sl
 8009d5c:	4659      	mov	r1, fp
 8009d5e:	b1c3      	cbz	r3, 8009d92 <_strtod_l+0x942>
 8009d60:	f7ff fb58 	bl	8009414 <sulp>
 8009d64:	4602      	mov	r2, r0
 8009d66:	460b      	mov	r3, r1
 8009d68:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009d6c:	f7f6 fa96 	bl	800029c <__adddf3>
 8009d70:	4682      	mov	sl, r0
 8009d72:	468b      	mov	fp, r1
 8009d74:	e7df      	b.n	8009d36 <_strtod_l+0x8e6>
 8009d76:	4013      	ands	r3, r2
 8009d78:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8009d7c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8009d80:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8009d84:	f04f 3aff 	mov.w	sl, #4294967295
 8009d88:	e7d5      	b.n	8009d36 <_strtod_l+0x8e6>
 8009d8a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009d8c:	ea13 0f0a 	tst.w	r3, sl
 8009d90:	e7e0      	b.n	8009d54 <_strtod_l+0x904>
 8009d92:	f7ff fb3f 	bl	8009414 <sulp>
 8009d96:	4602      	mov	r2, r0
 8009d98:	460b      	mov	r3, r1
 8009d9a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009d9e:	f7f6 fa7b 	bl	8000298 <__aeabi_dsub>
 8009da2:	2200      	movs	r2, #0
 8009da4:	2300      	movs	r3, #0
 8009da6:	4682      	mov	sl, r0
 8009da8:	468b      	mov	fp, r1
 8009daa:	f7f6 fe95 	bl	8000ad8 <__aeabi_dcmpeq>
 8009dae:	2800      	cmp	r0, #0
 8009db0:	d0c1      	beq.n	8009d36 <_strtod_l+0x8e6>
 8009db2:	e60e      	b.n	80099d2 <_strtod_l+0x582>
 8009db4:	fffffc02 	.word	0xfffffc02
 8009db8:	7ff00000 	.word	0x7ff00000
 8009dbc:	39500000 	.word	0x39500000
 8009dc0:	000fffff 	.word	0x000fffff
 8009dc4:	7fefffff 	.word	0x7fefffff
 8009dc8:	0800d018 	.word	0x0800d018
 8009dcc:	4631      	mov	r1, r6
 8009dce:	4628      	mov	r0, r5
 8009dd0:	f002 f82e 	bl	800be30 <__ratio>
 8009dd4:	ec59 8b10 	vmov	r8, r9, d0
 8009dd8:	ee10 0a10 	vmov	r0, s0
 8009ddc:	2200      	movs	r2, #0
 8009dde:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009de2:	4649      	mov	r1, r9
 8009de4:	f7f6 fe8c 	bl	8000b00 <__aeabi_dcmple>
 8009de8:	2800      	cmp	r0, #0
 8009dea:	d07c      	beq.n	8009ee6 <_strtod_l+0xa96>
 8009dec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d04c      	beq.n	8009e8c <_strtod_l+0xa3c>
 8009df2:	4b95      	ldr	r3, [pc, #596]	; (800a048 <_strtod_l+0xbf8>)
 8009df4:	2200      	movs	r2, #0
 8009df6:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8009dfa:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800a048 <_strtod_l+0xbf8>
 8009dfe:	f04f 0800 	mov.w	r8, #0
 8009e02:	4b92      	ldr	r3, [pc, #584]	; (800a04c <_strtod_l+0xbfc>)
 8009e04:	403b      	ands	r3, r7
 8009e06:	9311      	str	r3, [sp, #68]	; 0x44
 8009e08:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8009e0a:	4b91      	ldr	r3, [pc, #580]	; (800a050 <_strtod_l+0xc00>)
 8009e0c:	429a      	cmp	r2, r3
 8009e0e:	f040 80b2 	bne.w	8009f76 <_strtod_l+0xb26>
 8009e12:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009e16:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009e1a:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8009e1e:	ec4b ab10 	vmov	d0, sl, fp
 8009e22:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 8009e26:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8009e2a:	f001 ff29 	bl	800bc80 <__ulp>
 8009e2e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009e32:	ec53 2b10 	vmov	r2, r3, d0
 8009e36:	f7f6 fbe7 	bl	8000608 <__aeabi_dmul>
 8009e3a:	4652      	mov	r2, sl
 8009e3c:	465b      	mov	r3, fp
 8009e3e:	f7f6 fa2d 	bl	800029c <__adddf3>
 8009e42:	460b      	mov	r3, r1
 8009e44:	4981      	ldr	r1, [pc, #516]	; (800a04c <_strtod_l+0xbfc>)
 8009e46:	4a83      	ldr	r2, [pc, #524]	; (800a054 <_strtod_l+0xc04>)
 8009e48:	4019      	ands	r1, r3
 8009e4a:	4291      	cmp	r1, r2
 8009e4c:	4682      	mov	sl, r0
 8009e4e:	d95e      	bls.n	8009f0e <_strtod_l+0xabe>
 8009e50:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009e52:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8009e56:	4293      	cmp	r3, r2
 8009e58:	d103      	bne.n	8009e62 <_strtod_l+0xa12>
 8009e5a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009e5c:	3301      	adds	r3, #1
 8009e5e:	f43f ad43 	beq.w	80098e8 <_strtod_l+0x498>
 8009e62:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 800a060 <_strtod_l+0xc10>
 8009e66:	f04f 3aff 	mov.w	sl, #4294967295
 8009e6a:	991e      	ldr	r1, [sp, #120]	; 0x78
 8009e6c:	4620      	mov	r0, r4
 8009e6e:	f001 fbdb 	bl	800b628 <_Bfree>
 8009e72:	9907      	ldr	r1, [sp, #28]
 8009e74:	4620      	mov	r0, r4
 8009e76:	f001 fbd7 	bl	800b628 <_Bfree>
 8009e7a:	4631      	mov	r1, r6
 8009e7c:	4620      	mov	r0, r4
 8009e7e:	f001 fbd3 	bl	800b628 <_Bfree>
 8009e82:	4629      	mov	r1, r5
 8009e84:	4620      	mov	r0, r4
 8009e86:	f001 fbcf 	bl	800b628 <_Bfree>
 8009e8a:	e613      	b.n	8009ab4 <_strtod_l+0x664>
 8009e8c:	f1ba 0f00 	cmp.w	sl, #0
 8009e90:	d11b      	bne.n	8009eca <_strtod_l+0xa7a>
 8009e92:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009e96:	b9f3      	cbnz	r3, 8009ed6 <_strtod_l+0xa86>
 8009e98:	4b6b      	ldr	r3, [pc, #428]	; (800a048 <_strtod_l+0xbf8>)
 8009e9a:	2200      	movs	r2, #0
 8009e9c:	4640      	mov	r0, r8
 8009e9e:	4649      	mov	r1, r9
 8009ea0:	f7f6 fe24 	bl	8000aec <__aeabi_dcmplt>
 8009ea4:	b9d0      	cbnz	r0, 8009edc <_strtod_l+0xa8c>
 8009ea6:	4640      	mov	r0, r8
 8009ea8:	4649      	mov	r1, r9
 8009eaa:	4b6b      	ldr	r3, [pc, #428]	; (800a058 <_strtod_l+0xc08>)
 8009eac:	2200      	movs	r2, #0
 8009eae:	f7f6 fbab 	bl	8000608 <__aeabi_dmul>
 8009eb2:	4680      	mov	r8, r0
 8009eb4:	4689      	mov	r9, r1
 8009eb6:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8009eba:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 8009ebe:	931b      	str	r3, [sp, #108]	; 0x6c
 8009ec0:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 8009ec4:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8009ec8:	e79b      	b.n	8009e02 <_strtod_l+0x9b2>
 8009eca:	f1ba 0f01 	cmp.w	sl, #1
 8009ece:	d102      	bne.n	8009ed6 <_strtod_l+0xa86>
 8009ed0:	2f00      	cmp	r7, #0
 8009ed2:	f43f ad7e 	beq.w	80099d2 <_strtod_l+0x582>
 8009ed6:	4b61      	ldr	r3, [pc, #388]	; (800a05c <_strtod_l+0xc0c>)
 8009ed8:	2200      	movs	r2, #0
 8009eda:	e78c      	b.n	8009df6 <_strtod_l+0x9a6>
 8009edc:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800a058 <_strtod_l+0xc08>
 8009ee0:	f04f 0800 	mov.w	r8, #0
 8009ee4:	e7e7      	b.n	8009eb6 <_strtod_l+0xa66>
 8009ee6:	4b5c      	ldr	r3, [pc, #368]	; (800a058 <_strtod_l+0xc08>)
 8009ee8:	4640      	mov	r0, r8
 8009eea:	4649      	mov	r1, r9
 8009eec:	2200      	movs	r2, #0
 8009eee:	f7f6 fb8b 	bl	8000608 <__aeabi_dmul>
 8009ef2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009ef4:	4680      	mov	r8, r0
 8009ef6:	4689      	mov	r9, r1
 8009ef8:	b933      	cbnz	r3, 8009f08 <_strtod_l+0xab8>
 8009efa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009efe:	9012      	str	r0, [sp, #72]	; 0x48
 8009f00:	9313      	str	r3, [sp, #76]	; 0x4c
 8009f02:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8009f06:	e7dd      	b.n	8009ec4 <_strtod_l+0xa74>
 8009f08:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 8009f0c:	e7f9      	b.n	8009f02 <_strtod_l+0xab2>
 8009f0e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8009f12:	9b04      	ldr	r3, [sp, #16]
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d1a8      	bne.n	8009e6a <_strtod_l+0xa1a>
 8009f18:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009f1c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8009f1e:	0d1b      	lsrs	r3, r3, #20
 8009f20:	051b      	lsls	r3, r3, #20
 8009f22:	429a      	cmp	r2, r3
 8009f24:	d1a1      	bne.n	8009e6a <_strtod_l+0xa1a>
 8009f26:	4640      	mov	r0, r8
 8009f28:	4649      	mov	r1, r9
 8009f2a:	f7f6 fecd 	bl	8000cc8 <__aeabi_d2lz>
 8009f2e:	f7f6 fb3d 	bl	80005ac <__aeabi_l2d>
 8009f32:	4602      	mov	r2, r0
 8009f34:	460b      	mov	r3, r1
 8009f36:	4640      	mov	r0, r8
 8009f38:	4649      	mov	r1, r9
 8009f3a:	f7f6 f9ad 	bl	8000298 <__aeabi_dsub>
 8009f3e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009f40:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009f44:	ea43 030a 	orr.w	r3, r3, sl
 8009f48:	4313      	orrs	r3, r2
 8009f4a:	4680      	mov	r8, r0
 8009f4c:	4689      	mov	r9, r1
 8009f4e:	d053      	beq.n	8009ff8 <_strtod_l+0xba8>
 8009f50:	a335      	add	r3, pc, #212	; (adr r3, 800a028 <_strtod_l+0xbd8>)
 8009f52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f56:	f7f6 fdc9 	bl	8000aec <__aeabi_dcmplt>
 8009f5a:	2800      	cmp	r0, #0
 8009f5c:	f47f acce 	bne.w	80098fc <_strtod_l+0x4ac>
 8009f60:	a333      	add	r3, pc, #204	; (adr r3, 800a030 <_strtod_l+0xbe0>)
 8009f62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f66:	4640      	mov	r0, r8
 8009f68:	4649      	mov	r1, r9
 8009f6a:	f7f6 fddd 	bl	8000b28 <__aeabi_dcmpgt>
 8009f6e:	2800      	cmp	r0, #0
 8009f70:	f43f af7b 	beq.w	8009e6a <_strtod_l+0xa1a>
 8009f74:	e4c2      	b.n	80098fc <_strtod_l+0x4ac>
 8009f76:	9b04      	ldr	r3, [sp, #16]
 8009f78:	b333      	cbz	r3, 8009fc8 <_strtod_l+0xb78>
 8009f7a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009f7c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009f80:	d822      	bhi.n	8009fc8 <_strtod_l+0xb78>
 8009f82:	a32d      	add	r3, pc, #180	; (adr r3, 800a038 <_strtod_l+0xbe8>)
 8009f84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f88:	4640      	mov	r0, r8
 8009f8a:	4649      	mov	r1, r9
 8009f8c:	f7f6 fdb8 	bl	8000b00 <__aeabi_dcmple>
 8009f90:	b1a0      	cbz	r0, 8009fbc <_strtod_l+0xb6c>
 8009f92:	4649      	mov	r1, r9
 8009f94:	4640      	mov	r0, r8
 8009f96:	f7f6 fe0f 	bl	8000bb8 <__aeabi_d2uiz>
 8009f9a:	2801      	cmp	r0, #1
 8009f9c:	bf38      	it	cc
 8009f9e:	2001      	movcc	r0, #1
 8009fa0:	f7f6 fab8 	bl	8000514 <__aeabi_ui2d>
 8009fa4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009fa6:	4680      	mov	r8, r0
 8009fa8:	4689      	mov	r9, r1
 8009faa:	bb13      	cbnz	r3, 8009ff2 <_strtod_l+0xba2>
 8009fac:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009fb0:	9014      	str	r0, [sp, #80]	; 0x50
 8009fb2:	9315      	str	r3, [sp, #84]	; 0x54
 8009fb4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8009fb8:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8009fbc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009fbe:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8009fc0:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8009fc4:	1a9b      	subs	r3, r3, r2
 8009fc6:	930d      	str	r3, [sp, #52]	; 0x34
 8009fc8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009fcc:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8009fd0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8009fd4:	f001 fe54 	bl	800bc80 <__ulp>
 8009fd8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009fdc:	ec53 2b10 	vmov	r2, r3, d0
 8009fe0:	f7f6 fb12 	bl	8000608 <__aeabi_dmul>
 8009fe4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009fe8:	f7f6 f958 	bl	800029c <__adddf3>
 8009fec:	4682      	mov	sl, r0
 8009fee:	468b      	mov	fp, r1
 8009ff0:	e78f      	b.n	8009f12 <_strtod_l+0xac2>
 8009ff2:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 8009ff6:	e7dd      	b.n	8009fb4 <_strtod_l+0xb64>
 8009ff8:	a311      	add	r3, pc, #68	; (adr r3, 800a040 <_strtod_l+0xbf0>)
 8009ffa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ffe:	f7f6 fd75 	bl	8000aec <__aeabi_dcmplt>
 800a002:	e7b4      	b.n	8009f6e <_strtod_l+0xb1e>
 800a004:	2300      	movs	r3, #0
 800a006:	930e      	str	r3, [sp, #56]	; 0x38
 800a008:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800a00a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a00c:	6013      	str	r3, [r2, #0]
 800a00e:	f7ff ba65 	b.w	80094dc <_strtod_l+0x8c>
 800a012:	2b65      	cmp	r3, #101	; 0x65
 800a014:	f43f ab5d 	beq.w	80096d2 <_strtod_l+0x282>
 800a018:	2b45      	cmp	r3, #69	; 0x45
 800a01a:	f43f ab5a 	beq.w	80096d2 <_strtod_l+0x282>
 800a01e:	2201      	movs	r2, #1
 800a020:	f7ff bb92 	b.w	8009748 <_strtod_l+0x2f8>
 800a024:	f3af 8000 	nop.w
 800a028:	94a03595 	.word	0x94a03595
 800a02c:	3fdfffff 	.word	0x3fdfffff
 800a030:	35afe535 	.word	0x35afe535
 800a034:	3fe00000 	.word	0x3fe00000
 800a038:	ffc00000 	.word	0xffc00000
 800a03c:	41dfffff 	.word	0x41dfffff
 800a040:	94a03595 	.word	0x94a03595
 800a044:	3fcfffff 	.word	0x3fcfffff
 800a048:	3ff00000 	.word	0x3ff00000
 800a04c:	7ff00000 	.word	0x7ff00000
 800a050:	7fe00000 	.word	0x7fe00000
 800a054:	7c9fffff 	.word	0x7c9fffff
 800a058:	3fe00000 	.word	0x3fe00000
 800a05c:	bff00000 	.word	0xbff00000
 800a060:	7fefffff 	.word	0x7fefffff

0800a064 <_strtod_r>:
 800a064:	4b01      	ldr	r3, [pc, #4]	; (800a06c <_strtod_r+0x8>)
 800a066:	f7ff b9f3 	b.w	8009450 <_strtod_l>
 800a06a:	bf00      	nop
 800a06c:	200001e8 	.word	0x200001e8

0800a070 <_strtol_l.isra.0>:
 800a070:	2b01      	cmp	r3, #1
 800a072:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a076:	d001      	beq.n	800a07c <_strtol_l.isra.0+0xc>
 800a078:	2b24      	cmp	r3, #36	; 0x24
 800a07a:	d906      	bls.n	800a08a <_strtol_l.isra.0+0x1a>
 800a07c:	f7fe faf8 	bl	8008670 <__errno>
 800a080:	2316      	movs	r3, #22
 800a082:	6003      	str	r3, [r0, #0]
 800a084:	2000      	movs	r0, #0
 800a086:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a08a:	4f3a      	ldr	r7, [pc, #232]	; (800a174 <_strtol_l.isra.0+0x104>)
 800a08c:	468e      	mov	lr, r1
 800a08e:	4676      	mov	r6, lr
 800a090:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800a094:	5de5      	ldrb	r5, [r4, r7]
 800a096:	f015 0508 	ands.w	r5, r5, #8
 800a09a:	d1f8      	bne.n	800a08e <_strtol_l.isra.0+0x1e>
 800a09c:	2c2d      	cmp	r4, #45	; 0x2d
 800a09e:	d134      	bne.n	800a10a <_strtol_l.isra.0+0x9a>
 800a0a0:	f89e 4000 	ldrb.w	r4, [lr]
 800a0a4:	f04f 0801 	mov.w	r8, #1
 800a0a8:	f106 0e02 	add.w	lr, r6, #2
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	d05c      	beq.n	800a16a <_strtol_l.isra.0+0xfa>
 800a0b0:	2b10      	cmp	r3, #16
 800a0b2:	d10c      	bne.n	800a0ce <_strtol_l.isra.0+0x5e>
 800a0b4:	2c30      	cmp	r4, #48	; 0x30
 800a0b6:	d10a      	bne.n	800a0ce <_strtol_l.isra.0+0x5e>
 800a0b8:	f89e 4000 	ldrb.w	r4, [lr]
 800a0bc:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800a0c0:	2c58      	cmp	r4, #88	; 0x58
 800a0c2:	d14d      	bne.n	800a160 <_strtol_l.isra.0+0xf0>
 800a0c4:	f89e 4001 	ldrb.w	r4, [lr, #1]
 800a0c8:	2310      	movs	r3, #16
 800a0ca:	f10e 0e02 	add.w	lr, lr, #2
 800a0ce:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 800a0d2:	f10c 3cff 	add.w	ip, ip, #4294967295
 800a0d6:	2600      	movs	r6, #0
 800a0d8:	fbbc f9f3 	udiv	r9, ip, r3
 800a0dc:	4635      	mov	r5, r6
 800a0de:	fb03 ca19 	mls	sl, r3, r9, ip
 800a0e2:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800a0e6:	2f09      	cmp	r7, #9
 800a0e8:	d818      	bhi.n	800a11c <_strtol_l.isra.0+0xac>
 800a0ea:	463c      	mov	r4, r7
 800a0ec:	42a3      	cmp	r3, r4
 800a0ee:	dd24      	ble.n	800a13a <_strtol_l.isra.0+0xca>
 800a0f0:	2e00      	cmp	r6, #0
 800a0f2:	db1f      	blt.n	800a134 <_strtol_l.isra.0+0xc4>
 800a0f4:	45a9      	cmp	r9, r5
 800a0f6:	d31d      	bcc.n	800a134 <_strtol_l.isra.0+0xc4>
 800a0f8:	d101      	bne.n	800a0fe <_strtol_l.isra.0+0x8e>
 800a0fa:	45a2      	cmp	sl, r4
 800a0fc:	db1a      	blt.n	800a134 <_strtol_l.isra.0+0xc4>
 800a0fe:	fb05 4503 	mla	r5, r5, r3, r4
 800a102:	2601      	movs	r6, #1
 800a104:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800a108:	e7eb      	b.n	800a0e2 <_strtol_l.isra.0+0x72>
 800a10a:	2c2b      	cmp	r4, #43	; 0x2b
 800a10c:	bf08      	it	eq
 800a10e:	f89e 4000 	ldrbeq.w	r4, [lr]
 800a112:	46a8      	mov	r8, r5
 800a114:	bf08      	it	eq
 800a116:	f106 0e02 	addeq.w	lr, r6, #2
 800a11a:	e7c7      	b.n	800a0ac <_strtol_l.isra.0+0x3c>
 800a11c:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800a120:	2f19      	cmp	r7, #25
 800a122:	d801      	bhi.n	800a128 <_strtol_l.isra.0+0xb8>
 800a124:	3c37      	subs	r4, #55	; 0x37
 800a126:	e7e1      	b.n	800a0ec <_strtol_l.isra.0+0x7c>
 800a128:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800a12c:	2f19      	cmp	r7, #25
 800a12e:	d804      	bhi.n	800a13a <_strtol_l.isra.0+0xca>
 800a130:	3c57      	subs	r4, #87	; 0x57
 800a132:	e7db      	b.n	800a0ec <_strtol_l.isra.0+0x7c>
 800a134:	f04f 36ff 	mov.w	r6, #4294967295
 800a138:	e7e4      	b.n	800a104 <_strtol_l.isra.0+0x94>
 800a13a:	2e00      	cmp	r6, #0
 800a13c:	da05      	bge.n	800a14a <_strtol_l.isra.0+0xda>
 800a13e:	2322      	movs	r3, #34	; 0x22
 800a140:	6003      	str	r3, [r0, #0]
 800a142:	4665      	mov	r5, ip
 800a144:	b942      	cbnz	r2, 800a158 <_strtol_l.isra.0+0xe8>
 800a146:	4628      	mov	r0, r5
 800a148:	e79d      	b.n	800a086 <_strtol_l.isra.0+0x16>
 800a14a:	f1b8 0f00 	cmp.w	r8, #0
 800a14e:	d000      	beq.n	800a152 <_strtol_l.isra.0+0xe2>
 800a150:	426d      	negs	r5, r5
 800a152:	2a00      	cmp	r2, #0
 800a154:	d0f7      	beq.n	800a146 <_strtol_l.isra.0+0xd6>
 800a156:	b10e      	cbz	r6, 800a15c <_strtol_l.isra.0+0xec>
 800a158:	f10e 31ff 	add.w	r1, lr, #4294967295
 800a15c:	6011      	str	r1, [r2, #0]
 800a15e:	e7f2      	b.n	800a146 <_strtol_l.isra.0+0xd6>
 800a160:	2430      	movs	r4, #48	; 0x30
 800a162:	2b00      	cmp	r3, #0
 800a164:	d1b3      	bne.n	800a0ce <_strtol_l.isra.0+0x5e>
 800a166:	2308      	movs	r3, #8
 800a168:	e7b1      	b.n	800a0ce <_strtol_l.isra.0+0x5e>
 800a16a:	2c30      	cmp	r4, #48	; 0x30
 800a16c:	d0a4      	beq.n	800a0b8 <_strtol_l.isra.0+0x48>
 800a16e:	230a      	movs	r3, #10
 800a170:	e7ad      	b.n	800a0ce <_strtol_l.isra.0+0x5e>
 800a172:	bf00      	nop
 800a174:	0800d041 	.word	0x0800d041

0800a178 <_strtol_r>:
 800a178:	f7ff bf7a 	b.w	800a070 <_strtol_l.isra.0>

0800a17c <quorem>:
 800a17c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a180:	6903      	ldr	r3, [r0, #16]
 800a182:	690c      	ldr	r4, [r1, #16]
 800a184:	42a3      	cmp	r3, r4
 800a186:	4607      	mov	r7, r0
 800a188:	f2c0 8081 	blt.w	800a28e <quorem+0x112>
 800a18c:	3c01      	subs	r4, #1
 800a18e:	f101 0814 	add.w	r8, r1, #20
 800a192:	f100 0514 	add.w	r5, r0, #20
 800a196:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a19a:	9301      	str	r3, [sp, #4]
 800a19c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a1a0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a1a4:	3301      	adds	r3, #1
 800a1a6:	429a      	cmp	r2, r3
 800a1a8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a1ac:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a1b0:	fbb2 f6f3 	udiv	r6, r2, r3
 800a1b4:	d331      	bcc.n	800a21a <quorem+0x9e>
 800a1b6:	f04f 0e00 	mov.w	lr, #0
 800a1ba:	4640      	mov	r0, r8
 800a1bc:	46ac      	mov	ip, r5
 800a1be:	46f2      	mov	sl, lr
 800a1c0:	f850 2b04 	ldr.w	r2, [r0], #4
 800a1c4:	b293      	uxth	r3, r2
 800a1c6:	fb06 e303 	mla	r3, r6, r3, lr
 800a1ca:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800a1ce:	b29b      	uxth	r3, r3
 800a1d0:	ebaa 0303 	sub.w	r3, sl, r3
 800a1d4:	0c12      	lsrs	r2, r2, #16
 800a1d6:	f8dc a000 	ldr.w	sl, [ip]
 800a1da:	fb06 e202 	mla	r2, r6, r2, lr
 800a1de:	fa13 f38a 	uxtah	r3, r3, sl
 800a1e2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a1e6:	fa1f fa82 	uxth.w	sl, r2
 800a1ea:	f8dc 2000 	ldr.w	r2, [ip]
 800a1ee:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800a1f2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a1f6:	b29b      	uxth	r3, r3
 800a1f8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a1fc:	4581      	cmp	r9, r0
 800a1fe:	f84c 3b04 	str.w	r3, [ip], #4
 800a202:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a206:	d2db      	bcs.n	800a1c0 <quorem+0x44>
 800a208:	f855 300b 	ldr.w	r3, [r5, fp]
 800a20c:	b92b      	cbnz	r3, 800a21a <quorem+0x9e>
 800a20e:	9b01      	ldr	r3, [sp, #4]
 800a210:	3b04      	subs	r3, #4
 800a212:	429d      	cmp	r5, r3
 800a214:	461a      	mov	r2, r3
 800a216:	d32e      	bcc.n	800a276 <quorem+0xfa>
 800a218:	613c      	str	r4, [r7, #16]
 800a21a:	4638      	mov	r0, r7
 800a21c:	f001 fc8c 	bl	800bb38 <__mcmp>
 800a220:	2800      	cmp	r0, #0
 800a222:	db24      	blt.n	800a26e <quorem+0xf2>
 800a224:	3601      	adds	r6, #1
 800a226:	4628      	mov	r0, r5
 800a228:	f04f 0c00 	mov.w	ip, #0
 800a22c:	f858 2b04 	ldr.w	r2, [r8], #4
 800a230:	f8d0 e000 	ldr.w	lr, [r0]
 800a234:	b293      	uxth	r3, r2
 800a236:	ebac 0303 	sub.w	r3, ip, r3
 800a23a:	0c12      	lsrs	r2, r2, #16
 800a23c:	fa13 f38e 	uxtah	r3, r3, lr
 800a240:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a244:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a248:	b29b      	uxth	r3, r3
 800a24a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a24e:	45c1      	cmp	r9, r8
 800a250:	f840 3b04 	str.w	r3, [r0], #4
 800a254:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a258:	d2e8      	bcs.n	800a22c <quorem+0xb0>
 800a25a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a25e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a262:	b922      	cbnz	r2, 800a26e <quorem+0xf2>
 800a264:	3b04      	subs	r3, #4
 800a266:	429d      	cmp	r5, r3
 800a268:	461a      	mov	r2, r3
 800a26a:	d30a      	bcc.n	800a282 <quorem+0x106>
 800a26c:	613c      	str	r4, [r7, #16]
 800a26e:	4630      	mov	r0, r6
 800a270:	b003      	add	sp, #12
 800a272:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a276:	6812      	ldr	r2, [r2, #0]
 800a278:	3b04      	subs	r3, #4
 800a27a:	2a00      	cmp	r2, #0
 800a27c:	d1cc      	bne.n	800a218 <quorem+0x9c>
 800a27e:	3c01      	subs	r4, #1
 800a280:	e7c7      	b.n	800a212 <quorem+0x96>
 800a282:	6812      	ldr	r2, [r2, #0]
 800a284:	3b04      	subs	r3, #4
 800a286:	2a00      	cmp	r2, #0
 800a288:	d1f0      	bne.n	800a26c <quorem+0xf0>
 800a28a:	3c01      	subs	r4, #1
 800a28c:	e7eb      	b.n	800a266 <quorem+0xea>
 800a28e:	2000      	movs	r0, #0
 800a290:	e7ee      	b.n	800a270 <quorem+0xf4>
 800a292:	0000      	movs	r0, r0
 800a294:	0000      	movs	r0, r0
	...

0800a298 <_dtoa_r>:
 800a298:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a29c:	ed2d 8b02 	vpush	{d8}
 800a2a0:	ec57 6b10 	vmov	r6, r7, d0
 800a2a4:	b095      	sub	sp, #84	; 0x54
 800a2a6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a2a8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a2ac:	9105      	str	r1, [sp, #20]
 800a2ae:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800a2b2:	4604      	mov	r4, r0
 800a2b4:	9209      	str	r2, [sp, #36]	; 0x24
 800a2b6:	930f      	str	r3, [sp, #60]	; 0x3c
 800a2b8:	b975      	cbnz	r5, 800a2d8 <_dtoa_r+0x40>
 800a2ba:	2010      	movs	r0, #16
 800a2bc:	f001 f94c 	bl	800b558 <malloc>
 800a2c0:	4602      	mov	r2, r0
 800a2c2:	6260      	str	r0, [r4, #36]	; 0x24
 800a2c4:	b920      	cbnz	r0, 800a2d0 <_dtoa_r+0x38>
 800a2c6:	4bb2      	ldr	r3, [pc, #712]	; (800a590 <_dtoa_r+0x2f8>)
 800a2c8:	21ea      	movs	r1, #234	; 0xea
 800a2ca:	48b2      	ldr	r0, [pc, #712]	; (800a594 <_dtoa_r+0x2fc>)
 800a2cc:	f002 f874 	bl	800c3b8 <__assert_func>
 800a2d0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a2d4:	6005      	str	r5, [r0, #0]
 800a2d6:	60c5      	str	r5, [r0, #12]
 800a2d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a2da:	6819      	ldr	r1, [r3, #0]
 800a2dc:	b151      	cbz	r1, 800a2f4 <_dtoa_r+0x5c>
 800a2de:	685a      	ldr	r2, [r3, #4]
 800a2e0:	604a      	str	r2, [r1, #4]
 800a2e2:	2301      	movs	r3, #1
 800a2e4:	4093      	lsls	r3, r2
 800a2e6:	608b      	str	r3, [r1, #8]
 800a2e8:	4620      	mov	r0, r4
 800a2ea:	f001 f99d 	bl	800b628 <_Bfree>
 800a2ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a2f0:	2200      	movs	r2, #0
 800a2f2:	601a      	str	r2, [r3, #0]
 800a2f4:	1e3b      	subs	r3, r7, #0
 800a2f6:	bfb9      	ittee	lt
 800a2f8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a2fc:	9303      	strlt	r3, [sp, #12]
 800a2fe:	2300      	movge	r3, #0
 800a300:	f8c8 3000 	strge.w	r3, [r8]
 800a304:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800a308:	4ba3      	ldr	r3, [pc, #652]	; (800a598 <_dtoa_r+0x300>)
 800a30a:	bfbc      	itt	lt
 800a30c:	2201      	movlt	r2, #1
 800a30e:	f8c8 2000 	strlt.w	r2, [r8]
 800a312:	ea33 0309 	bics.w	r3, r3, r9
 800a316:	d11b      	bne.n	800a350 <_dtoa_r+0xb8>
 800a318:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a31a:	f242 730f 	movw	r3, #9999	; 0x270f
 800a31e:	6013      	str	r3, [r2, #0]
 800a320:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a324:	4333      	orrs	r3, r6
 800a326:	f000 857a 	beq.w	800ae1e <_dtoa_r+0xb86>
 800a32a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a32c:	b963      	cbnz	r3, 800a348 <_dtoa_r+0xb0>
 800a32e:	4b9b      	ldr	r3, [pc, #620]	; (800a59c <_dtoa_r+0x304>)
 800a330:	e024      	b.n	800a37c <_dtoa_r+0xe4>
 800a332:	4b9b      	ldr	r3, [pc, #620]	; (800a5a0 <_dtoa_r+0x308>)
 800a334:	9300      	str	r3, [sp, #0]
 800a336:	3308      	adds	r3, #8
 800a338:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a33a:	6013      	str	r3, [r2, #0]
 800a33c:	9800      	ldr	r0, [sp, #0]
 800a33e:	b015      	add	sp, #84	; 0x54
 800a340:	ecbd 8b02 	vpop	{d8}
 800a344:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a348:	4b94      	ldr	r3, [pc, #592]	; (800a59c <_dtoa_r+0x304>)
 800a34a:	9300      	str	r3, [sp, #0]
 800a34c:	3303      	adds	r3, #3
 800a34e:	e7f3      	b.n	800a338 <_dtoa_r+0xa0>
 800a350:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a354:	2200      	movs	r2, #0
 800a356:	ec51 0b17 	vmov	r0, r1, d7
 800a35a:	2300      	movs	r3, #0
 800a35c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800a360:	f7f6 fbba 	bl	8000ad8 <__aeabi_dcmpeq>
 800a364:	4680      	mov	r8, r0
 800a366:	b158      	cbz	r0, 800a380 <_dtoa_r+0xe8>
 800a368:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a36a:	2301      	movs	r3, #1
 800a36c:	6013      	str	r3, [r2, #0]
 800a36e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a370:	2b00      	cmp	r3, #0
 800a372:	f000 8551 	beq.w	800ae18 <_dtoa_r+0xb80>
 800a376:	488b      	ldr	r0, [pc, #556]	; (800a5a4 <_dtoa_r+0x30c>)
 800a378:	6018      	str	r0, [r3, #0]
 800a37a:	1e43      	subs	r3, r0, #1
 800a37c:	9300      	str	r3, [sp, #0]
 800a37e:	e7dd      	b.n	800a33c <_dtoa_r+0xa4>
 800a380:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800a384:	aa12      	add	r2, sp, #72	; 0x48
 800a386:	a913      	add	r1, sp, #76	; 0x4c
 800a388:	4620      	mov	r0, r4
 800a38a:	f001 fcf5 	bl	800bd78 <__d2b>
 800a38e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a392:	4683      	mov	fp, r0
 800a394:	2d00      	cmp	r5, #0
 800a396:	d07c      	beq.n	800a492 <_dtoa_r+0x1fa>
 800a398:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a39a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800a39e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a3a2:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800a3a6:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800a3aa:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800a3ae:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a3b2:	4b7d      	ldr	r3, [pc, #500]	; (800a5a8 <_dtoa_r+0x310>)
 800a3b4:	2200      	movs	r2, #0
 800a3b6:	4630      	mov	r0, r6
 800a3b8:	4639      	mov	r1, r7
 800a3ba:	f7f5 ff6d 	bl	8000298 <__aeabi_dsub>
 800a3be:	a36e      	add	r3, pc, #440	; (adr r3, 800a578 <_dtoa_r+0x2e0>)
 800a3c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3c4:	f7f6 f920 	bl	8000608 <__aeabi_dmul>
 800a3c8:	a36d      	add	r3, pc, #436	; (adr r3, 800a580 <_dtoa_r+0x2e8>)
 800a3ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3ce:	f7f5 ff65 	bl	800029c <__adddf3>
 800a3d2:	4606      	mov	r6, r0
 800a3d4:	4628      	mov	r0, r5
 800a3d6:	460f      	mov	r7, r1
 800a3d8:	f7f6 f8ac 	bl	8000534 <__aeabi_i2d>
 800a3dc:	a36a      	add	r3, pc, #424	; (adr r3, 800a588 <_dtoa_r+0x2f0>)
 800a3de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3e2:	f7f6 f911 	bl	8000608 <__aeabi_dmul>
 800a3e6:	4602      	mov	r2, r0
 800a3e8:	460b      	mov	r3, r1
 800a3ea:	4630      	mov	r0, r6
 800a3ec:	4639      	mov	r1, r7
 800a3ee:	f7f5 ff55 	bl	800029c <__adddf3>
 800a3f2:	4606      	mov	r6, r0
 800a3f4:	460f      	mov	r7, r1
 800a3f6:	f7f6 fbb7 	bl	8000b68 <__aeabi_d2iz>
 800a3fa:	2200      	movs	r2, #0
 800a3fc:	4682      	mov	sl, r0
 800a3fe:	2300      	movs	r3, #0
 800a400:	4630      	mov	r0, r6
 800a402:	4639      	mov	r1, r7
 800a404:	f7f6 fb72 	bl	8000aec <__aeabi_dcmplt>
 800a408:	b148      	cbz	r0, 800a41e <_dtoa_r+0x186>
 800a40a:	4650      	mov	r0, sl
 800a40c:	f7f6 f892 	bl	8000534 <__aeabi_i2d>
 800a410:	4632      	mov	r2, r6
 800a412:	463b      	mov	r3, r7
 800a414:	f7f6 fb60 	bl	8000ad8 <__aeabi_dcmpeq>
 800a418:	b908      	cbnz	r0, 800a41e <_dtoa_r+0x186>
 800a41a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a41e:	f1ba 0f16 	cmp.w	sl, #22
 800a422:	d854      	bhi.n	800a4ce <_dtoa_r+0x236>
 800a424:	4b61      	ldr	r3, [pc, #388]	; (800a5ac <_dtoa_r+0x314>)
 800a426:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a42a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a42e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a432:	f7f6 fb5b 	bl	8000aec <__aeabi_dcmplt>
 800a436:	2800      	cmp	r0, #0
 800a438:	d04b      	beq.n	800a4d2 <_dtoa_r+0x23a>
 800a43a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a43e:	2300      	movs	r3, #0
 800a440:	930e      	str	r3, [sp, #56]	; 0x38
 800a442:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a444:	1b5d      	subs	r5, r3, r5
 800a446:	1e6b      	subs	r3, r5, #1
 800a448:	9304      	str	r3, [sp, #16]
 800a44a:	bf43      	ittte	mi
 800a44c:	2300      	movmi	r3, #0
 800a44e:	f1c5 0801 	rsbmi	r8, r5, #1
 800a452:	9304      	strmi	r3, [sp, #16]
 800a454:	f04f 0800 	movpl.w	r8, #0
 800a458:	f1ba 0f00 	cmp.w	sl, #0
 800a45c:	db3b      	blt.n	800a4d6 <_dtoa_r+0x23e>
 800a45e:	9b04      	ldr	r3, [sp, #16]
 800a460:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800a464:	4453      	add	r3, sl
 800a466:	9304      	str	r3, [sp, #16]
 800a468:	2300      	movs	r3, #0
 800a46a:	9306      	str	r3, [sp, #24]
 800a46c:	9b05      	ldr	r3, [sp, #20]
 800a46e:	2b09      	cmp	r3, #9
 800a470:	d869      	bhi.n	800a546 <_dtoa_r+0x2ae>
 800a472:	2b05      	cmp	r3, #5
 800a474:	bfc4      	itt	gt
 800a476:	3b04      	subgt	r3, #4
 800a478:	9305      	strgt	r3, [sp, #20]
 800a47a:	9b05      	ldr	r3, [sp, #20]
 800a47c:	f1a3 0302 	sub.w	r3, r3, #2
 800a480:	bfcc      	ite	gt
 800a482:	2500      	movgt	r5, #0
 800a484:	2501      	movle	r5, #1
 800a486:	2b03      	cmp	r3, #3
 800a488:	d869      	bhi.n	800a55e <_dtoa_r+0x2c6>
 800a48a:	e8df f003 	tbb	[pc, r3]
 800a48e:	4e2c      	.short	0x4e2c
 800a490:	5a4c      	.short	0x5a4c
 800a492:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800a496:	441d      	add	r5, r3
 800a498:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800a49c:	2b20      	cmp	r3, #32
 800a49e:	bfc1      	itttt	gt
 800a4a0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a4a4:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800a4a8:	fa09 f303 	lslgt.w	r3, r9, r3
 800a4ac:	fa26 f000 	lsrgt.w	r0, r6, r0
 800a4b0:	bfda      	itte	le
 800a4b2:	f1c3 0320 	rsble	r3, r3, #32
 800a4b6:	fa06 f003 	lslle.w	r0, r6, r3
 800a4ba:	4318      	orrgt	r0, r3
 800a4bc:	f7f6 f82a 	bl	8000514 <__aeabi_ui2d>
 800a4c0:	2301      	movs	r3, #1
 800a4c2:	4606      	mov	r6, r0
 800a4c4:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800a4c8:	3d01      	subs	r5, #1
 800a4ca:	9310      	str	r3, [sp, #64]	; 0x40
 800a4cc:	e771      	b.n	800a3b2 <_dtoa_r+0x11a>
 800a4ce:	2301      	movs	r3, #1
 800a4d0:	e7b6      	b.n	800a440 <_dtoa_r+0x1a8>
 800a4d2:	900e      	str	r0, [sp, #56]	; 0x38
 800a4d4:	e7b5      	b.n	800a442 <_dtoa_r+0x1aa>
 800a4d6:	f1ca 0300 	rsb	r3, sl, #0
 800a4da:	9306      	str	r3, [sp, #24]
 800a4dc:	2300      	movs	r3, #0
 800a4de:	eba8 080a 	sub.w	r8, r8, sl
 800a4e2:	930d      	str	r3, [sp, #52]	; 0x34
 800a4e4:	e7c2      	b.n	800a46c <_dtoa_r+0x1d4>
 800a4e6:	2300      	movs	r3, #0
 800a4e8:	9308      	str	r3, [sp, #32]
 800a4ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	dc39      	bgt.n	800a564 <_dtoa_r+0x2cc>
 800a4f0:	f04f 0901 	mov.w	r9, #1
 800a4f4:	f8cd 9004 	str.w	r9, [sp, #4]
 800a4f8:	464b      	mov	r3, r9
 800a4fa:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800a4fe:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800a500:	2200      	movs	r2, #0
 800a502:	6042      	str	r2, [r0, #4]
 800a504:	2204      	movs	r2, #4
 800a506:	f102 0614 	add.w	r6, r2, #20
 800a50a:	429e      	cmp	r6, r3
 800a50c:	6841      	ldr	r1, [r0, #4]
 800a50e:	d92f      	bls.n	800a570 <_dtoa_r+0x2d8>
 800a510:	4620      	mov	r0, r4
 800a512:	f001 f849 	bl	800b5a8 <_Balloc>
 800a516:	9000      	str	r0, [sp, #0]
 800a518:	2800      	cmp	r0, #0
 800a51a:	d14b      	bne.n	800a5b4 <_dtoa_r+0x31c>
 800a51c:	4b24      	ldr	r3, [pc, #144]	; (800a5b0 <_dtoa_r+0x318>)
 800a51e:	4602      	mov	r2, r0
 800a520:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800a524:	e6d1      	b.n	800a2ca <_dtoa_r+0x32>
 800a526:	2301      	movs	r3, #1
 800a528:	e7de      	b.n	800a4e8 <_dtoa_r+0x250>
 800a52a:	2300      	movs	r3, #0
 800a52c:	9308      	str	r3, [sp, #32]
 800a52e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a530:	eb0a 0903 	add.w	r9, sl, r3
 800a534:	f109 0301 	add.w	r3, r9, #1
 800a538:	2b01      	cmp	r3, #1
 800a53a:	9301      	str	r3, [sp, #4]
 800a53c:	bfb8      	it	lt
 800a53e:	2301      	movlt	r3, #1
 800a540:	e7dd      	b.n	800a4fe <_dtoa_r+0x266>
 800a542:	2301      	movs	r3, #1
 800a544:	e7f2      	b.n	800a52c <_dtoa_r+0x294>
 800a546:	2501      	movs	r5, #1
 800a548:	2300      	movs	r3, #0
 800a54a:	9305      	str	r3, [sp, #20]
 800a54c:	9508      	str	r5, [sp, #32]
 800a54e:	f04f 39ff 	mov.w	r9, #4294967295
 800a552:	2200      	movs	r2, #0
 800a554:	f8cd 9004 	str.w	r9, [sp, #4]
 800a558:	2312      	movs	r3, #18
 800a55a:	9209      	str	r2, [sp, #36]	; 0x24
 800a55c:	e7cf      	b.n	800a4fe <_dtoa_r+0x266>
 800a55e:	2301      	movs	r3, #1
 800a560:	9308      	str	r3, [sp, #32]
 800a562:	e7f4      	b.n	800a54e <_dtoa_r+0x2b6>
 800a564:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800a568:	f8cd 9004 	str.w	r9, [sp, #4]
 800a56c:	464b      	mov	r3, r9
 800a56e:	e7c6      	b.n	800a4fe <_dtoa_r+0x266>
 800a570:	3101      	adds	r1, #1
 800a572:	6041      	str	r1, [r0, #4]
 800a574:	0052      	lsls	r2, r2, #1
 800a576:	e7c6      	b.n	800a506 <_dtoa_r+0x26e>
 800a578:	636f4361 	.word	0x636f4361
 800a57c:	3fd287a7 	.word	0x3fd287a7
 800a580:	8b60c8b3 	.word	0x8b60c8b3
 800a584:	3fc68a28 	.word	0x3fc68a28
 800a588:	509f79fb 	.word	0x509f79fb
 800a58c:	3fd34413 	.word	0x3fd34413
 800a590:	0800d14e 	.word	0x0800d14e
 800a594:	0800d165 	.word	0x0800d165
 800a598:	7ff00000 	.word	0x7ff00000
 800a59c:	0800d14a 	.word	0x0800d14a
 800a5a0:	0800d141 	.word	0x0800d141
 800a5a4:	0800cfc1 	.word	0x0800cfc1
 800a5a8:	3ff80000 	.word	0x3ff80000
 800a5ac:	0800d2e0 	.word	0x0800d2e0
 800a5b0:	0800d1c4 	.word	0x0800d1c4
 800a5b4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a5b6:	9a00      	ldr	r2, [sp, #0]
 800a5b8:	601a      	str	r2, [r3, #0]
 800a5ba:	9b01      	ldr	r3, [sp, #4]
 800a5bc:	2b0e      	cmp	r3, #14
 800a5be:	f200 80ad 	bhi.w	800a71c <_dtoa_r+0x484>
 800a5c2:	2d00      	cmp	r5, #0
 800a5c4:	f000 80aa 	beq.w	800a71c <_dtoa_r+0x484>
 800a5c8:	f1ba 0f00 	cmp.w	sl, #0
 800a5cc:	dd36      	ble.n	800a63c <_dtoa_r+0x3a4>
 800a5ce:	4ac3      	ldr	r2, [pc, #780]	; (800a8dc <_dtoa_r+0x644>)
 800a5d0:	f00a 030f 	and.w	r3, sl, #15
 800a5d4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a5d8:	ed93 7b00 	vldr	d7, [r3]
 800a5dc:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800a5e0:	ea4f 172a 	mov.w	r7, sl, asr #4
 800a5e4:	eeb0 8a47 	vmov.f32	s16, s14
 800a5e8:	eef0 8a67 	vmov.f32	s17, s15
 800a5ec:	d016      	beq.n	800a61c <_dtoa_r+0x384>
 800a5ee:	4bbc      	ldr	r3, [pc, #752]	; (800a8e0 <_dtoa_r+0x648>)
 800a5f0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a5f4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a5f8:	f7f6 f930 	bl	800085c <__aeabi_ddiv>
 800a5fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a600:	f007 070f 	and.w	r7, r7, #15
 800a604:	2503      	movs	r5, #3
 800a606:	4eb6      	ldr	r6, [pc, #728]	; (800a8e0 <_dtoa_r+0x648>)
 800a608:	b957      	cbnz	r7, 800a620 <_dtoa_r+0x388>
 800a60a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a60e:	ec53 2b18 	vmov	r2, r3, d8
 800a612:	f7f6 f923 	bl	800085c <__aeabi_ddiv>
 800a616:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a61a:	e029      	b.n	800a670 <_dtoa_r+0x3d8>
 800a61c:	2502      	movs	r5, #2
 800a61e:	e7f2      	b.n	800a606 <_dtoa_r+0x36e>
 800a620:	07f9      	lsls	r1, r7, #31
 800a622:	d508      	bpl.n	800a636 <_dtoa_r+0x39e>
 800a624:	ec51 0b18 	vmov	r0, r1, d8
 800a628:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a62c:	f7f5 ffec 	bl	8000608 <__aeabi_dmul>
 800a630:	ec41 0b18 	vmov	d8, r0, r1
 800a634:	3501      	adds	r5, #1
 800a636:	107f      	asrs	r7, r7, #1
 800a638:	3608      	adds	r6, #8
 800a63a:	e7e5      	b.n	800a608 <_dtoa_r+0x370>
 800a63c:	f000 80a6 	beq.w	800a78c <_dtoa_r+0x4f4>
 800a640:	f1ca 0600 	rsb	r6, sl, #0
 800a644:	4ba5      	ldr	r3, [pc, #660]	; (800a8dc <_dtoa_r+0x644>)
 800a646:	4fa6      	ldr	r7, [pc, #664]	; (800a8e0 <_dtoa_r+0x648>)
 800a648:	f006 020f 	and.w	r2, r6, #15
 800a64c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a650:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a654:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a658:	f7f5 ffd6 	bl	8000608 <__aeabi_dmul>
 800a65c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a660:	1136      	asrs	r6, r6, #4
 800a662:	2300      	movs	r3, #0
 800a664:	2502      	movs	r5, #2
 800a666:	2e00      	cmp	r6, #0
 800a668:	f040 8085 	bne.w	800a776 <_dtoa_r+0x4de>
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	d1d2      	bne.n	800a616 <_dtoa_r+0x37e>
 800a670:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a672:	2b00      	cmp	r3, #0
 800a674:	f000 808c 	beq.w	800a790 <_dtoa_r+0x4f8>
 800a678:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a67c:	4b99      	ldr	r3, [pc, #612]	; (800a8e4 <_dtoa_r+0x64c>)
 800a67e:	2200      	movs	r2, #0
 800a680:	4630      	mov	r0, r6
 800a682:	4639      	mov	r1, r7
 800a684:	f7f6 fa32 	bl	8000aec <__aeabi_dcmplt>
 800a688:	2800      	cmp	r0, #0
 800a68a:	f000 8081 	beq.w	800a790 <_dtoa_r+0x4f8>
 800a68e:	9b01      	ldr	r3, [sp, #4]
 800a690:	2b00      	cmp	r3, #0
 800a692:	d07d      	beq.n	800a790 <_dtoa_r+0x4f8>
 800a694:	f1b9 0f00 	cmp.w	r9, #0
 800a698:	dd3c      	ble.n	800a714 <_dtoa_r+0x47c>
 800a69a:	f10a 33ff 	add.w	r3, sl, #4294967295
 800a69e:	9307      	str	r3, [sp, #28]
 800a6a0:	2200      	movs	r2, #0
 800a6a2:	4b91      	ldr	r3, [pc, #580]	; (800a8e8 <_dtoa_r+0x650>)
 800a6a4:	4630      	mov	r0, r6
 800a6a6:	4639      	mov	r1, r7
 800a6a8:	f7f5 ffae 	bl	8000608 <__aeabi_dmul>
 800a6ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a6b0:	3501      	adds	r5, #1
 800a6b2:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800a6b6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a6ba:	4628      	mov	r0, r5
 800a6bc:	f7f5 ff3a 	bl	8000534 <__aeabi_i2d>
 800a6c0:	4632      	mov	r2, r6
 800a6c2:	463b      	mov	r3, r7
 800a6c4:	f7f5 ffa0 	bl	8000608 <__aeabi_dmul>
 800a6c8:	4b88      	ldr	r3, [pc, #544]	; (800a8ec <_dtoa_r+0x654>)
 800a6ca:	2200      	movs	r2, #0
 800a6cc:	f7f5 fde6 	bl	800029c <__adddf3>
 800a6d0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800a6d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a6d8:	9303      	str	r3, [sp, #12]
 800a6da:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	d15c      	bne.n	800a79a <_dtoa_r+0x502>
 800a6e0:	4b83      	ldr	r3, [pc, #524]	; (800a8f0 <_dtoa_r+0x658>)
 800a6e2:	2200      	movs	r2, #0
 800a6e4:	4630      	mov	r0, r6
 800a6e6:	4639      	mov	r1, r7
 800a6e8:	f7f5 fdd6 	bl	8000298 <__aeabi_dsub>
 800a6ec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a6f0:	4606      	mov	r6, r0
 800a6f2:	460f      	mov	r7, r1
 800a6f4:	f7f6 fa18 	bl	8000b28 <__aeabi_dcmpgt>
 800a6f8:	2800      	cmp	r0, #0
 800a6fa:	f040 8296 	bne.w	800ac2a <_dtoa_r+0x992>
 800a6fe:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800a702:	4630      	mov	r0, r6
 800a704:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a708:	4639      	mov	r1, r7
 800a70a:	f7f6 f9ef 	bl	8000aec <__aeabi_dcmplt>
 800a70e:	2800      	cmp	r0, #0
 800a710:	f040 8288 	bne.w	800ac24 <_dtoa_r+0x98c>
 800a714:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800a718:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a71c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a71e:	2b00      	cmp	r3, #0
 800a720:	f2c0 8158 	blt.w	800a9d4 <_dtoa_r+0x73c>
 800a724:	f1ba 0f0e 	cmp.w	sl, #14
 800a728:	f300 8154 	bgt.w	800a9d4 <_dtoa_r+0x73c>
 800a72c:	4b6b      	ldr	r3, [pc, #428]	; (800a8dc <_dtoa_r+0x644>)
 800a72e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a732:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a736:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a738:	2b00      	cmp	r3, #0
 800a73a:	f280 80e3 	bge.w	800a904 <_dtoa_r+0x66c>
 800a73e:	9b01      	ldr	r3, [sp, #4]
 800a740:	2b00      	cmp	r3, #0
 800a742:	f300 80df 	bgt.w	800a904 <_dtoa_r+0x66c>
 800a746:	f040 826d 	bne.w	800ac24 <_dtoa_r+0x98c>
 800a74a:	4b69      	ldr	r3, [pc, #420]	; (800a8f0 <_dtoa_r+0x658>)
 800a74c:	2200      	movs	r2, #0
 800a74e:	4640      	mov	r0, r8
 800a750:	4649      	mov	r1, r9
 800a752:	f7f5 ff59 	bl	8000608 <__aeabi_dmul>
 800a756:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a75a:	f7f6 f9db 	bl	8000b14 <__aeabi_dcmpge>
 800a75e:	9e01      	ldr	r6, [sp, #4]
 800a760:	4637      	mov	r7, r6
 800a762:	2800      	cmp	r0, #0
 800a764:	f040 8243 	bne.w	800abee <_dtoa_r+0x956>
 800a768:	9d00      	ldr	r5, [sp, #0]
 800a76a:	2331      	movs	r3, #49	; 0x31
 800a76c:	f805 3b01 	strb.w	r3, [r5], #1
 800a770:	f10a 0a01 	add.w	sl, sl, #1
 800a774:	e23f      	b.n	800abf6 <_dtoa_r+0x95e>
 800a776:	07f2      	lsls	r2, r6, #31
 800a778:	d505      	bpl.n	800a786 <_dtoa_r+0x4ee>
 800a77a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a77e:	f7f5 ff43 	bl	8000608 <__aeabi_dmul>
 800a782:	3501      	adds	r5, #1
 800a784:	2301      	movs	r3, #1
 800a786:	1076      	asrs	r6, r6, #1
 800a788:	3708      	adds	r7, #8
 800a78a:	e76c      	b.n	800a666 <_dtoa_r+0x3ce>
 800a78c:	2502      	movs	r5, #2
 800a78e:	e76f      	b.n	800a670 <_dtoa_r+0x3d8>
 800a790:	9b01      	ldr	r3, [sp, #4]
 800a792:	f8cd a01c 	str.w	sl, [sp, #28]
 800a796:	930c      	str	r3, [sp, #48]	; 0x30
 800a798:	e78d      	b.n	800a6b6 <_dtoa_r+0x41e>
 800a79a:	9900      	ldr	r1, [sp, #0]
 800a79c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800a79e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a7a0:	4b4e      	ldr	r3, [pc, #312]	; (800a8dc <_dtoa_r+0x644>)
 800a7a2:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a7a6:	4401      	add	r1, r0
 800a7a8:	9102      	str	r1, [sp, #8]
 800a7aa:	9908      	ldr	r1, [sp, #32]
 800a7ac:	eeb0 8a47 	vmov.f32	s16, s14
 800a7b0:	eef0 8a67 	vmov.f32	s17, s15
 800a7b4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a7b8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a7bc:	2900      	cmp	r1, #0
 800a7be:	d045      	beq.n	800a84c <_dtoa_r+0x5b4>
 800a7c0:	494c      	ldr	r1, [pc, #304]	; (800a8f4 <_dtoa_r+0x65c>)
 800a7c2:	2000      	movs	r0, #0
 800a7c4:	f7f6 f84a 	bl	800085c <__aeabi_ddiv>
 800a7c8:	ec53 2b18 	vmov	r2, r3, d8
 800a7cc:	f7f5 fd64 	bl	8000298 <__aeabi_dsub>
 800a7d0:	9d00      	ldr	r5, [sp, #0]
 800a7d2:	ec41 0b18 	vmov	d8, r0, r1
 800a7d6:	4639      	mov	r1, r7
 800a7d8:	4630      	mov	r0, r6
 800a7da:	f7f6 f9c5 	bl	8000b68 <__aeabi_d2iz>
 800a7de:	900c      	str	r0, [sp, #48]	; 0x30
 800a7e0:	f7f5 fea8 	bl	8000534 <__aeabi_i2d>
 800a7e4:	4602      	mov	r2, r0
 800a7e6:	460b      	mov	r3, r1
 800a7e8:	4630      	mov	r0, r6
 800a7ea:	4639      	mov	r1, r7
 800a7ec:	f7f5 fd54 	bl	8000298 <__aeabi_dsub>
 800a7f0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a7f2:	3330      	adds	r3, #48	; 0x30
 800a7f4:	f805 3b01 	strb.w	r3, [r5], #1
 800a7f8:	ec53 2b18 	vmov	r2, r3, d8
 800a7fc:	4606      	mov	r6, r0
 800a7fe:	460f      	mov	r7, r1
 800a800:	f7f6 f974 	bl	8000aec <__aeabi_dcmplt>
 800a804:	2800      	cmp	r0, #0
 800a806:	d165      	bne.n	800a8d4 <_dtoa_r+0x63c>
 800a808:	4632      	mov	r2, r6
 800a80a:	463b      	mov	r3, r7
 800a80c:	4935      	ldr	r1, [pc, #212]	; (800a8e4 <_dtoa_r+0x64c>)
 800a80e:	2000      	movs	r0, #0
 800a810:	f7f5 fd42 	bl	8000298 <__aeabi_dsub>
 800a814:	ec53 2b18 	vmov	r2, r3, d8
 800a818:	f7f6 f968 	bl	8000aec <__aeabi_dcmplt>
 800a81c:	2800      	cmp	r0, #0
 800a81e:	f040 80b9 	bne.w	800a994 <_dtoa_r+0x6fc>
 800a822:	9b02      	ldr	r3, [sp, #8]
 800a824:	429d      	cmp	r5, r3
 800a826:	f43f af75 	beq.w	800a714 <_dtoa_r+0x47c>
 800a82a:	4b2f      	ldr	r3, [pc, #188]	; (800a8e8 <_dtoa_r+0x650>)
 800a82c:	ec51 0b18 	vmov	r0, r1, d8
 800a830:	2200      	movs	r2, #0
 800a832:	f7f5 fee9 	bl	8000608 <__aeabi_dmul>
 800a836:	4b2c      	ldr	r3, [pc, #176]	; (800a8e8 <_dtoa_r+0x650>)
 800a838:	ec41 0b18 	vmov	d8, r0, r1
 800a83c:	2200      	movs	r2, #0
 800a83e:	4630      	mov	r0, r6
 800a840:	4639      	mov	r1, r7
 800a842:	f7f5 fee1 	bl	8000608 <__aeabi_dmul>
 800a846:	4606      	mov	r6, r0
 800a848:	460f      	mov	r7, r1
 800a84a:	e7c4      	b.n	800a7d6 <_dtoa_r+0x53e>
 800a84c:	ec51 0b17 	vmov	r0, r1, d7
 800a850:	f7f5 feda 	bl	8000608 <__aeabi_dmul>
 800a854:	9b02      	ldr	r3, [sp, #8]
 800a856:	9d00      	ldr	r5, [sp, #0]
 800a858:	930c      	str	r3, [sp, #48]	; 0x30
 800a85a:	ec41 0b18 	vmov	d8, r0, r1
 800a85e:	4639      	mov	r1, r7
 800a860:	4630      	mov	r0, r6
 800a862:	f7f6 f981 	bl	8000b68 <__aeabi_d2iz>
 800a866:	9011      	str	r0, [sp, #68]	; 0x44
 800a868:	f7f5 fe64 	bl	8000534 <__aeabi_i2d>
 800a86c:	4602      	mov	r2, r0
 800a86e:	460b      	mov	r3, r1
 800a870:	4630      	mov	r0, r6
 800a872:	4639      	mov	r1, r7
 800a874:	f7f5 fd10 	bl	8000298 <__aeabi_dsub>
 800a878:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a87a:	3330      	adds	r3, #48	; 0x30
 800a87c:	f805 3b01 	strb.w	r3, [r5], #1
 800a880:	9b02      	ldr	r3, [sp, #8]
 800a882:	429d      	cmp	r5, r3
 800a884:	4606      	mov	r6, r0
 800a886:	460f      	mov	r7, r1
 800a888:	f04f 0200 	mov.w	r2, #0
 800a88c:	d134      	bne.n	800a8f8 <_dtoa_r+0x660>
 800a88e:	4b19      	ldr	r3, [pc, #100]	; (800a8f4 <_dtoa_r+0x65c>)
 800a890:	ec51 0b18 	vmov	r0, r1, d8
 800a894:	f7f5 fd02 	bl	800029c <__adddf3>
 800a898:	4602      	mov	r2, r0
 800a89a:	460b      	mov	r3, r1
 800a89c:	4630      	mov	r0, r6
 800a89e:	4639      	mov	r1, r7
 800a8a0:	f7f6 f942 	bl	8000b28 <__aeabi_dcmpgt>
 800a8a4:	2800      	cmp	r0, #0
 800a8a6:	d175      	bne.n	800a994 <_dtoa_r+0x6fc>
 800a8a8:	ec53 2b18 	vmov	r2, r3, d8
 800a8ac:	4911      	ldr	r1, [pc, #68]	; (800a8f4 <_dtoa_r+0x65c>)
 800a8ae:	2000      	movs	r0, #0
 800a8b0:	f7f5 fcf2 	bl	8000298 <__aeabi_dsub>
 800a8b4:	4602      	mov	r2, r0
 800a8b6:	460b      	mov	r3, r1
 800a8b8:	4630      	mov	r0, r6
 800a8ba:	4639      	mov	r1, r7
 800a8bc:	f7f6 f916 	bl	8000aec <__aeabi_dcmplt>
 800a8c0:	2800      	cmp	r0, #0
 800a8c2:	f43f af27 	beq.w	800a714 <_dtoa_r+0x47c>
 800a8c6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a8c8:	1e6b      	subs	r3, r5, #1
 800a8ca:	930c      	str	r3, [sp, #48]	; 0x30
 800a8cc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a8d0:	2b30      	cmp	r3, #48	; 0x30
 800a8d2:	d0f8      	beq.n	800a8c6 <_dtoa_r+0x62e>
 800a8d4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800a8d8:	e04a      	b.n	800a970 <_dtoa_r+0x6d8>
 800a8da:	bf00      	nop
 800a8dc:	0800d2e0 	.word	0x0800d2e0
 800a8e0:	0800d2b8 	.word	0x0800d2b8
 800a8e4:	3ff00000 	.word	0x3ff00000
 800a8e8:	40240000 	.word	0x40240000
 800a8ec:	401c0000 	.word	0x401c0000
 800a8f0:	40140000 	.word	0x40140000
 800a8f4:	3fe00000 	.word	0x3fe00000
 800a8f8:	4baf      	ldr	r3, [pc, #700]	; (800abb8 <_dtoa_r+0x920>)
 800a8fa:	f7f5 fe85 	bl	8000608 <__aeabi_dmul>
 800a8fe:	4606      	mov	r6, r0
 800a900:	460f      	mov	r7, r1
 800a902:	e7ac      	b.n	800a85e <_dtoa_r+0x5c6>
 800a904:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a908:	9d00      	ldr	r5, [sp, #0]
 800a90a:	4642      	mov	r2, r8
 800a90c:	464b      	mov	r3, r9
 800a90e:	4630      	mov	r0, r6
 800a910:	4639      	mov	r1, r7
 800a912:	f7f5 ffa3 	bl	800085c <__aeabi_ddiv>
 800a916:	f7f6 f927 	bl	8000b68 <__aeabi_d2iz>
 800a91a:	9002      	str	r0, [sp, #8]
 800a91c:	f7f5 fe0a 	bl	8000534 <__aeabi_i2d>
 800a920:	4642      	mov	r2, r8
 800a922:	464b      	mov	r3, r9
 800a924:	f7f5 fe70 	bl	8000608 <__aeabi_dmul>
 800a928:	4602      	mov	r2, r0
 800a92a:	460b      	mov	r3, r1
 800a92c:	4630      	mov	r0, r6
 800a92e:	4639      	mov	r1, r7
 800a930:	f7f5 fcb2 	bl	8000298 <__aeabi_dsub>
 800a934:	9e02      	ldr	r6, [sp, #8]
 800a936:	9f01      	ldr	r7, [sp, #4]
 800a938:	3630      	adds	r6, #48	; 0x30
 800a93a:	f805 6b01 	strb.w	r6, [r5], #1
 800a93e:	9e00      	ldr	r6, [sp, #0]
 800a940:	1bae      	subs	r6, r5, r6
 800a942:	42b7      	cmp	r7, r6
 800a944:	4602      	mov	r2, r0
 800a946:	460b      	mov	r3, r1
 800a948:	d137      	bne.n	800a9ba <_dtoa_r+0x722>
 800a94a:	f7f5 fca7 	bl	800029c <__adddf3>
 800a94e:	4642      	mov	r2, r8
 800a950:	464b      	mov	r3, r9
 800a952:	4606      	mov	r6, r0
 800a954:	460f      	mov	r7, r1
 800a956:	f7f6 f8e7 	bl	8000b28 <__aeabi_dcmpgt>
 800a95a:	b9c8      	cbnz	r0, 800a990 <_dtoa_r+0x6f8>
 800a95c:	4642      	mov	r2, r8
 800a95e:	464b      	mov	r3, r9
 800a960:	4630      	mov	r0, r6
 800a962:	4639      	mov	r1, r7
 800a964:	f7f6 f8b8 	bl	8000ad8 <__aeabi_dcmpeq>
 800a968:	b110      	cbz	r0, 800a970 <_dtoa_r+0x6d8>
 800a96a:	9b02      	ldr	r3, [sp, #8]
 800a96c:	07d9      	lsls	r1, r3, #31
 800a96e:	d40f      	bmi.n	800a990 <_dtoa_r+0x6f8>
 800a970:	4620      	mov	r0, r4
 800a972:	4659      	mov	r1, fp
 800a974:	f000 fe58 	bl	800b628 <_Bfree>
 800a978:	2300      	movs	r3, #0
 800a97a:	702b      	strb	r3, [r5, #0]
 800a97c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a97e:	f10a 0001 	add.w	r0, sl, #1
 800a982:	6018      	str	r0, [r3, #0]
 800a984:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a986:	2b00      	cmp	r3, #0
 800a988:	f43f acd8 	beq.w	800a33c <_dtoa_r+0xa4>
 800a98c:	601d      	str	r5, [r3, #0]
 800a98e:	e4d5      	b.n	800a33c <_dtoa_r+0xa4>
 800a990:	f8cd a01c 	str.w	sl, [sp, #28]
 800a994:	462b      	mov	r3, r5
 800a996:	461d      	mov	r5, r3
 800a998:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a99c:	2a39      	cmp	r2, #57	; 0x39
 800a99e:	d108      	bne.n	800a9b2 <_dtoa_r+0x71a>
 800a9a0:	9a00      	ldr	r2, [sp, #0]
 800a9a2:	429a      	cmp	r2, r3
 800a9a4:	d1f7      	bne.n	800a996 <_dtoa_r+0x6fe>
 800a9a6:	9a07      	ldr	r2, [sp, #28]
 800a9a8:	9900      	ldr	r1, [sp, #0]
 800a9aa:	3201      	adds	r2, #1
 800a9ac:	9207      	str	r2, [sp, #28]
 800a9ae:	2230      	movs	r2, #48	; 0x30
 800a9b0:	700a      	strb	r2, [r1, #0]
 800a9b2:	781a      	ldrb	r2, [r3, #0]
 800a9b4:	3201      	adds	r2, #1
 800a9b6:	701a      	strb	r2, [r3, #0]
 800a9b8:	e78c      	b.n	800a8d4 <_dtoa_r+0x63c>
 800a9ba:	4b7f      	ldr	r3, [pc, #508]	; (800abb8 <_dtoa_r+0x920>)
 800a9bc:	2200      	movs	r2, #0
 800a9be:	f7f5 fe23 	bl	8000608 <__aeabi_dmul>
 800a9c2:	2200      	movs	r2, #0
 800a9c4:	2300      	movs	r3, #0
 800a9c6:	4606      	mov	r6, r0
 800a9c8:	460f      	mov	r7, r1
 800a9ca:	f7f6 f885 	bl	8000ad8 <__aeabi_dcmpeq>
 800a9ce:	2800      	cmp	r0, #0
 800a9d0:	d09b      	beq.n	800a90a <_dtoa_r+0x672>
 800a9d2:	e7cd      	b.n	800a970 <_dtoa_r+0x6d8>
 800a9d4:	9a08      	ldr	r2, [sp, #32]
 800a9d6:	2a00      	cmp	r2, #0
 800a9d8:	f000 80c4 	beq.w	800ab64 <_dtoa_r+0x8cc>
 800a9dc:	9a05      	ldr	r2, [sp, #20]
 800a9de:	2a01      	cmp	r2, #1
 800a9e0:	f300 80a8 	bgt.w	800ab34 <_dtoa_r+0x89c>
 800a9e4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a9e6:	2a00      	cmp	r2, #0
 800a9e8:	f000 80a0 	beq.w	800ab2c <_dtoa_r+0x894>
 800a9ec:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a9f0:	9e06      	ldr	r6, [sp, #24]
 800a9f2:	4645      	mov	r5, r8
 800a9f4:	9a04      	ldr	r2, [sp, #16]
 800a9f6:	2101      	movs	r1, #1
 800a9f8:	441a      	add	r2, r3
 800a9fa:	4620      	mov	r0, r4
 800a9fc:	4498      	add	r8, r3
 800a9fe:	9204      	str	r2, [sp, #16]
 800aa00:	f000 ff18 	bl	800b834 <__i2b>
 800aa04:	4607      	mov	r7, r0
 800aa06:	2d00      	cmp	r5, #0
 800aa08:	dd0b      	ble.n	800aa22 <_dtoa_r+0x78a>
 800aa0a:	9b04      	ldr	r3, [sp, #16]
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	dd08      	ble.n	800aa22 <_dtoa_r+0x78a>
 800aa10:	42ab      	cmp	r3, r5
 800aa12:	9a04      	ldr	r2, [sp, #16]
 800aa14:	bfa8      	it	ge
 800aa16:	462b      	movge	r3, r5
 800aa18:	eba8 0803 	sub.w	r8, r8, r3
 800aa1c:	1aed      	subs	r5, r5, r3
 800aa1e:	1ad3      	subs	r3, r2, r3
 800aa20:	9304      	str	r3, [sp, #16]
 800aa22:	9b06      	ldr	r3, [sp, #24]
 800aa24:	b1fb      	cbz	r3, 800aa66 <_dtoa_r+0x7ce>
 800aa26:	9b08      	ldr	r3, [sp, #32]
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	f000 809f 	beq.w	800ab6c <_dtoa_r+0x8d4>
 800aa2e:	2e00      	cmp	r6, #0
 800aa30:	dd11      	ble.n	800aa56 <_dtoa_r+0x7be>
 800aa32:	4639      	mov	r1, r7
 800aa34:	4632      	mov	r2, r6
 800aa36:	4620      	mov	r0, r4
 800aa38:	f000 ffb8 	bl	800b9ac <__pow5mult>
 800aa3c:	465a      	mov	r2, fp
 800aa3e:	4601      	mov	r1, r0
 800aa40:	4607      	mov	r7, r0
 800aa42:	4620      	mov	r0, r4
 800aa44:	f000 ff0c 	bl	800b860 <__multiply>
 800aa48:	4659      	mov	r1, fp
 800aa4a:	9007      	str	r0, [sp, #28]
 800aa4c:	4620      	mov	r0, r4
 800aa4e:	f000 fdeb 	bl	800b628 <_Bfree>
 800aa52:	9b07      	ldr	r3, [sp, #28]
 800aa54:	469b      	mov	fp, r3
 800aa56:	9b06      	ldr	r3, [sp, #24]
 800aa58:	1b9a      	subs	r2, r3, r6
 800aa5a:	d004      	beq.n	800aa66 <_dtoa_r+0x7ce>
 800aa5c:	4659      	mov	r1, fp
 800aa5e:	4620      	mov	r0, r4
 800aa60:	f000 ffa4 	bl	800b9ac <__pow5mult>
 800aa64:	4683      	mov	fp, r0
 800aa66:	2101      	movs	r1, #1
 800aa68:	4620      	mov	r0, r4
 800aa6a:	f000 fee3 	bl	800b834 <__i2b>
 800aa6e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	4606      	mov	r6, r0
 800aa74:	dd7c      	ble.n	800ab70 <_dtoa_r+0x8d8>
 800aa76:	461a      	mov	r2, r3
 800aa78:	4601      	mov	r1, r0
 800aa7a:	4620      	mov	r0, r4
 800aa7c:	f000 ff96 	bl	800b9ac <__pow5mult>
 800aa80:	9b05      	ldr	r3, [sp, #20]
 800aa82:	2b01      	cmp	r3, #1
 800aa84:	4606      	mov	r6, r0
 800aa86:	dd76      	ble.n	800ab76 <_dtoa_r+0x8de>
 800aa88:	2300      	movs	r3, #0
 800aa8a:	9306      	str	r3, [sp, #24]
 800aa8c:	6933      	ldr	r3, [r6, #16]
 800aa8e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800aa92:	6918      	ldr	r0, [r3, #16]
 800aa94:	f000 fe7e 	bl	800b794 <__hi0bits>
 800aa98:	f1c0 0020 	rsb	r0, r0, #32
 800aa9c:	9b04      	ldr	r3, [sp, #16]
 800aa9e:	4418      	add	r0, r3
 800aaa0:	f010 001f 	ands.w	r0, r0, #31
 800aaa4:	f000 8086 	beq.w	800abb4 <_dtoa_r+0x91c>
 800aaa8:	f1c0 0320 	rsb	r3, r0, #32
 800aaac:	2b04      	cmp	r3, #4
 800aaae:	dd7f      	ble.n	800abb0 <_dtoa_r+0x918>
 800aab0:	f1c0 001c 	rsb	r0, r0, #28
 800aab4:	9b04      	ldr	r3, [sp, #16]
 800aab6:	4403      	add	r3, r0
 800aab8:	4480      	add	r8, r0
 800aaba:	4405      	add	r5, r0
 800aabc:	9304      	str	r3, [sp, #16]
 800aabe:	f1b8 0f00 	cmp.w	r8, #0
 800aac2:	dd05      	ble.n	800aad0 <_dtoa_r+0x838>
 800aac4:	4659      	mov	r1, fp
 800aac6:	4642      	mov	r2, r8
 800aac8:	4620      	mov	r0, r4
 800aaca:	f000 ffc9 	bl	800ba60 <__lshift>
 800aace:	4683      	mov	fp, r0
 800aad0:	9b04      	ldr	r3, [sp, #16]
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	dd05      	ble.n	800aae2 <_dtoa_r+0x84a>
 800aad6:	4631      	mov	r1, r6
 800aad8:	461a      	mov	r2, r3
 800aada:	4620      	mov	r0, r4
 800aadc:	f000 ffc0 	bl	800ba60 <__lshift>
 800aae0:	4606      	mov	r6, r0
 800aae2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	d069      	beq.n	800abbc <_dtoa_r+0x924>
 800aae8:	4631      	mov	r1, r6
 800aaea:	4658      	mov	r0, fp
 800aaec:	f001 f824 	bl	800bb38 <__mcmp>
 800aaf0:	2800      	cmp	r0, #0
 800aaf2:	da63      	bge.n	800abbc <_dtoa_r+0x924>
 800aaf4:	2300      	movs	r3, #0
 800aaf6:	4659      	mov	r1, fp
 800aaf8:	220a      	movs	r2, #10
 800aafa:	4620      	mov	r0, r4
 800aafc:	f000 fdb6 	bl	800b66c <__multadd>
 800ab00:	9b08      	ldr	r3, [sp, #32]
 800ab02:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ab06:	4683      	mov	fp, r0
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	f000 818f 	beq.w	800ae2c <_dtoa_r+0xb94>
 800ab0e:	4639      	mov	r1, r7
 800ab10:	2300      	movs	r3, #0
 800ab12:	220a      	movs	r2, #10
 800ab14:	4620      	mov	r0, r4
 800ab16:	f000 fda9 	bl	800b66c <__multadd>
 800ab1a:	f1b9 0f00 	cmp.w	r9, #0
 800ab1e:	4607      	mov	r7, r0
 800ab20:	f300 808e 	bgt.w	800ac40 <_dtoa_r+0x9a8>
 800ab24:	9b05      	ldr	r3, [sp, #20]
 800ab26:	2b02      	cmp	r3, #2
 800ab28:	dc50      	bgt.n	800abcc <_dtoa_r+0x934>
 800ab2a:	e089      	b.n	800ac40 <_dtoa_r+0x9a8>
 800ab2c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ab2e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800ab32:	e75d      	b.n	800a9f0 <_dtoa_r+0x758>
 800ab34:	9b01      	ldr	r3, [sp, #4]
 800ab36:	1e5e      	subs	r6, r3, #1
 800ab38:	9b06      	ldr	r3, [sp, #24]
 800ab3a:	42b3      	cmp	r3, r6
 800ab3c:	bfbf      	itttt	lt
 800ab3e:	9b06      	ldrlt	r3, [sp, #24]
 800ab40:	9606      	strlt	r6, [sp, #24]
 800ab42:	1af2      	sublt	r2, r6, r3
 800ab44:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800ab46:	bfb6      	itet	lt
 800ab48:	189b      	addlt	r3, r3, r2
 800ab4a:	1b9e      	subge	r6, r3, r6
 800ab4c:	930d      	strlt	r3, [sp, #52]	; 0x34
 800ab4e:	9b01      	ldr	r3, [sp, #4]
 800ab50:	bfb8      	it	lt
 800ab52:	2600      	movlt	r6, #0
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	bfb5      	itete	lt
 800ab58:	eba8 0503 	sublt.w	r5, r8, r3
 800ab5c:	9b01      	ldrge	r3, [sp, #4]
 800ab5e:	2300      	movlt	r3, #0
 800ab60:	4645      	movge	r5, r8
 800ab62:	e747      	b.n	800a9f4 <_dtoa_r+0x75c>
 800ab64:	9e06      	ldr	r6, [sp, #24]
 800ab66:	9f08      	ldr	r7, [sp, #32]
 800ab68:	4645      	mov	r5, r8
 800ab6a:	e74c      	b.n	800aa06 <_dtoa_r+0x76e>
 800ab6c:	9a06      	ldr	r2, [sp, #24]
 800ab6e:	e775      	b.n	800aa5c <_dtoa_r+0x7c4>
 800ab70:	9b05      	ldr	r3, [sp, #20]
 800ab72:	2b01      	cmp	r3, #1
 800ab74:	dc18      	bgt.n	800aba8 <_dtoa_r+0x910>
 800ab76:	9b02      	ldr	r3, [sp, #8]
 800ab78:	b9b3      	cbnz	r3, 800aba8 <_dtoa_r+0x910>
 800ab7a:	9b03      	ldr	r3, [sp, #12]
 800ab7c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ab80:	b9a3      	cbnz	r3, 800abac <_dtoa_r+0x914>
 800ab82:	9b03      	ldr	r3, [sp, #12]
 800ab84:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ab88:	0d1b      	lsrs	r3, r3, #20
 800ab8a:	051b      	lsls	r3, r3, #20
 800ab8c:	b12b      	cbz	r3, 800ab9a <_dtoa_r+0x902>
 800ab8e:	9b04      	ldr	r3, [sp, #16]
 800ab90:	3301      	adds	r3, #1
 800ab92:	9304      	str	r3, [sp, #16]
 800ab94:	f108 0801 	add.w	r8, r8, #1
 800ab98:	2301      	movs	r3, #1
 800ab9a:	9306      	str	r3, [sp, #24]
 800ab9c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	f47f af74 	bne.w	800aa8c <_dtoa_r+0x7f4>
 800aba4:	2001      	movs	r0, #1
 800aba6:	e779      	b.n	800aa9c <_dtoa_r+0x804>
 800aba8:	2300      	movs	r3, #0
 800abaa:	e7f6      	b.n	800ab9a <_dtoa_r+0x902>
 800abac:	9b02      	ldr	r3, [sp, #8]
 800abae:	e7f4      	b.n	800ab9a <_dtoa_r+0x902>
 800abb0:	d085      	beq.n	800aabe <_dtoa_r+0x826>
 800abb2:	4618      	mov	r0, r3
 800abb4:	301c      	adds	r0, #28
 800abb6:	e77d      	b.n	800aab4 <_dtoa_r+0x81c>
 800abb8:	40240000 	.word	0x40240000
 800abbc:	9b01      	ldr	r3, [sp, #4]
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	dc38      	bgt.n	800ac34 <_dtoa_r+0x99c>
 800abc2:	9b05      	ldr	r3, [sp, #20]
 800abc4:	2b02      	cmp	r3, #2
 800abc6:	dd35      	ble.n	800ac34 <_dtoa_r+0x99c>
 800abc8:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800abcc:	f1b9 0f00 	cmp.w	r9, #0
 800abd0:	d10d      	bne.n	800abee <_dtoa_r+0x956>
 800abd2:	4631      	mov	r1, r6
 800abd4:	464b      	mov	r3, r9
 800abd6:	2205      	movs	r2, #5
 800abd8:	4620      	mov	r0, r4
 800abda:	f000 fd47 	bl	800b66c <__multadd>
 800abde:	4601      	mov	r1, r0
 800abe0:	4606      	mov	r6, r0
 800abe2:	4658      	mov	r0, fp
 800abe4:	f000 ffa8 	bl	800bb38 <__mcmp>
 800abe8:	2800      	cmp	r0, #0
 800abea:	f73f adbd 	bgt.w	800a768 <_dtoa_r+0x4d0>
 800abee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800abf0:	9d00      	ldr	r5, [sp, #0]
 800abf2:	ea6f 0a03 	mvn.w	sl, r3
 800abf6:	f04f 0800 	mov.w	r8, #0
 800abfa:	4631      	mov	r1, r6
 800abfc:	4620      	mov	r0, r4
 800abfe:	f000 fd13 	bl	800b628 <_Bfree>
 800ac02:	2f00      	cmp	r7, #0
 800ac04:	f43f aeb4 	beq.w	800a970 <_dtoa_r+0x6d8>
 800ac08:	f1b8 0f00 	cmp.w	r8, #0
 800ac0c:	d005      	beq.n	800ac1a <_dtoa_r+0x982>
 800ac0e:	45b8      	cmp	r8, r7
 800ac10:	d003      	beq.n	800ac1a <_dtoa_r+0x982>
 800ac12:	4641      	mov	r1, r8
 800ac14:	4620      	mov	r0, r4
 800ac16:	f000 fd07 	bl	800b628 <_Bfree>
 800ac1a:	4639      	mov	r1, r7
 800ac1c:	4620      	mov	r0, r4
 800ac1e:	f000 fd03 	bl	800b628 <_Bfree>
 800ac22:	e6a5      	b.n	800a970 <_dtoa_r+0x6d8>
 800ac24:	2600      	movs	r6, #0
 800ac26:	4637      	mov	r7, r6
 800ac28:	e7e1      	b.n	800abee <_dtoa_r+0x956>
 800ac2a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800ac2c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800ac30:	4637      	mov	r7, r6
 800ac32:	e599      	b.n	800a768 <_dtoa_r+0x4d0>
 800ac34:	9b08      	ldr	r3, [sp, #32]
 800ac36:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	f000 80fd 	beq.w	800ae3a <_dtoa_r+0xba2>
 800ac40:	2d00      	cmp	r5, #0
 800ac42:	dd05      	ble.n	800ac50 <_dtoa_r+0x9b8>
 800ac44:	4639      	mov	r1, r7
 800ac46:	462a      	mov	r2, r5
 800ac48:	4620      	mov	r0, r4
 800ac4a:	f000 ff09 	bl	800ba60 <__lshift>
 800ac4e:	4607      	mov	r7, r0
 800ac50:	9b06      	ldr	r3, [sp, #24]
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	d05c      	beq.n	800ad10 <_dtoa_r+0xa78>
 800ac56:	6879      	ldr	r1, [r7, #4]
 800ac58:	4620      	mov	r0, r4
 800ac5a:	f000 fca5 	bl	800b5a8 <_Balloc>
 800ac5e:	4605      	mov	r5, r0
 800ac60:	b928      	cbnz	r0, 800ac6e <_dtoa_r+0x9d6>
 800ac62:	4b80      	ldr	r3, [pc, #512]	; (800ae64 <_dtoa_r+0xbcc>)
 800ac64:	4602      	mov	r2, r0
 800ac66:	f240 21ea 	movw	r1, #746	; 0x2ea
 800ac6a:	f7ff bb2e 	b.w	800a2ca <_dtoa_r+0x32>
 800ac6e:	693a      	ldr	r2, [r7, #16]
 800ac70:	3202      	adds	r2, #2
 800ac72:	0092      	lsls	r2, r2, #2
 800ac74:	f107 010c 	add.w	r1, r7, #12
 800ac78:	300c      	adds	r0, #12
 800ac7a:	f000 fc87 	bl	800b58c <memcpy>
 800ac7e:	2201      	movs	r2, #1
 800ac80:	4629      	mov	r1, r5
 800ac82:	4620      	mov	r0, r4
 800ac84:	f000 feec 	bl	800ba60 <__lshift>
 800ac88:	9b00      	ldr	r3, [sp, #0]
 800ac8a:	3301      	adds	r3, #1
 800ac8c:	9301      	str	r3, [sp, #4]
 800ac8e:	9b00      	ldr	r3, [sp, #0]
 800ac90:	444b      	add	r3, r9
 800ac92:	9307      	str	r3, [sp, #28]
 800ac94:	9b02      	ldr	r3, [sp, #8]
 800ac96:	f003 0301 	and.w	r3, r3, #1
 800ac9a:	46b8      	mov	r8, r7
 800ac9c:	9306      	str	r3, [sp, #24]
 800ac9e:	4607      	mov	r7, r0
 800aca0:	9b01      	ldr	r3, [sp, #4]
 800aca2:	4631      	mov	r1, r6
 800aca4:	3b01      	subs	r3, #1
 800aca6:	4658      	mov	r0, fp
 800aca8:	9302      	str	r3, [sp, #8]
 800acaa:	f7ff fa67 	bl	800a17c <quorem>
 800acae:	4603      	mov	r3, r0
 800acb0:	3330      	adds	r3, #48	; 0x30
 800acb2:	9004      	str	r0, [sp, #16]
 800acb4:	4641      	mov	r1, r8
 800acb6:	4658      	mov	r0, fp
 800acb8:	9308      	str	r3, [sp, #32]
 800acba:	f000 ff3d 	bl	800bb38 <__mcmp>
 800acbe:	463a      	mov	r2, r7
 800acc0:	4681      	mov	r9, r0
 800acc2:	4631      	mov	r1, r6
 800acc4:	4620      	mov	r0, r4
 800acc6:	f000 ff53 	bl	800bb70 <__mdiff>
 800acca:	68c2      	ldr	r2, [r0, #12]
 800accc:	9b08      	ldr	r3, [sp, #32]
 800acce:	4605      	mov	r5, r0
 800acd0:	bb02      	cbnz	r2, 800ad14 <_dtoa_r+0xa7c>
 800acd2:	4601      	mov	r1, r0
 800acd4:	4658      	mov	r0, fp
 800acd6:	f000 ff2f 	bl	800bb38 <__mcmp>
 800acda:	9b08      	ldr	r3, [sp, #32]
 800acdc:	4602      	mov	r2, r0
 800acde:	4629      	mov	r1, r5
 800ace0:	4620      	mov	r0, r4
 800ace2:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800ace6:	f000 fc9f 	bl	800b628 <_Bfree>
 800acea:	9b05      	ldr	r3, [sp, #20]
 800acec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800acee:	9d01      	ldr	r5, [sp, #4]
 800acf0:	ea43 0102 	orr.w	r1, r3, r2
 800acf4:	9b06      	ldr	r3, [sp, #24]
 800acf6:	430b      	orrs	r3, r1
 800acf8:	9b08      	ldr	r3, [sp, #32]
 800acfa:	d10d      	bne.n	800ad18 <_dtoa_r+0xa80>
 800acfc:	2b39      	cmp	r3, #57	; 0x39
 800acfe:	d029      	beq.n	800ad54 <_dtoa_r+0xabc>
 800ad00:	f1b9 0f00 	cmp.w	r9, #0
 800ad04:	dd01      	ble.n	800ad0a <_dtoa_r+0xa72>
 800ad06:	9b04      	ldr	r3, [sp, #16]
 800ad08:	3331      	adds	r3, #49	; 0x31
 800ad0a:	9a02      	ldr	r2, [sp, #8]
 800ad0c:	7013      	strb	r3, [r2, #0]
 800ad0e:	e774      	b.n	800abfa <_dtoa_r+0x962>
 800ad10:	4638      	mov	r0, r7
 800ad12:	e7b9      	b.n	800ac88 <_dtoa_r+0x9f0>
 800ad14:	2201      	movs	r2, #1
 800ad16:	e7e2      	b.n	800acde <_dtoa_r+0xa46>
 800ad18:	f1b9 0f00 	cmp.w	r9, #0
 800ad1c:	db06      	blt.n	800ad2c <_dtoa_r+0xa94>
 800ad1e:	9905      	ldr	r1, [sp, #20]
 800ad20:	ea41 0909 	orr.w	r9, r1, r9
 800ad24:	9906      	ldr	r1, [sp, #24]
 800ad26:	ea59 0101 	orrs.w	r1, r9, r1
 800ad2a:	d120      	bne.n	800ad6e <_dtoa_r+0xad6>
 800ad2c:	2a00      	cmp	r2, #0
 800ad2e:	ddec      	ble.n	800ad0a <_dtoa_r+0xa72>
 800ad30:	4659      	mov	r1, fp
 800ad32:	2201      	movs	r2, #1
 800ad34:	4620      	mov	r0, r4
 800ad36:	9301      	str	r3, [sp, #4]
 800ad38:	f000 fe92 	bl	800ba60 <__lshift>
 800ad3c:	4631      	mov	r1, r6
 800ad3e:	4683      	mov	fp, r0
 800ad40:	f000 fefa 	bl	800bb38 <__mcmp>
 800ad44:	2800      	cmp	r0, #0
 800ad46:	9b01      	ldr	r3, [sp, #4]
 800ad48:	dc02      	bgt.n	800ad50 <_dtoa_r+0xab8>
 800ad4a:	d1de      	bne.n	800ad0a <_dtoa_r+0xa72>
 800ad4c:	07da      	lsls	r2, r3, #31
 800ad4e:	d5dc      	bpl.n	800ad0a <_dtoa_r+0xa72>
 800ad50:	2b39      	cmp	r3, #57	; 0x39
 800ad52:	d1d8      	bne.n	800ad06 <_dtoa_r+0xa6e>
 800ad54:	9a02      	ldr	r2, [sp, #8]
 800ad56:	2339      	movs	r3, #57	; 0x39
 800ad58:	7013      	strb	r3, [r2, #0]
 800ad5a:	462b      	mov	r3, r5
 800ad5c:	461d      	mov	r5, r3
 800ad5e:	3b01      	subs	r3, #1
 800ad60:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800ad64:	2a39      	cmp	r2, #57	; 0x39
 800ad66:	d050      	beq.n	800ae0a <_dtoa_r+0xb72>
 800ad68:	3201      	adds	r2, #1
 800ad6a:	701a      	strb	r2, [r3, #0]
 800ad6c:	e745      	b.n	800abfa <_dtoa_r+0x962>
 800ad6e:	2a00      	cmp	r2, #0
 800ad70:	dd03      	ble.n	800ad7a <_dtoa_r+0xae2>
 800ad72:	2b39      	cmp	r3, #57	; 0x39
 800ad74:	d0ee      	beq.n	800ad54 <_dtoa_r+0xabc>
 800ad76:	3301      	adds	r3, #1
 800ad78:	e7c7      	b.n	800ad0a <_dtoa_r+0xa72>
 800ad7a:	9a01      	ldr	r2, [sp, #4]
 800ad7c:	9907      	ldr	r1, [sp, #28]
 800ad7e:	f802 3c01 	strb.w	r3, [r2, #-1]
 800ad82:	428a      	cmp	r2, r1
 800ad84:	d02a      	beq.n	800addc <_dtoa_r+0xb44>
 800ad86:	4659      	mov	r1, fp
 800ad88:	2300      	movs	r3, #0
 800ad8a:	220a      	movs	r2, #10
 800ad8c:	4620      	mov	r0, r4
 800ad8e:	f000 fc6d 	bl	800b66c <__multadd>
 800ad92:	45b8      	cmp	r8, r7
 800ad94:	4683      	mov	fp, r0
 800ad96:	f04f 0300 	mov.w	r3, #0
 800ad9a:	f04f 020a 	mov.w	r2, #10
 800ad9e:	4641      	mov	r1, r8
 800ada0:	4620      	mov	r0, r4
 800ada2:	d107      	bne.n	800adb4 <_dtoa_r+0xb1c>
 800ada4:	f000 fc62 	bl	800b66c <__multadd>
 800ada8:	4680      	mov	r8, r0
 800adaa:	4607      	mov	r7, r0
 800adac:	9b01      	ldr	r3, [sp, #4]
 800adae:	3301      	adds	r3, #1
 800adb0:	9301      	str	r3, [sp, #4]
 800adb2:	e775      	b.n	800aca0 <_dtoa_r+0xa08>
 800adb4:	f000 fc5a 	bl	800b66c <__multadd>
 800adb8:	4639      	mov	r1, r7
 800adba:	4680      	mov	r8, r0
 800adbc:	2300      	movs	r3, #0
 800adbe:	220a      	movs	r2, #10
 800adc0:	4620      	mov	r0, r4
 800adc2:	f000 fc53 	bl	800b66c <__multadd>
 800adc6:	4607      	mov	r7, r0
 800adc8:	e7f0      	b.n	800adac <_dtoa_r+0xb14>
 800adca:	f1b9 0f00 	cmp.w	r9, #0
 800adce:	9a00      	ldr	r2, [sp, #0]
 800add0:	bfcc      	ite	gt
 800add2:	464d      	movgt	r5, r9
 800add4:	2501      	movle	r5, #1
 800add6:	4415      	add	r5, r2
 800add8:	f04f 0800 	mov.w	r8, #0
 800addc:	4659      	mov	r1, fp
 800adde:	2201      	movs	r2, #1
 800ade0:	4620      	mov	r0, r4
 800ade2:	9301      	str	r3, [sp, #4]
 800ade4:	f000 fe3c 	bl	800ba60 <__lshift>
 800ade8:	4631      	mov	r1, r6
 800adea:	4683      	mov	fp, r0
 800adec:	f000 fea4 	bl	800bb38 <__mcmp>
 800adf0:	2800      	cmp	r0, #0
 800adf2:	dcb2      	bgt.n	800ad5a <_dtoa_r+0xac2>
 800adf4:	d102      	bne.n	800adfc <_dtoa_r+0xb64>
 800adf6:	9b01      	ldr	r3, [sp, #4]
 800adf8:	07db      	lsls	r3, r3, #31
 800adfa:	d4ae      	bmi.n	800ad5a <_dtoa_r+0xac2>
 800adfc:	462b      	mov	r3, r5
 800adfe:	461d      	mov	r5, r3
 800ae00:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ae04:	2a30      	cmp	r2, #48	; 0x30
 800ae06:	d0fa      	beq.n	800adfe <_dtoa_r+0xb66>
 800ae08:	e6f7      	b.n	800abfa <_dtoa_r+0x962>
 800ae0a:	9a00      	ldr	r2, [sp, #0]
 800ae0c:	429a      	cmp	r2, r3
 800ae0e:	d1a5      	bne.n	800ad5c <_dtoa_r+0xac4>
 800ae10:	f10a 0a01 	add.w	sl, sl, #1
 800ae14:	2331      	movs	r3, #49	; 0x31
 800ae16:	e779      	b.n	800ad0c <_dtoa_r+0xa74>
 800ae18:	4b13      	ldr	r3, [pc, #76]	; (800ae68 <_dtoa_r+0xbd0>)
 800ae1a:	f7ff baaf 	b.w	800a37c <_dtoa_r+0xe4>
 800ae1e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	f47f aa86 	bne.w	800a332 <_dtoa_r+0x9a>
 800ae26:	4b11      	ldr	r3, [pc, #68]	; (800ae6c <_dtoa_r+0xbd4>)
 800ae28:	f7ff baa8 	b.w	800a37c <_dtoa_r+0xe4>
 800ae2c:	f1b9 0f00 	cmp.w	r9, #0
 800ae30:	dc03      	bgt.n	800ae3a <_dtoa_r+0xba2>
 800ae32:	9b05      	ldr	r3, [sp, #20]
 800ae34:	2b02      	cmp	r3, #2
 800ae36:	f73f aec9 	bgt.w	800abcc <_dtoa_r+0x934>
 800ae3a:	9d00      	ldr	r5, [sp, #0]
 800ae3c:	4631      	mov	r1, r6
 800ae3e:	4658      	mov	r0, fp
 800ae40:	f7ff f99c 	bl	800a17c <quorem>
 800ae44:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800ae48:	f805 3b01 	strb.w	r3, [r5], #1
 800ae4c:	9a00      	ldr	r2, [sp, #0]
 800ae4e:	1aaa      	subs	r2, r5, r2
 800ae50:	4591      	cmp	r9, r2
 800ae52:	ddba      	ble.n	800adca <_dtoa_r+0xb32>
 800ae54:	4659      	mov	r1, fp
 800ae56:	2300      	movs	r3, #0
 800ae58:	220a      	movs	r2, #10
 800ae5a:	4620      	mov	r0, r4
 800ae5c:	f000 fc06 	bl	800b66c <__multadd>
 800ae60:	4683      	mov	fp, r0
 800ae62:	e7eb      	b.n	800ae3c <_dtoa_r+0xba4>
 800ae64:	0800d1c4 	.word	0x0800d1c4
 800ae68:	0800cfc0 	.word	0x0800cfc0
 800ae6c:	0800d141 	.word	0x0800d141

0800ae70 <rshift>:
 800ae70:	6903      	ldr	r3, [r0, #16]
 800ae72:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800ae76:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ae7a:	ea4f 1261 	mov.w	r2, r1, asr #5
 800ae7e:	f100 0414 	add.w	r4, r0, #20
 800ae82:	dd45      	ble.n	800af10 <rshift+0xa0>
 800ae84:	f011 011f 	ands.w	r1, r1, #31
 800ae88:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800ae8c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800ae90:	d10c      	bne.n	800aeac <rshift+0x3c>
 800ae92:	f100 0710 	add.w	r7, r0, #16
 800ae96:	4629      	mov	r1, r5
 800ae98:	42b1      	cmp	r1, r6
 800ae9a:	d334      	bcc.n	800af06 <rshift+0x96>
 800ae9c:	1a9b      	subs	r3, r3, r2
 800ae9e:	009b      	lsls	r3, r3, #2
 800aea0:	1eea      	subs	r2, r5, #3
 800aea2:	4296      	cmp	r6, r2
 800aea4:	bf38      	it	cc
 800aea6:	2300      	movcc	r3, #0
 800aea8:	4423      	add	r3, r4
 800aeaa:	e015      	b.n	800aed8 <rshift+0x68>
 800aeac:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800aeb0:	f1c1 0820 	rsb	r8, r1, #32
 800aeb4:	40cf      	lsrs	r7, r1
 800aeb6:	f105 0e04 	add.w	lr, r5, #4
 800aeba:	46a1      	mov	r9, r4
 800aebc:	4576      	cmp	r6, lr
 800aebe:	46f4      	mov	ip, lr
 800aec0:	d815      	bhi.n	800aeee <rshift+0x7e>
 800aec2:	1a9b      	subs	r3, r3, r2
 800aec4:	009a      	lsls	r2, r3, #2
 800aec6:	3a04      	subs	r2, #4
 800aec8:	3501      	adds	r5, #1
 800aeca:	42ae      	cmp	r6, r5
 800aecc:	bf38      	it	cc
 800aece:	2200      	movcc	r2, #0
 800aed0:	18a3      	adds	r3, r4, r2
 800aed2:	50a7      	str	r7, [r4, r2]
 800aed4:	b107      	cbz	r7, 800aed8 <rshift+0x68>
 800aed6:	3304      	adds	r3, #4
 800aed8:	1b1a      	subs	r2, r3, r4
 800aeda:	42a3      	cmp	r3, r4
 800aedc:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800aee0:	bf08      	it	eq
 800aee2:	2300      	moveq	r3, #0
 800aee4:	6102      	str	r2, [r0, #16]
 800aee6:	bf08      	it	eq
 800aee8:	6143      	streq	r3, [r0, #20]
 800aeea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800aeee:	f8dc c000 	ldr.w	ip, [ip]
 800aef2:	fa0c fc08 	lsl.w	ip, ip, r8
 800aef6:	ea4c 0707 	orr.w	r7, ip, r7
 800aefa:	f849 7b04 	str.w	r7, [r9], #4
 800aefe:	f85e 7b04 	ldr.w	r7, [lr], #4
 800af02:	40cf      	lsrs	r7, r1
 800af04:	e7da      	b.n	800aebc <rshift+0x4c>
 800af06:	f851 cb04 	ldr.w	ip, [r1], #4
 800af0a:	f847 cf04 	str.w	ip, [r7, #4]!
 800af0e:	e7c3      	b.n	800ae98 <rshift+0x28>
 800af10:	4623      	mov	r3, r4
 800af12:	e7e1      	b.n	800aed8 <rshift+0x68>

0800af14 <__hexdig_fun>:
 800af14:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800af18:	2b09      	cmp	r3, #9
 800af1a:	d802      	bhi.n	800af22 <__hexdig_fun+0xe>
 800af1c:	3820      	subs	r0, #32
 800af1e:	b2c0      	uxtb	r0, r0
 800af20:	4770      	bx	lr
 800af22:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800af26:	2b05      	cmp	r3, #5
 800af28:	d801      	bhi.n	800af2e <__hexdig_fun+0x1a>
 800af2a:	3847      	subs	r0, #71	; 0x47
 800af2c:	e7f7      	b.n	800af1e <__hexdig_fun+0xa>
 800af2e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800af32:	2b05      	cmp	r3, #5
 800af34:	d801      	bhi.n	800af3a <__hexdig_fun+0x26>
 800af36:	3827      	subs	r0, #39	; 0x27
 800af38:	e7f1      	b.n	800af1e <__hexdig_fun+0xa>
 800af3a:	2000      	movs	r0, #0
 800af3c:	4770      	bx	lr
	...

0800af40 <__gethex>:
 800af40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af44:	ed2d 8b02 	vpush	{d8}
 800af48:	b089      	sub	sp, #36	; 0x24
 800af4a:	ee08 0a10 	vmov	s16, r0
 800af4e:	9304      	str	r3, [sp, #16]
 800af50:	4bbc      	ldr	r3, [pc, #752]	; (800b244 <__gethex+0x304>)
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	9301      	str	r3, [sp, #4]
 800af56:	4618      	mov	r0, r3
 800af58:	468b      	mov	fp, r1
 800af5a:	4690      	mov	r8, r2
 800af5c:	f7f5 f940 	bl	80001e0 <strlen>
 800af60:	9b01      	ldr	r3, [sp, #4]
 800af62:	f8db 2000 	ldr.w	r2, [fp]
 800af66:	4403      	add	r3, r0
 800af68:	4682      	mov	sl, r0
 800af6a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800af6e:	9305      	str	r3, [sp, #20]
 800af70:	1c93      	adds	r3, r2, #2
 800af72:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800af76:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800af7a:	32fe      	adds	r2, #254	; 0xfe
 800af7c:	18d1      	adds	r1, r2, r3
 800af7e:	461f      	mov	r7, r3
 800af80:	f813 0b01 	ldrb.w	r0, [r3], #1
 800af84:	9100      	str	r1, [sp, #0]
 800af86:	2830      	cmp	r0, #48	; 0x30
 800af88:	d0f8      	beq.n	800af7c <__gethex+0x3c>
 800af8a:	f7ff ffc3 	bl	800af14 <__hexdig_fun>
 800af8e:	4604      	mov	r4, r0
 800af90:	2800      	cmp	r0, #0
 800af92:	d13a      	bne.n	800b00a <__gethex+0xca>
 800af94:	9901      	ldr	r1, [sp, #4]
 800af96:	4652      	mov	r2, sl
 800af98:	4638      	mov	r0, r7
 800af9a:	f001 f9ed 	bl	800c378 <strncmp>
 800af9e:	4605      	mov	r5, r0
 800afa0:	2800      	cmp	r0, #0
 800afa2:	d168      	bne.n	800b076 <__gethex+0x136>
 800afa4:	f817 000a 	ldrb.w	r0, [r7, sl]
 800afa8:	eb07 060a 	add.w	r6, r7, sl
 800afac:	f7ff ffb2 	bl	800af14 <__hexdig_fun>
 800afb0:	2800      	cmp	r0, #0
 800afb2:	d062      	beq.n	800b07a <__gethex+0x13a>
 800afb4:	4633      	mov	r3, r6
 800afb6:	7818      	ldrb	r0, [r3, #0]
 800afb8:	2830      	cmp	r0, #48	; 0x30
 800afba:	461f      	mov	r7, r3
 800afbc:	f103 0301 	add.w	r3, r3, #1
 800afc0:	d0f9      	beq.n	800afb6 <__gethex+0x76>
 800afc2:	f7ff ffa7 	bl	800af14 <__hexdig_fun>
 800afc6:	2301      	movs	r3, #1
 800afc8:	fab0 f480 	clz	r4, r0
 800afcc:	0964      	lsrs	r4, r4, #5
 800afce:	4635      	mov	r5, r6
 800afd0:	9300      	str	r3, [sp, #0]
 800afd2:	463a      	mov	r2, r7
 800afd4:	4616      	mov	r6, r2
 800afd6:	3201      	adds	r2, #1
 800afd8:	7830      	ldrb	r0, [r6, #0]
 800afda:	f7ff ff9b 	bl	800af14 <__hexdig_fun>
 800afde:	2800      	cmp	r0, #0
 800afe0:	d1f8      	bne.n	800afd4 <__gethex+0x94>
 800afe2:	9901      	ldr	r1, [sp, #4]
 800afe4:	4652      	mov	r2, sl
 800afe6:	4630      	mov	r0, r6
 800afe8:	f001 f9c6 	bl	800c378 <strncmp>
 800afec:	b980      	cbnz	r0, 800b010 <__gethex+0xd0>
 800afee:	b94d      	cbnz	r5, 800b004 <__gethex+0xc4>
 800aff0:	eb06 050a 	add.w	r5, r6, sl
 800aff4:	462a      	mov	r2, r5
 800aff6:	4616      	mov	r6, r2
 800aff8:	3201      	adds	r2, #1
 800affa:	7830      	ldrb	r0, [r6, #0]
 800affc:	f7ff ff8a 	bl	800af14 <__hexdig_fun>
 800b000:	2800      	cmp	r0, #0
 800b002:	d1f8      	bne.n	800aff6 <__gethex+0xb6>
 800b004:	1bad      	subs	r5, r5, r6
 800b006:	00ad      	lsls	r5, r5, #2
 800b008:	e004      	b.n	800b014 <__gethex+0xd4>
 800b00a:	2400      	movs	r4, #0
 800b00c:	4625      	mov	r5, r4
 800b00e:	e7e0      	b.n	800afd2 <__gethex+0x92>
 800b010:	2d00      	cmp	r5, #0
 800b012:	d1f7      	bne.n	800b004 <__gethex+0xc4>
 800b014:	7833      	ldrb	r3, [r6, #0]
 800b016:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800b01a:	2b50      	cmp	r3, #80	; 0x50
 800b01c:	d13b      	bne.n	800b096 <__gethex+0x156>
 800b01e:	7873      	ldrb	r3, [r6, #1]
 800b020:	2b2b      	cmp	r3, #43	; 0x2b
 800b022:	d02c      	beq.n	800b07e <__gethex+0x13e>
 800b024:	2b2d      	cmp	r3, #45	; 0x2d
 800b026:	d02e      	beq.n	800b086 <__gethex+0x146>
 800b028:	1c71      	adds	r1, r6, #1
 800b02a:	f04f 0900 	mov.w	r9, #0
 800b02e:	7808      	ldrb	r0, [r1, #0]
 800b030:	f7ff ff70 	bl	800af14 <__hexdig_fun>
 800b034:	1e43      	subs	r3, r0, #1
 800b036:	b2db      	uxtb	r3, r3
 800b038:	2b18      	cmp	r3, #24
 800b03a:	d82c      	bhi.n	800b096 <__gethex+0x156>
 800b03c:	f1a0 0210 	sub.w	r2, r0, #16
 800b040:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800b044:	f7ff ff66 	bl	800af14 <__hexdig_fun>
 800b048:	1e43      	subs	r3, r0, #1
 800b04a:	b2db      	uxtb	r3, r3
 800b04c:	2b18      	cmp	r3, #24
 800b04e:	d91d      	bls.n	800b08c <__gethex+0x14c>
 800b050:	f1b9 0f00 	cmp.w	r9, #0
 800b054:	d000      	beq.n	800b058 <__gethex+0x118>
 800b056:	4252      	negs	r2, r2
 800b058:	4415      	add	r5, r2
 800b05a:	f8cb 1000 	str.w	r1, [fp]
 800b05e:	b1e4      	cbz	r4, 800b09a <__gethex+0x15a>
 800b060:	9b00      	ldr	r3, [sp, #0]
 800b062:	2b00      	cmp	r3, #0
 800b064:	bf14      	ite	ne
 800b066:	2700      	movne	r7, #0
 800b068:	2706      	moveq	r7, #6
 800b06a:	4638      	mov	r0, r7
 800b06c:	b009      	add	sp, #36	; 0x24
 800b06e:	ecbd 8b02 	vpop	{d8}
 800b072:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b076:	463e      	mov	r6, r7
 800b078:	4625      	mov	r5, r4
 800b07a:	2401      	movs	r4, #1
 800b07c:	e7ca      	b.n	800b014 <__gethex+0xd4>
 800b07e:	f04f 0900 	mov.w	r9, #0
 800b082:	1cb1      	adds	r1, r6, #2
 800b084:	e7d3      	b.n	800b02e <__gethex+0xee>
 800b086:	f04f 0901 	mov.w	r9, #1
 800b08a:	e7fa      	b.n	800b082 <__gethex+0x142>
 800b08c:	230a      	movs	r3, #10
 800b08e:	fb03 0202 	mla	r2, r3, r2, r0
 800b092:	3a10      	subs	r2, #16
 800b094:	e7d4      	b.n	800b040 <__gethex+0x100>
 800b096:	4631      	mov	r1, r6
 800b098:	e7df      	b.n	800b05a <__gethex+0x11a>
 800b09a:	1bf3      	subs	r3, r6, r7
 800b09c:	3b01      	subs	r3, #1
 800b09e:	4621      	mov	r1, r4
 800b0a0:	2b07      	cmp	r3, #7
 800b0a2:	dc0b      	bgt.n	800b0bc <__gethex+0x17c>
 800b0a4:	ee18 0a10 	vmov	r0, s16
 800b0a8:	f000 fa7e 	bl	800b5a8 <_Balloc>
 800b0ac:	4604      	mov	r4, r0
 800b0ae:	b940      	cbnz	r0, 800b0c2 <__gethex+0x182>
 800b0b0:	4b65      	ldr	r3, [pc, #404]	; (800b248 <__gethex+0x308>)
 800b0b2:	4602      	mov	r2, r0
 800b0b4:	21de      	movs	r1, #222	; 0xde
 800b0b6:	4865      	ldr	r0, [pc, #404]	; (800b24c <__gethex+0x30c>)
 800b0b8:	f001 f97e 	bl	800c3b8 <__assert_func>
 800b0bc:	3101      	adds	r1, #1
 800b0be:	105b      	asrs	r3, r3, #1
 800b0c0:	e7ee      	b.n	800b0a0 <__gethex+0x160>
 800b0c2:	f100 0914 	add.w	r9, r0, #20
 800b0c6:	f04f 0b00 	mov.w	fp, #0
 800b0ca:	f1ca 0301 	rsb	r3, sl, #1
 800b0ce:	f8cd 9008 	str.w	r9, [sp, #8]
 800b0d2:	f8cd b000 	str.w	fp, [sp]
 800b0d6:	9306      	str	r3, [sp, #24]
 800b0d8:	42b7      	cmp	r7, r6
 800b0da:	d340      	bcc.n	800b15e <__gethex+0x21e>
 800b0dc:	9802      	ldr	r0, [sp, #8]
 800b0de:	9b00      	ldr	r3, [sp, #0]
 800b0e0:	f840 3b04 	str.w	r3, [r0], #4
 800b0e4:	eba0 0009 	sub.w	r0, r0, r9
 800b0e8:	1080      	asrs	r0, r0, #2
 800b0ea:	0146      	lsls	r6, r0, #5
 800b0ec:	6120      	str	r0, [r4, #16]
 800b0ee:	4618      	mov	r0, r3
 800b0f0:	f000 fb50 	bl	800b794 <__hi0bits>
 800b0f4:	1a30      	subs	r0, r6, r0
 800b0f6:	f8d8 6000 	ldr.w	r6, [r8]
 800b0fa:	42b0      	cmp	r0, r6
 800b0fc:	dd63      	ble.n	800b1c6 <__gethex+0x286>
 800b0fe:	1b87      	subs	r7, r0, r6
 800b100:	4639      	mov	r1, r7
 800b102:	4620      	mov	r0, r4
 800b104:	f000 feea 	bl	800bedc <__any_on>
 800b108:	4682      	mov	sl, r0
 800b10a:	b1a8      	cbz	r0, 800b138 <__gethex+0x1f8>
 800b10c:	1e7b      	subs	r3, r7, #1
 800b10e:	1159      	asrs	r1, r3, #5
 800b110:	f003 021f 	and.w	r2, r3, #31
 800b114:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800b118:	f04f 0a01 	mov.w	sl, #1
 800b11c:	fa0a f202 	lsl.w	r2, sl, r2
 800b120:	420a      	tst	r2, r1
 800b122:	d009      	beq.n	800b138 <__gethex+0x1f8>
 800b124:	4553      	cmp	r3, sl
 800b126:	dd05      	ble.n	800b134 <__gethex+0x1f4>
 800b128:	1eb9      	subs	r1, r7, #2
 800b12a:	4620      	mov	r0, r4
 800b12c:	f000 fed6 	bl	800bedc <__any_on>
 800b130:	2800      	cmp	r0, #0
 800b132:	d145      	bne.n	800b1c0 <__gethex+0x280>
 800b134:	f04f 0a02 	mov.w	sl, #2
 800b138:	4639      	mov	r1, r7
 800b13a:	4620      	mov	r0, r4
 800b13c:	f7ff fe98 	bl	800ae70 <rshift>
 800b140:	443d      	add	r5, r7
 800b142:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b146:	42ab      	cmp	r3, r5
 800b148:	da4c      	bge.n	800b1e4 <__gethex+0x2a4>
 800b14a:	ee18 0a10 	vmov	r0, s16
 800b14e:	4621      	mov	r1, r4
 800b150:	f000 fa6a 	bl	800b628 <_Bfree>
 800b154:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b156:	2300      	movs	r3, #0
 800b158:	6013      	str	r3, [r2, #0]
 800b15a:	27a3      	movs	r7, #163	; 0xa3
 800b15c:	e785      	b.n	800b06a <__gethex+0x12a>
 800b15e:	1e73      	subs	r3, r6, #1
 800b160:	9a05      	ldr	r2, [sp, #20]
 800b162:	9303      	str	r3, [sp, #12]
 800b164:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b168:	4293      	cmp	r3, r2
 800b16a:	d019      	beq.n	800b1a0 <__gethex+0x260>
 800b16c:	f1bb 0f20 	cmp.w	fp, #32
 800b170:	d107      	bne.n	800b182 <__gethex+0x242>
 800b172:	9b02      	ldr	r3, [sp, #8]
 800b174:	9a00      	ldr	r2, [sp, #0]
 800b176:	f843 2b04 	str.w	r2, [r3], #4
 800b17a:	9302      	str	r3, [sp, #8]
 800b17c:	2300      	movs	r3, #0
 800b17e:	9300      	str	r3, [sp, #0]
 800b180:	469b      	mov	fp, r3
 800b182:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800b186:	f7ff fec5 	bl	800af14 <__hexdig_fun>
 800b18a:	9b00      	ldr	r3, [sp, #0]
 800b18c:	f000 000f 	and.w	r0, r0, #15
 800b190:	fa00 f00b 	lsl.w	r0, r0, fp
 800b194:	4303      	orrs	r3, r0
 800b196:	9300      	str	r3, [sp, #0]
 800b198:	f10b 0b04 	add.w	fp, fp, #4
 800b19c:	9b03      	ldr	r3, [sp, #12]
 800b19e:	e00d      	b.n	800b1bc <__gethex+0x27c>
 800b1a0:	9b03      	ldr	r3, [sp, #12]
 800b1a2:	9a06      	ldr	r2, [sp, #24]
 800b1a4:	4413      	add	r3, r2
 800b1a6:	42bb      	cmp	r3, r7
 800b1a8:	d3e0      	bcc.n	800b16c <__gethex+0x22c>
 800b1aa:	4618      	mov	r0, r3
 800b1ac:	9901      	ldr	r1, [sp, #4]
 800b1ae:	9307      	str	r3, [sp, #28]
 800b1b0:	4652      	mov	r2, sl
 800b1b2:	f001 f8e1 	bl	800c378 <strncmp>
 800b1b6:	9b07      	ldr	r3, [sp, #28]
 800b1b8:	2800      	cmp	r0, #0
 800b1ba:	d1d7      	bne.n	800b16c <__gethex+0x22c>
 800b1bc:	461e      	mov	r6, r3
 800b1be:	e78b      	b.n	800b0d8 <__gethex+0x198>
 800b1c0:	f04f 0a03 	mov.w	sl, #3
 800b1c4:	e7b8      	b.n	800b138 <__gethex+0x1f8>
 800b1c6:	da0a      	bge.n	800b1de <__gethex+0x29e>
 800b1c8:	1a37      	subs	r7, r6, r0
 800b1ca:	4621      	mov	r1, r4
 800b1cc:	ee18 0a10 	vmov	r0, s16
 800b1d0:	463a      	mov	r2, r7
 800b1d2:	f000 fc45 	bl	800ba60 <__lshift>
 800b1d6:	1bed      	subs	r5, r5, r7
 800b1d8:	4604      	mov	r4, r0
 800b1da:	f100 0914 	add.w	r9, r0, #20
 800b1de:	f04f 0a00 	mov.w	sl, #0
 800b1e2:	e7ae      	b.n	800b142 <__gethex+0x202>
 800b1e4:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800b1e8:	42a8      	cmp	r0, r5
 800b1ea:	dd72      	ble.n	800b2d2 <__gethex+0x392>
 800b1ec:	1b45      	subs	r5, r0, r5
 800b1ee:	42ae      	cmp	r6, r5
 800b1f0:	dc36      	bgt.n	800b260 <__gethex+0x320>
 800b1f2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b1f6:	2b02      	cmp	r3, #2
 800b1f8:	d02a      	beq.n	800b250 <__gethex+0x310>
 800b1fa:	2b03      	cmp	r3, #3
 800b1fc:	d02c      	beq.n	800b258 <__gethex+0x318>
 800b1fe:	2b01      	cmp	r3, #1
 800b200:	d115      	bne.n	800b22e <__gethex+0x2ee>
 800b202:	42ae      	cmp	r6, r5
 800b204:	d113      	bne.n	800b22e <__gethex+0x2ee>
 800b206:	2e01      	cmp	r6, #1
 800b208:	d10b      	bne.n	800b222 <__gethex+0x2e2>
 800b20a:	9a04      	ldr	r2, [sp, #16]
 800b20c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b210:	6013      	str	r3, [r2, #0]
 800b212:	2301      	movs	r3, #1
 800b214:	6123      	str	r3, [r4, #16]
 800b216:	f8c9 3000 	str.w	r3, [r9]
 800b21a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b21c:	2762      	movs	r7, #98	; 0x62
 800b21e:	601c      	str	r4, [r3, #0]
 800b220:	e723      	b.n	800b06a <__gethex+0x12a>
 800b222:	1e71      	subs	r1, r6, #1
 800b224:	4620      	mov	r0, r4
 800b226:	f000 fe59 	bl	800bedc <__any_on>
 800b22a:	2800      	cmp	r0, #0
 800b22c:	d1ed      	bne.n	800b20a <__gethex+0x2ca>
 800b22e:	ee18 0a10 	vmov	r0, s16
 800b232:	4621      	mov	r1, r4
 800b234:	f000 f9f8 	bl	800b628 <_Bfree>
 800b238:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b23a:	2300      	movs	r3, #0
 800b23c:	6013      	str	r3, [r2, #0]
 800b23e:	2750      	movs	r7, #80	; 0x50
 800b240:	e713      	b.n	800b06a <__gethex+0x12a>
 800b242:	bf00      	nop
 800b244:	0800d240 	.word	0x0800d240
 800b248:	0800d1c4 	.word	0x0800d1c4
 800b24c:	0800d1d5 	.word	0x0800d1d5
 800b250:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b252:	2b00      	cmp	r3, #0
 800b254:	d1eb      	bne.n	800b22e <__gethex+0x2ee>
 800b256:	e7d8      	b.n	800b20a <__gethex+0x2ca>
 800b258:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d1d5      	bne.n	800b20a <__gethex+0x2ca>
 800b25e:	e7e6      	b.n	800b22e <__gethex+0x2ee>
 800b260:	1e6f      	subs	r7, r5, #1
 800b262:	f1ba 0f00 	cmp.w	sl, #0
 800b266:	d131      	bne.n	800b2cc <__gethex+0x38c>
 800b268:	b127      	cbz	r7, 800b274 <__gethex+0x334>
 800b26a:	4639      	mov	r1, r7
 800b26c:	4620      	mov	r0, r4
 800b26e:	f000 fe35 	bl	800bedc <__any_on>
 800b272:	4682      	mov	sl, r0
 800b274:	117b      	asrs	r3, r7, #5
 800b276:	2101      	movs	r1, #1
 800b278:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800b27c:	f007 071f 	and.w	r7, r7, #31
 800b280:	fa01 f707 	lsl.w	r7, r1, r7
 800b284:	421f      	tst	r7, r3
 800b286:	4629      	mov	r1, r5
 800b288:	4620      	mov	r0, r4
 800b28a:	bf18      	it	ne
 800b28c:	f04a 0a02 	orrne.w	sl, sl, #2
 800b290:	1b76      	subs	r6, r6, r5
 800b292:	f7ff fded 	bl	800ae70 <rshift>
 800b296:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800b29a:	2702      	movs	r7, #2
 800b29c:	f1ba 0f00 	cmp.w	sl, #0
 800b2a0:	d048      	beq.n	800b334 <__gethex+0x3f4>
 800b2a2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b2a6:	2b02      	cmp	r3, #2
 800b2a8:	d015      	beq.n	800b2d6 <__gethex+0x396>
 800b2aa:	2b03      	cmp	r3, #3
 800b2ac:	d017      	beq.n	800b2de <__gethex+0x39e>
 800b2ae:	2b01      	cmp	r3, #1
 800b2b0:	d109      	bne.n	800b2c6 <__gethex+0x386>
 800b2b2:	f01a 0f02 	tst.w	sl, #2
 800b2b6:	d006      	beq.n	800b2c6 <__gethex+0x386>
 800b2b8:	f8d9 0000 	ldr.w	r0, [r9]
 800b2bc:	ea4a 0a00 	orr.w	sl, sl, r0
 800b2c0:	f01a 0f01 	tst.w	sl, #1
 800b2c4:	d10e      	bne.n	800b2e4 <__gethex+0x3a4>
 800b2c6:	f047 0710 	orr.w	r7, r7, #16
 800b2ca:	e033      	b.n	800b334 <__gethex+0x3f4>
 800b2cc:	f04f 0a01 	mov.w	sl, #1
 800b2d0:	e7d0      	b.n	800b274 <__gethex+0x334>
 800b2d2:	2701      	movs	r7, #1
 800b2d4:	e7e2      	b.n	800b29c <__gethex+0x35c>
 800b2d6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b2d8:	f1c3 0301 	rsb	r3, r3, #1
 800b2dc:	9315      	str	r3, [sp, #84]	; 0x54
 800b2de:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	d0f0      	beq.n	800b2c6 <__gethex+0x386>
 800b2e4:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800b2e8:	f104 0314 	add.w	r3, r4, #20
 800b2ec:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800b2f0:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800b2f4:	f04f 0c00 	mov.w	ip, #0
 800b2f8:	4618      	mov	r0, r3
 800b2fa:	f853 2b04 	ldr.w	r2, [r3], #4
 800b2fe:	f1b2 3fff 	cmp.w	r2, #4294967295
 800b302:	d01c      	beq.n	800b33e <__gethex+0x3fe>
 800b304:	3201      	adds	r2, #1
 800b306:	6002      	str	r2, [r0, #0]
 800b308:	2f02      	cmp	r7, #2
 800b30a:	f104 0314 	add.w	r3, r4, #20
 800b30e:	d13f      	bne.n	800b390 <__gethex+0x450>
 800b310:	f8d8 2000 	ldr.w	r2, [r8]
 800b314:	3a01      	subs	r2, #1
 800b316:	42b2      	cmp	r2, r6
 800b318:	d10a      	bne.n	800b330 <__gethex+0x3f0>
 800b31a:	1171      	asrs	r1, r6, #5
 800b31c:	2201      	movs	r2, #1
 800b31e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b322:	f006 061f 	and.w	r6, r6, #31
 800b326:	fa02 f606 	lsl.w	r6, r2, r6
 800b32a:	421e      	tst	r6, r3
 800b32c:	bf18      	it	ne
 800b32e:	4617      	movne	r7, r2
 800b330:	f047 0720 	orr.w	r7, r7, #32
 800b334:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b336:	601c      	str	r4, [r3, #0]
 800b338:	9b04      	ldr	r3, [sp, #16]
 800b33a:	601d      	str	r5, [r3, #0]
 800b33c:	e695      	b.n	800b06a <__gethex+0x12a>
 800b33e:	4299      	cmp	r1, r3
 800b340:	f843 cc04 	str.w	ip, [r3, #-4]
 800b344:	d8d8      	bhi.n	800b2f8 <__gethex+0x3b8>
 800b346:	68a3      	ldr	r3, [r4, #8]
 800b348:	459b      	cmp	fp, r3
 800b34a:	db19      	blt.n	800b380 <__gethex+0x440>
 800b34c:	6861      	ldr	r1, [r4, #4]
 800b34e:	ee18 0a10 	vmov	r0, s16
 800b352:	3101      	adds	r1, #1
 800b354:	f000 f928 	bl	800b5a8 <_Balloc>
 800b358:	4681      	mov	r9, r0
 800b35a:	b918      	cbnz	r0, 800b364 <__gethex+0x424>
 800b35c:	4b1a      	ldr	r3, [pc, #104]	; (800b3c8 <__gethex+0x488>)
 800b35e:	4602      	mov	r2, r0
 800b360:	2184      	movs	r1, #132	; 0x84
 800b362:	e6a8      	b.n	800b0b6 <__gethex+0x176>
 800b364:	6922      	ldr	r2, [r4, #16]
 800b366:	3202      	adds	r2, #2
 800b368:	f104 010c 	add.w	r1, r4, #12
 800b36c:	0092      	lsls	r2, r2, #2
 800b36e:	300c      	adds	r0, #12
 800b370:	f000 f90c 	bl	800b58c <memcpy>
 800b374:	4621      	mov	r1, r4
 800b376:	ee18 0a10 	vmov	r0, s16
 800b37a:	f000 f955 	bl	800b628 <_Bfree>
 800b37e:	464c      	mov	r4, r9
 800b380:	6923      	ldr	r3, [r4, #16]
 800b382:	1c5a      	adds	r2, r3, #1
 800b384:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b388:	6122      	str	r2, [r4, #16]
 800b38a:	2201      	movs	r2, #1
 800b38c:	615a      	str	r2, [r3, #20]
 800b38e:	e7bb      	b.n	800b308 <__gethex+0x3c8>
 800b390:	6922      	ldr	r2, [r4, #16]
 800b392:	455a      	cmp	r2, fp
 800b394:	dd0b      	ble.n	800b3ae <__gethex+0x46e>
 800b396:	2101      	movs	r1, #1
 800b398:	4620      	mov	r0, r4
 800b39a:	f7ff fd69 	bl	800ae70 <rshift>
 800b39e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b3a2:	3501      	adds	r5, #1
 800b3a4:	42ab      	cmp	r3, r5
 800b3a6:	f6ff aed0 	blt.w	800b14a <__gethex+0x20a>
 800b3aa:	2701      	movs	r7, #1
 800b3ac:	e7c0      	b.n	800b330 <__gethex+0x3f0>
 800b3ae:	f016 061f 	ands.w	r6, r6, #31
 800b3b2:	d0fa      	beq.n	800b3aa <__gethex+0x46a>
 800b3b4:	449a      	add	sl, r3
 800b3b6:	f1c6 0620 	rsb	r6, r6, #32
 800b3ba:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800b3be:	f000 f9e9 	bl	800b794 <__hi0bits>
 800b3c2:	42b0      	cmp	r0, r6
 800b3c4:	dbe7      	blt.n	800b396 <__gethex+0x456>
 800b3c6:	e7f0      	b.n	800b3aa <__gethex+0x46a>
 800b3c8:	0800d1c4 	.word	0x0800d1c4

0800b3cc <L_shift>:
 800b3cc:	f1c2 0208 	rsb	r2, r2, #8
 800b3d0:	0092      	lsls	r2, r2, #2
 800b3d2:	b570      	push	{r4, r5, r6, lr}
 800b3d4:	f1c2 0620 	rsb	r6, r2, #32
 800b3d8:	6843      	ldr	r3, [r0, #4]
 800b3da:	6804      	ldr	r4, [r0, #0]
 800b3dc:	fa03 f506 	lsl.w	r5, r3, r6
 800b3e0:	432c      	orrs	r4, r5
 800b3e2:	40d3      	lsrs	r3, r2
 800b3e4:	6004      	str	r4, [r0, #0]
 800b3e6:	f840 3f04 	str.w	r3, [r0, #4]!
 800b3ea:	4288      	cmp	r0, r1
 800b3ec:	d3f4      	bcc.n	800b3d8 <L_shift+0xc>
 800b3ee:	bd70      	pop	{r4, r5, r6, pc}

0800b3f0 <__match>:
 800b3f0:	b530      	push	{r4, r5, lr}
 800b3f2:	6803      	ldr	r3, [r0, #0]
 800b3f4:	3301      	adds	r3, #1
 800b3f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b3fa:	b914      	cbnz	r4, 800b402 <__match+0x12>
 800b3fc:	6003      	str	r3, [r0, #0]
 800b3fe:	2001      	movs	r0, #1
 800b400:	bd30      	pop	{r4, r5, pc}
 800b402:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b406:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800b40a:	2d19      	cmp	r5, #25
 800b40c:	bf98      	it	ls
 800b40e:	3220      	addls	r2, #32
 800b410:	42a2      	cmp	r2, r4
 800b412:	d0f0      	beq.n	800b3f6 <__match+0x6>
 800b414:	2000      	movs	r0, #0
 800b416:	e7f3      	b.n	800b400 <__match+0x10>

0800b418 <__hexnan>:
 800b418:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b41c:	680b      	ldr	r3, [r1, #0]
 800b41e:	6801      	ldr	r1, [r0, #0]
 800b420:	115e      	asrs	r6, r3, #5
 800b422:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b426:	f013 031f 	ands.w	r3, r3, #31
 800b42a:	b087      	sub	sp, #28
 800b42c:	bf18      	it	ne
 800b42e:	3604      	addne	r6, #4
 800b430:	2500      	movs	r5, #0
 800b432:	1f37      	subs	r7, r6, #4
 800b434:	4682      	mov	sl, r0
 800b436:	4690      	mov	r8, r2
 800b438:	9301      	str	r3, [sp, #4]
 800b43a:	f846 5c04 	str.w	r5, [r6, #-4]
 800b43e:	46b9      	mov	r9, r7
 800b440:	463c      	mov	r4, r7
 800b442:	9502      	str	r5, [sp, #8]
 800b444:	46ab      	mov	fp, r5
 800b446:	784a      	ldrb	r2, [r1, #1]
 800b448:	1c4b      	adds	r3, r1, #1
 800b44a:	9303      	str	r3, [sp, #12]
 800b44c:	b342      	cbz	r2, 800b4a0 <__hexnan+0x88>
 800b44e:	4610      	mov	r0, r2
 800b450:	9105      	str	r1, [sp, #20]
 800b452:	9204      	str	r2, [sp, #16]
 800b454:	f7ff fd5e 	bl	800af14 <__hexdig_fun>
 800b458:	2800      	cmp	r0, #0
 800b45a:	d14f      	bne.n	800b4fc <__hexnan+0xe4>
 800b45c:	9a04      	ldr	r2, [sp, #16]
 800b45e:	9905      	ldr	r1, [sp, #20]
 800b460:	2a20      	cmp	r2, #32
 800b462:	d818      	bhi.n	800b496 <__hexnan+0x7e>
 800b464:	9b02      	ldr	r3, [sp, #8]
 800b466:	459b      	cmp	fp, r3
 800b468:	dd13      	ble.n	800b492 <__hexnan+0x7a>
 800b46a:	454c      	cmp	r4, r9
 800b46c:	d206      	bcs.n	800b47c <__hexnan+0x64>
 800b46e:	2d07      	cmp	r5, #7
 800b470:	dc04      	bgt.n	800b47c <__hexnan+0x64>
 800b472:	462a      	mov	r2, r5
 800b474:	4649      	mov	r1, r9
 800b476:	4620      	mov	r0, r4
 800b478:	f7ff ffa8 	bl	800b3cc <L_shift>
 800b47c:	4544      	cmp	r4, r8
 800b47e:	d950      	bls.n	800b522 <__hexnan+0x10a>
 800b480:	2300      	movs	r3, #0
 800b482:	f1a4 0904 	sub.w	r9, r4, #4
 800b486:	f844 3c04 	str.w	r3, [r4, #-4]
 800b48a:	f8cd b008 	str.w	fp, [sp, #8]
 800b48e:	464c      	mov	r4, r9
 800b490:	461d      	mov	r5, r3
 800b492:	9903      	ldr	r1, [sp, #12]
 800b494:	e7d7      	b.n	800b446 <__hexnan+0x2e>
 800b496:	2a29      	cmp	r2, #41	; 0x29
 800b498:	d156      	bne.n	800b548 <__hexnan+0x130>
 800b49a:	3102      	adds	r1, #2
 800b49c:	f8ca 1000 	str.w	r1, [sl]
 800b4a0:	f1bb 0f00 	cmp.w	fp, #0
 800b4a4:	d050      	beq.n	800b548 <__hexnan+0x130>
 800b4a6:	454c      	cmp	r4, r9
 800b4a8:	d206      	bcs.n	800b4b8 <__hexnan+0xa0>
 800b4aa:	2d07      	cmp	r5, #7
 800b4ac:	dc04      	bgt.n	800b4b8 <__hexnan+0xa0>
 800b4ae:	462a      	mov	r2, r5
 800b4b0:	4649      	mov	r1, r9
 800b4b2:	4620      	mov	r0, r4
 800b4b4:	f7ff ff8a 	bl	800b3cc <L_shift>
 800b4b8:	4544      	cmp	r4, r8
 800b4ba:	d934      	bls.n	800b526 <__hexnan+0x10e>
 800b4bc:	f1a8 0204 	sub.w	r2, r8, #4
 800b4c0:	4623      	mov	r3, r4
 800b4c2:	f853 1b04 	ldr.w	r1, [r3], #4
 800b4c6:	f842 1f04 	str.w	r1, [r2, #4]!
 800b4ca:	429f      	cmp	r7, r3
 800b4cc:	d2f9      	bcs.n	800b4c2 <__hexnan+0xaa>
 800b4ce:	1b3b      	subs	r3, r7, r4
 800b4d0:	f023 0303 	bic.w	r3, r3, #3
 800b4d4:	3304      	adds	r3, #4
 800b4d6:	3401      	adds	r4, #1
 800b4d8:	3e03      	subs	r6, #3
 800b4da:	42b4      	cmp	r4, r6
 800b4dc:	bf88      	it	hi
 800b4de:	2304      	movhi	r3, #4
 800b4e0:	4443      	add	r3, r8
 800b4e2:	2200      	movs	r2, #0
 800b4e4:	f843 2b04 	str.w	r2, [r3], #4
 800b4e8:	429f      	cmp	r7, r3
 800b4ea:	d2fb      	bcs.n	800b4e4 <__hexnan+0xcc>
 800b4ec:	683b      	ldr	r3, [r7, #0]
 800b4ee:	b91b      	cbnz	r3, 800b4f8 <__hexnan+0xe0>
 800b4f0:	4547      	cmp	r7, r8
 800b4f2:	d127      	bne.n	800b544 <__hexnan+0x12c>
 800b4f4:	2301      	movs	r3, #1
 800b4f6:	603b      	str	r3, [r7, #0]
 800b4f8:	2005      	movs	r0, #5
 800b4fa:	e026      	b.n	800b54a <__hexnan+0x132>
 800b4fc:	3501      	adds	r5, #1
 800b4fe:	2d08      	cmp	r5, #8
 800b500:	f10b 0b01 	add.w	fp, fp, #1
 800b504:	dd06      	ble.n	800b514 <__hexnan+0xfc>
 800b506:	4544      	cmp	r4, r8
 800b508:	d9c3      	bls.n	800b492 <__hexnan+0x7a>
 800b50a:	2300      	movs	r3, #0
 800b50c:	f844 3c04 	str.w	r3, [r4, #-4]
 800b510:	2501      	movs	r5, #1
 800b512:	3c04      	subs	r4, #4
 800b514:	6822      	ldr	r2, [r4, #0]
 800b516:	f000 000f 	and.w	r0, r0, #15
 800b51a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800b51e:	6022      	str	r2, [r4, #0]
 800b520:	e7b7      	b.n	800b492 <__hexnan+0x7a>
 800b522:	2508      	movs	r5, #8
 800b524:	e7b5      	b.n	800b492 <__hexnan+0x7a>
 800b526:	9b01      	ldr	r3, [sp, #4]
 800b528:	2b00      	cmp	r3, #0
 800b52a:	d0df      	beq.n	800b4ec <__hexnan+0xd4>
 800b52c:	f04f 32ff 	mov.w	r2, #4294967295
 800b530:	f1c3 0320 	rsb	r3, r3, #32
 800b534:	fa22 f303 	lsr.w	r3, r2, r3
 800b538:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800b53c:	401a      	ands	r2, r3
 800b53e:	f846 2c04 	str.w	r2, [r6, #-4]
 800b542:	e7d3      	b.n	800b4ec <__hexnan+0xd4>
 800b544:	3f04      	subs	r7, #4
 800b546:	e7d1      	b.n	800b4ec <__hexnan+0xd4>
 800b548:	2004      	movs	r0, #4
 800b54a:	b007      	add	sp, #28
 800b54c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b550 <_localeconv_r>:
 800b550:	4800      	ldr	r0, [pc, #0]	; (800b554 <_localeconv_r+0x4>)
 800b552:	4770      	bx	lr
 800b554:	200002d8 	.word	0x200002d8

0800b558 <malloc>:
 800b558:	4b02      	ldr	r3, [pc, #8]	; (800b564 <malloc+0xc>)
 800b55a:	4601      	mov	r1, r0
 800b55c:	6818      	ldr	r0, [r3, #0]
 800b55e:	f000 bd3d 	b.w	800bfdc <_malloc_r>
 800b562:	bf00      	nop
 800b564:	20000180 	.word	0x20000180

0800b568 <__ascii_mbtowc>:
 800b568:	b082      	sub	sp, #8
 800b56a:	b901      	cbnz	r1, 800b56e <__ascii_mbtowc+0x6>
 800b56c:	a901      	add	r1, sp, #4
 800b56e:	b142      	cbz	r2, 800b582 <__ascii_mbtowc+0x1a>
 800b570:	b14b      	cbz	r3, 800b586 <__ascii_mbtowc+0x1e>
 800b572:	7813      	ldrb	r3, [r2, #0]
 800b574:	600b      	str	r3, [r1, #0]
 800b576:	7812      	ldrb	r2, [r2, #0]
 800b578:	1e10      	subs	r0, r2, #0
 800b57a:	bf18      	it	ne
 800b57c:	2001      	movne	r0, #1
 800b57e:	b002      	add	sp, #8
 800b580:	4770      	bx	lr
 800b582:	4610      	mov	r0, r2
 800b584:	e7fb      	b.n	800b57e <__ascii_mbtowc+0x16>
 800b586:	f06f 0001 	mvn.w	r0, #1
 800b58a:	e7f8      	b.n	800b57e <__ascii_mbtowc+0x16>

0800b58c <memcpy>:
 800b58c:	440a      	add	r2, r1
 800b58e:	4291      	cmp	r1, r2
 800b590:	f100 33ff 	add.w	r3, r0, #4294967295
 800b594:	d100      	bne.n	800b598 <memcpy+0xc>
 800b596:	4770      	bx	lr
 800b598:	b510      	push	{r4, lr}
 800b59a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b59e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b5a2:	4291      	cmp	r1, r2
 800b5a4:	d1f9      	bne.n	800b59a <memcpy+0xe>
 800b5a6:	bd10      	pop	{r4, pc}

0800b5a8 <_Balloc>:
 800b5a8:	b570      	push	{r4, r5, r6, lr}
 800b5aa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b5ac:	4604      	mov	r4, r0
 800b5ae:	460d      	mov	r5, r1
 800b5b0:	b976      	cbnz	r6, 800b5d0 <_Balloc+0x28>
 800b5b2:	2010      	movs	r0, #16
 800b5b4:	f7ff ffd0 	bl	800b558 <malloc>
 800b5b8:	4602      	mov	r2, r0
 800b5ba:	6260      	str	r0, [r4, #36]	; 0x24
 800b5bc:	b920      	cbnz	r0, 800b5c8 <_Balloc+0x20>
 800b5be:	4b18      	ldr	r3, [pc, #96]	; (800b620 <_Balloc+0x78>)
 800b5c0:	4818      	ldr	r0, [pc, #96]	; (800b624 <_Balloc+0x7c>)
 800b5c2:	2166      	movs	r1, #102	; 0x66
 800b5c4:	f000 fef8 	bl	800c3b8 <__assert_func>
 800b5c8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b5cc:	6006      	str	r6, [r0, #0]
 800b5ce:	60c6      	str	r6, [r0, #12]
 800b5d0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b5d2:	68f3      	ldr	r3, [r6, #12]
 800b5d4:	b183      	cbz	r3, 800b5f8 <_Balloc+0x50>
 800b5d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b5d8:	68db      	ldr	r3, [r3, #12]
 800b5da:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b5de:	b9b8      	cbnz	r0, 800b610 <_Balloc+0x68>
 800b5e0:	2101      	movs	r1, #1
 800b5e2:	fa01 f605 	lsl.w	r6, r1, r5
 800b5e6:	1d72      	adds	r2, r6, #5
 800b5e8:	0092      	lsls	r2, r2, #2
 800b5ea:	4620      	mov	r0, r4
 800b5ec:	f000 fc97 	bl	800bf1e <_calloc_r>
 800b5f0:	b160      	cbz	r0, 800b60c <_Balloc+0x64>
 800b5f2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b5f6:	e00e      	b.n	800b616 <_Balloc+0x6e>
 800b5f8:	2221      	movs	r2, #33	; 0x21
 800b5fa:	2104      	movs	r1, #4
 800b5fc:	4620      	mov	r0, r4
 800b5fe:	f000 fc8e 	bl	800bf1e <_calloc_r>
 800b602:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b604:	60f0      	str	r0, [r6, #12]
 800b606:	68db      	ldr	r3, [r3, #12]
 800b608:	2b00      	cmp	r3, #0
 800b60a:	d1e4      	bne.n	800b5d6 <_Balloc+0x2e>
 800b60c:	2000      	movs	r0, #0
 800b60e:	bd70      	pop	{r4, r5, r6, pc}
 800b610:	6802      	ldr	r2, [r0, #0]
 800b612:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b616:	2300      	movs	r3, #0
 800b618:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b61c:	e7f7      	b.n	800b60e <_Balloc+0x66>
 800b61e:	bf00      	nop
 800b620:	0800d14e 	.word	0x0800d14e
 800b624:	0800d254 	.word	0x0800d254

0800b628 <_Bfree>:
 800b628:	b570      	push	{r4, r5, r6, lr}
 800b62a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b62c:	4605      	mov	r5, r0
 800b62e:	460c      	mov	r4, r1
 800b630:	b976      	cbnz	r6, 800b650 <_Bfree+0x28>
 800b632:	2010      	movs	r0, #16
 800b634:	f7ff ff90 	bl	800b558 <malloc>
 800b638:	4602      	mov	r2, r0
 800b63a:	6268      	str	r0, [r5, #36]	; 0x24
 800b63c:	b920      	cbnz	r0, 800b648 <_Bfree+0x20>
 800b63e:	4b09      	ldr	r3, [pc, #36]	; (800b664 <_Bfree+0x3c>)
 800b640:	4809      	ldr	r0, [pc, #36]	; (800b668 <_Bfree+0x40>)
 800b642:	218a      	movs	r1, #138	; 0x8a
 800b644:	f000 feb8 	bl	800c3b8 <__assert_func>
 800b648:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b64c:	6006      	str	r6, [r0, #0]
 800b64e:	60c6      	str	r6, [r0, #12]
 800b650:	b13c      	cbz	r4, 800b662 <_Bfree+0x3a>
 800b652:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b654:	6862      	ldr	r2, [r4, #4]
 800b656:	68db      	ldr	r3, [r3, #12]
 800b658:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b65c:	6021      	str	r1, [r4, #0]
 800b65e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b662:	bd70      	pop	{r4, r5, r6, pc}
 800b664:	0800d14e 	.word	0x0800d14e
 800b668:	0800d254 	.word	0x0800d254

0800b66c <__multadd>:
 800b66c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b670:	690e      	ldr	r6, [r1, #16]
 800b672:	4607      	mov	r7, r0
 800b674:	4698      	mov	r8, r3
 800b676:	460c      	mov	r4, r1
 800b678:	f101 0014 	add.w	r0, r1, #20
 800b67c:	2300      	movs	r3, #0
 800b67e:	6805      	ldr	r5, [r0, #0]
 800b680:	b2a9      	uxth	r1, r5
 800b682:	fb02 8101 	mla	r1, r2, r1, r8
 800b686:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800b68a:	0c2d      	lsrs	r5, r5, #16
 800b68c:	fb02 c505 	mla	r5, r2, r5, ip
 800b690:	b289      	uxth	r1, r1
 800b692:	3301      	adds	r3, #1
 800b694:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800b698:	429e      	cmp	r6, r3
 800b69a:	f840 1b04 	str.w	r1, [r0], #4
 800b69e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800b6a2:	dcec      	bgt.n	800b67e <__multadd+0x12>
 800b6a4:	f1b8 0f00 	cmp.w	r8, #0
 800b6a8:	d022      	beq.n	800b6f0 <__multadd+0x84>
 800b6aa:	68a3      	ldr	r3, [r4, #8]
 800b6ac:	42b3      	cmp	r3, r6
 800b6ae:	dc19      	bgt.n	800b6e4 <__multadd+0x78>
 800b6b0:	6861      	ldr	r1, [r4, #4]
 800b6b2:	4638      	mov	r0, r7
 800b6b4:	3101      	adds	r1, #1
 800b6b6:	f7ff ff77 	bl	800b5a8 <_Balloc>
 800b6ba:	4605      	mov	r5, r0
 800b6bc:	b928      	cbnz	r0, 800b6ca <__multadd+0x5e>
 800b6be:	4602      	mov	r2, r0
 800b6c0:	4b0d      	ldr	r3, [pc, #52]	; (800b6f8 <__multadd+0x8c>)
 800b6c2:	480e      	ldr	r0, [pc, #56]	; (800b6fc <__multadd+0x90>)
 800b6c4:	21b5      	movs	r1, #181	; 0xb5
 800b6c6:	f000 fe77 	bl	800c3b8 <__assert_func>
 800b6ca:	6922      	ldr	r2, [r4, #16]
 800b6cc:	3202      	adds	r2, #2
 800b6ce:	f104 010c 	add.w	r1, r4, #12
 800b6d2:	0092      	lsls	r2, r2, #2
 800b6d4:	300c      	adds	r0, #12
 800b6d6:	f7ff ff59 	bl	800b58c <memcpy>
 800b6da:	4621      	mov	r1, r4
 800b6dc:	4638      	mov	r0, r7
 800b6de:	f7ff ffa3 	bl	800b628 <_Bfree>
 800b6e2:	462c      	mov	r4, r5
 800b6e4:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800b6e8:	3601      	adds	r6, #1
 800b6ea:	f8c3 8014 	str.w	r8, [r3, #20]
 800b6ee:	6126      	str	r6, [r4, #16]
 800b6f0:	4620      	mov	r0, r4
 800b6f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b6f6:	bf00      	nop
 800b6f8:	0800d1c4 	.word	0x0800d1c4
 800b6fc:	0800d254 	.word	0x0800d254

0800b700 <__s2b>:
 800b700:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b704:	460c      	mov	r4, r1
 800b706:	4615      	mov	r5, r2
 800b708:	461f      	mov	r7, r3
 800b70a:	2209      	movs	r2, #9
 800b70c:	3308      	adds	r3, #8
 800b70e:	4606      	mov	r6, r0
 800b710:	fb93 f3f2 	sdiv	r3, r3, r2
 800b714:	2100      	movs	r1, #0
 800b716:	2201      	movs	r2, #1
 800b718:	429a      	cmp	r2, r3
 800b71a:	db09      	blt.n	800b730 <__s2b+0x30>
 800b71c:	4630      	mov	r0, r6
 800b71e:	f7ff ff43 	bl	800b5a8 <_Balloc>
 800b722:	b940      	cbnz	r0, 800b736 <__s2b+0x36>
 800b724:	4602      	mov	r2, r0
 800b726:	4b19      	ldr	r3, [pc, #100]	; (800b78c <__s2b+0x8c>)
 800b728:	4819      	ldr	r0, [pc, #100]	; (800b790 <__s2b+0x90>)
 800b72a:	21ce      	movs	r1, #206	; 0xce
 800b72c:	f000 fe44 	bl	800c3b8 <__assert_func>
 800b730:	0052      	lsls	r2, r2, #1
 800b732:	3101      	adds	r1, #1
 800b734:	e7f0      	b.n	800b718 <__s2b+0x18>
 800b736:	9b08      	ldr	r3, [sp, #32]
 800b738:	6143      	str	r3, [r0, #20]
 800b73a:	2d09      	cmp	r5, #9
 800b73c:	f04f 0301 	mov.w	r3, #1
 800b740:	6103      	str	r3, [r0, #16]
 800b742:	dd16      	ble.n	800b772 <__s2b+0x72>
 800b744:	f104 0909 	add.w	r9, r4, #9
 800b748:	46c8      	mov	r8, r9
 800b74a:	442c      	add	r4, r5
 800b74c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800b750:	4601      	mov	r1, r0
 800b752:	3b30      	subs	r3, #48	; 0x30
 800b754:	220a      	movs	r2, #10
 800b756:	4630      	mov	r0, r6
 800b758:	f7ff ff88 	bl	800b66c <__multadd>
 800b75c:	45a0      	cmp	r8, r4
 800b75e:	d1f5      	bne.n	800b74c <__s2b+0x4c>
 800b760:	f1a5 0408 	sub.w	r4, r5, #8
 800b764:	444c      	add	r4, r9
 800b766:	1b2d      	subs	r5, r5, r4
 800b768:	1963      	adds	r3, r4, r5
 800b76a:	42bb      	cmp	r3, r7
 800b76c:	db04      	blt.n	800b778 <__s2b+0x78>
 800b76e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b772:	340a      	adds	r4, #10
 800b774:	2509      	movs	r5, #9
 800b776:	e7f6      	b.n	800b766 <__s2b+0x66>
 800b778:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b77c:	4601      	mov	r1, r0
 800b77e:	3b30      	subs	r3, #48	; 0x30
 800b780:	220a      	movs	r2, #10
 800b782:	4630      	mov	r0, r6
 800b784:	f7ff ff72 	bl	800b66c <__multadd>
 800b788:	e7ee      	b.n	800b768 <__s2b+0x68>
 800b78a:	bf00      	nop
 800b78c:	0800d1c4 	.word	0x0800d1c4
 800b790:	0800d254 	.word	0x0800d254

0800b794 <__hi0bits>:
 800b794:	0c03      	lsrs	r3, r0, #16
 800b796:	041b      	lsls	r3, r3, #16
 800b798:	b9d3      	cbnz	r3, 800b7d0 <__hi0bits+0x3c>
 800b79a:	0400      	lsls	r0, r0, #16
 800b79c:	2310      	movs	r3, #16
 800b79e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b7a2:	bf04      	itt	eq
 800b7a4:	0200      	lsleq	r0, r0, #8
 800b7a6:	3308      	addeq	r3, #8
 800b7a8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b7ac:	bf04      	itt	eq
 800b7ae:	0100      	lsleq	r0, r0, #4
 800b7b0:	3304      	addeq	r3, #4
 800b7b2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b7b6:	bf04      	itt	eq
 800b7b8:	0080      	lsleq	r0, r0, #2
 800b7ba:	3302      	addeq	r3, #2
 800b7bc:	2800      	cmp	r0, #0
 800b7be:	db05      	blt.n	800b7cc <__hi0bits+0x38>
 800b7c0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b7c4:	f103 0301 	add.w	r3, r3, #1
 800b7c8:	bf08      	it	eq
 800b7ca:	2320      	moveq	r3, #32
 800b7cc:	4618      	mov	r0, r3
 800b7ce:	4770      	bx	lr
 800b7d0:	2300      	movs	r3, #0
 800b7d2:	e7e4      	b.n	800b79e <__hi0bits+0xa>

0800b7d4 <__lo0bits>:
 800b7d4:	6803      	ldr	r3, [r0, #0]
 800b7d6:	f013 0207 	ands.w	r2, r3, #7
 800b7da:	4601      	mov	r1, r0
 800b7dc:	d00b      	beq.n	800b7f6 <__lo0bits+0x22>
 800b7de:	07da      	lsls	r2, r3, #31
 800b7e0:	d424      	bmi.n	800b82c <__lo0bits+0x58>
 800b7e2:	0798      	lsls	r0, r3, #30
 800b7e4:	bf49      	itett	mi
 800b7e6:	085b      	lsrmi	r3, r3, #1
 800b7e8:	089b      	lsrpl	r3, r3, #2
 800b7ea:	2001      	movmi	r0, #1
 800b7ec:	600b      	strmi	r3, [r1, #0]
 800b7ee:	bf5c      	itt	pl
 800b7f0:	600b      	strpl	r3, [r1, #0]
 800b7f2:	2002      	movpl	r0, #2
 800b7f4:	4770      	bx	lr
 800b7f6:	b298      	uxth	r0, r3
 800b7f8:	b9b0      	cbnz	r0, 800b828 <__lo0bits+0x54>
 800b7fa:	0c1b      	lsrs	r3, r3, #16
 800b7fc:	2010      	movs	r0, #16
 800b7fe:	f013 0fff 	tst.w	r3, #255	; 0xff
 800b802:	bf04      	itt	eq
 800b804:	0a1b      	lsreq	r3, r3, #8
 800b806:	3008      	addeq	r0, #8
 800b808:	071a      	lsls	r2, r3, #28
 800b80a:	bf04      	itt	eq
 800b80c:	091b      	lsreq	r3, r3, #4
 800b80e:	3004      	addeq	r0, #4
 800b810:	079a      	lsls	r2, r3, #30
 800b812:	bf04      	itt	eq
 800b814:	089b      	lsreq	r3, r3, #2
 800b816:	3002      	addeq	r0, #2
 800b818:	07da      	lsls	r2, r3, #31
 800b81a:	d403      	bmi.n	800b824 <__lo0bits+0x50>
 800b81c:	085b      	lsrs	r3, r3, #1
 800b81e:	f100 0001 	add.w	r0, r0, #1
 800b822:	d005      	beq.n	800b830 <__lo0bits+0x5c>
 800b824:	600b      	str	r3, [r1, #0]
 800b826:	4770      	bx	lr
 800b828:	4610      	mov	r0, r2
 800b82a:	e7e8      	b.n	800b7fe <__lo0bits+0x2a>
 800b82c:	2000      	movs	r0, #0
 800b82e:	4770      	bx	lr
 800b830:	2020      	movs	r0, #32
 800b832:	4770      	bx	lr

0800b834 <__i2b>:
 800b834:	b510      	push	{r4, lr}
 800b836:	460c      	mov	r4, r1
 800b838:	2101      	movs	r1, #1
 800b83a:	f7ff feb5 	bl	800b5a8 <_Balloc>
 800b83e:	4602      	mov	r2, r0
 800b840:	b928      	cbnz	r0, 800b84e <__i2b+0x1a>
 800b842:	4b05      	ldr	r3, [pc, #20]	; (800b858 <__i2b+0x24>)
 800b844:	4805      	ldr	r0, [pc, #20]	; (800b85c <__i2b+0x28>)
 800b846:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800b84a:	f000 fdb5 	bl	800c3b8 <__assert_func>
 800b84e:	2301      	movs	r3, #1
 800b850:	6144      	str	r4, [r0, #20]
 800b852:	6103      	str	r3, [r0, #16]
 800b854:	bd10      	pop	{r4, pc}
 800b856:	bf00      	nop
 800b858:	0800d1c4 	.word	0x0800d1c4
 800b85c:	0800d254 	.word	0x0800d254

0800b860 <__multiply>:
 800b860:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b864:	4614      	mov	r4, r2
 800b866:	690a      	ldr	r2, [r1, #16]
 800b868:	6923      	ldr	r3, [r4, #16]
 800b86a:	429a      	cmp	r2, r3
 800b86c:	bfb8      	it	lt
 800b86e:	460b      	movlt	r3, r1
 800b870:	460d      	mov	r5, r1
 800b872:	bfbc      	itt	lt
 800b874:	4625      	movlt	r5, r4
 800b876:	461c      	movlt	r4, r3
 800b878:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800b87c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800b880:	68ab      	ldr	r3, [r5, #8]
 800b882:	6869      	ldr	r1, [r5, #4]
 800b884:	eb0a 0709 	add.w	r7, sl, r9
 800b888:	42bb      	cmp	r3, r7
 800b88a:	b085      	sub	sp, #20
 800b88c:	bfb8      	it	lt
 800b88e:	3101      	addlt	r1, #1
 800b890:	f7ff fe8a 	bl	800b5a8 <_Balloc>
 800b894:	b930      	cbnz	r0, 800b8a4 <__multiply+0x44>
 800b896:	4602      	mov	r2, r0
 800b898:	4b42      	ldr	r3, [pc, #264]	; (800b9a4 <__multiply+0x144>)
 800b89a:	4843      	ldr	r0, [pc, #268]	; (800b9a8 <__multiply+0x148>)
 800b89c:	f240 115d 	movw	r1, #349	; 0x15d
 800b8a0:	f000 fd8a 	bl	800c3b8 <__assert_func>
 800b8a4:	f100 0614 	add.w	r6, r0, #20
 800b8a8:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800b8ac:	4633      	mov	r3, r6
 800b8ae:	2200      	movs	r2, #0
 800b8b0:	4543      	cmp	r3, r8
 800b8b2:	d31e      	bcc.n	800b8f2 <__multiply+0x92>
 800b8b4:	f105 0c14 	add.w	ip, r5, #20
 800b8b8:	f104 0314 	add.w	r3, r4, #20
 800b8bc:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800b8c0:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800b8c4:	9202      	str	r2, [sp, #8]
 800b8c6:	ebac 0205 	sub.w	r2, ip, r5
 800b8ca:	3a15      	subs	r2, #21
 800b8cc:	f022 0203 	bic.w	r2, r2, #3
 800b8d0:	3204      	adds	r2, #4
 800b8d2:	f105 0115 	add.w	r1, r5, #21
 800b8d6:	458c      	cmp	ip, r1
 800b8d8:	bf38      	it	cc
 800b8da:	2204      	movcc	r2, #4
 800b8dc:	9201      	str	r2, [sp, #4]
 800b8de:	9a02      	ldr	r2, [sp, #8]
 800b8e0:	9303      	str	r3, [sp, #12]
 800b8e2:	429a      	cmp	r2, r3
 800b8e4:	d808      	bhi.n	800b8f8 <__multiply+0x98>
 800b8e6:	2f00      	cmp	r7, #0
 800b8e8:	dc55      	bgt.n	800b996 <__multiply+0x136>
 800b8ea:	6107      	str	r7, [r0, #16]
 800b8ec:	b005      	add	sp, #20
 800b8ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b8f2:	f843 2b04 	str.w	r2, [r3], #4
 800b8f6:	e7db      	b.n	800b8b0 <__multiply+0x50>
 800b8f8:	f8b3 a000 	ldrh.w	sl, [r3]
 800b8fc:	f1ba 0f00 	cmp.w	sl, #0
 800b900:	d020      	beq.n	800b944 <__multiply+0xe4>
 800b902:	f105 0e14 	add.w	lr, r5, #20
 800b906:	46b1      	mov	r9, r6
 800b908:	2200      	movs	r2, #0
 800b90a:	f85e 4b04 	ldr.w	r4, [lr], #4
 800b90e:	f8d9 b000 	ldr.w	fp, [r9]
 800b912:	b2a1      	uxth	r1, r4
 800b914:	fa1f fb8b 	uxth.w	fp, fp
 800b918:	fb0a b101 	mla	r1, sl, r1, fp
 800b91c:	4411      	add	r1, r2
 800b91e:	f8d9 2000 	ldr.w	r2, [r9]
 800b922:	0c24      	lsrs	r4, r4, #16
 800b924:	0c12      	lsrs	r2, r2, #16
 800b926:	fb0a 2404 	mla	r4, sl, r4, r2
 800b92a:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800b92e:	b289      	uxth	r1, r1
 800b930:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800b934:	45f4      	cmp	ip, lr
 800b936:	f849 1b04 	str.w	r1, [r9], #4
 800b93a:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800b93e:	d8e4      	bhi.n	800b90a <__multiply+0xaa>
 800b940:	9901      	ldr	r1, [sp, #4]
 800b942:	5072      	str	r2, [r6, r1]
 800b944:	9a03      	ldr	r2, [sp, #12]
 800b946:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b94a:	3304      	adds	r3, #4
 800b94c:	f1b9 0f00 	cmp.w	r9, #0
 800b950:	d01f      	beq.n	800b992 <__multiply+0x132>
 800b952:	6834      	ldr	r4, [r6, #0]
 800b954:	f105 0114 	add.w	r1, r5, #20
 800b958:	46b6      	mov	lr, r6
 800b95a:	f04f 0a00 	mov.w	sl, #0
 800b95e:	880a      	ldrh	r2, [r1, #0]
 800b960:	f8be b002 	ldrh.w	fp, [lr, #2]
 800b964:	fb09 b202 	mla	r2, r9, r2, fp
 800b968:	4492      	add	sl, r2
 800b96a:	b2a4      	uxth	r4, r4
 800b96c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800b970:	f84e 4b04 	str.w	r4, [lr], #4
 800b974:	f851 4b04 	ldr.w	r4, [r1], #4
 800b978:	f8be 2000 	ldrh.w	r2, [lr]
 800b97c:	0c24      	lsrs	r4, r4, #16
 800b97e:	fb09 2404 	mla	r4, r9, r4, r2
 800b982:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800b986:	458c      	cmp	ip, r1
 800b988:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800b98c:	d8e7      	bhi.n	800b95e <__multiply+0xfe>
 800b98e:	9a01      	ldr	r2, [sp, #4]
 800b990:	50b4      	str	r4, [r6, r2]
 800b992:	3604      	adds	r6, #4
 800b994:	e7a3      	b.n	800b8de <__multiply+0x7e>
 800b996:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b99a:	2b00      	cmp	r3, #0
 800b99c:	d1a5      	bne.n	800b8ea <__multiply+0x8a>
 800b99e:	3f01      	subs	r7, #1
 800b9a0:	e7a1      	b.n	800b8e6 <__multiply+0x86>
 800b9a2:	bf00      	nop
 800b9a4:	0800d1c4 	.word	0x0800d1c4
 800b9a8:	0800d254 	.word	0x0800d254

0800b9ac <__pow5mult>:
 800b9ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b9b0:	4615      	mov	r5, r2
 800b9b2:	f012 0203 	ands.w	r2, r2, #3
 800b9b6:	4606      	mov	r6, r0
 800b9b8:	460f      	mov	r7, r1
 800b9ba:	d007      	beq.n	800b9cc <__pow5mult+0x20>
 800b9bc:	4c25      	ldr	r4, [pc, #148]	; (800ba54 <__pow5mult+0xa8>)
 800b9be:	3a01      	subs	r2, #1
 800b9c0:	2300      	movs	r3, #0
 800b9c2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b9c6:	f7ff fe51 	bl	800b66c <__multadd>
 800b9ca:	4607      	mov	r7, r0
 800b9cc:	10ad      	asrs	r5, r5, #2
 800b9ce:	d03d      	beq.n	800ba4c <__pow5mult+0xa0>
 800b9d0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b9d2:	b97c      	cbnz	r4, 800b9f4 <__pow5mult+0x48>
 800b9d4:	2010      	movs	r0, #16
 800b9d6:	f7ff fdbf 	bl	800b558 <malloc>
 800b9da:	4602      	mov	r2, r0
 800b9dc:	6270      	str	r0, [r6, #36]	; 0x24
 800b9de:	b928      	cbnz	r0, 800b9ec <__pow5mult+0x40>
 800b9e0:	4b1d      	ldr	r3, [pc, #116]	; (800ba58 <__pow5mult+0xac>)
 800b9e2:	481e      	ldr	r0, [pc, #120]	; (800ba5c <__pow5mult+0xb0>)
 800b9e4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800b9e8:	f000 fce6 	bl	800c3b8 <__assert_func>
 800b9ec:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b9f0:	6004      	str	r4, [r0, #0]
 800b9f2:	60c4      	str	r4, [r0, #12]
 800b9f4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b9f8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b9fc:	b94c      	cbnz	r4, 800ba12 <__pow5mult+0x66>
 800b9fe:	f240 2171 	movw	r1, #625	; 0x271
 800ba02:	4630      	mov	r0, r6
 800ba04:	f7ff ff16 	bl	800b834 <__i2b>
 800ba08:	2300      	movs	r3, #0
 800ba0a:	f8c8 0008 	str.w	r0, [r8, #8]
 800ba0e:	4604      	mov	r4, r0
 800ba10:	6003      	str	r3, [r0, #0]
 800ba12:	f04f 0900 	mov.w	r9, #0
 800ba16:	07eb      	lsls	r3, r5, #31
 800ba18:	d50a      	bpl.n	800ba30 <__pow5mult+0x84>
 800ba1a:	4639      	mov	r1, r7
 800ba1c:	4622      	mov	r2, r4
 800ba1e:	4630      	mov	r0, r6
 800ba20:	f7ff ff1e 	bl	800b860 <__multiply>
 800ba24:	4639      	mov	r1, r7
 800ba26:	4680      	mov	r8, r0
 800ba28:	4630      	mov	r0, r6
 800ba2a:	f7ff fdfd 	bl	800b628 <_Bfree>
 800ba2e:	4647      	mov	r7, r8
 800ba30:	106d      	asrs	r5, r5, #1
 800ba32:	d00b      	beq.n	800ba4c <__pow5mult+0xa0>
 800ba34:	6820      	ldr	r0, [r4, #0]
 800ba36:	b938      	cbnz	r0, 800ba48 <__pow5mult+0x9c>
 800ba38:	4622      	mov	r2, r4
 800ba3a:	4621      	mov	r1, r4
 800ba3c:	4630      	mov	r0, r6
 800ba3e:	f7ff ff0f 	bl	800b860 <__multiply>
 800ba42:	6020      	str	r0, [r4, #0]
 800ba44:	f8c0 9000 	str.w	r9, [r0]
 800ba48:	4604      	mov	r4, r0
 800ba4a:	e7e4      	b.n	800ba16 <__pow5mult+0x6a>
 800ba4c:	4638      	mov	r0, r7
 800ba4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ba52:	bf00      	nop
 800ba54:	0800d3a8 	.word	0x0800d3a8
 800ba58:	0800d14e 	.word	0x0800d14e
 800ba5c:	0800d254 	.word	0x0800d254

0800ba60 <__lshift>:
 800ba60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ba64:	460c      	mov	r4, r1
 800ba66:	6849      	ldr	r1, [r1, #4]
 800ba68:	6923      	ldr	r3, [r4, #16]
 800ba6a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ba6e:	68a3      	ldr	r3, [r4, #8]
 800ba70:	4607      	mov	r7, r0
 800ba72:	4691      	mov	r9, r2
 800ba74:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ba78:	f108 0601 	add.w	r6, r8, #1
 800ba7c:	42b3      	cmp	r3, r6
 800ba7e:	db0b      	blt.n	800ba98 <__lshift+0x38>
 800ba80:	4638      	mov	r0, r7
 800ba82:	f7ff fd91 	bl	800b5a8 <_Balloc>
 800ba86:	4605      	mov	r5, r0
 800ba88:	b948      	cbnz	r0, 800ba9e <__lshift+0x3e>
 800ba8a:	4602      	mov	r2, r0
 800ba8c:	4b28      	ldr	r3, [pc, #160]	; (800bb30 <__lshift+0xd0>)
 800ba8e:	4829      	ldr	r0, [pc, #164]	; (800bb34 <__lshift+0xd4>)
 800ba90:	f240 11d9 	movw	r1, #473	; 0x1d9
 800ba94:	f000 fc90 	bl	800c3b8 <__assert_func>
 800ba98:	3101      	adds	r1, #1
 800ba9a:	005b      	lsls	r3, r3, #1
 800ba9c:	e7ee      	b.n	800ba7c <__lshift+0x1c>
 800ba9e:	2300      	movs	r3, #0
 800baa0:	f100 0114 	add.w	r1, r0, #20
 800baa4:	f100 0210 	add.w	r2, r0, #16
 800baa8:	4618      	mov	r0, r3
 800baaa:	4553      	cmp	r3, sl
 800baac:	db33      	blt.n	800bb16 <__lshift+0xb6>
 800baae:	6920      	ldr	r0, [r4, #16]
 800bab0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800bab4:	f104 0314 	add.w	r3, r4, #20
 800bab8:	f019 091f 	ands.w	r9, r9, #31
 800babc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800bac0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800bac4:	d02b      	beq.n	800bb1e <__lshift+0xbe>
 800bac6:	f1c9 0e20 	rsb	lr, r9, #32
 800baca:	468a      	mov	sl, r1
 800bacc:	2200      	movs	r2, #0
 800bace:	6818      	ldr	r0, [r3, #0]
 800bad0:	fa00 f009 	lsl.w	r0, r0, r9
 800bad4:	4302      	orrs	r2, r0
 800bad6:	f84a 2b04 	str.w	r2, [sl], #4
 800bada:	f853 2b04 	ldr.w	r2, [r3], #4
 800bade:	459c      	cmp	ip, r3
 800bae0:	fa22 f20e 	lsr.w	r2, r2, lr
 800bae4:	d8f3      	bhi.n	800bace <__lshift+0x6e>
 800bae6:	ebac 0304 	sub.w	r3, ip, r4
 800baea:	3b15      	subs	r3, #21
 800baec:	f023 0303 	bic.w	r3, r3, #3
 800baf0:	3304      	adds	r3, #4
 800baf2:	f104 0015 	add.w	r0, r4, #21
 800baf6:	4584      	cmp	ip, r0
 800baf8:	bf38      	it	cc
 800bafa:	2304      	movcc	r3, #4
 800bafc:	50ca      	str	r2, [r1, r3]
 800bafe:	b10a      	cbz	r2, 800bb04 <__lshift+0xa4>
 800bb00:	f108 0602 	add.w	r6, r8, #2
 800bb04:	3e01      	subs	r6, #1
 800bb06:	4638      	mov	r0, r7
 800bb08:	612e      	str	r6, [r5, #16]
 800bb0a:	4621      	mov	r1, r4
 800bb0c:	f7ff fd8c 	bl	800b628 <_Bfree>
 800bb10:	4628      	mov	r0, r5
 800bb12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bb16:	f842 0f04 	str.w	r0, [r2, #4]!
 800bb1a:	3301      	adds	r3, #1
 800bb1c:	e7c5      	b.n	800baaa <__lshift+0x4a>
 800bb1e:	3904      	subs	r1, #4
 800bb20:	f853 2b04 	ldr.w	r2, [r3], #4
 800bb24:	f841 2f04 	str.w	r2, [r1, #4]!
 800bb28:	459c      	cmp	ip, r3
 800bb2a:	d8f9      	bhi.n	800bb20 <__lshift+0xc0>
 800bb2c:	e7ea      	b.n	800bb04 <__lshift+0xa4>
 800bb2e:	bf00      	nop
 800bb30:	0800d1c4 	.word	0x0800d1c4
 800bb34:	0800d254 	.word	0x0800d254

0800bb38 <__mcmp>:
 800bb38:	b530      	push	{r4, r5, lr}
 800bb3a:	6902      	ldr	r2, [r0, #16]
 800bb3c:	690c      	ldr	r4, [r1, #16]
 800bb3e:	1b12      	subs	r2, r2, r4
 800bb40:	d10e      	bne.n	800bb60 <__mcmp+0x28>
 800bb42:	f100 0314 	add.w	r3, r0, #20
 800bb46:	3114      	adds	r1, #20
 800bb48:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800bb4c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800bb50:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800bb54:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800bb58:	42a5      	cmp	r5, r4
 800bb5a:	d003      	beq.n	800bb64 <__mcmp+0x2c>
 800bb5c:	d305      	bcc.n	800bb6a <__mcmp+0x32>
 800bb5e:	2201      	movs	r2, #1
 800bb60:	4610      	mov	r0, r2
 800bb62:	bd30      	pop	{r4, r5, pc}
 800bb64:	4283      	cmp	r3, r0
 800bb66:	d3f3      	bcc.n	800bb50 <__mcmp+0x18>
 800bb68:	e7fa      	b.n	800bb60 <__mcmp+0x28>
 800bb6a:	f04f 32ff 	mov.w	r2, #4294967295
 800bb6e:	e7f7      	b.n	800bb60 <__mcmp+0x28>

0800bb70 <__mdiff>:
 800bb70:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb74:	460c      	mov	r4, r1
 800bb76:	4606      	mov	r6, r0
 800bb78:	4611      	mov	r1, r2
 800bb7a:	4620      	mov	r0, r4
 800bb7c:	4617      	mov	r7, r2
 800bb7e:	f7ff ffdb 	bl	800bb38 <__mcmp>
 800bb82:	1e05      	subs	r5, r0, #0
 800bb84:	d110      	bne.n	800bba8 <__mdiff+0x38>
 800bb86:	4629      	mov	r1, r5
 800bb88:	4630      	mov	r0, r6
 800bb8a:	f7ff fd0d 	bl	800b5a8 <_Balloc>
 800bb8e:	b930      	cbnz	r0, 800bb9e <__mdiff+0x2e>
 800bb90:	4b39      	ldr	r3, [pc, #228]	; (800bc78 <__mdiff+0x108>)
 800bb92:	4602      	mov	r2, r0
 800bb94:	f240 2132 	movw	r1, #562	; 0x232
 800bb98:	4838      	ldr	r0, [pc, #224]	; (800bc7c <__mdiff+0x10c>)
 800bb9a:	f000 fc0d 	bl	800c3b8 <__assert_func>
 800bb9e:	2301      	movs	r3, #1
 800bba0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800bba4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bba8:	bfa4      	itt	ge
 800bbaa:	463b      	movge	r3, r7
 800bbac:	4627      	movge	r7, r4
 800bbae:	4630      	mov	r0, r6
 800bbb0:	6879      	ldr	r1, [r7, #4]
 800bbb2:	bfa6      	itte	ge
 800bbb4:	461c      	movge	r4, r3
 800bbb6:	2500      	movge	r5, #0
 800bbb8:	2501      	movlt	r5, #1
 800bbba:	f7ff fcf5 	bl	800b5a8 <_Balloc>
 800bbbe:	b920      	cbnz	r0, 800bbca <__mdiff+0x5a>
 800bbc0:	4b2d      	ldr	r3, [pc, #180]	; (800bc78 <__mdiff+0x108>)
 800bbc2:	4602      	mov	r2, r0
 800bbc4:	f44f 7110 	mov.w	r1, #576	; 0x240
 800bbc8:	e7e6      	b.n	800bb98 <__mdiff+0x28>
 800bbca:	693e      	ldr	r6, [r7, #16]
 800bbcc:	60c5      	str	r5, [r0, #12]
 800bbce:	6925      	ldr	r5, [r4, #16]
 800bbd0:	f107 0114 	add.w	r1, r7, #20
 800bbd4:	f104 0914 	add.w	r9, r4, #20
 800bbd8:	f100 0e14 	add.w	lr, r0, #20
 800bbdc:	f107 0210 	add.w	r2, r7, #16
 800bbe0:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800bbe4:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800bbe8:	46f2      	mov	sl, lr
 800bbea:	2700      	movs	r7, #0
 800bbec:	f859 3b04 	ldr.w	r3, [r9], #4
 800bbf0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800bbf4:	fa1f f883 	uxth.w	r8, r3
 800bbf8:	fa17 f78b 	uxtah	r7, r7, fp
 800bbfc:	0c1b      	lsrs	r3, r3, #16
 800bbfe:	eba7 0808 	sub.w	r8, r7, r8
 800bc02:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800bc06:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800bc0a:	fa1f f888 	uxth.w	r8, r8
 800bc0e:	141f      	asrs	r7, r3, #16
 800bc10:	454d      	cmp	r5, r9
 800bc12:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800bc16:	f84a 3b04 	str.w	r3, [sl], #4
 800bc1a:	d8e7      	bhi.n	800bbec <__mdiff+0x7c>
 800bc1c:	1b2b      	subs	r3, r5, r4
 800bc1e:	3b15      	subs	r3, #21
 800bc20:	f023 0303 	bic.w	r3, r3, #3
 800bc24:	3304      	adds	r3, #4
 800bc26:	3415      	adds	r4, #21
 800bc28:	42a5      	cmp	r5, r4
 800bc2a:	bf38      	it	cc
 800bc2c:	2304      	movcc	r3, #4
 800bc2e:	4419      	add	r1, r3
 800bc30:	4473      	add	r3, lr
 800bc32:	469e      	mov	lr, r3
 800bc34:	460d      	mov	r5, r1
 800bc36:	4565      	cmp	r5, ip
 800bc38:	d30e      	bcc.n	800bc58 <__mdiff+0xe8>
 800bc3a:	f10c 0203 	add.w	r2, ip, #3
 800bc3e:	1a52      	subs	r2, r2, r1
 800bc40:	f022 0203 	bic.w	r2, r2, #3
 800bc44:	3903      	subs	r1, #3
 800bc46:	458c      	cmp	ip, r1
 800bc48:	bf38      	it	cc
 800bc4a:	2200      	movcc	r2, #0
 800bc4c:	441a      	add	r2, r3
 800bc4e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800bc52:	b17b      	cbz	r3, 800bc74 <__mdiff+0x104>
 800bc54:	6106      	str	r6, [r0, #16]
 800bc56:	e7a5      	b.n	800bba4 <__mdiff+0x34>
 800bc58:	f855 8b04 	ldr.w	r8, [r5], #4
 800bc5c:	fa17 f488 	uxtah	r4, r7, r8
 800bc60:	1422      	asrs	r2, r4, #16
 800bc62:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800bc66:	b2a4      	uxth	r4, r4
 800bc68:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800bc6c:	f84e 4b04 	str.w	r4, [lr], #4
 800bc70:	1417      	asrs	r7, r2, #16
 800bc72:	e7e0      	b.n	800bc36 <__mdiff+0xc6>
 800bc74:	3e01      	subs	r6, #1
 800bc76:	e7ea      	b.n	800bc4e <__mdiff+0xde>
 800bc78:	0800d1c4 	.word	0x0800d1c4
 800bc7c:	0800d254 	.word	0x0800d254

0800bc80 <__ulp>:
 800bc80:	b082      	sub	sp, #8
 800bc82:	ed8d 0b00 	vstr	d0, [sp]
 800bc86:	9b01      	ldr	r3, [sp, #4]
 800bc88:	4912      	ldr	r1, [pc, #72]	; (800bcd4 <__ulp+0x54>)
 800bc8a:	4019      	ands	r1, r3
 800bc8c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800bc90:	2900      	cmp	r1, #0
 800bc92:	dd05      	ble.n	800bca0 <__ulp+0x20>
 800bc94:	2200      	movs	r2, #0
 800bc96:	460b      	mov	r3, r1
 800bc98:	ec43 2b10 	vmov	d0, r2, r3
 800bc9c:	b002      	add	sp, #8
 800bc9e:	4770      	bx	lr
 800bca0:	4249      	negs	r1, r1
 800bca2:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800bca6:	ea4f 5021 	mov.w	r0, r1, asr #20
 800bcaa:	f04f 0200 	mov.w	r2, #0
 800bcae:	f04f 0300 	mov.w	r3, #0
 800bcb2:	da04      	bge.n	800bcbe <__ulp+0x3e>
 800bcb4:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800bcb8:	fa41 f300 	asr.w	r3, r1, r0
 800bcbc:	e7ec      	b.n	800bc98 <__ulp+0x18>
 800bcbe:	f1a0 0114 	sub.w	r1, r0, #20
 800bcc2:	291e      	cmp	r1, #30
 800bcc4:	bfda      	itte	le
 800bcc6:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800bcca:	fa20 f101 	lsrle.w	r1, r0, r1
 800bcce:	2101      	movgt	r1, #1
 800bcd0:	460a      	mov	r2, r1
 800bcd2:	e7e1      	b.n	800bc98 <__ulp+0x18>
 800bcd4:	7ff00000 	.word	0x7ff00000

0800bcd8 <__b2d>:
 800bcd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bcda:	6905      	ldr	r5, [r0, #16]
 800bcdc:	f100 0714 	add.w	r7, r0, #20
 800bce0:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800bce4:	1f2e      	subs	r6, r5, #4
 800bce6:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800bcea:	4620      	mov	r0, r4
 800bcec:	f7ff fd52 	bl	800b794 <__hi0bits>
 800bcf0:	f1c0 0320 	rsb	r3, r0, #32
 800bcf4:	280a      	cmp	r0, #10
 800bcf6:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800bd74 <__b2d+0x9c>
 800bcfa:	600b      	str	r3, [r1, #0]
 800bcfc:	dc14      	bgt.n	800bd28 <__b2d+0x50>
 800bcfe:	f1c0 0e0b 	rsb	lr, r0, #11
 800bd02:	fa24 f10e 	lsr.w	r1, r4, lr
 800bd06:	42b7      	cmp	r7, r6
 800bd08:	ea41 030c 	orr.w	r3, r1, ip
 800bd0c:	bf34      	ite	cc
 800bd0e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800bd12:	2100      	movcs	r1, #0
 800bd14:	3015      	adds	r0, #21
 800bd16:	fa04 f000 	lsl.w	r0, r4, r0
 800bd1a:	fa21 f10e 	lsr.w	r1, r1, lr
 800bd1e:	ea40 0201 	orr.w	r2, r0, r1
 800bd22:	ec43 2b10 	vmov	d0, r2, r3
 800bd26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bd28:	42b7      	cmp	r7, r6
 800bd2a:	bf3a      	itte	cc
 800bd2c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800bd30:	f1a5 0608 	subcc.w	r6, r5, #8
 800bd34:	2100      	movcs	r1, #0
 800bd36:	380b      	subs	r0, #11
 800bd38:	d017      	beq.n	800bd6a <__b2d+0x92>
 800bd3a:	f1c0 0c20 	rsb	ip, r0, #32
 800bd3e:	fa04 f500 	lsl.w	r5, r4, r0
 800bd42:	42be      	cmp	r6, r7
 800bd44:	fa21 f40c 	lsr.w	r4, r1, ip
 800bd48:	ea45 0504 	orr.w	r5, r5, r4
 800bd4c:	bf8c      	ite	hi
 800bd4e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800bd52:	2400      	movls	r4, #0
 800bd54:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800bd58:	fa01 f000 	lsl.w	r0, r1, r0
 800bd5c:	fa24 f40c 	lsr.w	r4, r4, ip
 800bd60:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800bd64:	ea40 0204 	orr.w	r2, r0, r4
 800bd68:	e7db      	b.n	800bd22 <__b2d+0x4a>
 800bd6a:	ea44 030c 	orr.w	r3, r4, ip
 800bd6e:	460a      	mov	r2, r1
 800bd70:	e7d7      	b.n	800bd22 <__b2d+0x4a>
 800bd72:	bf00      	nop
 800bd74:	3ff00000 	.word	0x3ff00000

0800bd78 <__d2b>:
 800bd78:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800bd7c:	4689      	mov	r9, r1
 800bd7e:	2101      	movs	r1, #1
 800bd80:	ec57 6b10 	vmov	r6, r7, d0
 800bd84:	4690      	mov	r8, r2
 800bd86:	f7ff fc0f 	bl	800b5a8 <_Balloc>
 800bd8a:	4604      	mov	r4, r0
 800bd8c:	b930      	cbnz	r0, 800bd9c <__d2b+0x24>
 800bd8e:	4602      	mov	r2, r0
 800bd90:	4b25      	ldr	r3, [pc, #148]	; (800be28 <__d2b+0xb0>)
 800bd92:	4826      	ldr	r0, [pc, #152]	; (800be2c <__d2b+0xb4>)
 800bd94:	f240 310a 	movw	r1, #778	; 0x30a
 800bd98:	f000 fb0e 	bl	800c3b8 <__assert_func>
 800bd9c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800bda0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800bda4:	bb35      	cbnz	r5, 800bdf4 <__d2b+0x7c>
 800bda6:	2e00      	cmp	r6, #0
 800bda8:	9301      	str	r3, [sp, #4]
 800bdaa:	d028      	beq.n	800bdfe <__d2b+0x86>
 800bdac:	4668      	mov	r0, sp
 800bdae:	9600      	str	r6, [sp, #0]
 800bdb0:	f7ff fd10 	bl	800b7d4 <__lo0bits>
 800bdb4:	9900      	ldr	r1, [sp, #0]
 800bdb6:	b300      	cbz	r0, 800bdfa <__d2b+0x82>
 800bdb8:	9a01      	ldr	r2, [sp, #4]
 800bdba:	f1c0 0320 	rsb	r3, r0, #32
 800bdbe:	fa02 f303 	lsl.w	r3, r2, r3
 800bdc2:	430b      	orrs	r3, r1
 800bdc4:	40c2      	lsrs	r2, r0
 800bdc6:	6163      	str	r3, [r4, #20]
 800bdc8:	9201      	str	r2, [sp, #4]
 800bdca:	9b01      	ldr	r3, [sp, #4]
 800bdcc:	61a3      	str	r3, [r4, #24]
 800bdce:	2b00      	cmp	r3, #0
 800bdd0:	bf14      	ite	ne
 800bdd2:	2202      	movne	r2, #2
 800bdd4:	2201      	moveq	r2, #1
 800bdd6:	6122      	str	r2, [r4, #16]
 800bdd8:	b1d5      	cbz	r5, 800be10 <__d2b+0x98>
 800bdda:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800bdde:	4405      	add	r5, r0
 800bde0:	f8c9 5000 	str.w	r5, [r9]
 800bde4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800bde8:	f8c8 0000 	str.w	r0, [r8]
 800bdec:	4620      	mov	r0, r4
 800bdee:	b003      	add	sp, #12
 800bdf0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bdf4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bdf8:	e7d5      	b.n	800bda6 <__d2b+0x2e>
 800bdfa:	6161      	str	r1, [r4, #20]
 800bdfc:	e7e5      	b.n	800bdca <__d2b+0x52>
 800bdfe:	a801      	add	r0, sp, #4
 800be00:	f7ff fce8 	bl	800b7d4 <__lo0bits>
 800be04:	9b01      	ldr	r3, [sp, #4]
 800be06:	6163      	str	r3, [r4, #20]
 800be08:	2201      	movs	r2, #1
 800be0a:	6122      	str	r2, [r4, #16]
 800be0c:	3020      	adds	r0, #32
 800be0e:	e7e3      	b.n	800bdd8 <__d2b+0x60>
 800be10:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800be14:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800be18:	f8c9 0000 	str.w	r0, [r9]
 800be1c:	6918      	ldr	r0, [r3, #16]
 800be1e:	f7ff fcb9 	bl	800b794 <__hi0bits>
 800be22:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800be26:	e7df      	b.n	800bde8 <__d2b+0x70>
 800be28:	0800d1c4 	.word	0x0800d1c4
 800be2c:	0800d254 	.word	0x0800d254

0800be30 <__ratio>:
 800be30:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be34:	4688      	mov	r8, r1
 800be36:	4669      	mov	r1, sp
 800be38:	4681      	mov	r9, r0
 800be3a:	f7ff ff4d 	bl	800bcd8 <__b2d>
 800be3e:	a901      	add	r1, sp, #4
 800be40:	4640      	mov	r0, r8
 800be42:	ec55 4b10 	vmov	r4, r5, d0
 800be46:	f7ff ff47 	bl	800bcd8 <__b2d>
 800be4a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800be4e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800be52:	eba3 0c02 	sub.w	ip, r3, r2
 800be56:	e9dd 3200 	ldrd	r3, r2, [sp]
 800be5a:	1a9b      	subs	r3, r3, r2
 800be5c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800be60:	ec51 0b10 	vmov	r0, r1, d0
 800be64:	2b00      	cmp	r3, #0
 800be66:	bfd6      	itet	le
 800be68:	460a      	movle	r2, r1
 800be6a:	462a      	movgt	r2, r5
 800be6c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800be70:	468b      	mov	fp, r1
 800be72:	462f      	mov	r7, r5
 800be74:	bfd4      	ite	le
 800be76:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800be7a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800be7e:	4620      	mov	r0, r4
 800be80:	ee10 2a10 	vmov	r2, s0
 800be84:	465b      	mov	r3, fp
 800be86:	4639      	mov	r1, r7
 800be88:	f7f4 fce8 	bl	800085c <__aeabi_ddiv>
 800be8c:	ec41 0b10 	vmov	d0, r0, r1
 800be90:	b003      	add	sp, #12
 800be92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800be96 <__copybits>:
 800be96:	3901      	subs	r1, #1
 800be98:	b570      	push	{r4, r5, r6, lr}
 800be9a:	1149      	asrs	r1, r1, #5
 800be9c:	6914      	ldr	r4, [r2, #16]
 800be9e:	3101      	adds	r1, #1
 800bea0:	f102 0314 	add.w	r3, r2, #20
 800bea4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800bea8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800beac:	1f05      	subs	r5, r0, #4
 800beae:	42a3      	cmp	r3, r4
 800beb0:	d30c      	bcc.n	800becc <__copybits+0x36>
 800beb2:	1aa3      	subs	r3, r4, r2
 800beb4:	3b11      	subs	r3, #17
 800beb6:	f023 0303 	bic.w	r3, r3, #3
 800beba:	3211      	adds	r2, #17
 800bebc:	42a2      	cmp	r2, r4
 800bebe:	bf88      	it	hi
 800bec0:	2300      	movhi	r3, #0
 800bec2:	4418      	add	r0, r3
 800bec4:	2300      	movs	r3, #0
 800bec6:	4288      	cmp	r0, r1
 800bec8:	d305      	bcc.n	800bed6 <__copybits+0x40>
 800beca:	bd70      	pop	{r4, r5, r6, pc}
 800becc:	f853 6b04 	ldr.w	r6, [r3], #4
 800bed0:	f845 6f04 	str.w	r6, [r5, #4]!
 800bed4:	e7eb      	b.n	800beae <__copybits+0x18>
 800bed6:	f840 3b04 	str.w	r3, [r0], #4
 800beda:	e7f4      	b.n	800bec6 <__copybits+0x30>

0800bedc <__any_on>:
 800bedc:	f100 0214 	add.w	r2, r0, #20
 800bee0:	6900      	ldr	r0, [r0, #16]
 800bee2:	114b      	asrs	r3, r1, #5
 800bee4:	4298      	cmp	r0, r3
 800bee6:	b510      	push	{r4, lr}
 800bee8:	db11      	blt.n	800bf0e <__any_on+0x32>
 800beea:	dd0a      	ble.n	800bf02 <__any_on+0x26>
 800beec:	f011 011f 	ands.w	r1, r1, #31
 800bef0:	d007      	beq.n	800bf02 <__any_on+0x26>
 800bef2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800bef6:	fa24 f001 	lsr.w	r0, r4, r1
 800befa:	fa00 f101 	lsl.w	r1, r0, r1
 800befe:	428c      	cmp	r4, r1
 800bf00:	d10b      	bne.n	800bf1a <__any_on+0x3e>
 800bf02:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800bf06:	4293      	cmp	r3, r2
 800bf08:	d803      	bhi.n	800bf12 <__any_on+0x36>
 800bf0a:	2000      	movs	r0, #0
 800bf0c:	bd10      	pop	{r4, pc}
 800bf0e:	4603      	mov	r3, r0
 800bf10:	e7f7      	b.n	800bf02 <__any_on+0x26>
 800bf12:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800bf16:	2900      	cmp	r1, #0
 800bf18:	d0f5      	beq.n	800bf06 <__any_on+0x2a>
 800bf1a:	2001      	movs	r0, #1
 800bf1c:	e7f6      	b.n	800bf0c <__any_on+0x30>

0800bf1e <_calloc_r>:
 800bf1e:	b513      	push	{r0, r1, r4, lr}
 800bf20:	434a      	muls	r2, r1
 800bf22:	4611      	mov	r1, r2
 800bf24:	9201      	str	r2, [sp, #4]
 800bf26:	f000 f859 	bl	800bfdc <_malloc_r>
 800bf2a:	4604      	mov	r4, r0
 800bf2c:	b118      	cbz	r0, 800bf36 <_calloc_r+0x18>
 800bf2e:	9a01      	ldr	r2, [sp, #4]
 800bf30:	2100      	movs	r1, #0
 800bf32:	f7fc fbc7 	bl	80086c4 <memset>
 800bf36:	4620      	mov	r0, r4
 800bf38:	b002      	add	sp, #8
 800bf3a:	bd10      	pop	{r4, pc}

0800bf3c <_free_r>:
 800bf3c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bf3e:	2900      	cmp	r1, #0
 800bf40:	d048      	beq.n	800bfd4 <_free_r+0x98>
 800bf42:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bf46:	9001      	str	r0, [sp, #4]
 800bf48:	2b00      	cmp	r3, #0
 800bf4a:	f1a1 0404 	sub.w	r4, r1, #4
 800bf4e:	bfb8      	it	lt
 800bf50:	18e4      	addlt	r4, r4, r3
 800bf52:	f000 fa7b 	bl	800c44c <__malloc_lock>
 800bf56:	4a20      	ldr	r2, [pc, #128]	; (800bfd8 <_free_r+0x9c>)
 800bf58:	9801      	ldr	r0, [sp, #4]
 800bf5a:	6813      	ldr	r3, [r2, #0]
 800bf5c:	4615      	mov	r5, r2
 800bf5e:	b933      	cbnz	r3, 800bf6e <_free_r+0x32>
 800bf60:	6063      	str	r3, [r4, #4]
 800bf62:	6014      	str	r4, [r2, #0]
 800bf64:	b003      	add	sp, #12
 800bf66:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bf6a:	f000 ba75 	b.w	800c458 <__malloc_unlock>
 800bf6e:	42a3      	cmp	r3, r4
 800bf70:	d90b      	bls.n	800bf8a <_free_r+0x4e>
 800bf72:	6821      	ldr	r1, [r4, #0]
 800bf74:	1862      	adds	r2, r4, r1
 800bf76:	4293      	cmp	r3, r2
 800bf78:	bf04      	itt	eq
 800bf7a:	681a      	ldreq	r2, [r3, #0]
 800bf7c:	685b      	ldreq	r3, [r3, #4]
 800bf7e:	6063      	str	r3, [r4, #4]
 800bf80:	bf04      	itt	eq
 800bf82:	1852      	addeq	r2, r2, r1
 800bf84:	6022      	streq	r2, [r4, #0]
 800bf86:	602c      	str	r4, [r5, #0]
 800bf88:	e7ec      	b.n	800bf64 <_free_r+0x28>
 800bf8a:	461a      	mov	r2, r3
 800bf8c:	685b      	ldr	r3, [r3, #4]
 800bf8e:	b10b      	cbz	r3, 800bf94 <_free_r+0x58>
 800bf90:	42a3      	cmp	r3, r4
 800bf92:	d9fa      	bls.n	800bf8a <_free_r+0x4e>
 800bf94:	6811      	ldr	r1, [r2, #0]
 800bf96:	1855      	adds	r5, r2, r1
 800bf98:	42a5      	cmp	r5, r4
 800bf9a:	d10b      	bne.n	800bfb4 <_free_r+0x78>
 800bf9c:	6824      	ldr	r4, [r4, #0]
 800bf9e:	4421      	add	r1, r4
 800bfa0:	1854      	adds	r4, r2, r1
 800bfa2:	42a3      	cmp	r3, r4
 800bfa4:	6011      	str	r1, [r2, #0]
 800bfa6:	d1dd      	bne.n	800bf64 <_free_r+0x28>
 800bfa8:	681c      	ldr	r4, [r3, #0]
 800bfaa:	685b      	ldr	r3, [r3, #4]
 800bfac:	6053      	str	r3, [r2, #4]
 800bfae:	4421      	add	r1, r4
 800bfb0:	6011      	str	r1, [r2, #0]
 800bfb2:	e7d7      	b.n	800bf64 <_free_r+0x28>
 800bfb4:	d902      	bls.n	800bfbc <_free_r+0x80>
 800bfb6:	230c      	movs	r3, #12
 800bfb8:	6003      	str	r3, [r0, #0]
 800bfba:	e7d3      	b.n	800bf64 <_free_r+0x28>
 800bfbc:	6825      	ldr	r5, [r4, #0]
 800bfbe:	1961      	adds	r1, r4, r5
 800bfc0:	428b      	cmp	r3, r1
 800bfc2:	bf04      	itt	eq
 800bfc4:	6819      	ldreq	r1, [r3, #0]
 800bfc6:	685b      	ldreq	r3, [r3, #4]
 800bfc8:	6063      	str	r3, [r4, #4]
 800bfca:	bf04      	itt	eq
 800bfcc:	1949      	addeq	r1, r1, r5
 800bfce:	6021      	streq	r1, [r4, #0]
 800bfd0:	6054      	str	r4, [r2, #4]
 800bfd2:	e7c7      	b.n	800bf64 <_free_r+0x28>
 800bfd4:	b003      	add	sp, #12
 800bfd6:	bd30      	pop	{r4, r5, pc}
 800bfd8:	20000598 	.word	0x20000598

0800bfdc <_malloc_r>:
 800bfdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bfde:	1ccd      	adds	r5, r1, #3
 800bfe0:	f025 0503 	bic.w	r5, r5, #3
 800bfe4:	3508      	adds	r5, #8
 800bfe6:	2d0c      	cmp	r5, #12
 800bfe8:	bf38      	it	cc
 800bfea:	250c      	movcc	r5, #12
 800bfec:	2d00      	cmp	r5, #0
 800bfee:	4606      	mov	r6, r0
 800bff0:	db01      	blt.n	800bff6 <_malloc_r+0x1a>
 800bff2:	42a9      	cmp	r1, r5
 800bff4:	d903      	bls.n	800bffe <_malloc_r+0x22>
 800bff6:	230c      	movs	r3, #12
 800bff8:	6033      	str	r3, [r6, #0]
 800bffa:	2000      	movs	r0, #0
 800bffc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bffe:	f000 fa25 	bl	800c44c <__malloc_lock>
 800c002:	4921      	ldr	r1, [pc, #132]	; (800c088 <_malloc_r+0xac>)
 800c004:	680a      	ldr	r2, [r1, #0]
 800c006:	4614      	mov	r4, r2
 800c008:	b99c      	cbnz	r4, 800c032 <_malloc_r+0x56>
 800c00a:	4f20      	ldr	r7, [pc, #128]	; (800c08c <_malloc_r+0xb0>)
 800c00c:	683b      	ldr	r3, [r7, #0]
 800c00e:	b923      	cbnz	r3, 800c01a <_malloc_r+0x3e>
 800c010:	4621      	mov	r1, r4
 800c012:	4630      	mov	r0, r6
 800c014:	f000 f9a0 	bl	800c358 <_sbrk_r>
 800c018:	6038      	str	r0, [r7, #0]
 800c01a:	4629      	mov	r1, r5
 800c01c:	4630      	mov	r0, r6
 800c01e:	f000 f99b 	bl	800c358 <_sbrk_r>
 800c022:	1c43      	adds	r3, r0, #1
 800c024:	d123      	bne.n	800c06e <_malloc_r+0x92>
 800c026:	230c      	movs	r3, #12
 800c028:	6033      	str	r3, [r6, #0]
 800c02a:	4630      	mov	r0, r6
 800c02c:	f000 fa14 	bl	800c458 <__malloc_unlock>
 800c030:	e7e3      	b.n	800bffa <_malloc_r+0x1e>
 800c032:	6823      	ldr	r3, [r4, #0]
 800c034:	1b5b      	subs	r3, r3, r5
 800c036:	d417      	bmi.n	800c068 <_malloc_r+0x8c>
 800c038:	2b0b      	cmp	r3, #11
 800c03a:	d903      	bls.n	800c044 <_malloc_r+0x68>
 800c03c:	6023      	str	r3, [r4, #0]
 800c03e:	441c      	add	r4, r3
 800c040:	6025      	str	r5, [r4, #0]
 800c042:	e004      	b.n	800c04e <_malloc_r+0x72>
 800c044:	6863      	ldr	r3, [r4, #4]
 800c046:	42a2      	cmp	r2, r4
 800c048:	bf0c      	ite	eq
 800c04a:	600b      	streq	r3, [r1, #0]
 800c04c:	6053      	strne	r3, [r2, #4]
 800c04e:	4630      	mov	r0, r6
 800c050:	f000 fa02 	bl	800c458 <__malloc_unlock>
 800c054:	f104 000b 	add.w	r0, r4, #11
 800c058:	1d23      	adds	r3, r4, #4
 800c05a:	f020 0007 	bic.w	r0, r0, #7
 800c05e:	1ac2      	subs	r2, r0, r3
 800c060:	d0cc      	beq.n	800bffc <_malloc_r+0x20>
 800c062:	1a1b      	subs	r3, r3, r0
 800c064:	50a3      	str	r3, [r4, r2]
 800c066:	e7c9      	b.n	800bffc <_malloc_r+0x20>
 800c068:	4622      	mov	r2, r4
 800c06a:	6864      	ldr	r4, [r4, #4]
 800c06c:	e7cc      	b.n	800c008 <_malloc_r+0x2c>
 800c06e:	1cc4      	adds	r4, r0, #3
 800c070:	f024 0403 	bic.w	r4, r4, #3
 800c074:	42a0      	cmp	r0, r4
 800c076:	d0e3      	beq.n	800c040 <_malloc_r+0x64>
 800c078:	1a21      	subs	r1, r4, r0
 800c07a:	4630      	mov	r0, r6
 800c07c:	f000 f96c 	bl	800c358 <_sbrk_r>
 800c080:	3001      	adds	r0, #1
 800c082:	d1dd      	bne.n	800c040 <_malloc_r+0x64>
 800c084:	e7cf      	b.n	800c026 <_malloc_r+0x4a>
 800c086:	bf00      	nop
 800c088:	20000598 	.word	0x20000598
 800c08c:	2000059c 	.word	0x2000059c

0800c090 <__ssputs_r>:
 800c090:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c094:	688e      	ldr	r6, [r1, #8]
 800c096:	429e      	cmp	r6, r3
 800c098:	4682      	mov	sl, r0
 800c09a:	460c      	mov	r4, r1
 800c09c:	4690      	mov	r8, r2
 800c09e:	461f      	mov	r7, r3
 800c0a0:	d838      	bhi.n	800c114 <__ssputs_r+0x84>
 800c0a2:	898a      	ldrh	r2, [r1, #12]
 800c0a4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c0a8:	d032      	beq.n	800c110 <__ssputs_r+0x80>
 800c0aa:	6825      	ldr	r5, [r4, #0]
 800c0ac:	6909      	ldr	r1, [r1, #16]
 800c0ae:	eba5 0901 	sub.w	r9, r5, r1
 800c0b2:	6965      	ldr	r5, [r4, #20]
 800c0b4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c0b8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c0bc:	3301      	adds	r3, #1
 800c0be:	444b      	add	r3, r9
 800c0c0:	106d      	asrs	r5, r5, #1
 800c0c2:	429d      	cmp	r5, r3
 800c0c4:	bf38      	it	cc
 800c0c6:	461d      	movcc	r5, r3
 800c0c8:	0553      	lsls	r3, r2, #21
 800c0ca:	d531      	bpl.n	800c130 <__ssputs_r+0xa0>
 800c0cc:	4629      	mov	r1, r5
 800c0ce:	f7ff ff85 	bl	800bfdc <_malloc_r>
 800c0d2:	4606      	mov	r6, r0
 800c0d4:	b950      	cbnz	r0, 800c0ec <__ssputs_r+0x5c>
 800c0d6:	230c      	movs	r3, #12
 800c0d8:	f8ca 3000 	str.w	r3, [sl]
 800c0dc:	89a3      	ldrh	r3, [r4, #12]
 800c0de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c0e2:	81a3      	strh	r3, [r4, #12]
 800c0e4:	f04f 30ff 	mov.w	r0, #4294967295
 800c0e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c0ec:	6921      	ldr	r1, [r4, #16]
 800c0ee:	464a      	mov	r2, r9
 800c0f0:	f7ff fa4c 	bl	800b58c <memcpy>
 800c0f4:	89a3      	ldrh	r3, [r4, #12]
 800c0f6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c0fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c0fe:	81a3      	strh	r3, [r4, #12]
 800c100:	6126      	str	r6, [r4, #16]
 800c102:	6165      	str	r5, [r4, #20]
 800c104:	444e      	add	r6, r9
 800c106:	eba5 0509 	sub.w	r5, r5, r9
 800c10a:	6026      	str	r6, [r4, #0]
 800c10c:	60a5      	str	r5, [r4, #8]
 800c10e:	463e      	mov	r6, r7
 800c110:	42be      	cmp	r6, r7
 800c112:	d900      	bls.n	800c116 <__ssputs_r+0x86>
 800c114:	463e      	mov	r6, r7
 800c116:	4632      	mov	r2, r6
 800c118:	6820      	ldr	r0, [r4, #0]
 800c11a:	4641      	mov	r1, r8
 800c11c:	f000 f97c 	bl	800c418 <memmove>
 800c120:	68a3      	ldr	r3, [r4, #8]
 800c122:	6822      	ldr	r2, [r4, #0]
 800c124:	1b9b      	subs	r3, r3, r6
 800c126:	4432      	add	r2, r6
 800c128:	60a3      	str	r3, [r4, #8]
 800c12a:	6022      	str	r2, [r4, #0]
 800c12c:	2000      	movs	r0, #0
 800c12e:	e7db      	b.n	800c0e8 <__ssputs_r+0x58>
 800c130:	462a      	mov	r2, r5
 800c132:	f000 f997 	bl	800c464 <_realloc_r>
 800c136:	4606      	mov	r6, r0
 800c138:	2800      	cmp	r0, #0
 800c13a:	d1e1      	bne.n	800c100 <__ssputs_r+0x70>
 800c13c:	6921      	ldr	r1, [r4, #16]
 800c13e:	4650      	mov	r0, sl
 800c140:	f7ff fefc 	bl	800bf3c <_free_r>
 800c144:	e7c7      	b.n	800c0d6 <__ssputs_r+0x46>
	...

0800c148 <_svfiprintf_r>:
 800c148:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c14c:	4698      	mov	r8, r3
 800c14e:	898b      	ldrh	r3, [r1, #12]
 800c150:	061b      	lsls	r3, r3, #24
 800c152:	b09d      	sub	sp, #116	; 0x74
 800c154:	4607      	mov	r7, r0
 800c156:	460d      	mov	r5, r1
 800c158:	4614      	mov	r4, r2
 800c15a:	d50e      	bpl.n	800c17a <_svfiprintf_r+0x32>
 800c15c:	690b      	ldr	r3, [r1, #16]
 800c15e:	b963      	cbnz	r3, 800c17a <_svfiprintf_r+0x32>
 800c160:	2140      	movs	r1, #64	; 0x40
 800c162:	f7ff ff3b 	bl	800bfdc <_malloc_r>
 800c166:	6028      	str	r0, [r5, #0]
 800c168:	6128      	str	r0, [r5, #16]
 800c16a:	b920      	cbnz	r0, 800c176 <_svfiprintf_r+0x2e>
 800c16c:	230c      	movs	r3, #12
 800c16e:	603b      	str	r3, [r7, #0]
 800c170:	f04f 30ff 	mov.w	r0, #4294967295
 800c174:	e0d1      	b.n	800c31a <_svfiprintf_r+0x1d2>
 800c176:	2340      	movs	r3, #64	; 0x40
 800c178:	616b      	str	r3, [r5, #20]
 800c17a:	2300      	movs	r3, #0
 800c17c:	9309      	str	r3, [sp, #36]	; 0x24
 800c17e:	2320      	movs	r3, #32
 800c180:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c184:	f8cd 800c 	str.w	r8, [sp, #12]
 800c188:	2330      	movs	r3, #48	; 0x30
 800c18a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800c334 <_svfiprintf_r+0x1ec>
 800c18e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c192:	f04f 0901 	mov.w	r9, #1
 800c196:	4623      	mov	r3, r4
 800c198:	469a      	mov	sl, r3
 800c19a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c19e:	b10a      	cbz	r2, 800c1a4 <_svfiprintf_r+0x5c>
 800c1a0:	2a25      	cmp	r2, #37	; 0x25
 800c1a2:	d1f9      	bne.n	800c198 <_svfiprintf_r+0x50>
 800c1a4:	ebba 0b04 	subs.w	fp, sl, r4
 800c1a8:	d00b      	beq.n	800c1c2 <_svfiprintf_r+0x7a>
 800c1aa:	465b      	mov	r3, fp
 800c1ac:	4622      	mov	r2, r4
 800c1ae:	4629      	mov	r1, r5
 800c1b0:	4638      	mov	r0, r7
 800c1b2:	f7ff ff6d 	bl	800c090 <__ssputs_r>
 800c1b6:	3001      	adds	r0, #1
 800c1b8:	f000 80aa 	beq.w	800c310 <_svfiprintf_r+0x1c8>
 800c1bc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c1be:	445a      	add	r2, fp
 800c1c0:	9209      	str	r2, [sp, #36]	; 0x24
 800c1c2:	f89a 3000 	ldrb.w	r3, [sl]
 800c1c6:	2b00      	cmp	r3, #0
 800c1c8:	f000 80a2 	beq.w	800c310 <_svfiprintf_r+0x1c8>
 800c1cc:	2300      	movs	r3, #0
 800c1ce:	f04f 32ff 	mov.w	r2, #4294967295
 800c1d2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c1d6:	f10a 0a01 	add.w	sl, sl, #1
 800c1da:	9304      	str	r3, [sp, #16]
 800c1dc:	9307      	str	r3, [sp, #28]
 800c1de:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c1e2:	931a      	str	r3, [sp, #104]	; 0x68
 800c1e4:	4654      	mov	r4, sl
 800c1e6:	2205      	movs	r2, #5
 800c1e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c1ec:	4851      	ldr	r0, [pc, #324]	; (800c334 <_svfiprintf_r+0x1ec>)
 800c1ee:	f7f3 ffff 	bl	80001f0 <memchr>
 800c1f2:	9a04      	ldr	r2, [sp, #16]
 800c1f4:	b9d8      	cbnz	r0, 800c22e <_svfiprintf_r+0xe6>
 800c1f6:	06d0      	lsls	r0, r2, #27
 800c1f8:	bf44      	itt	mi
 800c1fa:	2320      	movmi	r3, #32
 800c1fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c200:	0711      	lsls	r1, r2, #28
 800c202:	bf44      	itt	mi
 800c204:	232b      	movmi	r3, #43	; 0x2b
 800c206:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c20a:	f89a 3000 	ldrb.w	r3, [sl]
 800c20e:	2b2a      	cmp	r3, #42	; 0x2a
 800c210:	d015      	beq.n	800c23e <_svfiprintf_r+0xf6>
 800c212:	9a07      	ldr	r2, [sp, #28]
 800c214:	4654      	mov	r4, sl
 800c216:	2000      	movs	r0, #0
 800c218:	f04f 0c0a 	mov.w	ip, #10
 800c21c:	4621      	mov	r1, r4
 800c21e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c222:	3b30      	subs	r3, #48	; 0x30
 800c224:	2b09      	cmp	r3, #9
 800c226:	d94e      	bls.n	800c2c6 <_svfiprintf_r+0x17e>
 800c228:	b1b0      	cbz	r0, 800c258 <_svfiprintf_r+0x110>
 800c22a:	9207      	str	r2, [sp, #28]
 800c22c:	e014      	b.n	800c258 <_svfiprintf_r+0x110>
 800c22e:	eba0 0308 	sub.w	r3, r0, r8
 800c232:	fa09 f303 	lsl.w	r3, r9, r3
 800c236:	4313      	orrs	r3, r2
 800c238:	9304      	str	r3, [sp, #16]
 800c23a:	46a2      	mov	sl, r4
 800c23c:	e7d2      	b.n	800c1e4 <_svfiprintf_r+0x9c>
 800c23e:	9b03      	ldr	r3, [sp, #12]
 800c240:	1d19      	adds	r1, r3, #4
 800c242:	681b      	ldr	r3, [r3, #0]
 800c244:	9103      	str	r1, [sp, #12]
 800c246:	2b00      	cmp	r3, #0
 800c248:	bfbb      	ittet	lt
 800c24a:	425b      	neglt	r3, r3
 800c24c:	f042 0202 	orrlt.w	r2, r2, #2
 800c250:	9307      	strge	r3, [sp, #28]
 800c252:	9307      	strlt	r3, [sp, #28]
 800c254:	bfb8      	it	lt
 800c256:	9204      	strlt	r2, [sp, #16]
 800c258:	7823      	ldrb	r3, [r4, #0]
 800c25a:	2b2e      	cmp	r3, #46	; 0x2e
 800c25c:	d10c      	bne.n	800c278 <_svfiprintf_r+0x130>
 800c25e:	7863      	ldrb	r3, [r4, #1]
 800c260:	2b2a      	cmp	r3, #42	; 0x2a
 800c262:	d135      	bne.n	800c2d0 <_svfiprintf_r+0x188>
 800c264:	9b03      	ldr	r3, [sp, #12]
 800c266:	1d1a      	adds	r2, r3, #4
 800c268:	681b      	ldr	r3, [r3, #0]
 800c26a:	9203      	str	r2, [sp, #12]
 800c26c:	2b00      	cmp	r3, #0
 800c26e:	bfb8      	it	lt
 800c270:	f04f 33ff 	movlt.w	r3, #4294967295
 800c274:	3402      	adds	r4, #2
 800c276:	9305      	str	r3, [sp, #20]
 800c278:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800c344 <_svfiprintf_r+0x1fc>
 800c27c:	7821      	ldrb	r1, [r4, #0]
 800c27e:	2203      	movs	r2, #3
 800c280:	4650      	mov	r0, sl
 800c282:	f7f3 ffb5 	bl	80001f0 <memchr>
 800c286:	b140      	cbz	r0, 800c29a <_svfiprintf_r+0x152>
 800c288:	2340      	movs	r3, #64	; 0x40
 800c28a:	eba0 000a 	sub.w	r0, r0, sl
 800c28e:	fa03 f000 	lsl.w	r0, r3, r0
 800c292:	9b04      	ldr	r3, [sp, #16]
 800c294:	4303      	orrs	r3, r0
 800c296:	3401      	adds	r4, #1
 800c298:	9304      	str	r3, [sp, #16]
 800c29a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c29e:	4826      	ldr	r0, [pc, #152]	; (800c338 <_svfiprintf_r+0x1f0>)
 800c2a0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c2a4:	2206      	movs	r2, #6
 800c2a6:	f7f3 ffa3 	bl	80001f0 <memchr>
 800c2aa:	2800      	cmp	r0, #0
 800c2ac:	d038      	beq.n	800c320 <_svfiprintf_r+0x1d8>
 800c2ae:	4b23      	ldr	r3, [pc, #140]	; (800c33c <_svfiprintf_r+0x1f4>)
 800c2b0:	bb1b      	cbnz	r3, 800c2fa <_svfiprintf_r+0x1b2>
 800c2b2:	9b03      	ldr	r3, [sp, #12]
 800c2b4:	3307      	adds	r3, #7
 800c2b6:	f023 0307 	bic.w	r3, r3, #7
 800c2ba:	3308      	adds	r3, #8
 800c2bc:	9303      	str	r3, [sp, #12]
 800c2be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c2c0:	4433      	add	r3, r6
 800c2c2:	9309      	str	r3, [sp, #36]	; 0x24
 800c2c4:	e767      	b.n	800c196 <_svfiprintf_r+0x4e>
 800c2c6:	fb0c 3202 	mla	r2, ip, r2, r3
 800c2ca:	460c      	mov	r4, r1
 800c2cc:	2001      	movs	r0, #1
 800c2ce:	e7a5      	b.n	800c21c <_svfiprintf_r+0xd4>
 800c2d0:	2300      	movs	r3, #0
 800c2d2:	3401      	adds	r4, #1
 800c2d4:	9305      	str	r3, [sp, #20]
 800c2d6:	4619      	mov	r1, r3
 800c2d8:	f04f 0c0a 	mov.w	ip, #10
 800c2dc:	4620      	mov	r0, r4
 800c2de:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c2e2:	3a30      	subs	r2, #48	; 0x30
 800c2e4:	2a09      	cmp	r2, #9
 800c2e6:	d903      	bls.n	800c2f0 <_svfiprintf_r+0x1a8>
 800c2e8:	2b00      	cmp	r3, #0
 800c2ea:	d0c5      	beq.n	800c278 <_svfiprintf_r+0x130>
 800c2ec:	9105      	str	r1, [sp, #20]
 800c2ee:	e7c3      	b.n	800c278 <_svfiprintf_r+0x130>
 800c2f0:	fb0c 2101 	mla	r1, ip, r1, r2
 800c2f4:	4604      	mov	r4, r0
 800c2f6:	2301      	movs	r3, #1
 800c2f8:	e7f0      	b.n	800c2dc <_svfiprintf_r+0x194>
 800c2fa:	ab03      	add	r3, sp, #12
 800c2fc:	9300      	str	r3, [sp, #0]
 800c2fe:	462a      	mov	r2, r5
 800c300:	4b0f      	ldr	r3, [pc, #60]	; (800c340 <_svfiprintf_r+0x1f8>)
 800c302:	a904      	add	r1, sp, #16
 800c304:	4638      	mov	r0, r7
 800c306:	f7fc fa85 	bl	8008814 <_printf_float>
 800c30a:	1c42      	adds	r2, r0, #1
 800c30c:	4606      	mov	r6, r0
 800c30e:	d1d6      	bne.n	800c2be <_svfiprintf_r+0x176>
 800c310:	89ab      	ldrh	r3, [r5, #12]
 800c312:	065b      	lsls	r3, r3, #25
 800c314:	f53f af2c 	bmi.w	800c170 <_svfiprintf_r+0x28>
 800c318:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c31a:	b01d      	add	sp, #116	; 0x74
 800c31c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c320:	ab03      	add	r3, sp, #12
 800c322:	9300      	str	r3, [sp, #0]
 800c324:	462a      	mov	r2, r5
 800c326:	4b06      	ldr	r3, [pc, #24]	; (800c340 <_svfiprintf_r+0x1f8>)
 800c328:	a904      	add	r1, sp, #16
 800c32a:	4638      	mov	r0, r7
 800c32c:	f7fc fd16 	bl	8008d5c <_printf_i>
 800c330:	e7eb      	b.n	800c30a <_svfiprintf_r+0x1c2>
 800c332:	bf00      	nop
 800c334:	0800d3b4 	.word	0x0800d3b4
 800c338:	0800d3be 	.word	0x0800d3be
 800c33c:	08008815 	.word	0x08008815
 800c340:	0800c091 	.word	0x0800c091
 800c344:	0800d3ba 	.word	0x0800d3ba

0800c348 <nan>:
 800c348:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800c350 <nan+0x8>
 800c34c:	4770      	bx	lr
 800c34e:	bf00      	nop
 800c350:	00000000 	.word	0x00000000
 800c354:	7ff80000 	.word	0x7ff80000

0800c358 <_sbrk_r>:
 800c358:	b538      	push	{r3, r4, r5, lr}
 800c35a:	4d06      	ldr	r5, [pc, #24]	; (800c374 <_sbrk_r+0x1c>)
 800c35c:	2300      	movs	r3, #0
 800c35e:	4604      	mov	r4, r0
 800c360:	4608      	mov	r0, r1
 800c362:	602b      	str	r3, [r5, #0]
 800c364:	f7f5 fa06 	bl	8001774 <_sbrk>
 800c368:	1c43      	adds	r3, r0, #1
 800c36a:	d102      	bne.n	800c372 <_sbrk_r+0x1a>
 800c36c:	682b      	ldr	r3, [r5, #0]
 800c36e:	b103      	cbz	r3, 800c372 <_sbrk_r+0x1a>
 800c370:	6023      	str	r3, [r4, #0]
 800c372:	bd38      	pop	{r3, r4, r5, pc}
 800c374:	20001edc 	.word	0x20001edc

0800c378 <strncmp>:
 800c378:	b510      	push	{r4, lr}
 800c37a:	b16a      	cbz	r2, 800c398 <strncmp+0x20>
 800c37c:	3901      	subs	r1, #1
 800c37e:	1884      	adds	r4, r0, r2
 800c380:	f810 3b01 	ldrb.w	r3, [r0], #1
 800c384:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800c388:	4293      	cmp	r3, r2
 800c38a:	d103      	bne.n	800c394 <strncmp+0x1c>
 800c38c:	42a0      	cmp	r0, r4
 800c38e:	d001      	beq.n	800c394 <strncmp+0x1c>
 800c390:	2b00      	cmp	r3, #0
 800c392:	d1f5      	bne.n	800c380 <strncmp+0x8>
 800c394:	1a98      	subs	r0, r3, r2
 800c396:	bd10      	pop	{r4, pc}
 800c398:	4610      	mov	r0, r2
 800c39a:	e7fc      	b.n	800c396 <strncmp+0x1e>

0800c39c <__ascii_wctomb>:
 800c39c:	b149      	cbz	r1, 800c3b2 <__ascii_wctomb+0x16>
 800c39e:	2aff      	cmp	r2, #255	; 0xff
 800c3a0:	bf85      	ittet	hi
 800c3a2:	238a      	movhi	r3, #138	; 0x8a
 800c3a4:	6003      	strhi	r3, [r0, #0]
 800c3a6:	700a      	strbls	r2, [r1, #0]
 800c3a8:	f04f 30ff 	movhi.w	r0, #4294967295
 800c3ac:	bf98      	it	ls
 800c3ae:	2001      	movls	r0, #1
 800c3b0:	4770      	bx	lr
 800c3b2:	4608      	mov	r0, r1
 800c3b4:	4770      	bx	lr
	...

0800c3b8 <__assert_func>:
 800c3b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c3ba:	4614      	mov	r4, r2
 800c3bc:	461a      	mov	r2, r3
 800c3be:	4b09      	ldr	r3, [pc, #36]	; (800c3e4 <__assert_func+0x2c>)
 800c3c0:	681b      	ldr	r3, [r3, #0]
 800c3c2:	4605      	mov	r5, r0
 800c3c4:	68d8      	ldr	r0, [r3, #12]
 800c3c6:	b14c      	cbz	r4, 800c3dc <__assert_func+0x24>
 800c3c8:	4b07      	ldr	r3, [pc, #28]	; (800c3e8 <__assert_func+0x30>)
 800c3ca:	9100      	str	r1, [sp, #0]
 800c3cc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c3d0:	4906      	ldr	r1, [pc, #24]	; (800c3ec <__assert_func+0x34>)
 800c3d2:	462b      	mov	r3, r5
 800c3d4:	f000 f80e 	bl	800c3f4 <fiprintf>
 800c3d8:	f000 fa84 	bl	800c8e4 <abort>
 800c3dc:	4b04      	ldr	r3, [pc, #16]	; (800c3f0 <__assert_func+0x38>)
 800c3de:	461c      	mov	r4, r3
 800c3e0:	e7f3      	b.n	800c3ca <__assert_func+0x12>
 800c3e2:	bf00      	nop
 800c3e4:	20000180 	.word	0x20000180
 800c3e8:	0800d3c5 	.word	0x0800d3c5
 800c3ec:	0800d3d2 	.word	0x0800d3d2
 800c3f0:	0800d400 	.word	0x0800d400

0800c3f4 <fiprintf>:
 800c3f4:	b40e      	push	{r1, r2, r3}
 800c3f6:	b503      	push	{r0, r1, lr}
 800c3f8:	4601      	mov	r1, r0
 800c3fa:	ab03      	add	r3, sp, #12
 800c3fc:	4805      	ldr	r0, [pc, #20]	; (800c414 <fiprintf+0x20>)
 800c3fe:	f853 2b04 	ldr.w	r2, [r3], #4
 800c402:	6800      	ldr	r0, [r0, #0]
 800c404:	9301      	str	r3, [sp, #4]
 800c406:	f000 f87d 	bl	800c504 <_vfiprintf_r>
 800c40a:	b002      	add	sp, #8
 800c40c:	f85d eb04 	ldr.w	lr, [sp], #4
 800c410:	b003      	add	sp, #12
 800c412:	4770      	bx	lr
 800c414:	20000180 	.word	0x20000180

0800c418 <memmove>:
 800c418:	4288      	cmp	r0, r1
 800c41a:	b510      	push	{r4, lr}
 800c41c:	eb01 0402 	add.w	r4, r1, r2
 800c420:	d902      	bls.n	800c428 <memmove+0x10>
 800c422:	4284      	cmp	r4, r0
 800c424:	4623      	mov	r3, r4
 800c426:	d807      	bhi.n	800c438 <memmove+0x20>
 800c428:	1e43      	subs	r3, r0, #1
 800c42a:	42a1      	cmp	r1, r4
 800c42c:	d008      	beq.n	800c440 <memmove+0x28>
 800c42e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c432:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c436:	e7f8      	b.n	800c42a <memmove+0x12>
 800c438:	4402      	add	r2, r0
 800c43a:	4601      	mov	r1, r0
 800c43c:	428a      	cmp	r2, r1
 800c43e:	d100      	bne.n	800c442 <memmove+0x2a>
 800c440:	bd10      	pop	{r4, pc}
 800c442:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c446:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c44a:	e7f7      	b.n	800c43c <memmove+0x24>

0800c44c <__malloc_lock>:
 800c44c:	4801      	ldr	r0, [pc, #4]	; (800c454 <__malloc_lock+0x8>)
 800c44e:	f000 bc09 	b.w	800cc64 <__retarget_lock_acquire_recursive>
 800c452:	bf00      	nop
 800c454:	20001ee4 	.word	0x20001ee4

0800c458 <__malloc_unlock>:
 800c458:	4801      	ldr	r0, [pc, #4]	; (800c460 <__malloc_unlock+0x8>)
 800c45a:	f000 bc04 	b.w	800cc66 <__retarget_lock_release_recursive>
 800c45e:	bf00      	nop
 800c460:	20001ee4 	.word	0x20001ee4

0800c464 <_realloc_r>:
 800c464:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c466:	4607      	mov	r7, r0
 800c468:	4614      	mov	r4, r2
 800c46a:	460e      	mov	r6, r1
 800c46c:	b921      	cbnz	r1, 800c478 <_realloc_r+0x14>
 800c46e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800c472:	4611      	mov	r1, r2
 800c474:	f7ff bdb2 	b.w	800bfdc <_malloc_r>
 800c478:	b922      	cbnz	r2, 800c484 <_realloc_r+0x20>
 800c47a:	f7ff fd5f 	bl	800bf3c <_free_r>
 800c47e:	4625      	mov	r5, r4
 800c480:	4628      	mov	r0, r5
 800c482:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c484:	f000 fc54 	bl	800cd30 <_malloc_usable_size_r>
 800c488:	42a0      	cmp	r0, r4
 800c48a:	d20f      	bcs.n	800c4ac <_realloc_r+0x48>
 800c48c:	4621      	mov	r1, r4
 800c48e:	4638      	mov	r0, r7
 800c490:	f7ff fda4 	bl	800bfdc <_malloc_r>
 800c494:	4605      	mov	r5, r0
 800c496:	2800      	cmp	r0, #0
 800c498:	d0f2      	beq.n	800c480 <_realloc_r+0x1c>
 800c49a:	4631      	mov	r1, r6
 800c49c:	4622      	mov	r2, r4
 800c49e:	f7ff f875 	bl	800b58c <memcpy>
 800c4a2:	4631      	mov	r1, r6
 800c4a4:	4638      	mov	r0, r7
 800c4a6:	f7ff fd49 	bl	800bf3c <_free_r>
 800c4aa:	e7e9      	b.n	800c480 <_realloc_r+0x1c>
 800c4ac:	4635      	mov	r5, r6
 800c4ae:	e7e7      	b.n	800c480 <_realloc_r+0x1c>

0800c4b0 <__sfputc_r>:
 800c4b0:	6893      	ldr	r3, [r2, #8]
 800c4b2:	3b01      	subs	r3, #1
 800c4b4:	2b00      	cmp	r3, #0
 800c4b6:	b410      	push	{r4}
 800c4b8:	6093      	str	r3, [r2, #8]
 800c4ba:	da08      	bge.n	800c4ce <__sfputc_r+0x1e>
 800c4bc:	6994      	ldr	r4, [r2, #24]
 800c4be:	42a3      	cmp	r3, r4
 800c4c0:	db01      	blt.n	800c4c6 <__sfputc_r+0x16>
 800c4c2:	290a      	cmp	r1, #10
 800c4c4:	d103      	bne.n	800c4ce <__sfputc_r+0x1e>
 800c4c6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c4ca:	f000 b94b 	b.w	800c764 <__swbuf_r>
 800c4ce:	6813      	ldr	r3, [r2, #0]
 800c4d0:	1c58      	adds	r0, r3, #1
 800c4d2:	6010      	str	r0, [r2, #0]
 800c4d4:	7019      	strb	r1, [r3, #0]
 800c4d6:	4608      	mov	r0, r1
 800c4d8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c4dc:	4770      	bx	lr

0800c4de <__sfputs_r>:
 800c4de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c4e0:	4606      	mov	r6, r0
 800c4e2:	460f      	mov	r7, r1
 800c4e4:	4614      	mov	r4, r2
 800c4e6:	18d5      	adds	r5, r2, r3
 800c4e8:	42ac      	cmp	r4, r5
 800c4ea:	d101      	bne.n	800c4f0 <__sfputs_r+0x12>
 800c4ec:	2000      	movs	r0, #0
 800c4ee:	e007      	b.n	800c500 <__sfputs_r+0x22>
 800c4f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c4f4:	463a      	mov	r2, r7
 800c4f6:	4630      	mov	r0, r6
 800c4f8:	f7ff ffda 	bl	800c4b0 <__sfputc_r>
 800c4fc:	1c43      	adds	r3, r0, #1
 800c4fe:	d1f3      	bne.n	800c4e8 <__sfputs_r+0xa>
 800c500:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c504 <_vfiprintf_r>:
 800c504:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c508:	460d      	mov	r5, r1
 800c50a:	b09d      	sub	sp, #116	; 0x74
 800c50c:	4614      	mov	r4, r2
 800c50e:	4698      	mov	r8, r3
 800c510:	4606      	mov	r6, r0
 800c512:	b118      	cbz	r0, 800c51c <_vfiprintf_r+0x18>
 800c514:	6983      	ldr	r3, [r0, #24]
 800c516:	b90b      	cbnz	r3, 800c51c <_vfiprintf_r+0x18>
 800c518:	f000 fb06 	bl	800cb28 <__sinit>
 800c51c:	4b89      	ldr	r3, [pc, #548]	; (800c744 <_vfiprintf_r+0x240>)
 800c51e:	429d      	cmp	r5, r3
 800c520:	d11b      	bne.n	800c55a <_vfiprintf_r+0x56>
 800c522:	6875      	ldr	r5, [r6, #4]
 800c524:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c526:	07d9      	lsls	r1, r3, #31
 800c528:	d405      	bmi.n	800c536 <_vfiprintf_r+0x32>
 800c52a:	89ab      	ldrh	r3, [r5, #12]
 800c52c:	059a      	lsls	r2, r3, #22
 800c52e:	d402      	bmi.n	800c536 <_vfiprintf_r+0x32>
 800c530:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c532:	f000 fb97 	bl	800cc64 <__retarget_lock_acquire_recursive>
 800c536:	89ab      	ldrh	r3, [r5, #12]
 800c538:	071b      	lsls	r3, r3, #28
 800c53a:	d501      	bpl.n	800c540 <_vfiprintf_r+0x3c>
 800c53c:	692b      	ldr	r3, [r5, #16]
 800c53e:	b9eb      	cbnz	r3, 800c57c <_vfiprintf_r+0x78>
 800c540:	4629      	mov	r1, r5
 800c542:	4630      	mov	r0, r6
 800c544:	f000 f960 	bl	800c808 <__swsetup_r>
 800c548:	b1c0      	cbz	r0, 800c57c <_vfiprintf_r+0x78>
 800c54a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c54c:	07dc      	lsls	r4, r3, #31
 800c54e:	d50e      	bpl.n	800c56e <_vfiprintf_r+0x6a>
 800c550:	f04f 30ff 	mov.w	r0, #4294967295
 800c554:	b01d      	add	sp, #116	; 0x74
 800c556:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c55a:	4b7b      	ldr	r3, [pc, #492]	; (800c748 <_vfiprintf_r+0x244>)
 800c55c:	429d      	cmp	r5, r3
 800c55e:	d101      	bne.n	800c564 <_vfiprintf_r+0x60>
 800c560:	68b5      	ldr	r5, [r6, #8]
 800c562:	e7df      	b.n	800c524 <_vfiprintf_r+0x20>
 800c564:	4b79      	ldr	r3, [pc, #484]	; (800c74c <_vfiprintf_r+0x248>)
 800c566:	429d      	cmp	r5, r3
 800c568:	bf08      	it	eq
 800c56a:	68f5      	ldreq	r5, [r6, #12]
 800c56c:	e7da      	b.n	800c524 <_vfiprintf_r+0x20>
 800c56e:	89ab      	ldrh	r3, [r5, #12]
 800c570:	0598      	lsls	r0, r3, #22
 800c572:	d4ed      	bmi.n	800c550 <_vfiprintf_r+0x4c>
 800c574:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c576:	f000 fb76 	bl	800cc66 <__retarget_lock_release_recursive>
 800c57a:	e7e9      	b.n	800c550 <_vfiprintf_r+0x4c>
 800c57c:	2300      	movs	r3, #0
 800c57e:	9309      	str	r3, [sp, #36]	; 0x24
 800c580:	2320      	movs	r3, #32
 800c582:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c586:	f8cd 800c 	str.w	r8, [sp, #12]
 800c58a:	2330      	movs	r3, #48	; 0x30
 800c58c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800c750 <_vfiprintf_r+0x24c>
 800c590:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c594:	f04f 0901 	mov.w	r9, #1
 800c598:	4623      	mov	r3, r4
 800c59a:	469a      	mov	sl, r3
 800c59c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c5a0:	b10a      	cbz	r2, 800c5a6 <_vfiprintf_r+0xa2>
 800c5a2:	2a25      	cmp	r2, #37	; 0x25
 800c5a4:	d1f9      	bne.n	800c59a <_vfiprintf_r+0x96>
 800c5a6:	ebba 0b04 	subs.w	fp, sl, r4
 800c5aa:	d00b      	beq.n	800c5c4 <_vfiprintf_r+0xc0>
 800c5ac:	465b      	mov	r3, fp
 800c5ae:	4622      	mov	r2, r4
 800c5b0:	4629      	mov	r1, r5
 800c5b2:	4630      	mov	r0, r6
 800c5b4:	f7ff ff93 	bl	800c4de <__sfputs_r>
 800c5b8:	3001      	adds	r0, #1
 800c5ba:	f000 80aa 	beq.w	800c712 <_vfiprintf_r+0x20e>
 800c5be:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c5c0:	445a      	add	r2, fp
 800c5c2:	9209      	str	r2, [sp, #36]	; 0x24
 800c5c4:	f89a 3000 	ldrb.w	r3, [sl]
 800c5c8:	2b00      	cmp	r3, #0
 800c5ca:	f000 80a2 	beq.w	800c712 <_vfiprintf_r+0x20e>
 800c5ce:	2300      	movs	r3, #0
 800c5d0:	f04f 32ff 	mov.w	r2, #4294967295
 800c5d4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c5d8:	f10a 0a01 	add.w	sl, sl, #1
 800c5dc:	9304      	str	r3, [sp, #16]
 800c5de:	9307      	str	r3, [sp, #28]
 800c5e0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c5e4:	931a      	str	r3, [sp, #104]	; 0x68
 800c5e6:	4654      	mov	r4, sl
 800c5e8:	2205      	movs	r2, #5
 800c5ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c5ee:	4858      	ldr	r0, [pc, #352]	; (800c750 <_vfiprintf_r+0x24c>)
 800c5f0:	f7f3 fdfe 	bl	80001f0 <memchr>
 800c5f4:	9a04      	ldr	r2, [sp, #16]
 800c5f6:	b9d8      	cbnz	r0, 800c630 <_vfiprintf_r+0x12c>
 800c5f8:	06d1      	lsls	r1, r2, #27
 800c5fa:	bf44      	itt	mi
 800c5fc:	2320      	movmi	r3, #32
 800c5fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c602:	0713      	lsls	r3, r2, #28
 800c604:	bf44      	itt	mi
 800c606:	232b      	movmi	r3, #43	; 0x2b
 800c608:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c60c:	f89a 3000 	ldrb.w	r3, [sl]
 800c610:	2b2a      	cmp	r3, #42	; 0x2a
 800c612:	d015      	beq.n	800c640 <_vfiprintf_r+0x13c>
 800c614:	9a07      	ldr	r2, [sp, #28]
 800c616:	4654      	mov	r4, sl
 800c618:	2000      	movs	r0, #0
 800c61a:	f04f 0c0a 	mov.w	ip, #10
 800c61e:	4621      	mov	r1, r4
 800c620:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c624:	3b30      	subs	r3, #48	; 0x30
 800c626:	2b09      	cmp	r3, #9
 800c628:	d94e      	bls.n	800c6c8 <_vfiprintf_r+0x1c4>
 800c62a:	b1b0      	cbz	r0, 800c65a <_vfiprintf_r+0x156>
 800c62c:	9207      	str	r2, [sp, #28]
 800c62e:	e014      	b.n	800c65a <_vfiprintf_r+0x156>
 800c630:	eba0 0308 	sub.w	r3, r0, r8
 800c634:	fa09 f303 	lsl.w	r3, r9, r3
 800c638:	4313      	orrs	r3, r2
 800c63a:	9304      	str	r3, [sp, #16]
 800c63c:	46a2      	mov	sl, r4
 800c63e:	e7d2      	b.n	800c5e6 <_vfiprintf_r+0xe2>
 800c640:	9b03      	ldr	r3, [sp, #12]
 800c642:	1d19      	adds	r1, r3, #4
 800c644:	681b      	ldr	r3, [r3, #0]
 800c646:	9103      	str	r1, [sp, #12]
 800c648:	2b00      	cmp	r3, #0
 800c64a:	bfbb      	ittet	lt
 800c64c:	425b      	neglt	r3, r3
 800c64e:	f042 0202 	orrlt.w	r2, r2, #2
 800c652:	9307      	strge	r3, [sp, #28]
 800c654:	9307      	strlt	r3, [sp, #28]
 800c656:	bfb8      	it	lt
 800c658:	9204      	strlt	r2, [sp, #16]
 800c65a:	7823      	ldrb	r3, [r4, #0]
 800c65c:	2b2e      	cmp	r3, #46	; 0x2e
 800c65e:	d10c      	bne.n	800c67a <_vfiprintf_r+0x176>
 800c660:	7863      	ldrb	r3, [r4, #1]
 800c662:	2b2a      	cmp	r3, #42	; 0x2a
 800c664:	d135      	bne.n	800c6d2 <_vfiprintf_r+0x1ce>
 800c666:	9b03      	ldr	r3, [sp, #12]
 800c668:	1d1a      	adds	r2, r3, #4
 800c66a:	681b      	ldr	r3, [r3, #0]
 800c66c:	9203      	str	r2, [sp, #12]
 800c66e:	2b00      	cmp	r3, #0
 800c670:	bfb8      	it	lt
 800c672:	f04f 33ff 	movlt.w	r3, #4294967295
 800c676:	3402      	adds	r4, #2
 800c678:	9305      	str	r3, [sp, #20]
 800c67a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800c760 <_vfiprintf_r+0x25c>
 800c67e:	7821      	ldrb	r1, [r4, #0]
 800c680:	2203      	movs	r2, #3
 800c682:	4650      	mov	r0, sl
 800c684:	f7f3 fdb4 	bl	80001f0 <memchr>
 800c688:	b140      	cbz	r0, 800c69c <_vfiprintf_r+0x198>
 800c68a:	2340      	movs	r3, #64	; 0x40
 800c68c:	eba0 000a 	sub.w	r0, r0, sl
 800c690:	fa03 f000 	lsl.w	r0, r3, r0
 800c694:	9b04      	ldr	r3, [sp, #16]
 800c696:	4303      	orrs	r3, r0
 800c698:	3401      	adds	r4, #1
 800c69a:	9304      	str	r3, [sp, #16]
 800c69c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c6a0:	482c      	ldr	r0, [pc, #176]	; (800c754 <_vfiprintf_r+0x250>)
 800c6a2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c6a6:	2206      	movs	r2, #6
 800c6a8:	f7f3 fda2 	bl	80001f0 <memchr>
 800c6ac:	2800      	cmp	r0, #0
 800c6ae:	d03f      	beq.n	800c730 <_vfiprintf_r+0x22c>
 800c6b0:	4b29      	ldr	r3, [pc, #164]	; (800c758 <_vfiprintf_r+0x254>)
 800c6b2:	bb1b      	cbnz	r3, 800c6fc <_vfiprintf_r+0x1f8>
 800c6b4:	9b03      	ldr	r3, [sp, #12]
 800c6b6:	3307      	adds	r3, #7
 800c6b8:	f023 0307 	bic.w	r3, r3, #7
 800c6bc:	3308      	adds	r3, #8
 800c6be:	9303      	str	r3, [sp, #12]
 800c6c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c6c2:	443b      	add	r3, r7
 800c6c4:	9309      	str	r3, [sp, #36]	; 0x24
 800c6c6:	e767      	b.n	800c598 <_vfiprintf_r+0x94>
 800c6c8:	fb0c 3202 	mla	r2, ip, r2, r3
 800c6cc:	460c      	mov	r4, r1
 800c6ce:	2001      	movs	r0, #1
 800c6d0:	e7a5      	b.n	800c61e <_vfiprintf_r+0x11a>
 800c6d2:	2300      	movs	r3, #0
 800c6d4:	3401      	adds	r4, #1
 800c6d6:	9305      	str	r3, [sp, #20]
 800c6d8:	4619      	mov	r1, r3
 800c6da:	f04f 0c0a 	mov.w	ip, #10
 800c6de:	4620      	mov	r0, r4
 800c6e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c6e4:	3a30      	subs	r2, #48	; 0x30
 800c6e6:	2a09      	cmp	r2, #9
 800c6e8:	d903      	bls.n	800c6f2 <_vfiprintf_r+0x1ee>
 800c6ea:	2b00      	cmp	r3, #0
 800c6ec:	d0c5      	beq.n	800c67a <_vfiprintf_r+0x176>
 800c6ee:	9105      	str	r1, [sp, #20]
 800c6f0:	e7c3      	b.n	800c67a <_vfiprintf_r+0x176>
 800c6f2:	fb0c 2101 	mla	r1, ip, r1, r2
 800c6f6:	4604      	mov	r4, r0
 800c6f8:	2301      	movs	r3, #1
 800c6fa:	e7f0      	b.n	800c6de <_vfiprintf_r+0x1da>
 800c6fc:	ab03      	add	r3, sp, #12
 800c6fe:	9300      	str	r3, [sp, #0]
 800c700:	462a      	mov	r2, r5
 800c702:	4b16      	ldr	r3, [pc, #88]	; (800c75c <_vfiprintf_r+0x258>)
 800c704:	a904      	add	r1, sp, #16
 800c706:	4630      	mov	r0, r6
 800c708:	f7fc f884 	bl	8008814 <_printf_float>
 800c70c:	4607      	mov	r7, r0
 800c70e:	1c78      	adds	r0, r7, #1
 800c710:	d1d6      	bne.n	800c6c0 <_vfiprintf_r+0x1bc>
 800c712:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c714:	07d9      	lsls	r1, r3, #31
 800c716:	d405      	bmi.n	800c724 <_vfiprintf_r+0x220>
 800c718:	89ab      	ldrh	r3, [r5, #12]
 800c71a:	059a      	lsls	r2, r3, #22
 800c71c:	d402      	bmi.n	800c724 <_vfiprintf_r+0x220>
 800c71e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c720:	f000 faa1 	bl	800cc66 <__retarget_lock_release_recursive>
 800c724:	89ab      	ldrh	r3, [r5, #12]
 800c726:	065b      	lsls	r3, r3, #25
 800c728:	f53f af12 	bmi.w	800c550 <_vfiprintf_r+0x4c>
 800c72c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c72e:	e711      	b.n	800c554 <_vfiprintf_r+0x50>
 800c730:	ab03      	add	r3, sp, #12
 800c732:	9300      	str	r3, [sp, #0]
 800c734:	462a      	mov	r2, r5
 800c736:	4b09      	ldr	r3, [pc, #36]	; (800c75c <_vfiprintf_r+0x258>)
 800c738:	a904      	add	r1, sp, #16
 800c73a:	4630      	mov	r0, r6
 800c73c:	f7fc fb0e 	bl	8008d5c <_printf_i>
 800c740:	e7e4      	b.n	800c70c <_vfiprintf_r+0x208>
 800c742:	bf00      	nop
 800c744:	0800d424 	.word	0x0800d424
 800c748:	0800d444 	.word	0x0800d444
 800c74c:	0800d404 	.word	0x0800d404
 800c750:	0800d3b4 	.word	0x0800d3b4
 800c754:	0800d3be 	.word	0x0800d3be
 800c758:	08008815 	.word	0x08008815
 800c75c:	0800c4df 	.word	0x0800c4df
 800c760:	0800d3ba 	.word	0x0800d3ba

0800c764 <__swbuf_r>:
 800c764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c766:	460e      	mov	r6, r1
 800c768:	4614      	mov	r4, r2
 800c76a:	4605      	mov	r5, r0
 800c76c:	b118      	cbz	r0, 800c776 <__swbuf_r+0x12>
 800c76e:	6983      	ldr	r3, [r0, #24]
 800c770:	b90b      	cbnz	r3, 800c776 <__swbuf_r+0x12>
 800c772:	f000 f9d9 	bl	800cb28 <__sinit>
 800c776:	4b21      	ldr	r3, [pc, #132]	; (800c7fc <__swbuf_r+0x98>)
 800c778:	429c      	cmp	r4, r3
 800c77a:	d12b      	bne.n	800c7d4 <__swbuf_r+0x70>
 800c77c:	686c      	ldr	r4, [r5, #4]
 800c77e:	69a3      	ldr	r3, [r4, #24]
 800c780:	60a3      	str	r3, [r4, #8]
 800c782:	89a3      	ldrh	r3, [r4, #12]
 800c784:	071a      	lsls	r2, r3, #28
 800c786:	d52f      	bpl.n	800c7e8 <__swbuf_r+0x84>
 800c788:	6923      	ldr	r3, [r4, #16]
 800c78a:	b36b      	cbz	r3, 800c7e8 <__swbuf_r+0x84>
 800c78c:	6923      	ldr	r3, [r4, #16]
 800c78e:	6820      	ldr	r0, [r4, #0]
 800c790:	1ac0      	subs	r0, r0, r3
 800c792:	6963      	ldr	r3, [r4, #20]
 800c794:	b2f6      	uxtb	r6, r6
 800c796:	4283      	cmp	r3, r0
 800c798:	4637      	mov	r7, r6
 800c79a:	dc04      	bgt.n	800c7a6 <__swbuf_r+0x42>
 800c79c:	4621      	mov	r1, r4
 800c79e:	4628      	mov	r0, r5
 800c7a0:	f000 f92e 	bl	800ca00 <_fflush_r>
 800c7a4:	bb30      	cbnz	r0, 800c7f4 <__swbuf_r+0x90>
 800c7a6:	68a3      	ldr	r3, [r4, #8]
 800c7a8:	3b01      	subs	r3, #1
 800c7aa:	60a3      	str	r3, [r4, #8]
 800c7ac:	6823      	ldr	r3, [r4, #0]
 800c7ae:	1c5a      	adds	r2, r3, #1
 800c7b0:	6022      	str	r2, [r4, #0]
 800c7b2:	701e      	strb	r6, [r3, #0]
 800c7b4:	6963      	ldr	r3, [r4, #20]
 800c7b6:	3001      	adds	r0, #1
 800c7b8:	4283      	cmp	r3, r0
 800c7ba:	d004      	beq.n	800c7c6 <__swbuf_r+0x62>
 800c7bc:	89a3      	ldrh	r3, [r4, #12]
 800c7be:	07db      	lsls	r3, r3, #31
 800c7c0:	d506      	bpl.n	800c7d0 <__swbuf_r+0x6c>
 800c7c2:	2e0a      	cmp	r6, #10
 800c7c4:	d104      	bne.n	800c7d0 <__swbuf_r+0x6c>
 800c7c6:	4621      	mov	r1, r4
 800c7c8:	4628      	mov	r0, r5
 800c7ca:	f000 f919 	bl	800ca00 <_fflush_r>
 800c7ce:	b988      	cbnz	r0, 800c7f4 <__swbuf_r+0x90>
 800c7d0:	4638      	mov	r0, r7
 800c7d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c7d4:	4b0a      	ldr	r3, [pc, #40]	; (800c800 <__swbuf_r+0x9c>)
 800c7d6:	429c      	cmp	r4, r3
 800c7d8:	d101      	bne.n	800c7de <__swbuf_r+0x7a>
 800c7da:	68ac      	ldr	r4, [r5, #8]
 800c7dc:	e7cf      	b.n	800c77e <__swbuf_r+0x1a>
 800c7de:	4b09      	ldr	r3, [pc, #36]	; (800c804 <__swbuf_r+0xa0>)
 800c7e0:	429c      	cmp	r4, r3
 800c7e2:	bf08      	it	eq
 800c7e4:	68ec      	ldreq	r4, [r5, #12]
 800c7e6:	e7ca      	b.n	800c77e <__swbuf_r+0x1a>
 800c7e8:	4621      	mov	r1, r4
 800c7ea:	4628      	mov	r0, r5
 800c7ec:	f000 f80c 	bl	800c808 <__swsetup_r>
 800c7f0:	2800      	cmp	r0, #0
 800c7f2:	d0cb      	beq.n	800c78c <__swbuf_r+0x28>
 800c7f4:	f04f 37ff 	mov.w	r7, #4294967295
 800c7f8:	e7ea      	b.n	800c7d0 <__swbuf_r+0x6c>
 800c7fa:	bf00      	nop
 800c7fc:	0800d424 	.word	0x0800d424
 800c800:	0800d444 	.word	0x0800d444
 800c804:	0800d404 	.word	0x0800d404

0800c808 <__swsetup_r>:
 800c808:	4b32      	ldr	r3, [pc, #200]	; (800c8d4 <__swsetup_r+0xcc>)
 800c80a:	b570      	push	{r4, r5, r6, lr}
 800c80c:	681d      	ldr	r5, [r3, #0]
 800c80e:	4606      	mov	r6, r0
 800c810:	460c      	mov	r4, r1
 800c812:	b125      	cbz	r5, 800c81e <__swsetup_r+0x16>
 800c814:	69ab      	ldr	r3, [r5, #24]
 800c816:	b913      	cbnz	r3, 800c81e <__swsetup_r+0x16>
 800c818:	4628      	mov	r0, r5
 800c81a:	f000 f985 	bl	800cb28 <__sinit>
 800c81e:	4b2e      	ldr	r3, [pc, #184]	; (800c8d8 <__swsetup_r+0xd0>)
 800c820:	429c      	cmp	r4, r3
 800c822:	d10f      	bne.n	800c844 <__swsetup_r+0x3c>
 800c824:	686c      	ldr	r4, [r5, #4]
 800c826:	89a3      	ldrh	r3, [r4, #12]
 800c828:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c82c:	0719      	lsls	r1, r3, #28
 800c82e:	d42c      	bmi.n	800c88a <__swsetup_r+0x82>
 800c830:	06dd      	lsls	r5, r3, #27
 800c832:	d411      	bmi.n	800c858 <__swsetup_r+0x50>
 800c834:	2309      	movs	r3, #9
 800c836:	6033      	str	r3, [r6, #0]
 800c838:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c83c:	81a3      	strh	r3, [r4, #12]
 800c83e:	f04f 30ff 	mov.w	r0, #4294967295
 800c842:	e03e      	b.n	800c8c2 <__swsetup_r+0xba>
 800c844:	4b25      	ldr	r3, [pc, #148]	; (800c8dc <__swsetup_r+0xd4>)
 800c846:	429c      	cmp	r4, r3
 800c848:	d101      	bne.n	800c84e <__swsetup_r+0x46>
 800c84a:	68ac      	ldr	r4, [r5, #8]
 800c84c:	e7eb      	b.n	800c826 <__swsetup_r+0x1e>
 800c84e:	4b24      	ldr	r3, [pc, #144]	; (800c8e0 <__swsetup_r+0xd8>)
 800c850:	429c      	cmp	r4, r3
 800c852:	bf08      	it	eq
 800c854:	68ec      	ldreq	r4, [r5, #12]
 800c856:	e7e6      	b.n	800c826 <__swsetup_r+0x1e>
 800c858:	0758      	lsls	r0, r3, #29
 800c85a:	d512      	bpl.n	800c882 <__swsetup_r+0x7a>
 800c85c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c85e:	b141      	cbz	r1, 800c872 <__swsetup_r+0x6a>
 800c860:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c864:	4299      	cmp	r1, r3
 800c866:	d002      	beq.n	800c86e <__swsetup_r+0x66>
 800c868:	4630      	mov	r0, r6
 800c86a:	f7ff fb67 	bl	800bf3c <_free_r>
 800c86e:	2300      	movs	r3, #0
 800c870:	6363      	str	r3, [r4, #52]	; 0x34
 800c872:	89a3      	ldrh	r3, [r4, #12]
 800c874:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c878:	81a3      	strh	r3, [r4, #12]
 800c87a:	2300      	movs	r3, #0
 800c87c:	6063      	str	r3, [r4, #4]
 800c87e:	6923      	ldr	r3, [r4, #16]
 800c880:	6023      	str	r3, [r4, #0]
 800c882:	89a3      	ldrh	r3, [r4, #12]
 800c884:	f043 0308 	orr.w	r3, r3, #8
 800c888:	81a3      	strh	r3, [r4, #12]
 800c88a:	6923      	ldr	r3, [r4, #16]
 800c88c:	b94b      	cbnz	r3, 800c8a2 <__swsetup_r+0x9a>
 800c88e:	89a3      	ldrh	r3, [r4, #12]
 800c890:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c894:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c898:	d003      	beq.n	800c8a2 <__swsetup_r+0x9a>
 800c89a:	4621      	mov	r1, r4
 800c89c:	4630      	mov	r0, r6
 800c89e:	f000 fa07 	bl	800ccb0 <__smakebuf_r>
 800c8a2:	89a0      	ldrh	r0, [r4, #12]
 800c8a4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c8a8:	f010 0301 	ands.w	r3, r0, #1
 800c8ac:	d00a      	beq.n	800c8c4 <__swsetup_r+0xbc>
 800c8ae:	2300      	movs	r3, #0
 800c8b0:	60a3      	str	r3, [r4, #8]
 800c8b2:	6963      	ldr	r3, [r4, #20]
 800c8b4:	425b      	negs	r3, r3
 800c8b6:	61a3      	str	r3, [r4, #24]
 800c8b8:	6923      	ldr	r3, [r4, #16]
 800c8ba:	b943      	cbnz	r3, 800c8ce <__swsetup_r+0xc6>
 800c8bc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c8c0:	d1ba      	bne.n	800c838 <__swsetup_r+0x30>
 800c8c2:	bd70      	pop	{r4, r5, r6, pc}
 800c8c4:	0781      	lsls	r1, r0, #30
 800c8c6:	bf58      	it	pl
 800c8c8:	6963      	ldrpl	r3, [r4, #20]
 800c8ca:	60a3      	str	r3, [r4, #8]
 800c8cc:	e7f4      	b.n	800c8b8 <__swsetup_r+0xb0>
 800c8ce:	2000      	movs	r0, #0
 800c8d0:	e7f7      	b.n	800c8c2 <__swsetup_r+0xba>
 800c8d2:	bf00      	nop
 800c8d4:	20000180 	.word	0x20000180
 800c8d8:	0800d424 	.word	0x0800d424
 800c8dc:	0800d444 	.word	0x0800d444
 800c8e0:	0800d404 	.word	0x0800d404

0800c8e4 <abort>:
 800c8e4:	b508      	push	{r3, lr}
 800c8e6:	2006      	movs	r0, #6
 800c8e8:	f000 fa52 	bl	800cd90 <raise>
 800c8ec:	2001      	movs	r0, #1
 800c8ee:	f7f4 fec9 	bl	8001684 <_exit>
	...

0800c8f4 <__sflush_r>:
 800c8f4:	898a      	ldrh	r2, [r1, #12]
 800c8f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c8fa:	4605      	mov	r5, r0
 800c8fc:	0710      	lsls	r0, r2, #28
 800c8fe:	460c      	mov	r4, r1
 800c900:	d458      	bmi.n	800c9b4 <__sflush_r+0xc0>
 800c902:	684b      	ldr	r3, [r1, #4]
 800c904:	2b00      	cmp	r3, #0
 800c906:	dc05      	bgt.n	800c914 <__sflush_r+0x20>
 800c908:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c90a:	2b00      	cmp	r3, #0
 800c90c:	dc02      	bgt.n	800c914 <__sflush_r+0x20>
 800c90e:	2000      	movs	r0, #0
 800c910:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c914:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c916:	2e00      	cmp	r6, #0
 800c918:	d0f9      	beq.n	800c90e <__sflush_r+0x1a>
 800c91a:	2300      	movs	r3, #0
 800c91c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c920:	682f      	ldr	r7, [r5, #0]
 800c922:	602b      	str	r3, [r5, #0]
 800c924:	d032      	beq.n	800c98c <__sflush_r+0x98>
 800c926:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c928:	89a3      	ldrh	r3, [r4, #12]
 800c92a:	075a      	lsls	r2, r3, #29
 800c92c:	d505      	bpl.n	800c93a <__sflush_r+0x46>
 800c92e:	6863      	ldr	r3, [r4, #4]
 800c930:	1ac0      	subs	r0, r0, r3
 800c932:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c934:	b10b      	cbz	r3, 800c93a <__sflush_r+0x46>
 800c936:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c938:	1ac0      	subs	r0, r0, r3
 800c93a:	2300      	movs	r3, #0
 800c93c:	4602      	mov	r2, r0
 800c93e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c940:	6a21      	ldr	r1, [r4, #32]
 800c942:	4628      	mov	r0, r5
 800c944:	47b0      	blx	r6
 800c946:	1c43      	adds	r3, r0, #1
 800c948:	89a3      	ldrh	r3, [r4, #12]
 800c94a:	d106      	bne.n	800c95a <__sflush_r+0x66>
 800c94c:	6829      	ldr	r1, [r5, #0]
 800c94e:	291d      	cmp	r1, #29
 800c950:	d82c      	bhi.n	800c9ac <__sflush_r+0xb8>
 800c952:	4a2a      	ldr	r2, [pc, #168]	; (800c9fc <__sflush_r+0x108>)
 800c954:	40ca      	lsrs	r2, r1
 800c956:	07d6      	lsls	r6, r2, #31
 800c958:	d528      	bpl.n	800c9ac <__sflush_r+0xb8>
 800c95a:	2200      	movs	r2, #0
 800c95c:	6062      	str	r2, [r4, #4]
 800c95e:	04d9      	lsls	r1, r3, #19
 800c960:	6922      	ldr	r2, [r4, #16]
 800c962:	6022      	str	r2, [r4, #0]
 800c964:	d504      	bpl.n	800c970 <__sflush_r+0x7c>
 800c966:	1c42      	adds	r2, r0, #1
 800c968:	d101      	bne.n	800c96e <__sflush_r+0x7a>
 800c96a:	682b      	ldr	r3, [r5, #0]
 800c96c:	b903      	cbnz	r3, 800c970 <__sflush_r+0x7c>
 800c96e:	6560      	str	r0, [r4, #84]	; 0x54
 800c970:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c972:	602f      	str	r7, [r5, #0]
 800c974:	2900      	cmp	r1, #0
 800c976:	d0ca      	beq.n	800c90e <__sflush_r+0x1a>
 800c978:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c97c:	4299      	cmp	r1, r3
 800c97e:	d002      	beq.n	800c986 <__sflush_r+0x92>
 800c980:	4628      	mov	r0, r5
 800c982:	f7ff fadb 	bl	800bf3c <_free_r>
 800c986:	2000      	movs	r0, #0
 800c988:	6360      	str	r0, [r4, #52]	; 0x34
 800c98a:	e7c1      	b.n	800c910 <__sflush_r+0x1c>
 800c98c:	6a21      	ldr	r1, [r4, #32]
 800c98e:	2301      	movs	r3, #1
 800c990:	4628      	mov	r0, r5
 800c992:	47b0      	blx	r6
 800c994:	1c41      	adds	r1, r0, #1
 800c996:	d1c7      	bne.n	800c928 <__sflush_r+0x34>
 800c998:	682b      	ldr	r3, [r5, #0]
 800c99a:	2b00      	cmp	r3, #0
 800c99c:	d0c4      	beq.n	800c928 <__sflush_r+0x34>
 800c99e:	2b1d      	cmp	r3, #29
 800c9a0:	d001      	beq.n	800c9a6 <__sflush_r+0xb2>
 800c9a2:	2b16      	cmp	r3, #22
 800c9a4:	d101      	bne.n	800c9aa <__sflush_r+0xb6>
 800c9a6:	602f      	str	r7, [r5, #0]
 800c9a8:	e7b1      	b.n	800c90e <__sflush_r+0x1a>
 800c9aa:	89a3      	ldrh	r3, [r4, #12]
 800c9ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c9b0:	81a3      	strh	r3, [r4, #12]
 800c9b2:	e7ad      	b.n	800c910 <__sflush_r+0x1c>
 800c9b4:	690f      	ldr	r7, [r1, #16]
 800c9b6:	2f00      	cmp	r7, #0
 800c9b8:	d0a9      	beq.n	800c90e <__sflush_r+0x1a>
 800c9ba:	0793      	lsls	r3, r2, #30
 800c9bc:	680e      	ldr	r6, [r1, #0]
 800c9be:	bf08      	it	eq
 800c9c0:	694b      	ldreq	r3, [r1, #20]
 800c9c2:	600f      	str	r7, [r1, #0]
 800c9c4:	bf18      	it	ne
 800c9c6:	2300      	movne	r3, #0
 800c9c8:	eba6 0807 	sub.w	r8, r6, r7
 800c9cc:	608b      	str	r3, [r1, #8]
 800c9ce:	f1b8 0f00 	cmp.w	r8, #0
 800c9d2:	dd9c      	ble.n	800c90e <__sflush_r+0x1a>
 800c9d4:	6a21      	ldr	r1, [r4, #32]
 800c9d6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c9d8:	4643      	mov	r3, r8
 800c9da:	463a      	mov	r2, r7
 800c9dc:	4628      	mov	r0, r5
 800c9de:	47b0      	blx	r6
 800c9e0:	2800      	cmp	r0, #0
 800c9e2:	dc06      	bgt.n	800c9f2 <__sflush_r+0xfe>
 800c9e4:	89a3      	ldrh	r3, [r4, #12]
 800c9e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c9ea:	81a3      	strh	r3, [r4, #12]
 800c9ec:	f04f 30ff 	mov.w	r0, #4294967295
 800c9f0:	e78e      	b.n	800c910 <__sflush_r+0x1c>
 800c9f2:	4407      	add	r7, r0
 800c9f4:	eba8 0800 	sub.w	r8, r8, r0
 800c9f8:	e7e9      	b.n	800c9ce <__sflush_r+0xda>
 800c9fa:	bf00      	nop
 800c9fc:	20400001 	.word	0x20400001

0800ca00 <_fflush_r>:
 800ca00:	b538      	push	{r3, r4, r5, lr}
 800ca02:	690b      	ldr	r3, [r1, #16]
 800ca04:	4605      	mov	r5, r0
 800ca06:	460c      	mov	r4, r1
 800ca08:	b913      	cbnz	r3, 800ca10 <_fflush_r+0x10>
 800ca0a:	2500      	movs	r5, #0
 800ca0c:	4628      	mov	r0, r5
 800ca0e:	bd38      	pop	{r3, r4, r5, pc}
 800ca10:	b118      	cbz	r0, 800ca1a <_fflush_r+0x1a>
 800ca12:	6983      	ldr	r3, [r0, #24]
 800ca14:	b90b      	cbnz	r3, 800ca1a <_fflush_r+0x1a>
 800ca16:	f000 f887 	bl	800cb28 <__sinit>
 800ca1a:	4b14      	ldr	r3, [pc, #80]	; (800ca6c <_fflush_r+0x6c>)
 800ca1c:	429c      	cmp	r4, r3
 800ca1e:	d11b      	bne.n	800ca58 <_fflush_r+0x58>
 800ca20:	686c      	ldr	r4, [r5, #4]
 800ca22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ca26:	2b00      	cmp	r3, #0
 800ca28:	d0ef      	beq.n	800ca0a <_fflush_r+0xa>
 800ca2a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ca2c:	07d0      	lsls	r0, r2, #31
 800ca2e:	d404      	bmi.n	800ca3a <_fflush_r+0x3a>
 800ca30:	0599      	lsls	r1, r3, #22
 800ca32:	d402      	bmi.n	800ca3a <_fflush_r+0x3a>
 800ca34:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ca36:	f000 f915 	bl	800cc64 <__retarget_lock_acquire_recursive>
 800ca3a:	4628      	mov	r0, r5
 800ca3c:	4621      	mov	r1, r4
 800ca3e:	f7ff ff59 	bl	800c8f4 <__sflush_r>
 800ca42:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ca44:	07da      	lsls	r2, r3, #31
 800ca46:	4605      	mov	r5, r0
 800ca48:	d4e0      	bmi.n	800ca0c <_fflush_r+0xc>
 800ca4a:	89a3      	ldrh	r3, [r4, #12]
 800ca4c:	059b      	lsls	r3, r3, #22
 800ca4e:	d4dd      	bmi.n	800ca0c <_fflush_r+0xc>
 800ca50:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ca52:	f000 f908 	bl	800cc66 <__retarget_lock_release_recursive>
 800ca56:	e7d9      	b.n	800ca0c <_fflush_r+0xc>
 800ca58:	4b05      	ldr	r3, [pc, #20]	; (800ca70 <_fflush_r+0x70>)
 800ca5a:	429c      	cmp	r4, r3
 800ca5c:	d101      	bne.n	800ca62 <_fflush_r+0x62>
 800ca5e:	68ac      	ldr	r4, [r5, #8]
 800ca60:	e7df      	b.n	800ca22 <_fflush_r+0x22>
 800ca62:	4b04      	ldr	r3, [pc, #16]	; (800ca74 <_fflush_r+0x74>)
 800ca64:	429c      	cmp	r4, r3
 800ca66:	bf08      	it	eq
 800ca68:	68ec      	ldreq	r4, [r5, #12]
 800ca6a:	e7da      	b.n	800ca22 <_fflush_r+0x22>
 800ca6c:	0800d424 	.word	0x0800d424
 800ca70:	0800d444 	.word	0x0800d444
 800ca74:	0800d404 	.word	0x0800d404

0800ca78 <std>:
 800ca78:	2300      	movs	r3, #0
 800ca7a:	b510      	push	{r4, lr}
 800ca7c:	4604      	mov	r4, r0
 800ca7e:	e9c0 3300 	strd	r3, r3, [r0]
 800ca82:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ca86:	6083      	str	r3, [r0, #8]
 800ca88:	8181      	strh	r1, [r0, #12]
 800ca8a:	6643      	str	r3, [r0, #100]	; 0x64
 800ca8c:	81c2      	strh	r2, [r0, #14]
 800ca8e:	6183      	str	r3, [r0, #24]
 800ca90:	4619      	mov	r1, r3
 800ca92:	2208      	movs	r2, #8
 800ca94:	305c      	adds	r0, #92	; 0x5c
 800ca96:	f7fb fe15 	bl	80086c4 <memset>
 800ca9a:	4b05      	ldr	r3, [pc, #20]	; (800cab0 <std+0x38>)
 800ca9c:	6263      	str	r3, [r4, #36]	; 0x24
 800ca9e:	4b05      	ldr	r3, [pc, #20]	; (800cab4 <std+0x3c>)
 800caa0:	62a3      	str	r3, [r4, #40]	; 0x28
 800caa2:	4b05      	ldr	r3, [pc, #20]	; (800cab8 <std+0x40>)
 800caa4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800caa6:	4b05      	ldr	r3, [pc, #20]	; (800cabc <std+0x44>)
 800caa8:	6224      	str	r4, [r4, #32]
 800caaa:	6323      	str	r3, [r4, #48]	; 0x30
 800caac:	bd10      	pop	{r4, pc}
 800caae:	bf00      	nop
 800cab0:	0800cdc9 	.word	0x0800cdc9
 800cab4:	0800cdeb 	.word	0x0800cdeb
 800cab8:	0800ce23 	.word	0x0800ce23
 800cabc:	0800ce47 	.word	0x0800ce47

0800cac0 <_cleanup_r>:
 800cac0:	4901      	ldr	r1, [pc, #4]	; (800cac8 <_cleanup_r+0x8>)
 800cac2:	f000 b8af 	b.w	800cc24 <_fwalk_reent>
 800cac6:	bf00      	nop
 800cac8:	0800ca01 	.word	0x0800ca01

0800cacc <__sfmoreglue>:
 800cacc:	b570      	push	{r4, r5, r6, lr}
 800cace:	1e4a      	subs	r2, r1, #1
 800cad0:	2568      	movs	r5, #104	; 0x68
 800cad2:	4355      	muls	r5, r2
 800cad4:	460e      	mov	r6, r1
 800cad6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800cada:	f7ff fa7f 	bl	800bfdc <_malloc_r>
 800cade:	4604      	mov	r4, r0
 800cae0:	b140      	cbz	r0, 800caf4 <__sfmoreglue+0x28>
 800cae2:	2100      	movs	r1, #0
 800cae4:	e9c0 1600 	strd	r1, r6, [r0]
 800cae8:	300c      	adds	r0, #12
 800caea:	60a0      	str	r0, [r4, #8]
 800caec:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800caf0:	f7fb fde8 	bl	80086c4 <memset>
 800caf4:	4620      	mov	r0, r4
 800caf6:	bd70      	pop	{r4, r5, r6, pc}

0800caf8 <__sfp_lock_acquire>:
 800caf8:	4801      	ldr	r0, [pc, #4]	; (800cb00 <__sfp_lock_acquire+0x8>)
 800cafa:	f000 b8b3 	b.w	800cc64 <__retarget_lock_acquire_recursive>
 800cafe:	bf00      	nop
 800cb00:	20001ee8 	.word	0x20001ee8

0800cb04 <__sfp_lock_release>:
 800cb04:	4801      	ldr	r0, [pc, #4]	; (800cb0c <__sfp_lock_release+0x8>)
 800cb06:	f000 b8ae 	b.w	800cc66 <__retarget_lock_release_recursive>
 800cb0a:	bf00      	nop
 800cb0c:	20001ee8 	.word	0x20001ee8

0800cb10 <__sinit_lock_acquire>:
 800cb10:	4801      	ldr	r0, [pc, #4]	; (800cb18 <__sinit_lock_acquire+0x8>)
 800cb12:	f000 b8a7 	b.w	800cc64 <__retarget_lock_acquire_recursive>
 800cb16:	bf00      	nop
 800cb18:	20001ee3 	.word	0x20001ee3

0800cb1c <__sinit_lock_release>:
 800cb1c:	4801      	ldr	r0, [pc, #4]	; (800cb24 <__sinit_lock_release+0x8>)
 800cb1e:	f000 b8a2 	b.w	800cc66 <__retarget_lock_release_recursive>
 800cb22:	bf00      	nop
 800cb24:	20001ee3 	.word	0x20001ee3

0800cb28 <__sinit>:
 800cb28:	b510      	push	{r4, lr}
 800cb2a:	4604      	mov	r4, r0
 800cb2c:	f7ff fff0 	bl	800cb10 <__sinit_lock_acquire>
 800cb30:	69a3      	ldr	r3, [r4, #24]
 800cb32:	b11b      	cbz	r3, 800cb3c <__sinit+0x14>
 800cb34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cb38:	f7ff bff0 	b.w	800cb1c <__sinit_lock_release>
 800cb3c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800cb40:	6523      	str	r3, [r4, #80]	; 0x50
 800cb42:	4b13      	ldr	r3, [pc, #76]	; (800cb90 <__sinit+0x68>)
 800cb44:	4a13      	ldr	r2, [pc, #76]	; (800cb94 <__sinit+0x6c>)
 800cb46:	681b      	ldr	r3, [r3, #0]
 800cb48:	62a2      	str	r2, [r4, #40]	; 0x28
 800cb4a:	42a3      	cmp	r3, r4
 800cb4c:	bf04      	itt	eq
 800cb4e:	2301      	moveq	r3, #1
 800cb50:	61a3      	streq	r3, [r4, #24]
 800cb52:	4620      	mov	r0, r4
 800cb54:	f000 f820 	bl	800cb98 <__sfp>
 800cb58:	6060      	str	r0, [r4, #4]
 800cb5a:	4620      	mov	r0, r4
 800cb5c:	f000 f81c 	bl	800cb98 <__sfp>
 800cb60:	60a0      	str	r0, [r4, #8]
 800cb62:	4620      	mov	r0, r4
 800cb64:	f000 f818 	bl	800cb98 <__sfp>
 800cb68:	2200      	movs	r2, #0
 800cb6a:	60e0      	str	r0, [r4, #12]
 800cb6c:	2104      	movs	r1, #4
 800cb6e:	6860      	ldr	r0, [r4, #4]
 800cb70:	f7ff ff82 	bl	800ca78 <std>
 800cb74:	68a0      	ldr	r0, [r4, #8]
 800cb76:	2201      	movs	r2, #1
 800cb78:	2109      	movs	r1, #9
 800cb7a:	f7ff ff7d 	bl	800ca78 <std>
 800cb7e:	68e0      	ldr	r0, [r4, #12]
 800cb80:	2202      	movs	r2, #2
 800cb82:	2112      	movs	r1, #18
 800cb84:	f7ff ff78 	bl	800ca78 <std>
 800cb88:	2301      	movs	r3, #1
 800cb8a:	61a3      	str	r3, [r4, #24]
 800cb8c:	e7d2      	b.n	800cb34 <__sinit+0xc>
 800cb8e:	bf00      	nop
 800cb90:	0800cfac 	.word	0x0800cfac
 800cb94:	0800cac1 	.word	0x0800cac1

0800cb98 <__sfp>:
 800cb98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb9a:	4607      	mov	r7, r0
 800cb9c:	f7ff ffac 	bl	800caf8 <__sfp_lock_acquire>
 800cba0:	4b1e      	ldr	r3, [pc, #120]	; (800cc1c <__sfp+0x84>)
 800cba2:	681e      	ldr	r6, [r3, #0]
 800cba4:	69b3      	ldr	r3, [r6, #24]
 800cba6:	b913      	cbnz	r3, 800cbae <__sfp+0x16>
 800cba8:	4630      	mov	r0, r6
 800cbaa:	f7ff ffbd 	bl	800cb28 <__sinit>
 800cbae:	3648      	adds	r6, #72	; 0x48
 800cbb0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800cbb4:	3b01      	subs	r3, #1
 800cbb6:	d503      	bpl.n	800cbc0 <__sfp+0x28>
 800cbb8:	6833      	ldr	r3, [r6, #0]
 800cbba:	b30b      	cbz	r3, 800cc00 <__sfp+0x68>
 800cbbc:	6836      	ldr	r6, [r6, #0]
 800cbbe:	e7f7      	b.n	800cbb0 <__sfp+0x18>
 800cbc0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800cbc4:	b9d5      	cbnz	r5, 800cbfc <__sfp+0x64>
 800cbc6:	4b16      	ldr	r3, [pc, #88]	; (800cc20 <__sfp+0x88>)
 800cbc8:	60e3      	str	r3, [r4, #12]
 800cbca:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800cbce:	6665      	str	r5, [r4, #100]	; 0x64
 800cbd0:	f000 f847 	bl	800cc62 <__retarget_lock_init_recursive>
 800cbd4:	f7ff ff96 	bl	800cb04 <__sfp_lock_release>
 800cbd8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800cbdc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800cbe0:	6025      	str	r5, [r4, #0]
 800cbe2:	61a5      	str	r5, [r4, #24]
 800cbe4:	2208      	movs	r2, #8
 800cbe6:	4629      	mov	r1, r5
 800cbe8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800cbec:	f7fb fd6a 	bl	80086c4 <memset>
 800cbf0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800cbf4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800cbf8:	4620      	mov	r0, r4
 800cbfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cbfc:	3468      	adds	r4, #104	; 0x68
 800cbfe:	e7d9      	b.n	800cbb4 <__sfp+0x1c>
 800cc00:	2104      	movs	r1, #4
 800cc02:	4638      	mov	r0, r7
 800cc04:	f7ff ff62 	bl	800cacc <__sfmoreglue>
 800cc08:	4604      	mov	r4, r0
 800cc0a:	6030      	str	r0, [r6, #0]
 800cc0c:	2800      	cmp	r0, #0
 800cc0e:	d1d5      	bne.n	800cbbc <__sfp+0x24>
 800cc10:	f7ff ff78 	bl	800cb04 <__sfp_lock_release>
 800cc14:	230c      	movs	r3, #12
 800cc16:	603b      	str	r3, [r7, #0]
 800cc18:	e7ee      	b.n	800cbf8 <__sfp+0x60>
 800cc1a:	bf00      	nop
 800cc1c:	0800cfac 	.word	0x0800cfac
 800cc20:	ffff0001 	.word	0xffff0001

0800cc24 <_fwalk_reent>:
 800cc24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cc28:	4606      	mov	r6, r0
 800cc2a:	4688      	mov	r8, r1
 800cc2c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800cc30:	2700      	movs	r7, #0
 800cc32:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800cc36:	f1b9 0901 	subs.w	r9, r9, #1
 800cc3a:	d505      	bpl.n	800cc48 <_fwalk_reent+0x24>
 800cc3c:	6824      	ldr	r4, [r4, #0]
 800cc3e:	2c00      	cmp	r4, #0
 800cc40:	d1f7      	bne.n	800cc32 <_fwalk_reent+0xe>
 800cc42:	4638      	mov	r0, r7
 800cc44:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cc48:	89ab      	ldrh	r3, [r5, #12]
 800cc4a:	2b01      	cmp	r3, #1
 800cc4c:	d907      	bls.n	800cc5e <_fwalk_reent+0x3a>
 800cc4e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800cc52:	3301      	adds	r3, #1
 800cc54:	d003      	beq.n	800cc5e <_fwalk_reent+0x3a>
 800cc56:	4629      	mov	r1, r5
 800cc58:	4630      	mov	r0, r6
 800cc5a:	47c0      	blx	r8
 800cc5c:	4307      	orrs	r7, r0
 800cc5e:	3568      	adds	r5, #104	; 0x68
 800cc60:	e7e9      	b.n	800cc36 <_fwalk_reent+0x12>

0800cc62 <__retarget_lock_init_recursive>:
 800cc62:	4770      	bx	lr

0800cc64 <__retarget_lock_acquire_recursive>:
 800cc64:	4770      	bx	lr

0800cc66 <__retarget_lock_release_recursive>:
 800cc66:	4770      	bx	lr

0800cc68 <__swhatbuf_r>:
 800cc68:	b570      	push	{r4, r5, r6, lr}
 800cc6a:	460e      	mov	r6, r1
 800cc6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cc70:	2900      	cmp	r1, #0
 800cc72:	b096      	sub	sp, #88	; 0x58
 800cc74:	4614      	mov	r4, r2
 800cc76:	461d      	mov	r5, r3
 800cc78:	da07      	bge.n	800cc8a <__swhatbuf_r+0x22>
 800cc7a:	2300      	movs	r3, #0
 800cc7c:	602b      	str	r3, [r5, #0]
 800cc7e:	89b3      	ldrh	r3, [r6, #12]
 800cc80:	061a      	lsls	r2, r3, #24
 800cc82:	d410      	bmi.n	800cca6 <__swhatbuf_r+0x3e>
 800cc84:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cc88:	e00e      	b.n	800cca8 <__swhatbuf_r+0x40>
 800cc8a:	466a      	mov	r2, sp
 800cc8c:	f000 f902 	bl	800ce94 <_fstat_r>
 800cc90:	2800      	cmp	r0, #0
 800cc92:	dbf2      	blt.n	800cc7a <__swhatbuf_r+0x12>
 800cc94:	9a01      	ldr	r2, [sp, #4]
 800cc96:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800cc9a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800cc9e:	425a      	negs	r2, r3
 800cca0:	415a      	adcs	r2, r3
 800cca2:	602a      	str	r2, [r5, #0]
 800cca4:	e7ee      	b.n	800cc84 <__swhatbuf_r+0x1c>
 800cca6:	2340      	movs	r3, #64	; 0x40
 800cca8:	2000      	movs	r0, #0
 800ccaa:	6023      	str	r3, [r4, #0]
 800ccac:	b016      	add	sp, #88	; 0x58
 800ccae:	bd70      	pop	{r4, r5, r6, pc}

0800ccb0 <__smakebuf_r>:
 800ccb0:	898b      	ldrh	r3, [r1, #12]
 800ccb2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ccb4:	079d      	lsls	r5, r3, #30
 800ccb6:	4606      	mov	r6, r0
 800ccb8:	460c      	mov	r4, r1
 800ccba:	d507      	bpl.n	800cccc <__smakebuf_r+0x1c>
 800ccbc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ccc0:	6023      	str	r3, [r4, #0]
 800ccc2:	6123      	str	r3, [r4, #16]
 800ccc4:	2301      	movs	r3, #1
 800ccc6:	6163      	str	r3, [r4, #20]
 800ccc8:	b002      	add	sp, #8
 800ccca:	bd70      	pop	{r4, r5, r6, pc}
 800cccc:	ab01      	add	r3, sp, #4
 800ccce:	466a      	mov	r2, sp
 800ccd0:	f7ff ffca 	bl	800cc68 <__swhatbuf_r>
 800ccd4:	9900      	ldr	r1, [sp, #0]
 800ccd6:	4605      	mov	r5, r0
 800ccd8:	4630      	mov	r0, r6
 800ccda:	f7ff f97f 	bl	800bfdc <_malloc_r>
 800ccde:	b948      	cbnz	r0, 800ccf4 <__smakebuf_r+0x44>
 800cce0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cce4:	059a      	lsls	r2, r3, #22
 800cce6:	d4ef      	bmi.n	800ccc8 <__smakebuf_r+0x18>
 800cce8:	f023 0303 	bic.w	r3, r3, #3
 800ccec:	f043 0302 	orr.w	r3, r3, #2
 800ccf0:	81a3      	strh	r3, [r4, #12]
 800ccf2:	e7e3      	b.n	800ccbc <__smakebuf_r+0xc>
 800ccf4:	4b0d      	ldr	r3, [pc, #52]	; (800cd2c <__smakebuf_r+0x7c>)
 800ccf6:	62b3      	str	r3, [r6, #40]	; 0x28
 800ccf8:	89a3      	ldrh	r3, [r4, #12]
 800ccfa:	6020      	str	r0, [r4, #0]
 800ccfc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cd00:	81a3      	strh	r3, [r4, #12]
 800cd02:	9b00      	ldr	r3, [sp, #0]
 800cd04:	6163      	str	r3, [r4, #20]
 800cd06:	9b01      	ldr	r3, [sp, #4]
 800cd08:	6120      	str	r0, [r4, #16]
 800cd0a:	b15b      	cbz	r3, 800cd24 <__smakebuf_r+0x74>
 800cd0c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cd10:	4630      	mov	r0, r6
 800cd12:	f000 f8d1 	bl	800ceb8 <_isatty_r>
 800cd16:	b128      	cbz	r0, 800cd24 <__smakebuf_r+0x74>
 800cd18:	89a3      	ldrh	r3, [r4, #12]
 800cd1a:	f023 0303 	bic.w	r3, r3, #3
 800cd1e:	f043 0301 	orr.w	r3, r3, #1
 800cd22:	81a3      	strh	r3, [r4, #12]
 800cd24:	89a0      	ldrh	r0, [r4, #12]
 800cd26:	4305      	orrs	r5, r0
 800cd28:	81a5      	strh	r5, [r4, #12]
 800cd2a:	e7cd      	b.n	800ccc8 <__smakebuf_r+0x18>
 800cd2c:	0800cac1 	.word	0x0800cac1

0800cd30 <_malloc_usable_size_r>:
 800cd30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cd34:	1f18      	subs	r0, r3, #4
 800cd36:	2b00      	cmp	r3, #0
 800cd38:	bfbc      	itt	lt
 800cd3a:	580b      	ldrlt	r3, [r1, r0]
 800cd3c:	18c0      	addlt	r0, r0, r3
 800cd3e:	4770      	bx	lr

0800cd40 <_raise_r>:
 800cd40:	291f      	cmp	r1, #31
 800cd42:	b538      	push	{r3, r4, r5, lr}
 800cd44:	4604      	mov	r4, r0
 800cd46:	460d      	mov	r5, r1
 800cd48:	d904      	bls.n	800cd54 <_raise_r+0x14>
 800cd4a:	2316      	movs	r3, #22
 800cd4c:	6003      	str	r3, [r0, #0]
 800cd4e:	f04f 30ff 	mov.w	r0, #4294967295
 800cd52:	bd38      	pop	{r3, r4, r5, pc}
 800cd54:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800cd56:	b112      	cbz	r2, 800cd5e <_raise_r+0x1e>
 800cd58:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800cd5c:	b94b      	cbnz	r3, 800cd72 <_raise_r+0x32>
 800cd5e:	4620      	mov	r0, r4
 800cd60:	f000 f830 	bl	800cdc4 <_getpid_r>
 800cd64:	462a      	mov	r2, r5
 800cd66:	4601      	mov	r1, r0
 800cd68:	4620      	mov	r0, r4
 800cd6a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cd6e:	f000 b817 	b.w	800cda0 <_kill_r>
 800cd72:	2b01      	cmp	r3, #1
 800cd74:	d00a      	beq.n	800cd8c <_raise_r+0x4c>
 800cd76:	1c59      	adds	r1, r3, #1
 800cd78:	d103      	bne.n	800cd82 <_raise_r+0x42>
 800cd7a:	2316      	movs	r3, #22
 800cd7c:	6003      	str	r3, [r0, #0]
 800cd7e:	2001      	movs	r0, #1
 800cd80:	e7e7      	b.n	800cd52 <_raise_r+0x12>
 800cd82:	2400      	movs	r4, #0
 800cd84:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800cd88:	4628      	mov	r0, r5
 800cd8a:	4798      	blx	r3
 800cd8c:	2000      	movs	r0, #0
 800cd8e:	e7e0      	b.n	800cd52 <_raise_r+0x12>

0800cd90 <raise>:
 800cd90:	4b02      	ldr	r3, [pc, #8]	; (800cd9c <raise+0xc>)
 800cd92:	4601      	mov	r1, r0
 800cd94:	6818      	ldr	r0, [r3, #0]
 800cd96:	f7ff bfd3 	b.w	800cd40 <_raise_r>
 800cd9a:	bf00      	nop
 800cd9c:	20000180 	.word	0x20000180

0800cda0 <_kill_r>:
 800cda0:	b538      	push	{r3, r4, r5, lr}
 800cda2:	4d07      	ldr	r5, [pc, #28]	; (800cdc0 <_kill_r+0x20>)
 800cda4:	2300      	movs	r3, #0
 800cda6:	4604      	mov	r4, r0
 800cda8:	4608      	mov	r0, r1
 800cdaa:	4611      	mov	r1, r2
 800cdac:	602b      	str	r3, [r5, #0]
 800cdae:	f7f4 fc59 	bl	8001664 <_kill>
 800cdb2:	1c43      	adds	r3, r0, #1
 800cdb4:	d102      	bne.n	800cdbc <_kill_r+0x1c>
 800cdb6:	682b      	ldr	r3, [r5, #0]
 800cdb8:	b103      	cbz	r3, 800cdbc <_kill_r+0x1c>
 800cdba:	6023      	str	r3, [r4, #0]
 800cdbc:	bd38      	pop	{r3, r4, r5, pc}
 800cdbe:	bf00      	nop
 800cdc0:	20001edc 	.word	0x20001edc

0800cdc4 <_getpid_r>:
 800cdc4:	f7f4 bc46 	b.w	8001654 <_getpid>

0800cdc8 <__sread>:
 800cdc8:	b510      	push	{r4, lr}
 800cdca:	460c      	mov	r4, r1
 800cdcc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cdd0:	f000 f894 	bl	800cefc <_read_r>
 800cdd4:	2800      	cmp	r0, #0
 800cdd6:	bfab      	itete	ge
 800cdd8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800cdda:	89a3      	ldrhlt	r3, [r4, #12]
 800cddc:	181b      	addge	r3, r3, r0
 800cdde:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800cde2:	bfac      	ite	ge
 800cde4:	6563      	strge	r3, [r4, #84]	; 0x54
 800cde6:	81a3      	strhlt	r3, [r4, #12]
 800cde8:	bd10      	pop	{r4, pc}

0800cdea <__swrite>:
 800cdea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cdee:	461f      	mov	r7, r3
 800cdf0:	898b      	ldrh	r3, [r1, #12]
 800cdf2:	05db      	lsls	r3, r3, #23
 800cdf4:	4605      	mov	r5, r0
 800cdf6:	460c      	mov	r4, r1
 800cdf8:	4616      	mov	r6, r2
 800cdfa:	d505      	bpl.n	800ce08 <__swrite+0x1e>
 800cdfc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ce00:	2302      	movs	r3, #2
 800ce02:	2200      	movs	r2, #0
 800ce04:	f000 f868 	bl	800ced8 <_lseek_r>
 800ce08:	89a3      	ldrh	r3, [r4, #12]
 800ce0a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ce0e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ce12:	81a3      	strh	r3, [r4, #12]
 800ce14:	4632      	mov	r2, r6
 800ce16:	463b      	mov	r3, r7
 800ce18:	4628      	mov	r0, r5
 800ce1a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ce1e:	f000 b817 	b.w	800ce50 <_write_r>

0800ce22 <__sseek>:
 800ce22:	b510      	push	{r4, lr}
 800ce24:	460c      	mov	r4, r1
 800ce26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ce2a:	f000 f855 	bl	800ced8 <_lseek_r>
 800ce2e:	1c43      	adds	r3, r0, #1
 800ce30:	89a3      	ldrh	r3, [r4, #12]
 800ce32:	bf15      	itete	ne
 800ce34:	6560      	strne	r0, [r4, #84]	; 0x54
 800ce36:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ce3a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ce3e:	81a3      	strheq	r3, [r4, #12]
 800ce40:	bf18      	it	ne
 800ce42:	81a3      	strhne	r3, [r4, #12]
 800ce44:	bd10      	pop	{r4, pc}

0800ce46 <__sclose>:
 800ce46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ce4a:	f000 b813 	b.w	800ce74 <_close_r>
	...

0800ce50 <_write_r>:
 800ce50:	b538      	push	{r3, r4, r5, lr}
 800ce52:	4d07      	ldr	r5, [pc, #28]	; (800ce70 <_write_r+0x20>)
 800ce54:	4604      	mov	r4, r0
 800ce56:	4608      	mov	r0, r1
 800ce58:	4611      	mov	r1, r2
 800ce5a:	2200      	movs	r2, #0
 800ce5c:	602a      	str	r2, [r5, #0]
 800ce5e:	461a      	mov	r2, r3
 800ce60:	f7f4 fc37 	bl	80016d2 <_write>
 800ce64:	1c43      	adds	r3, r0, #1
 800ce66:	d102      	bne.n	800ce6e <_write_r+0x1e>
 800ce68:	682b      	ldr	r3, [r5, #0]
 800ce6a:	b103      	cbz	r3, 800ce6e <_write_r+0x1e>
 800ce6c:	6023      	str	r3, [r4, #0]
 800ce6e:	bd38      	pop	{r3, r4, r5, pc}
 800ce70:	20001edc 	.word	0x20001edc

0800ce74 <_close_r>:
 800ce74:	b538      	push	{r3, r4, r5, lr}
 800ce76:	4d06      	ldr	r5, [pc, #24]	; (800ce90 <_close_r+0x1c>)
 800ce78:	2300      	movs	r3, #0
 800ce7a:	4604      	mov	r4, r0
 800ce7c:	4608      	mov	r0, r1
 800ce7e:	602b      	str	r3, [r5, #0]
 800ce80:	f7f4 fc43 	bl	800170a <_close>
 800ce84:	1c43      	adds	r3, r0, #1
 800ce86:	d102      	bne.n	800ce8e <_close_r+0x1a>
 800ce88:	682b      	ldr	r3, [r5, #0]
 800ce8a:	b103      	cbz	r3, 800ce8e <_close_r+0x1a>
 800ce8c:	6023      	str	r3, [r4, #0]
 800ce8e:	bd38      	pop	{r3, r4, r5, pc}
 800ce90:	20001edc 	.word	0x20001edc

0800ce94 <_fstat_r>:
 800ce94:	b538      	push	{r3, r4, r5, lr}
 800ce96:	4d07      	ldr	r5, [pc, #28]	; (800ceb4 <_fstat_r+0x20>)
 800ce98:	2300      	movs	r3, #0
 800ce9a:	4604      	mov	r4, r0
 800ce9c:	4608      	mov	r0, r1
 800ce9e:	4611      	mov	r1, r2
 800cea0:	602b      	str	r3, [r5, #0]
 800cea2:	f7f4 fc3e 	bl	8001722 <_fstat>
 800cea6:	1c43      	adds	r3, r0, #1
 800cea8:	d102      	bne.n	800ceb0 <_fstat_r+0x1c>
 800ceaa:	682b      	ldr	r3, [r5, #0]
 800ceac:	b103      	cbz	r3, 800ceb0 <_fstat_r+0x1c>
 800ceae:	6023      	str	r3, [r4, #0]
 800ceb0:	bd38      	pop	{r3, r4, r5, pc}
 800ceb2:	bf00      	nop
 800ceb4:	20001edc 	.word	0x20001edc

0800ceb8 <_isatty_r>:
 800ceb8:	b538      	push	{r3, r4, r5, lr}
 800ceba:	4d06      	ldr	r5, [pc, #24]	; (800ced4 <_isatty_r+0x1c>)
 800cebc:	2300      	movs	r3, #0
 800cebe:	4604      	mov	r4, r0
 800cec0:	4608      	mov	r0, r1
 800cec2:	602b      	str	r3, [r5, #0]
 800cec4:	f7f4 fc3d 	bl	8001742 <_isatty>
 800cec8:	1c43      	adds	r3, r0, #1
 800ceca:	d102      	bne.n	800ced2 <_isatty_r+0x1a>
 800cecc:	682b      	ldr	r3, [r5, #0]
 800cece:	b103      	cbz	r3, 800ced2 <_isatty_r+0x1a>
 800ced0:	6023      	str	r3, [r4, #0]
 800ced2:	bd38      	pop	{r3, r4, r5, pc}
 800ced4:	20001edc 	.word	0x20001edc

0800ced8 <_lseek_r>:
 800ced8:	b538      	push	{r3, r4, r5, lr}
 800ceda:	4d07      	ldr	r5, [pc, #28]	; (800cef8 <_lseek_r+0x20>)
 800cedc:	4604      	mov	r4, r0
 800cede:	4608      	mov	r0, r1
 800cee0:	4611      	mov	r1, r2
 800cee2:	2200      	movs	r2, #0
 800cee4:	602a      	str	r2, [r5, #0]
 800cee6:	461a      	mov	r2, r3
 800cee8:	f7f4 fc36 	bl	8001758 <_lseek>
 800ceec:	1c43      	adds	r3, r0, #1
 800ceee:	d102      	bne.n	800cef6 <_lseek_r+0x1e>
 800cef0:	682b      	ldr	r3, [r5, #0]
 800cef2:	b103      	cbz	r3, 800cef6 <_lseek_r+0x1e>
 800cef4:	6023      	str	r3, [r4, #0]
 800cef6:	bd38      	pop	{r3, r4, r5, pc}
 800cef8:	20001edc 	.word	0x20001edc

0800cefc <_read_r>:
 800cefc:	b538      	push	{r3, r4, r5, lr}
 800cefe:	4d07      	ldr	r5, [pc, #28]	; (800cf1c <_read_r+0x20>)
 800cf00:	4604      	mov	r4, r0
 800cf02:	4608      	mov	r0, r1
 800cf04:	4611      	mov	r1, r2
 800cf06:	2200      	movs	r2, #0
 800cf08:	602a      	str	r2, [r5, #0]
 800cf0a:	461a      	mov	r2, r3
 800cf0c:	f7f4 fbc4 	bl	8001698 <_read>
 800cf10:	1c43      	adds	r3, r0, #1
 800cf12:	d102      	bne.n	800cf1a <_read_r+0x1e>
 800cf14:	682b      	ldr	r3, [r5, #0]
 800cf16:	b103      	cbz	r3, 800cf1a <_read_r+0x1e>
 800cf18:	6023      	str	r3, [r4, #0]
 800cf1a:	bd38      	pop	{r3, r4, r5, pc}
 800cf1c:	20001edc 	.word	0x20001edc

0800cf20 <_init>:
 800cf20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf22:	bf00      	nop
 800cf24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cf26:	bc08      	pop	{r3}
 800cf28:	469e      	mov	lr, r3
 800cf2a:	4770      	bx	lr

0800cf2c <_fini>:
 800cf2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf2e:	bf00      	nop
 800cf30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cf32:	bc08      	pop	{r3}
 800cf34:	469e      	mov	lr, r3
 800cf36:	4770      	bx	lr
